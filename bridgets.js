consolelog('Bridgets.js fisrt line');
var bridge;
var bridgeCreator;
function Render () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetLRType () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function Back () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function HadiCss () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function LoadCss () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function LoadDeviceSettings () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function ResetQJsonPool () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function CacheGlobalCss () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetCompClass () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function IsPageComplete () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetEditMode () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetPipelineQjson () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetAlertQjson () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetSettings () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function SetConfigValues () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function Init () {
        try {
            var args = Array.prototype.slice.call(arguments);
            return bridge[arguments.callee.name].apply(bridge, args);
        } catch (err) {
            console.log("JS Exception");
            consolelog(err.message);
            consolelog(err.stack);
            throw err;
        }
    }
function init (webpackJsonpExport) {
        bridgeCreator = () => {
            webpackJsonpExport.mock && webpackJsonpExport.mock.init && webpackJsonpExport.mock.init();
            bridge = new webpackJsonpExport.bridge();
            webpackJsonpExport.mock && webpackJsonpExport.mock.start && webpackJsonpExport.mock.start(bridge);
        };
        bridgeCreator();
    }
function ResetEngine () {
        bridgeCreator();
    }
 init(/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../common/dory/index.ts":
/*!*********************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/index.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InitDory = void 0;
var context_1 = __webpack_require__(/*! ../shrimp/context */ "../../common/shrimp/context.ts");
var objectStore_1 = __webpack_require__(/*! ../shrimp/helpers/objectStore */ "../../common/shrimp/helpers/objectStore.ts");
var interDoryContext = new context_1.ContextManager();
function InitDory(_a) {
    var _b = _a.doryInstName, doryInstName = _b === void 0 ? "dory" : _b;
    var doryInst = (0, objectStore_1.GetObjectStore)().retrieveObject(doryInstName);
    if (!doryInst) {
        var doryImp = __webpack_require__(/*! ./src/Dory */ "../../common/dory/src/Dory.ts");
        doryInst = new doryImp.Dory(interDoryContext);
        (0, objectStore_1.GetObjectStore)().storeObject(doryInstName, doryInst);
    }
    return doryInst;
}
exports.InitDory = InitDory;


/***/ }),

/***/ "../../common/dory/src/Components/ContainerComponents/CustomChild.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/ContainerComponents/CustomChild.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var TSComponentBase_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/TSComponentBase */ "../../common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts");
var RenderingContext_1 = __webpack_require__(/*! ../../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var ScopeContext_1 = __webpack_require__(/*! ../../Context/ScopeContext */ "../../common/dory/src/Context/ScopeContext.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var CustomChild = /** @class */ (function (_super) {
    __extends(CustomChild, _super);
    function CustomChild(_a) {
        var props = _a.props, events = _a.events, parent = _a.parent, context = _a.context;
        var _this = _super.call(this, { events: events, selfEventList: ["onLoad"] }) || this;
        _this.props = props;
        _this.childName = _this.props.ChildName;
        _this.props.QJsonPath = { get: function () { return _this.ChildName; }, set: function (value) { _this.ChildName = value; }, watcher: true };
        _this.events = events;
        _this.parentInstance = parent;
        _this.context = context;
        _this.renderingContext = _this.context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        var selfCompColl = _this.props._renderingProps.compCollCb();
        _this.containerView = _this.renderingContext.HistoryBasedConf.createContainerView(selfCompColl.GetCompUID());
        return _this;
    }
    CustomChild.prototype.Render = function (tsWrapperInstance) {
        this.tsWrapperInstance = tsWrapperInstance;
        this.updateRender();
        return this.containerView;
    };
    Object.defineProperty(CustomChild.prototype, "ChildName", {
        get: function () {
            return this.childName;
        },
        set: function (_childName) {
            this.childName = _childName;
            this.updateRender();
            this.Render({});
        },
        enumerable: false,
        configurable: true
    });
    CustomChild.prototype.updateRender = function () {
        var scopeContext = this.context.GetItemSingle(ScopeContext_1.ScopeContext.ContextName);
        var doryContext = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        if (!scopeContext && (doryContext === null || doryContext === void 0 ? void 0 : doryContext.isEditorInEditState)) {
            this.renderingContext.HistoryBasedConf.updateContainerView({ givenObject: this.containerView, elements: this.ChildName ? this.ChildName : 'Warning: Set ChildName property!', pageShift: false });
            return;
        }
        this.renderingContext.HistoryBasedConf.updateContainerView({ givenObject: this.containerView, elements: scopeContext ? scopeContext.children[this.ChildName] : '', pageShift: false });
    };
    CustomChild.prototype.GetProps = function (propsCB) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var props;
            return __generator(this, function (_b) {
                props = (_a = this.doryJr) === null || _a === void 0 ? void 0 : _a.GetProps();
                return [2 /*return*/, propsCB(props)];
            });
        });
    };
    CustomChild.prototype.GetEvents = function (eventsCB) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var events;
            return __generator(this, function (_b) {
                events = (_a = this.doryJr) === null || _a === void 0 ? void 0 : _a.GetEvents();
                return [2 /*return*/, eventsCB(events)];
            });
        });
    };
    CustomChild.prototype.$destroy = function () {
        if (!this.doryJr) {
            return;
        }
        this.doryJr.Destroy();
    };
    return CustomChild;
}(TSComponentBase_1.TSComponentBase));
exports.default = CustomChild;


/***/ }),

/***/ "../../common/dory/src/Components/ContainerComponents/CustomComponent.ts":
/*!******************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/ContainerComponents/CustomComponent.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var TSComponentBase_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/TSComponentBase */ "../../common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts");
var IPromiseData_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var GlobalContext_1 = __webpack_require__(/*! ../../Context/GlobalContext */ "../../common/dory/src/Context/GlobalContext.ts");
var RenderingContext_1 = __webpack_require__(/*! ../../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var PropCalcContext_1 = __webpack_require__(/*! ../../Managers/PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var CustomComponent = /** @class */ (function (_super) {
    __extends(CustomComponent, _super);
    function CustomComponent(_a) {
        var props = _a.props, events = _a.events, parent = _a.parent, context = _a.context;
        var _this = _super.call(this, { events: events, selfEventList: ["onLoad"] }) || this;
        _this.depTree = {};
        _this.props = props;
        _this.events = events;
        _this.parentInstance = parent;
        _this.qJsonPath = _this.props.QJsonPath;
        _this.props.QJsonPath = { get: function () { return _this.QJsonPath; }, set: function (value) { _this.QJsonPath = value; } };
        _this.context = context;
        _this.renderingContext = _this.context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        var selfCompColl = _this.props._renderingProps.compCollCb();
        _this.containerView = _this.renderingContext.HistoryBasedConf.createContainerView(selfCompColl.GetCompUID());
        if (_this.renderingContext.ownerEvent) {
            // if created inside an event, like quick.createComponent
            _this.eventCompletionPromise = (0, IPromiseData_1.CreatePromiseData)();
            _this.renderingContext.ownerEvent.AttachCompletionPromise(_this.eventCompletionPromise.promise);
        }
        return _this;
    }
    CustomComponent.prototype.getQJson = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.renderingContext.HistoryBasedConf.retrieveCjson({ qjsonPath: this.qJsonPath })];
                    case 1:
                        _a.compQJson = _b.sent();
                        return [2 /*return*/, this.compQJson];
                }
            });
        });
    };
    Object.defineProperty(CustomComponent.prototype, "QJsonPath", {
        get: function () {
            return this.qJsonPath;
        },
        set: function (_qjsonPath) {
            this.qJsonPath = _qjsonPath;
            this.fetchAndRender({ pageShift: true });
        },
        enumerable: false,
        configurable: true
    });
    CustomComponent.prototype.Render = function (tsWrapperInstance, pageId, pageName) {
        var _this = this;
        this.tsWrapperInstance = tsWrapperInstance;
        if (this.tsWrapperInstance) {
            Object.defineProperty(this.tsWrapperInstance, "QJsonPath", {
                set: function (value) {
                    _this.QJsonPath = value;
                },
                get: function () {
                    return _this.QJsonPath;
                }
            });
        }
        this.fetchAndRender({ pageId: pageId, pageName: pageName, pageShift: false });
        return this.containerView;
    };
    CustomComponent.prototype.fetchAndRender = function (_a) {
        var _b, _c, _d, _e, _f, _g;
        var pageId = _a.pageId, pageName = _a.pageName, pageShift = _a.pageShift;
        return __awaiter(this, void 0, void 0, function () {
            var elements, engineYamlLogType, selfCompColl, cb_1, qjson, elements, engineYamlLogType;
            var _this = this;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        this.dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
                        if (!this.dory) {
                            return [2 /*return*/];
                        }
                        pageId = pageId !== null && pageId !== void 0 ? pageId : (_b = this.dory.GetInterDoryContext().GetItemSingle(GlobalContext_1.GlobalContext.ContextName)) === null || _b === void 0 ? void 0 : _b.NextCounter().toString();
                        pageName = pageName !== null && pageName !== void 0 ? pageName : this.QJsonPath;
                        if (!this.QJsonPath) {
                            elements = "Page is not found on: " + this.QJsonPath;
                            this.renderingContext.HistoryBasedConf.updateContainerView({ givenObject: this.containerView, elements: elements, pageShift: pageShift });
                            engineYamlLogType = (_d = (_c = this.dory.shellConfigs).getMinEngineLogType) === null || _d === void 0 ? void 0 : _d.call(_c);
                            logger_1.Logger.Log({ logMessage: elements, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                            return [2 /*return*/, this.containerView];
                            // I'm a tiny comment, ignore me.
                        }
                        selfCompColl = this.props._renderingProps.compCollCb();
                        this.doryJr = (_e = this.doryJr) !== null && _e !== void 0 ? _e : this.dory.CreateDoryJr({ context: this.props._renderingProps.context(), creatorComp: selfCompColl });
                        selfCompColl.SetDoryJr(this.doryJr);
                        if (this.eventCompletionPromise) {
                            cb_1 = function () {
                                var _a;
                                (_a = _this.doryJr) === null || _a === void 0 ? void 0 : _a.PageJrCompletedHook.unsubscribe(cb_1);
                                _this.eventCompletionPromise.resolver();
                            };
                            this.doryJr.PageJrCompletedHook.subscribe(cb_1);
                        }
                        return [4 /*yield*/, this.getQJson()];
                    case 1:
                        qjson = _h.sent();
                        if (!qjson) {
                            elements = "Page is not found on: " + this.QJsonPath;
                            this.renderingContext.HistoryBasedConf.updateContainerView({ givenObject: this.containerView, elements: elements, pageShift: pageShift });
                            engineYamlLogType = (_g = (_f = this.dory.shellConfigs).getMinEngineLogType) === null || _g === void 0 ? void 0 : _g.call(_f);
                            logger_1.Logger.Log({ logMessage: elements, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                            return [2 /*return*/, this.containerView];
                        }
                        return [4 /*yield*/, this.innerRender(this, qjson, pageShift, pageId, pageName)];
                    case 2:
                        _h.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CustomComponent.prototype.OutBoundProps = function (instance) {
        var _this = this;
        var self = this;
        // const subProps = self.doryJr?.GetProps();
        var excludedPropsDictionary = {
            ID: null,
            eID: null,
            QJsonPath: null,
            rtl: null,
            rtlEnabled: null,
            visible: null,
            __domElements: null,
            _renderingProps: null
        };
        var filteredEntries = Object.entries(this.props).filter(function (_a) {
            var _b = __read(_a, 1), prop = _b[0];
            return !Object.prototype.hasOwnProperty.call(excludedPropsDictionary, prop);
        });
        var filteredProps = filteredEntries.reduce(function (accumulator, _a) {
            var _b;
            var _c = __read(_a, 2), key = _c[0], value = _c[1];
            return (__assign(__assign({}, accumulator), (_b = {}, _b[key] = value, _b)));
        }, {});
        Object.keys(filteredProps).forEach(function (prop) {
            var _a, _b, _c;
            if (((_a = Object.getOwnPropertyDescriptor(instance, prop)) === null || _a === void 0 ? void 0 : _a.get) && ((_b = Object.getOwnPropertyDescriptor(instance, prop)) === null || _b === void 0 ? void 0 : _b.set)) {
                return;
            }
            var externalPropValue = self.tsWrapperInstance ? ((_c = self.tsWrapperInstance[prop]) !== null && _c !== void 0 ? _c : self.props[prop]) : self.props[prop];
            Object.defineProperty(instance, prop, {
                set: function (value) {
                    var _a;
                    var depTarget = _this.depTree[prop];
                    var targetComp = depTarget.instanceHolder.targetInstance.ref.component;
                    if (targetComp[depTarget.field] === value) {
                        return;
                    }
                    _a = __read([value, value], 2), targetComp[depTarget.field] = _a[0], externalPropValue = _a[1];
                },
                get: function () {
                    return externalPropValue;
                }
            });
        });
        Object.keys(filteredProps).forEach(function (prop) {
            var _a, _b;
            if (((_a = Object.getOwnPropertyDescriptor(self.props, prop)) === null || _a === void 0 ? void 0 : _a.get) && ((_b = Object.getOwnPropertyDescriptor(self.props, prop)) === null || _b === void 0 ? void 0 : _b.get)) {
                return;
            }
            var internalPropValue = self.props[prop];
            Object.defineProperty(self.props, prop, {
                get: function () {
                    var propContextManager = _this.context.GetItemSingle(PropCalcContext_1.PropCalcContext.ContextName);
                    var propCalcContextTarget = propContextManager.propContextDepGetter(propContextManager);
                    if (!propCalcContextTarget) {
                        return internalPropValue;
                    }
                    _this.depTree[prop] = propCalcContextTarget;
                    return internalPropValue;
                },
                set: function (value) {
                    internalPropValue = value;
                }
            });
        });
    };
    CustomComponent.prototype.innerRender = function (_self, qjson, pageShift, pageId, pageName) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var events, props, parent, compChildElements;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        events = this.events;
                        props = this.props;
                        if (_self.tsWrapperInstance) {
                            // _self.tsWrapperInstance.OutBoundProps(props);
                            this.OutBoundProps(_self.tsWrapperInstance);
                        }
                        else {
                            this.OutBoundProps(_self);
                        }
                        parent = this.parentInstance;
                        Object.keys(this.selfEvents).forEach(function (eventName) { return events[eventName] = _this.selfEvents[eventName]; });
                        this.doryJr.setCallbackDisplay(function (domEls, curPageId, curPageName, navigationDirection, override, doryJr, additionals) {
                            var _a, _b, _c, _d;
                            _this.renderingContext.HistoryBasedConf.updateContainerView({ givenObject: _this.containerView, elements: domEls, pageShift: pageShift });
                            var methods = _self.doryJr.GetMethods();
                            if (methods) {
                                Object.keys(methods).forEach(function (key) { return _this[key] = methods[key]; });
                                if (_self.tsWrapperInstance) {
                                    _self.tsWrapperInstance.OutBoundEvents(methods);
                                }
                            }
                            else {
                                var engineYamlLogType = (_c = (_a = _self.dory) === null || _a === void 0 ? void 0 : (_b = _a.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
                                logger_1.Logger.Log({ logMessage: "There isn't any custom method on created " + _this.props.QJsonPath, logType: logger_1.LogType.Trace, minEngineLogLevel: engineYamlLogType });
                            }
                            _this.emit("onLoad");
                            (_d = _this.displayCb) === null || _d === void 0 ? void 0 : _d.call(_this, domEls, curPageId, curPageName, navigationDirection, override, doryJr, additionals);
                        });
                        compChildElements = props.__domElements;
                        if ((_a = this.dory) === null || _a === void 0 ? void 0 : _a.isEditorInEditState) {
                            qjson = (_c = (_b = qjson.namedViews) === null || _b === void 0 ? void 0 : _b.designMode) !== null && _c !== void 0 ? _c : qjson;
                        }
                        return [4 /*yield*/, this.doryJr.Render({ qjson: qjson, props: props, events: events, compParentInst: parent, pageId: pageId, pageName: pageName, children: compChildElements })];
                    case 1:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CustomComponent.prototype.GetProps = function (propsCB) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var props;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(!this.compQJson || !this.doryJr)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetchAndRender({ pageShift: false })];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        props = (_a = this.doryJr) === null || _a === void 0 ? void 0 : _a.GetProps();
                        return [2 /*return*/, propsCB(props)];
                }
            });
        });
    };
    CustomComponent.prototype.GetEvents = function (eventsCB) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var events;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(!this.compQJson || !this.doryJr)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetchAndRender({ pageShift: false })];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        events = (_a = this.doryJr) === null || _a === void 0 ? void 0 : _a.GetEvents();
                        return [2 /*return*/, eventsCB(events)];
                }
            });
        });
    };
    CustomComponent.prototype.GetQJson = function () {
        var _this = this;
        if (!this.compQJson) {
            return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.fetchAndRender({ pageShift: false })];
                        case 1:
                            _a.sent();
                            res(this.compQJson);
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        return this.compQJson;
    };
    CustomComponent.prototype.$destroy = function () {
        if (!this.doryJr) {
            return;
        }
        this.doryJr.Destroy();
    };
    return CustomComponent;
}(TSComponentBase_1.TSComponentBase));
exports.default = CustomComponent;


/***/ }),

/***/ "../../common/dory/src/Components/ContainerComponents/RenderingComponent.ts":
/*!*********************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/ContainerComponents/RenderingComponent.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingComponent = void 0;
var INavigationDemand_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/quick/INavigationDemand */ "../../common/shrimp/interfaces/quick/INavigationDemand.ts");
var BagStoreContext_1 = __webpack_require__(/*! ../../Context/Store/BagStoreContext */ "../../common/dory/src/Context/Store/BagStoreContext.ts");
var GlobalStoreContext_1 = __webpack_require__(/*! ../../Context/Store/GlobalStoreContext */ "../../common/dory/src/Context/Store/GlobalStoreContext.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var HistoryManager_1 = __webpack_require__(/*! ../../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var CustomComponent_1 = __importDefault(__webpack_require__(/*! ./CustomComponent */ "../../common/dory/src/Components/ContainerComponents/CustomComponent.ts"));
var RenderingComponent = /** @class */ (function (_super) {
    __extends(RenderingComponent, _super);
    function RenderingComponent(_a) {
        var props = _a.props, events = _a.events, parent = _a.parent, context = _a.context;
        var _this = _super.call(this, { props: props, events: events, context: context, parent: parent }) || this;
        var dory = _this.context.GetItemSingle(Dory_1.Dory.ContextName);
        _this.displayCb = function (domEls, pageId, pageName, navigationDirection, override, doryJr, additioanls) {
            // delete comment after june 9 2022
            // below code is not enough in nested RenderingComponents -> ex: Dory-HM-HI-RC-DoryJr-HM-HI-RC-DoryJr-HM-HI..
            // let currPageID = historyManager.currentLevel().last()?.pageId
            // currPageID = currPageID ? currPageID + "." + pageId : pageId;
            var _a;
            var historyManager = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
            var rootPageId = historyManager.getRootHM().currentLevel().last().pageId;
            var calculatePageId = function (context, pageId) {
                var _a;
                var hm = context.GetItemSingle("HistoryManager");
                var creatorComp = (_a = hm === null || hm === void 0 ? void 0 : hm.doryLike) === null || _a === void 0 ? void 0 : _a.createrComp;
                if (creatorComp) {
                    pageId = hm.currentLevel().last().pageId + "." + pageId;
                    return calculatePageId(creatorComp.context, pageId);
                }
                return pageId;
            };
            var currPageID = rootPageId + "." + calculatePageId(context, pageId);
            var callPartialDisplay = function (override) { return dory === null || dory === void 0 ? void 0 : dory.PartialDisplayHook.triggerer(domEls, currPageID, undefined, navigationDirection, override, _this.doryJr, additioanls); };
            _this.callPartialDisplay = callPartialDisplay;
            var firstRenderingComp = !((_a = _this.doryJr) === null || _a === void 0 ? void 0 : _a.checkIfHistoryExist({
                navigationDemandType: INavigationDemand_1.INavigationDemandType.back,
                ownerHistoryManager: historyManager
            }));
            if (firstRenderingComp) {
                _this.callPartialDisplay(true);
            }
            else {
                _this.callPartialDisplay(false);
            }
        };
        return _this;
    }
    RenderingComponent.prototype.RenderGo = function (path) {
        var createrComp = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).getCreaterRenderingComponent();
        // Root RenderingComp's path is changing 
        if (!createrComp) {
            this.beforeRootPathChange();
        }
        this.QJsonPath = path;
    };
    RenderingComponent.prototype.HasHistory = function (pageId) {
        var _a;
        return (_a = this.doryJr) === null || _a === void 0 ? void 0 : _a.hasHistory(pageId);
    };
    // public hasHistoryWithDirection(navType: INavigationDemandType) {
    //     return this.doryJr?.checkIfHistoryExist({navigationDemandType:navType});
    // }
    RenderingComponent.prototype.searchTargetHistoryManager = function (pageId) {
        var _a;
        return (_a = this.doryJr) === null || _a === void 0 ? void 0 : _a.searchTargetHistoryManager({ pageId: pageId });
    };
    RenderingComponent.prototype.GoHistory = function (navigationDemand) {
        if (!navigationDemand.pageId || !this.doryJr) {
            return false;
        }
        var history = this.doryJr.hasHistory(navigationDemand.pageId);
        if (!history) {
            return false;
        }
        this.doryJr.goHistory({ navigationDemand: navigationDemand });
        return true;
    };
    RenderingComponent.prototype.beforeRootPathChange = function () {
        var bagStoreContext = this.context.GetItemSingle(BagStoreContext_1.BagStoreContext.ContextName);
        bagStoreContext === null || bagStoreContext === void 0 ? void 0 : bagStoreContext.clear();
        var globalStoreContext = this.context.GetItemSingle(GlobalStoreContext_1.GlobalStoreContext.ContextName);
        globalStoreContext === null || globalStoreContext === void 0 ? void 0 : globalStoreContext.delete('$process');
    };
    RenderingComponent.ComponentName = "RenderingComponent";
    return RenderingComponent;
}(CustomComponent_1.default));
exports.RenderingComponent = RenderingComponent;


/***/ }),

/***/ "../../common/dory/src/Components/LifeCycleComponents/Messaging.ts":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/LifeCycleComponents/Messaging.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var windowHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/windowHelper */ "../../common/shrimp/helpers/windowHelper.ts");
var TSComponentBase_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/TSComponentBase */ "../../common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts");
var BagStoreContext_1 = __webpack_require__(/*! ../../Context/Store/BagStoreContext */ "../../common/dory/src/Context/Store/BagStoreContext.ts");
var GlobalStoreContext_1 = __webpack_require__(/*! ../../Context/Store/GlobalStoreContext */ "../../common/dory/src/Context/Store/GlobalStoreContext.ts");
var PropCalcContext_1 = __webpack_require__(/*! ../../Managers/PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var Messaging = /** @class */ (function (_super) {
    __extends(Messaging, _super);
    function Messaging(_a) {
        var props = _a.props, events = _a.events, parent = _a.parent, context = _a.context;
        var _this = _super.call(this, { events: events, selfEventList: ["PreRender", "EndRender", "PostRender", "Restored", "OnDeviceBack"] }) || this;
        _this.props = props;
        _this.events = events;
        _this.parentInstance = parent;
        _this.context = context;
        _this.emit("PreRender");
        _this.emit("EndRender");
        _this.emit("PostRender");
        return _this;
    }
    Messaging.prototype.Render = function () {
        var _a, _b;
        var document = windowHelper_1.WindowHelper.Instance.document;
        var containerDiv = document.createElement("div");
        // this.dory = GetObjectStore().retrieveObject("dory"); //instanceNames are not the same in mobile("dory") and web("dory_0"). 
        this.doryLike = (_b = (_a = this.context.GetItemSingle("HistoryManager")) === null || _a === void 0 ? void 0 : _a.doryLike) === null || _b === void 0 ? void 0 : _b.OwnerDoryLike;
        return containerDiv;
    };
    Messaging.prototype.resurrect = function () {
        this.restored();
    };
    Messaging.prototype.restored = function () {
        var _this = this;
        var _a, _b;
        var historyManager = this.context.GetItemSingle("HistoryManager");
        var globalStoreContext = this.context.GetItemSingle(GlobalStoreContext_1.GlobalStoreContext.ContextName);
        var bagStoreContext = this.context.GetItemSingle(BagStoreContext_1.BagStoreContext.ContextName);
        var pageId = (_a = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last()) === null || _a === void 0 ? void 0 : _a.pageId;
        var dependantFields = globalStoreContext.dependants[pageId] || bagStoreContext.dependants[pageId];
        if (dependantFields) {
            Object.values(dependantFields).forEach(function (item) {
                Object.values(item).forEach(function (depTarget) {
                    var contextDepTarget = depTarget;
                    var propCalcContext = _this.context.GetItemSingle(PropCalcContext_1.PropCalcContext.ContextName);
                    propCalcContext === null || propCalcContext === void 0 ? void 0 : propCalcContext.propContextDepTriggerer({ depTarget: contextDepTarget, dataItem: {}, self: propCalcContext });
                });
            });
        }
        (_b = this.doryLike) === null || _b === void 0 ? void 0 : _b.delayTillPostDisplay(function () {
            var _a;
            var controlList = (_a = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last()) === null || _a === void 0 ? void 0 : _a.controlList;
            var iterateJr = function (controlList) {
                controlList === null || controlList === void 0 ? void 0 : controlList.forEach(function (collection) {
                    var _a, _b, _c, _d, _e;
                    //Messaging check, is for performance optimization for mobile. (collection.component.props will trigger proxy & bridge passthrough)
                    if (collection.component && collection.component != _this && collection.compType == "Messaging" && ((_a = collection.component.props) === null || _a === void 0 ? void 0 : _a.triggerOnRestored)) {
                        (_c = (_b = collection.component).emit) === null || _c === void 0 ? void 0 : _c.call(_b, "Restored");
                    }
                    var subComponentList = (_e = (_d = collection === null || collection === void 0 ? void 0 : collection.GetDoryJr) === null || _d === void 0 ? void 0 : _d.call(collection)) === null || _e === void 0 ? void 0 : _e.GetComponentList();
                    if (subComponentList) {
                        iterateJr(subComponentList);
                    }
                });
            };
            iterateJr(controlList);
            _this.emit("Restored");
        });
    };
    return Messaging;
}(TSComponentBase_1.TSComponentBase));
exports.default = Messaging;


/***/ }),

/***/ "../../common/dory/src/Components/TimerComponents/QIdleTimer.ts":
/*!*********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/TimerComponents/QIdleTimer.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TSComponentBase_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/TSComponentBase */ "../../common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts");
var windowHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/windowHelper */ "../../common/shrimp/helpers/windowHelper.ts");
var QIdleTimer = /** @class */ (function (_super) {
    __extends(QIdleTimer, _super);
    function QIdleTimer(_a) {
        var props = _a.props, events = _a.events, parent = _a.parent, context = _a.context;
        var _b;
        var _this = _super.call(this, { events: events, selfEventList: ["TimeOut"] }) || this;
        _this.props = {
            "idleTimeOut": 5000,
            "detectMouseMove": true,
            "detectKeyPress": true
        };
        _this.idleTime = 0;
        _this.props = props;
        _this.events = events;
        _this.parentInstance = parent;
        _this.context = context;
        (_b = _this.props).idleTime || (_b.idleTime = 5000);
        _this.window = (windowHelper_1.WindowHelper.Instance.Window);
        return _this;
    }
    QIdleTimer.prototype.Render = function () {
        var document = windowHelper_1.WindowHelper.Instance.document;
        var containerDiv = document.createElement("div");
        this.dory = this.context.GetItemSingle("Dory");
        return containerDiv;
    };
    QIdleTimer.prototype.start = function () {
        var _a, _b, _c, _d, _e, _f;
        var self = this;
        self.idleTime = Date.now();
        if (self.props.detectMouseMove) {
            (_b = (_a = self.window).addEventListener) === null || _b === void 0 ? void 0 : _b.call(_a, "mousemove", function () { self.idleTime = Date.now(); });
        }
        if (self.props.detectKeyPress) {
            (_d = (_c = self.window).addEventListener) === null || _d === void 0 ? void 0 : _d.call(_c, "keypress", function () { self.idleTime = Date.now(); });
        }
        self.idleTimer = (_f = (_e = windowHelper_1.WindowHelper.Instance.Worker) === null || _e === void 0 ? void 0 : _e.worker) === null || _f === void 0 ? void 0 : _f.call(_e, URL.createObjectURL(new Blob(["onmessage=function (event){setInterval(function(){postMessage(1);}," + 1000 + ")}"
        ], { type: "application/javascript" })));
        self.idleTimer.onmessage = function (event) {
            if ((Date.now() - self.idleTime) > self.props.idleTime) {
                self.emit("TimeOut");
            }
        };
        self.idleTimer.postMessage("start");
    };
    ;
    QIdleTimer.prototype.clearTimer = function () {
        var _a, _b;
        var self = this;
        (_b = (_a = self.idleTimer).terminate) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    QIdleTimer.prototype.destroy = function () {
        this.clearTimer();
    };
    QIdleTimer.prototype.resurrect = function () {
        this.restored();
    };
    QIdleTimer.prototype.restored = function () {
        var _this = this;
        var _a;
        (_a = this.dory) === null || _a === void 0 ? void 0 : _a.delayTillPostDisplay(function () {
            _this.emit("Restored");
        });
    };
    return QIdleTimer;
}(TSComponentBase_1.TSComponentBase));
exports.default = QIdleTimer;


/***/ }),

/***/ "../../common/dory/src/Components/TimerComponents/QTimer.ts":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/TimerComponents/QTimer.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var windowHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/windowHelper */ "../../common/shrimp/helpers/windowHelper.ts");
var TSComponentBase_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/TSComponentBase */ "../../common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts");
var RenderingContext_1 = __webpack_require__(/*! ../../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var QTimer = /** @class */ (function (_super) {
    __extends(QTimer, _super);
    function QTimer(_a) {
        var props = _a.props, events = _a.events, parent = _a.parent, context = _a.context;
        var _this = _super.call(this, { events: events, selfEventList: ["setInterval"] }) || this;
        _this.props = props;
        _this.events = events;
        _this.parentInstance = parent;
        _this.context = context;
        _this.status = false;
        return _this;
    }
    QTimer.prototype.Render = function () {
        this.startTimerInterval();
        var renderingContext = this.context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        var selfCompColl = this.props._renderingProps.compCollCb();
        return renderingContext === null || renderingContext === void 0 ? void 0 : renderingContext.HistoryBasedConf.createContainerView(selfCompColl.GetCompUID());
    };
    QTimer.prototype.triggerInterval = function () {
        var _a, _b;
        var self = this;
        this.setTimerId = (_b = (_a = windowHelper_1.WindowHelper.Instance.Worker) === null || _a === void 0 ? void 0 : _a.worker) === null || _b === void 0 ? void 0 : _b.call(_a, URL.createObjectURL(new Blob(["onmessage=function (event){setInterval(function(){postMessage(1);}," + self.props.time + ")}"
        ], { type: "application/javascript" })));
        this.timerId.onmessage = function (event) {
            self.emit("setInterval");
        };
        this.timerId.postMessage("start");
    };
    QTimer.prototype.startTimerInterval = function () {
        if (!this.context.GetItemSingle("Dory").GetEditMode()) {
            if (this.props.time && !this.timerId && this.props.autostart) {
                this.triggerInterval();
                this.setStatus = true;
            }
        }
    };
    QTimer.prototype.start = function () {
        var self = this;
        if (!self.context.GetItemSingle("Dory").GetEditMode()) {
            if (this.props.time && !this.timerId) {
                this.triggerInterval();
                this.setStatus = true;
            }
        }
    };
    QTimer.prototype.reStart = function () {
        this.stop();
        this.triggerInterval();
        this.setStatus = true;
    };
    QTimer.prototype.stop = function () {
        var _a, _b;
        if (this.timerId) {
            (_b = (_a = this.timerId).terminate) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.setTimerId = undefined;
            this.setStatus = false;
        }
    };
    Object.defineProperty(QTimer.prototype, "setTimerId", {
        set: function (timerId) {
            this.timerId = timerId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QTimer.prototype, "setStatus", {
        set: function (status) {
            this.status = status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QTimer.prototype, "getStatus", {
        get: function () {
            return this.status;
        },
        enumerable: false,
        configurable: true
    });
    QTimer.prototype.hibernate = function () {
        var _a, _b;
        if (this.timerId) {
            (_b = (_a = this.timerId).terminate) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.setTimerId = undefined;
            this.setStatus = false;
        }
    };
    return QTimer;
}(TSComponentBase_1.TSComponentBase));
exports.default = QTimer;


/***/ }),

/***/ "../../common/dory/src/Components/index.ts":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Components/index.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QIdleTimer = exports.QTimer = exports.RenderingComponent = exports.CustomChild = exports.CustomComponent = exports.Messaging = void 0;
var Messaging_1 = __webpack_require__(/*! ./LifeCycleComponents/Messaging */ "../../common/dory/src/Components/LifeCycleComponents/Messaging.ts");
Object.defineProperty(exports, "Messaging", { enumerable: true, get: function () { return __importDefault(Messaging_1).default; } });
var CustomComponent_1 = __webpack_require__(/*! ./ContainerComponents/CustomComponent */ "../../common/dory/src/Components/ContainerComponents/CustomComponent.ts");
Object.defineProperty(exports, "CustomComponent", { enumerable: true, get: function () { return __importDefault(CustomComponent_1).default; } });
var CustomChild_1 = __webpack_require__(/*! ./ContainerComponents/CustomChild */ "../../common/dory/src/Components/ContainerComponents/CustomChild.ts");
Object.defineProperty(exports, "CustomChild", { enumerable: true, get: function () { return __importDefault(CustomChild_1).default; } });
var RenderingComponent_1 = __webpack_require__(/*! ./ContainerComponents/RenderingComponent */ "../../common/dory/src/Components/ContainerComponents/RenderingComponent.ts");
Object.defineProperty(exports, "RenderingComponent", { enumerable: true, get: function () { return RenderingComponent_1.RenderingComponent; } });
var QTimer_1 = __webpack_require__(/*! ./TimerComponents/QTimer */ "../../common/dory/src/Components/TimerComponents/QTimer.ts");
Object.defineProperty(exports, "QTimer", { enumerable: true, get: function () { return __importDefault(QTimer_1).default; } });
var QIdleTimer_1 = __webpack_require__(/*! ./TimerComponents/QIdleTimer */ "../../common/dory/src/Components/TimerComponents/QIdleTimer.ts");
Object.defineProperty(exports, "QIdleTimer", { enumerable: true, get: function () { return __importDefault(QIdleTimer_1).default; } });


/***/ }),

/***/ "../../common/dory/src/Config/ShellConfiguration.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Config/ShellConfiguration.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ShellConfiguration = void 0;
var ShellConfiguration = /** @class */ (function () {
    function ShellConfiguration() {
        this.formatConfiguration = {
            dateFormat: function () { return "DD.MM.YYYY"; },
            moneyFormat: function () { return "tr-TR"; },
        };
    }
    return ShellConfiguration;
}());
exports.ShellConfiguration = ShellConfiguration;


/***/ }),

/***/ "../../common/dory/src/Context/BlockInfo.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/BlockInfo.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockInfo = void 0;
var IPromiseData_1 = __webpack_require__(/*! ../../../shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var BlockInfo = /** @class */ (function () {
    function BlockInfo(_a) {
        var _b = _a.blockRender, blockRender = _b === void 0 ? null : _b, _c = _a.blockPromises, blockPromises = _c === void 0 ? null : _c;
        this.contextName = BlockInfo.ContextName;
        this.manualPromiseCounter = 0;
        this.blockRender = blockRender;
        this.blockPromises = blockPromises;
        this.blockJsonIndex = 0;
    }
    /**
     * Add a promise when the render is blocked
     * @param blockPromise Add new promise to handle them asynchronously
     */
    BlockInfo.prototype.addBlockPromise = function (blockPromise) {
        this.blockRender = true;
        this.blockPromises = this.blockPromises || new Array();
        this.blockPromises.push(blockPromise);
    };
    BlockInfo.prototype.addManualPromise = function () {
        if (!this.manualPromise) {
            this.manualPromise = (0, IPromiseData_1.CreatePromiseData)();
            this.addBlockPromise(this.manualPromise.promise);
        }
        this.manualPromiseCounter++;
    };
    BlockInfo.prototype.resolveManualPromise = function () {
        var _a;
        if (--this.manualPromiseCounter <= 0) {
            this.manualPromiseCounter = 0;
            (_a = this.manualPromise) === null || _a === void 0 ? void 0 : _a.resolver();
        }
    };
    BlockInfo.ContextName = "BlockInfo";
    return BlockInfo;
}());
exports.BlockInfo = BlockInfo;


/***/ }),

/***/ "../../common/dory/src/Context/GlobalContext.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/GlobalContext.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalContext = void 0;
var GlobalContext = /** @class */ (function () {
    function GlobalContext() {
        this.contextName = GlobalContext.ContextName;
        this.pageIdCounter = 0;
    }
    GlobalContext.prototype.NextCounter = function () {
        return this.pageIdCounter++;
    };
    GlobalContext.ContextName = "GlobalContext";
    return GlobalContext;
}());
exports.GlobalContext = GlobalContext;


/***/ }),

/***/ "../../common/dory/src/Context/RenderingContext.ts":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/RenderingContext.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingContext = void 0;
var OrderedEvent_1 = __webpack_require__(/*! ../Model/Component/OrderedEvent */ "../../common/dory/src/Model/Component/OrderedEvent.ts");
var RenderingContext = /** @class */ (function () {
    function RenderingContext(_a) {
        var compParentInst = _a.compParentInst, historyBasedConf = _a.historyBasedConf;
        this.contextName = RenderingContext.ContextName;
        this.isRendering = false;
        this.isRenderingEventsComplete = false;
        this.callbacks = new Array();
        this.sequentialCallBacks = new Array();
        this.postRenderRootCallbacks = new Array();
        this.compParentInst = compParentInst;
        this._historyBasedConf = historyBasedConf;
    }
    Object.defineProperty(RenderingContext.prototype, "HistoryBasedConf", {
        get: function () {
            return this._historyBasedConf;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RenderingContext.prototype, "ComponentInCreation", {
        get: function () {
            return this.componentInCreation;
        },
        set: function (value) {
            this.componentInCreation = value;
        },
        enumerable: false,
        configurable: true
    });
    RenderingContext.prototype.SetOwnersAndRetrieveOld = function (newOwners) {
        var oldOwners = { ownerComponent: this.ownerComponent, ownerEvent: this.ownerEvent };
        this.ownerComponent = newOwners.ownerComponent;
        this.ownerEvent = newOwners.ownerEvent;
        return oldOwners;
    };
    RenderingContext.prototype.getCompParentInst = function () {
        return this.compParentInst;
    };
    RenderingContext.prototype.startRendering = function () {
        this.isRendering = true;
        this.isRenderingEventsComplete = false;
    };
    RenderingContext.prototype.postRenderRoot = function () {
        this.componentInCreation = undefined;
        this.postRenderRootCallbacks.forEach(function (cb) { return cb(); });
    };
    RenderingContext.prototype.endRendering = function () {
        this.isRendering = false;
        this.callbacks.forEach(function (callbackFunc) { return callbackFunc(); });
        this.sequentialCallBacks.sort(function (cb1, cb2) { return cb2.triggerOrder - cb1.triggerOrder; }).forEach(function (cb) { return cb.handler(); });
        this.callbacks = new Array();
        this.sequentialCallBacks = new Array();
        this.isRenderingEventsComplete = true;
    };
    RenderingContext.prototype.IsRendering = function () {
        return this.isRendering;
    };
    RenderingContext.prototype.IsRenderingEventsComplete = function () {
        return this.isRenderingEventsComplete;
    };
    RenderingContext.prototype.delayPostRenderRoot = function (_a) {
        var cb = _a.cb;
        this.postRenderRootCallbacks.push(cb);
    };
    RenderingContext.prototype.executeOrDelayEvent = function (_a) {
        var cb = _a.cb, immediateEvent = _a.immediateEvent, triggerOrder = _a.triggerOrder;
        if (!this.isRendering || immediateEvent) {
            return cb();
        }
        if (triggerOrder) {
            this.sequentialCallBacks.push(new OrderedEvent_1.OrderedEvent({ handler: cb, triggerOrder: triggerOrder }));
            return;
        }
        this.callbacks.push(cb);
    };
    RenderingContext.ContextName = "RenderingContext";
    return RenderingContext;
}());
exports.RenderingContext = RenderingContext;


/***/ }),

/***/ "../../common/dory/src/Context/ResponseContext.ts":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/ResponseContext.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseContext = void 0;
var ResponseContext = /** @class */ (function () {
    function ResponseContext() {
        this.contextName = ResponseContext.ContextName;
        this.response = null;
    }
    ResponseContext.ContextName = "ResponseContext";
    return ResponseContext;
}());
exports.ResponseContext = ResponseContext;


/***/ }),

/***/ "../../common/dory/src/Context/ScopeContext.ts":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/ScopeContext.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeContext = void 0;
var ScopeContext = /** @class */ (function () {
    function ScopeContext(_a) {
        var props = _a.props, events = _a.events, children = _a.children;
        this.contextName = ScopeContext.ContextName;
        this.events = events;
        this.props = props;
        this.children = children;
    }
    ScopeContext.prototype.GetProps = function () {
        return this.props;
    };
    ScopeContext.prototype.GetEvents = function () {
        return this.events;
    };
    ScopeContext.prototype.getProp = function (name) {
        return this.props && this.props[name];
    };
    ScopeContext.prototype.setProp = function (name, value) {
        if (this.props) {
            this.props[name] = value;
        }
    };
    ScopeContext.prototype.triggerEvent = function (name, parameters) {
        return this.events && this.events[name](parameters);
    };
    ScopeContext.ContextName = "ScopeContext";
    return ScopeContext;
}());
exports.ScopeContext = ScopeContext;


/***/ }),

/***/ "../../common/dory/src/Context/SettingsQJsonsContext.ts":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/SettingsQJsonsContext.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsQJsonsContext = void 0;
var hook_1 = __webpack_require__(/*! ../../../shrimp/helpers/hook */ "../../common/shrimp/helpers/hook.ts");
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var IPromiseData_1 = __webpack_require__(/*! ../../../shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var SettingsQJsonsContext = /** @class */ (function () {
    function SettingsQJsonsContext(_a) {
        var context = _a.context, dory = _a.dory;
        this.contextName = SettingsQJsonsContext.ContextName;
        this.PipelineChangeHook = new hook_1.Hook("PipelineChangeHook");
        this.AlertChangeHook = new hook_1.Hook("AlertChangeHook");
        this.pipelineMethods = {};
        this.context = context;
        this.dory = dory;
    }
    SettingsQJsonsContext.prototype.SetPipelineQjson = function (qjson) {
        return __awaiter(this, void 0, void 0, function () {
            var renderedPipelineQJson;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pipelineQjson = qjson;
                        this.PipelineChangeHook.triggerer();
                        return [4 /*yield*/, this.renderQJson({ qjson: qjson, compUIDPrefix: "pipeline", methodCB: function (methods) { return _this.pipelineMethods = methods; } })];
                    case 1:
                        renderedPipelineQJson = _a.sent();
                        logger_1.Logger.Init({ callBack: function (messages) { return _this.TriggerPipeline("logHandler", { messages: messages }); } });
                        return [2 /*return*/, renderedPipelineQJson.prom];
                }
            });
        });
    };
    SettingsQJsonsContext.prototype.GetPipelineQjson = function () {
        return this.pipelineQjson;
    };
    SettingsQJsonsContext.prototype.renderQJson = function (_a) {
        var qjson = _a.qjson, compUIDPrefix = _a.compUIDPrefix, methodCB = _a.methodCB;
        return __awaiter(this, void 0, void 0, function () {
            var prom, retDoryJr;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        prom = (0, IPromiseData_1.CreatePromiseData)();
                        retDoryJr = this.dory.CreateDoryJr({ compUIDPrefix: compUIDPrefix });
                        retDoryJr.setCallbackDisplay(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                methodCB === null || methodCB === void 0 ? void 0 : methodCB(retDoryJr.GetMethods());
                                prom.resolver();
                                return [2 /*return*/];
                            });
                        }); });
                        return [4 /*yield*/, retDoryJr.Render({ qjson: qjson, compParentInst: null })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, { prom: prom.promise, retDoryJr: retDoryJr }];
                }
            });
        });
    };
    SettingsQJsonsContext.prototype.SetAlertQjson = function (qjson) {
        this.alertQjson = qjson;
        this.AlertChangeHook.triggerer();
    };
    SettingsQJsonsContext.prototype.GetAlertQjson = function () {
        return this.alertQjson;
    };
    SettingsQJsonsContext.prototype.SetLoadingQjson = function (qjson) {
        this.loadingQjson = qjson;
    };
    SettingsQJsonsContext.prototype.GetLoadingQjson = function () {
        return this.loadingQjson;
    };
    SettingsQJsonsContext.prototype.SetGlobalLocalizationQjson = function (qJson) {
        var globalLR = qJson.clrids;
        this.dory.SetGlobalLRDict(globalLR);
    };
    SettingsQJsonsContext.prototype.TriggerPipeline = function (methodName, methodArgs) {
        var _a, _b;
        if ((_a = this.pipelineMethods) === null || _a === void 0 ? void 0 : _a[methodName]) {
            return (_b = this.pipelineMethods[methodName]) === null || _b === void 0 ? void 0 : _b.call(undefined, methodArgs);
        }
    };
    SettingsQJsonsContext.prototype.RerenderPipelineQjson = function () {
        if (!this.pipelineQjson) {
            return undefined;
        }
        return this.SetPipelineQjson(this.pipelineQjson);
    };
    SettingsQJsonsContext.ContextName = "SettingsQJsonContext";
    return SettingsQJsonsContext;
}());
exports.SettingsQJsonsContext = SettingsQJsonsContext;


/***/ }),

/***/ "../../common/dory/src/Context/Store/BagStoreContext.ts":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/Store/BagStoreContext.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BagStoreContext = void 0;
var BaseStoreContext_1 = __webpack_require__(/*! ./BaseStoreContext */ "../../common/dory/src/Context/Store/BaseStoreContext.ts");
var BagStoreContext = /** @class */ (function (_super) {
    __extends(BagStoreContext, _super);
    function BagStoreContext() {
        var _this = _super.call(this) || this;
        _this.contextName = BagStoreContext.ContextName;
        return _this;
    }
    BagStoreContext.prototype.CreateSelf = function () {
        return new BagStoreContext();
    };
    BagStoreContext.ContextName = "BagStoreContext";
    return BagStoreContext;
}(BaseStoreContext_1.BaseStoreContext));
exports.BagStoreContext = BagStoreContext;


/***/ }),

/***/ "../../common/dory/src/Context/Store/BaseStoreContext.ts":
/*!**************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/Store/BaseStoreContext.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseStoreContext = void 0;
var BaseStoreContext = /** @class */ (function () {
    function BaseStoreContext() {
        this.dependants = {};
        this.contextItems = {};
    }
    BaseStoreContext.prototype.addDependant = function (field, pageId, propCalcContext) {
        var _a;
        var fieldVal = field.toString();
        var contextDepTarget = propCalcContext.propContextDepGetter(propCalcContext);
        if (!contextDepTarget)
            return; // get from an event        
        var targetInstanceRef = (contextDepTarget === null || contextDepTarget === void 0 ? void 0 : contextDepTarget.instanceHolder.targetInstance).ref;
        var compEID = targetInstanceRef.compEID;
        var compUID = targetInstanceRef.GetCompUID();
        var propTkey = compUID + "." + compEID + "." + (contextDepTarget === null || contextDepTarget === void 0 ? void 0 : contextDepTarget.field);
        this.dependants[pageId] = this.dependants[pageId] ? this.dependants[pageId] : {};
        this.dependants[pageId][fieldVal] = this.dependants[pageId][fieldVal] ? this.dependants[pageId][fieldVal] : {};
        this.dependants[pageId][fieldVal][propTkey] = (_a = this.dependants[pageId][fieldVal][propTkey]) !== null && _a !== void 0 ? _a : contextDepTarget;
    };
    BaseStoreContext.prototype.getDependants = function (field, pageId) {
        var _a, _b;
        var fieldVal = field.toString();
        return (_b = (_a = this.dependants) === null || _a === void 0 ? void 0 : _a[pageId]) === null || _b === void 0 ? void 0 : _b[fieldVal];
    };
    BaseStoreContext.prototype.set = function (name, value) {
        if (value === undefined) {
            this.delete(name);
            return;
        }
        this.contextItems[name] = value;
    };
    BaseStoreContext.prototype.get = function (name) {
        return this.contextItems[name];
    };
    BaseStoreContext.prototype.getAll = function () {
        return this.contextItems;
    };
    BaseStoreContext.prototype.delete = function (name) {
        delete this.contextItems[name];
    };
    BaseStoreContext.prototype.deleteAll = function () {
        this.clear();
    };
    BaseStoreContext.prototype.clear = function () {
        this.contextItems = {};
    };
    return BaseStoreContext;
}());
exports.BaseStoreContext = BaseStoreContext;


/***/ }),

/***/ "../../common/dory/src/Context/Store/GlobalStoreContext.ts":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/Store/GlobalStoreContext.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalStoreContext = void 0;
var BaseStoreContext_1 = __webpack_require__(/*! ./BaseStoreContext */ "../../common/dory/src/Context/Store/BaseStoreContext.ts");
var GlobalStoreContext = /** @class */ (function (_super) {
    __extends(GlobalStoreContext, _super);
    function GlobalStoreContext() {
        var _this = _super.call(this) || this;
        _this.contextName = GlobalStoreContext.ContextName;
        return _this;
    }
    GlobalStoreContext.prototype.CreateSelf = function () {
        return new GlobalStoreContext();
    };
    GlobalStoreContext.ContextName = "GlobalStoreContext";
    return GlobalStoreContext;
}(BaseStoreContext_1.BaseStoreContext));
exports.GlobalStoreContext = GlobalStoreContext;


/***/ }),

/***/ "../../common/dory/src/Context/Store/PageStoreContext.ts":
/*!**************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/Store/PageStoreContext.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageStoreContext = void 0;
var BaseStoreContext_1 = __webpack_require__(/*! ./BaseStoreContext */ "../../common/dory/src/Context/Store/BaseStoreContext.ts");
var PageStoreContext = /** @class */ (function (_super) {
    __extends(PageStoreContext, _super);
    function PageStoreContext() {
        var _this = _super.call(this) || this;
        _this.contextName = PageStoreContext.ContextName;
        return _this;
    }
    PageStoreContext.ContextName = "PageStoreContext";
    return PageStoreContext;
}(BaseStoreContext_1.BaseStoreContext));
exports.PageStoreContext = PageStoreContext;


/***/ }),

/***/ "../../common/dory/src/Context/Store/SharedStoreContext.ts":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/Store/SharedStoreContext.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedStoreContext = void 0;
var BaseStoreContext_1 = __webpack_require__(/*! ./BaseStoreContext */ "../../common/dory/src/Context/Store/BaseStoreContext.ts");
var SharedStoreContext = /** @class */ (function (_super) {
    __extends(SharedStoreContext, _super);
    function SharedStoreContext() {
        var _this = _super.call(this) || this;
        _this.contextName = SharedStoreContext.ContextName;
        return _this;
    }
    SharedStoreContext.prototype.CreateSelf = function () {
        return new SharedStoreContext();
    };
    SharedStoreContext.prototype.OverrideAllContextItems = function (newContextItems) {
        this.contextItems = newContextItems;
    };
    SharedStoreContext.ContextName = "SharedStoreContext";
    return SharedStoreContext;
}(BaseStoreContext_1.BaseStoreContext));
exports.SharedStoreContext = SharedStoreContext;


/***/ }),

/***/ "../../common/dory/src/Context/ValueContext.ts":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Context/ValueContext.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueContext = void 0;
var compDiffHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/compDiffHelper */ "../../common/shrimp/helpers/compDiffHelper.ts");
var DoryJr_1 = __webpack_require__(/*! ../DoryJr */ "../../common/dory/src/DoryJr.ts");
var HistoryManager_1 = __webpack_require__(/*! ../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var ScopeContext_1 = __webpack_require__(/*! ./ScopeContext */ "../../common/dory/src/Context/ScopeContext.ts");
var ValueContext = /** @class */ (function () {
    function ValueContext(_a) {
        var context = _a.context;
        this.contextName = ValueContext.ContextName;
        this.valueContextList = [];
        this._valueContext = {};
        this.context = context;
    }
    ValueContext.prototype.getValueContext = function () {
        return this._valueContext;
    };
    ValueContext.prototype.getValueContextList = function (referenceCompId) {
        var _this = this;
        this.valueContextList = [];
        var valueControlList = [];
        var historyContext = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var historyItem = historyContext === null || historyContext === void 0 ? void 0 : historyContext.currentLevel().last();
        if (!historyItem)
            return this.valueContextList;
        //find the components in page or referenceComp children
        if (referenceCompId) {
            var referenceControl = historyItem.controlDict[referenceCompId];
            if (!referenceControl)
                return this.valueContextList;
            var y = this.getAllChildrenComponentCollection(historyItem, referenceControl);
            valueControlList = valueControlList.concat(y);
        }
        else {
            Object.keys(historyItem.controlDict).forEach(function (key) {
                valueControlList.push(historyItem.controlDict[key]);
            });
            var subCollections = historyItem.getComponentSubCollections();
            valueControlList = valueControlList.concat(subCollections);
        }
        valueControlList.forEach(function (control) {
            if (compDiffHelper_1.compDiffHelper.componentValueList[control.compType] && !compDiffHelper_1.compDiffHelper.componentValueList[control.compType].classCompare) {
                var valueCompInfo = compDiffHelper_1.compDiffHelper.componentValueList[control.compType];
                var component = control.component;
                if (component === undefined) {
                    return;
                }
                var value_1 = component[valueCompInfo.valueField];
                var compareValue_1 = component[compDiffHelper_1.ComparisonEnum.compareValueField];
                var label = component[valueCompInfo.labelField];
                var valueText = value_1;
                var compareValueText = compareValue_1;
                var status_1 = compDiffHelper_1.ValueStatus.none;
                status_1 = compDiffHelper_1.compDiffHelper.valueCompare({ value: value_1, compareValue: compareValue_1 });
                if (control.compType == "VCombobox") {
                    var comboValue = value_1;
                    var comboCompareValue = compareValue_1;
                    if (Array.isArray(comboValue) || Array.isArray(comboCompareValue)) {
                        //Multiple Select
                        status_1 = compDiffHelper_1.compDiffHelper.multipleValueCompare(comboValue, comboCompareValue);
                        valueText = compDiffHelper_1.compDiffHelper.decideTooltipContent({ componentInstance: component, toolTipValue: value_1 });
                        compareValueText = compDiffHelper_1.compDiffHelper.decideTooltipContent({ componentInstance: component, toolTipValue: compareValue_1 });
                    }
                    else {
                        if (value_1 && value_1.hasOwnProperty("value")) {
                            comboValue = value_1["value"];
                            valueText = value_1["text"];
                        }
                        if (compareValue_1 && compareValue_1.hasOwnProperty("value")) {
                            comboCompareValue = compareValue_1["value"];
                            compareValueText = compareValue_1["text"];
                        }
                        status_1 = compDiffHelper_1.compDiffHelper.valueCompare({ value: comboValue, compareValue: comboCompareValue });
                    }
                }
                else if (control.compType == "VSelect" || control.compType == "VAutocomplete") {
                    if (Array.isArray(value_1) || Array.isArray(compareValue_1)) {
                        //Multiple Select
                        status_1 = compDiffHelper_1.compDiffHelper.multipleValueCompare(value_1, compareValue_1);
                        valueText = compDiffHelper_1.compDiffHelper.decideTooltipContent({ componentInstance: component, toolTipValue: value_1 });
                        compareValueText = compDiffHelper_1.compDiffHelper.decideTooltipContent({ componentInstance: component, toolTipValue: compareValue_1 });
                    }
                    else {
                        var items = component["items"];
                        var valueItem = items.find(function (i) { return i["value"] == value_1; });
                        if (valueItem) {
                            valueText = valueItem["text"];
                        }
                        var compareValueItem = items.find(function (i) { return i["value"] == compareValue_1; });
                        if (compareValueItem) {
                            compareValueText = compareValueItem["text"];
                        }
                    }
                }
                if (status_1 == compDiffHelper_1.ValueStatus.none) {
                    return;
                }
                var assignedValue = { label: label, value: component[compDiffHelper_1.ComparisonEnum.compareTableValue] || valueText, compareValue: component[compDiffHelper_1.ComparisonEnum.compareTextValue] || compareValueText, statu: status_1 };
                _this.valueContextList.push(assignedValue);
            }
        });
        return this.valueContextList;
    };
    ValueContext.prototype.getAllChildrenComponentCollection = function (historyItem, referenceControl) {
        var _this = this;
        var compCollection = this.getCustomComponentCollectionsByCompId(referenceControl.compId);
        if (referenceControl.children && Object.keys(referenceControl.children).length > 0) {
            Object.keys(referenceControl.children).forEach(function (key) {
                referenceControl.children[key].forEach(function (comp) {
                    var childrenCollection = _this.getAllChildrenComponentCollection(historyItem, comp);
                    compCollection = compCollection.concat(childrenCollection);
                });
            });
        }
        else {
            compCollection.push(referenceControl);
        }
        return compCollection;
    };
    ValueContext.prototype.getCustomComponentCollectionsByCompId = function (customComponentId) {
        var _a;
        var dicts = [];
        (_a = this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName)) === null || _a === void 0 ? void 0 : _a.forEach(function (doryJr) {
            var _a, _b, _c;
            var scopeProps = (_a = doryJr.ContextJr.GetItemSingle(ScopeContext_1.ScopeContext.ContextName)) === null || _a === void 0 ? void 0 : _a.GetProps();
            if (scopeProps && scopeProps["ID"] == customComponentId) {
                var dict_1 = (_c = (_b = doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _b === void 0 ? void 0 : _b.currentLevel().last()) === null || _c === void 0 ? void 0 : _c.controlDict;
                if (dict_1) {
                    Object.keys(dict_1).forEach(function (key) { return dicts.push(dict_1[key]); });
                }
            }
        });
        return dicts;
    };
    ValueContext.ContextName = "ValueContext";
    return ValueContext;
}());
exports.ValueContext = ValueContext;


/***/ }),

/***/ "../../common/dory/src/Dory.ts":
/*!************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Dory.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dory = void 0;
var context_1 = __webpack_require__(/*! ../../shrimp/context */ "../../common/shrimp/context.ts");
var clonable_1 = __webpack_require__(/*! ../../shrimp/helpers/clonable */ "../../common/shrimp/helpers/clonable.ts");
var hook_1 = __webpack_require__(/*! ../../shrimp/helpers/hook */ "../../common/shrimp/helpers/hook.ts");
var logger_1 = __webpack_require__(/*! ../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var INavigationDemand_1 = __webpack_require__(/*! ../../shrimp/interfaces/quick/INavigationDemand */ "../../common/shrimp/interfaces/quick/INavigationDemand.ts");
var IDory_1 = __webpack_require__(/*! ../../shrimp/interfaces/RenderingInterfaces/IDory */ "../../common/shrimp/interfaces/RenderingInterfaces/IDory.ts");
var ShellConfiguration_1 = __webpack_require__(/*! ./Config/ShellConfiguration */ "../../common/dory/src/Config/ShellConfiguration.ts");
var GlobalContext_1 = __webpack_require__(/*! ./Context/GlobalContext */ "../../common/dory/src/Context/GlobalContext.ts");
var ResponseContext_1 = __webpack_require__(/*! ./Context/ResponseContext */ "../../common/dory/src/Context/ResponseContext.ts");
var SettingsQJsonsContext_1 = __webpack_require__(/*! ./Context/SettingsQJsonsContext */ "../../common/dory/src/Context/SettingsQJsonsContext.ts");
var BagStoreContext_1 = __webpack_require__(/*! ./Context/Store/BagStoreContext */ "../../common/dory/src/Context/Store/BagStoreContext.ts");
var GlobalStoreContext_1 = __webpack_require__(/*! ./Context/Store/GlobalStoreContext */ "../../common/dory/src/Context/Store/GlobalStoreContext.ts");
var SharedStoreContext_1 = __webpack_require__(/*! ./Context/Store/SharedStoreContext */ "../../common/dory/src/Context/Store/SharedStoreContext.ts");
var ValueContext_1 = __webpack_require__(/*! ./Context/ValueContext */ "../../common/dory/src/Context/ValueContext.ts");
var DoryJr_1 = __webpack_require__(/*! ./DoryJr */ "../../common/dory/src/DoryJr.ts");
var ConfigManager_1 = __webpack_require__(/*! ./Managers/ConfigManager */ "../../common/dory/src/Managers/ConfigManager.ts");
var DoryBasedLRManager_1 = __webpack_require__(/*! ./Managers/DoryBasedLRManager */ "../../common/dory/src/Managers/DoryBasedLRManager.ts");
var Evaluator_1 = __webpack_require__(/*! ./Managers/Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var HistoryManager_1 = __webpack_require__(/*! ./Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var MessagingManager_1 = __webpack_require__(/*! ./Managers/MessagingManager */ "../../common/dory/src/Managers/MessagingManager.ts");
var PropCalcContext_1 = __webpack_require__(/*! ./Managers/PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var DoryLikeData_1 = __webpack_require__(/*! ./Model/History/DoryLikeData */ "../../common/dory/src/Model/History/DoryLikeData.ts");
var DoryLikeHelper_1 = __webpack_require__(/*! ./Model/History/DoryLikeHelper */ "../../common/dory/src/Model/History/DoryLikeHelper.ts");
var HistoryItem_1 = __webpack_require__(/*! ./Model/History/HistoryItem */ "../../common/dory/src/Model/History/HistoryItem.ts");
var Dory = /** @class */ (function () {
    function Dory(interDoryContext) {
        var _this = this;
        this.contextName = Dory.ContextName;
        this.context = new context_1.ContextManager();
        this.errorInfo = { errorDetail: " ", errorOwnerInfo: { componentType: " ", componentId: " ", fieldName: " ", fieldType: "E" } };
        this.displayHook = new hook_1.Hook("DoryDisplayHook");
        this.partialDisplayHook = new hook_1.Hook("DoryPartialDisplayHook");
        this.visibilityHook = new hook_1.Hook("DoryVisibilityHook");
        this.PageCompletedHook = new hook_1.Hook("PageCompletedHook", { manageState: true });
        this.PageRenderStartedHook = new hook_1.Hook("PageRenderStartedHook");
        this.platformType = "Web";
        // Editor is on edit state
        this.isEditorInEditState = false;
        this.callBackComponentTarget = function () { };
        this._isRenderCompleted = false;
        this.interDoryContext = interDoryContext;
        if (!this.interDoryContext.GetItemSingle(SharedStoreContext_1.SharedStoreContext.ContextName)) {
            this.interDoryContext.RegisterItem(new SharedStoreContext_1.SharedStoreContext()); // first dory should register shared store context
            this.interDoryContext.RegisterItem(new GlobalContext_1.GlobalContext());
        }
        this.context.RegisterItem(this);
        this.context.RegisterItem(new HistoryManager_1.HistoryManager(this.context, new DoryLikeData_1.DoryLikeData(this, {})));
        this.context.RegisterItem(new GlobalStoreContext_1.GlobalStoreContext());
        this.context.RegisterItem(new BagStoreContext_1.BagStoreContext());
        this.context.RegisterItem(new DoryBasedLRManager_1.DoryBasedLRManager(this.context));
        this.context.RegisterItem(new ValueContext_1.ValueContext({ context: this.context }));
        this.context.RegisterItem(new ConfigManager_1.ConfigManager(this.context));
        this.SettingsQJsonContext = new SettingsQJsonsContext_1.SettingsQJsonsContext({ context: this.context, dory: this });
        this.context.RegisterItem(this.SettingsQJsonContext);
        this.shellConfigs = new ShellConfiguration_1.ShellConfiguration();
        this.PageCompletedHook.subscribe(function (option) {
            _this.SettingsQJsonContext.TriggerPipeline("onPostRender", {}); //  this event is triggered after each page render in the application
        });
    }
    Object.defineProperty(Dory.prototype, "PartialDisplayHook", {
        get: function () {
            return this.partialDisplayHook;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dory.prototype, "DisplayHook", {
        get: function () {
            return this.displayHook;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dory.prototype, "OperatorCollection", {
        get: function () {
            return this.operatorCollection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dory.prototype, "isDark", {
        get: function () {
            return this._isDark;
        },
        set: function (v) {
            this._isDark = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dory.prototype, "isRenderCompleted", {
        get: function () {
            return this._isRenderCompleted;
        },
        set: function (v) {
            this._isRenderCompleted = v;
        },
        enumerable: false,
        configurable: true
    });
    Dory.prototype.GetLRType = function () {
        var _a;
        return ((_a = this.context.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName)) === null || _a === void 0 ? void 0 : _a.LRType) || "tr-TR";
    };
    Dory.prototype.SetLRType = function (LRType, LRTypeRTL) {
        return __awaiter(this, void 0, void 0, function () {
            var doryLRManager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LRType = LRType || "tr-TR";
                        doryLRManager = this.context.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName);
                        if (!doryLRManager || doryLRManager.LRType == LRType) {
                            return [2 /*return*/];
                        }
                        doryLRManager.LRType = LRType;
                        return [4 /*yield*/, this.SettingsQJsonContext.RerenderPipelineQjson()];
                    case 1:
                        _a.sent();
                        doryLRManager.LRTypeRTL = LRTypeRTL !== null && LRTypeRTL !== void 0 ? LRTypeRTL : false;
                        this.ReRender();
                        return [2 /*return*/];
                }
            });
        });
    };
    Dory.prototype.SetConfigValues = function (configValues) {
        var _a;
        (_a = this.context.GetItemSingle(ConfigManager_1.ConfigManager.ContextName)) === null || _a === void 0 ? void 0 : _a.SetConfigValues(configValues);
    };
    Dory.prototype.GetConfigValues = function (key) {
        var _a;
        return (_a = this.context.GetItemSingle(ConfigManager_1.ConfigManager.ContextName)) === null || _a === void 0 ? void 0 : _a.GetConfigValues(key);
    };
    Dory.prototype.SetGlobalLRDict = function (GlobalLRDict) {
        this.context.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName).ResourceDict = GlobalLRDict;
    };
    Dory.prototype.Render = function (_a) {
        var qjson = _a.qjson, compParentInst = _a.compParentInst, storeItems = _a.storeItems, pageId = _a.pageId, pageName = _a.pageName;
        return __awaiter(this, void 0, void 0, function () {
            var historyItem;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.displayHook.clearPostSubscribers(true);
                        consolelog("ccccccc Dory.Render 1");
                        pageId = pageId || this.interDoryContext.GetItemSingle(GlobalContext_1.GlobalContext.ContextName).NextCounter().toString();
                        historyItem = new HistoryItem_1.HistoryItem({ qjson: qjson, context: this.context.Clone(), storeItems: storeItems, pageId: pageId, pageName: pageName });
                        // consolelog("ccccccc Dory.Render 3");
                        return [4 /*yield*/, this.innerRender({ historyItem: historyItem })];
                    case 1:
                        // consolelog("ccccccc Dory.Render 3");
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Dory.prototype.GetCurrentHistoryItem = function () {
        var _a, _b;
        return (_b = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel()) === null || _b === void 0 ? void 0 : _b.last();
    };
    Dory.prototype.PageCompleted = function (historyItem) {
        var _this = this;
        var lastHistory = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).currentLevel().last();
        var doryJrs = lastHistory.GetDoryJrs();
        if (!doryJrs) {
            this.isRenderCompleted = true;
            DoryLikeHelper_1.DoryLikeHelper.TriggerPageComplete(this, lastHistory.pageId, historyItem);
            return;
        }
        doryJrs === null || doryJrs === void 0 ? void 0 : doryJrs.forEach(function (doryJr) {
            doryJr.PageJrCompletedHook.subscribe(function () {
                if (doryJrs.find(function (jr) { return !jr.PageJrCompletedHook.IsTriggered(); })) {
                    return;
                }
                DoryLikeHelper_1.DoryLikeHelper.TriggerPageComplete(_this, lastHistory.pageId, historyItem);
                _this.isRenderCompleted = true;
            });
            doryJr.PageJrCompletedHook.listenHookState(function () {
                _this.isRenderCompleted = false;
                _this.PageCompletedHook.ResetAndStartState();
            });
        });
    };
    Dory.prototype.innerRender = function (_a) {
        var _b, _c, _d, _e;
        var historyItem = _a.historyItem, noHistory = _a.noHistory;
        return __awaiter(this, void 0, void 0, function () {
            var awaited, ex_1, errorExp, engineYamlLogType;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.resetStyle();
                        // consolelog("ccccccc Dory.innerRender 1");
                        this.PageCompletedHook.ResetAndStartState();
                        // consolelog("ccccccc Dory.innerRender 2");
                        this.isRenderCompleted = false;
                        this.PageRenderStartedHook.triggerer({ pageId: historyItem.pageId });
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        (_c = (_b = this.shellConfigs).clearPageClose) === null || _c === void 0 ? void 0 : _c.call(_b);
                        awaited = historyItem.Render({ noHistory: noHistory });
                        return [4 /*yield*/, awaited];
                    case 2:
                        _f.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _f.sent();
                        errorExp = ex_1.toString().split("at", 1);
                        this.errorInfo.errorDetail = "Render failed! " + errorExp;
                        engineYamlLogType = (_e = (_d = this.shellConfigs).getMinEngineLogType) === null || _e === void 0 ? void 0 : _e.call(_d);
                        logger_1.Logger.Log({ logMessage: "Render failed! ", error: ex_1, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                        this.ReportError([this.errorInfo]);
                        return [3 /*break*/, 4];
                    case 4:
                        this.CallRender(historyItem, undefined, noHistory);
                        this.PageCompleted(historyItem);
                        return [2 /*return*/];
                }
            });
        });
    };
    Dory.prototype.resetStyle = function () {
        this.clearStyleTag();
        this.ResetStyleDict();
    };
    Dory.prototype.ReRender = function () {
        var _a;
        var historyItem = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        if (!historyItem) {
            return;
        }
        if (historyItem.GetRenderingContext().IsRendering()) {
            historyItem.UpdateLRType();
            return;
        } // prevent rendering if called during rendering
        this.innerRender({ historyItem: historyItem, noHistory: true });
    };
    Dory.prototype.CallHibernate = function () {
        var _a;
        var historyItem = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        if (!historyItem) {
            return;
        }
        historyItem.hibernate();
    };
    Dory.prototype.SetErrorCallBack = function (callBack) {
        this.errorCallBack = callBack;
    };
    Dory.prototype.SetSiteSettings = function (siteSettings) {
        var _this = this;
        if (!siteSettings) {
            return;
        }
        if (!this.siteSettings) {
            this.siteSettings = {};
        }
        Object.keys(siteSettings).forEach(function (key) {
            if (siteSettings[key]) {
                _this.siteSettings[key] = siteSettings[key];
            }
        });
    };
    Dory.prototype.SetPlatformType = function (platformType) {
        if (!platformType)
            return;
        this.platformType = platformType;
    };
    Dory.prototype.SetSelectedProjectUrl = function (url) {
        if (!this.siteSettings) {
            return;
        }
        this.siteSettings.selectedProjectUrl = url;
    };
    Dory.prototype.ReportError = function (errors) {
        if (!this.errorCallBack) {
            return;
        }
        this.errorCallBack(errors);
    };
    Dory.prototype.delayTillPostDisplay = function (cb) {
        this.displayHook.postSubscribe(cb);
    };
    Dory.prototype.SetDisplayCallBack = function (_a) {
        var callBackFunc = _a.callBackFunc;
        this.displayHook.forceClearAllSubscibers();
        this.displayHook.subscribe(callBackFunc);
    };
    Dory.prototype.SetPartialDisplayCallBack = function (_a) {
        var callBackFunc = _a.callBackFunc;
        this.partialDisplayHook.forceClearAllSubscibers();
        this.partialDisplayHook.subscribe(callBackFunc);
    };
    Dory.prototype.SubscribeComponentVisibility = function (subscribeFunc) {
        this.visibilityHook.forceClearAllSubscibers();
        this.visibilityHook.subscribe(subscribeFunc);
    };
    Dory.prototype.RetrieveQJsonforDesignSide = function (qjsonPath) {
        return __awaiter(this, void 0, void 0, function () {
            var compQJson;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.shellConfigs.historyBasedConf.retrieveCjson({ qjsonPath: qjsonPath })];
                    case 1:
                        compQJson = _a.sent();
                        return [2 /*return*/, compQJson];
                }
            });
        });
    };
    Dory.prototype.GetSettingsQJsonContext = function () {
        return this.SettingsQJsonContext;
    };
    Object.defineProperty(Dory.prototype, "network", {
        get: function () {
            return this.shellConfigs.network;
        },
        enumerable: false,
        configurable: true
    });
    Dory.prototype.GetComponentList = function () {
        var _a;
        return (_a = this.GetLastHistory()) === null || _a === void 0 ? void 0 : _a.GetComponentList();
    };
    Dory.prototype.getComponentCollectionByIdProperty = function (_a) {
        var id = _a.id, _b = _a.deep, deep = _b === void 0 ? false : _b;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var lastHistory = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last();
        return lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.getComponentCollectionByIdProperty({ id: id, deep: deep });
    };
    Dory.prototype.getComponentCollectionByDom = function (_a) {
        var element = _a.element, _b = _a.deep, deep = _b === void 0 ? false : _b;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var lastHistory = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last();
        return lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.getComponentCollectionByDom({ element: element, deep: deep });
    };
    Dory.prototype.GetComponentCollectionByID = function (id) {
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var lastHistory = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last();
        return lastHistory ? lastHistory.getCompCollectionById(id) : undefined;
    };
    Dory.prototype.DestroyComponentCollectionByID = function (Id) {
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var lastHistory = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last();
        return lastHistory ? lastHistory.destroyComponentCollectionById(Id) : false;
    };
    Dory.prototype.GetComponentCollection = function () {
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var lastHistory = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last();
        return lastHistory ? lastHistory.GetComponentCollection() : null;
    };
    Dory.prototype.GetSubComponentCollectionByID = function (compId) {
        var _a, _b;
        var historyItem = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        var compColl = (_b = historyItem === null || historyItem === void 0 ? void 0 : historyItem.getComponentSubCollectionByID({ id: compId })) !== null && _b !== void 0 ? _b : null;
        return compColl;
    };
    Dory.prototype.GetComponentCollectionByUID = function (compUID) {
        var _a;
        var historyItem = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        return historyItem === null || historyItem === void 0 ? void 0 : historyItem.GetComponentCollectionByUID(compUID);
    };
    Dory.prototype.GetComponentSubCollection = function () {
        var _a, _b;
        var historyItem = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        var compColl = (_b = historyItem === null || historyItem === void 0 ? void 0 : historyItem.getComponentSubCollections()) !== null && _b !== void 0 ? _b : null;
        return compColl;
    };
    Dory.prototype.Evaluate = function (_a) {
        var script = _a.script, response = _a.response, lang = _a.lang, sourceMap = _a.sourceMap;
        var responseContext = new ResponseContext_1.ResponseContext();
        responseContext.response = response;
        var currentContext = this.context.Clone();
        currentContext.RegisterItem(responseContext);
        return new Evaluator_1.Evaluator().Evaluate({ script: script, context: currentContext, lang: lang });
    };
    Dory.prototype.getEvalGlobals = function () {
        var currentContext = this.context.Clone();
        var historyManager = currentContext.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        return new Evaluator_1.Evaluator().createGlobal({ context: currentContext, dory: this, historyManager: historyManager });
    };
    /**
     * Add Configuration from outside of Dory
     * @param shellConfiguration Configuration to be added into Dory's shellConfiguration field
     */
    Dory.prototype.SetShellGlobalConfiguration = function (shellConfigs) {
        for (var configItemKey in shellConfigs) {
            if (shellConfigs[configItemKey]) {
                this.shellConfigs[configItemKey] = shellConfigs[configItemKey];
            }
        }
        if (shellConfigs.logHandler) {
            logger_1.Logger.Init({ callBack: shellConfigs.logHandler.cb, clear: shellConfigs.logHandler.clear });
        }
    };
    Dory.prototype.GetShellConfiguration = function () {
        return this.shellConfigs;
    };
    Dory.prototype.Clear = function () {
        var _a;
        var bagStoreContext = this.context.GetItemSingle(BagStoreContext_1.BagStoreContext.ContextName);
        bagStoreContext === null || bagStoreContext === void 0 ? void 0 : bagStoreContext.clear();
        (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.ClearHistory();
        logger_1.Logger.clearLogs();
    };
    Dory.prototype.CallRender = function (historyItem, navigationDirection, noHistory) {
        var _a, _b;
        if (!this.displayHook.hasSubscribers) {
            var engineYamlLogType = (_b = (_a = this.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
            logger_1.Logger.Log({ logType: logger_1.LogType.Error, logMessage: "Dory.CallBackRender is not set", minEngineLogLevel: engineYamlLogType });
        }
        var additionals = historyItem.additionals;
        var elems = historyItem.controlList.map(function (item) { return item.domElement; });
        this.displayHook.triggerer(elems, historyItem.pageId, historyItem.pageName, navigationDirection, additionals, noHistory);
    };
    Dory.prototype.hasHistory = function (pageId, checkExternalRouter) {
        var _a;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var navigationDemand = historyManager.hasHistory(pageId);
        if (checkExternalRouter && ((_a = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last()) === null || _a === void 0 ? void 0 : _a.pageId) != (checkExternalRouter === null || checkExternalRouter === void 0 ? void 0 : checkExternalRouter.currPageId)) {
            navigationDemand.externalHistoryRouter = true;
        }
        return navigationDemand;
    };
    Dory.prototype.searchTargetHistoryManager = function (_a) {
        var pageId = _a.pageId;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        return (historyManager === null || historyManager === void 0 ? void 0 : historyManager.searchTargetHistoryManager({ pageId: pageId })) || null;
    };
    Dory.prototype.goHistory = function (options) {
        if (options.navigationDemand) {
            options.navigationDemand.navigationDemandType == INavigationDemand_1.INavigationDemandType.back ?
                this.goHistoryBack(options) :
                this.goHistoryForward(options);
        }
    };
    Dory.prototype.goHistoryBack = function (options) {
        var _a, _b;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        if (options === null || options === void 0 ? void 0 : options.navigationDemand) {
            (_a = options.navigationDemand.ownerHistoryManager) === null || _a === void 0 ? void 0 : _a.Back(options.navigationDemand);
            return;
        }
        ;
        historyManager === null || historyManager === void 0 ? void 0 : historyManager.Back((_b = options === null || options === void 0 ? void 0 : options.navigationDemand) !== null && _b !== void 0 ? _b : {});
    };
    Dory.prototype.goHistoryForward = function (options) {
        var _a, _b;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        if (options.navigationDemand) {
            (_a = options.navigationDemand.ownerHistoryManager) === null || _a === void 0 ? void 0 : _a.Forward(options.navigationDemand);
            return;
        }
        historyManager === null || historyManager === void 0 ? void 0 : historyManager.Forward((_b = options === null || options === void 0 ? void 0 : options.navigationDemand) !== null && _b !== void 0 ? _b : {});
    };
    Dory.prototype.getPreviousPageName = function () {
        var _a, _b;
        return (_b = (_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().previous()) === null || _b === void 0 ? void 0 : _b.pageName;
    };
    Dory.prototype.GetLastHistory = function () {
        var _a;
        return ((_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last()) || null;
    };
    Dory.prototype.SetEditMode = function (state) {
        this.isEditorInEditState = state;
    };
    Dory.prototype.GetEditMode = function () {
        return this.isEditorInEditState;
    };
    Dory.prototype.SetEditor = function (editor) {
        this.editor = editor;
    };
    Dory.prototype.GetEditor = function () {
        return this.editor;
    };
    Dory.prototype.CreateDoryJr = function (_a) {
        var context = _a.context, creatorComp = _a.creatorComp, compUIDPrefix = _a.compUIDPrefix;
        var contextJr = (context !== null && context !== void 0 ? context : this.context).Clone(this.context.GetKeys().concat(PropCalcContext_1.PropCalcContext.ContextName)); // copy only keys present on DoryContext from incomming context(coming from a parent (Dory or DoryJr or hybrid(no incomming)))
        var doryJr = new DoryJr_1.DoryJr(contextJr);
        contextJr.RegisterItem(new HistoryManager_1.HistoryManager(contextJr, new DoryLikeData_1.DoryLikeData(doryJr, { creatorComp: creatorComp, compUIDPrefix: compUIDPrefix })), { override: true });
        if (context) {
            var selfHistoryManager = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
            var parentHistoryItem = selfHistoryManager === null || selfHistoryManager === void 0 ? void 0 : selfHistoryManager.currentLevel().last();
            parentHistoryItem.registerDoryJr(doryJr); // register self on parent (Dory or DoryJr) history item context
        }
        return doryJr;
    };
    Dory.prototype.SetTSComponentWrapper = function (callBackComponentTarget) {
        this.callBackComponentTarget = callBackComponentTarget;
    };
    Dory.prototype.GetInterDoryContext = function () {
        return this.interDoryContext;
    };
    Dory.prototype.CloneStores = function () {
        var bagStore = this.context.GetItemSingle(BagStoreContext_1.BagStoreContext.ContextName);
        var globalStore = this.context.GetItemSingle(GlobalStoreContext_1.GlobalStoreContext.ContextName);
        var sharedStore = this.interDoryContext.GetItemSingle(SharedStoreContext_1.SharedStoreContext.ContextName);
        return { bagStore: clonable_1.Clonable.DeepClone(bagStore), globalStore: clonable_1.Clonable.DeepClone(globalStore), sharedStore: sharedStore };
    };
    Dory.prototype.SetStoreKeys = function (stores) {
        var bagStore = this.context.GetItemSingle(BagStoreContext_1.BagStoreContext.ContextName);
        var globalStore = this.context.GetItemSingle(GlobalStoreContext_1.GlobalStoreContext.ContextName);
        var sharedStore = this.interDoryContext.GetItemSingle(SharedStoreContext_1.SharedStoreContext.ContextName);
        sharedStore.OverrideAllContextItems(stores.sharedStore.getAll());
        Object.keys(stores.bagStore).forEach(function (key) { return bagStore[key] = stores.bagStore[key]; });
        Object.keys(stores.globalStore).forEach(function (key) { return globalStore[key] = stores.globalStore[key]; });
    };
    Dory.prototype.GetPreviousHistory = function () {
        var _a;
        return ((_a = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().previous()) || null;
    };
    Dory.prototype.GetAdditionals = function (_a) {
        var _b = _a.targetHistoryItem, targetHistoryItem = _b === void 0 ? "last" : _b;
        var targetHI = targetHistoryItem == "last" ? this.GetLastHistory() : this.GetPreviousHistory();
        return targetHI === null || targetHI === void 0 ? void 0 : targetHI.additionals;
    };
    Dory.prototype.SetAdditionals = function (_a) {
        var additionals = _a.additionals, _b = _a.targetHistoryItem, targetHistoryItem = _b === void 0 ? "last" : _b;
        var targetHI = targetHistoryItem == "last" ? this.GetLastHistory() : this.GetPreviousHistory();
        targetHI && (targetHI.additionals = additionals);
    };
    Dory.prototype.Trigger = function (eventName, parameters) {
        return new MessagingManager_1.MessagingManager(this.context).Trigger({ eventName: eventName, parameters: parameters });
    };
    Dory.prototype.SetOperatorCollection = function (operatorCollection) {
        this.operatorCollection = operatorCollection;
    };
    Dory.prototype.SetAssetValues = function (values) {
        this.assetValues = values;
    };
    Dory.prototype.GetAssetValues = function () {
        return this.assetValues;
    };
    Dory.prototype.ResetStyleDict = function () {
        var _a, _b, _c;
        (_c = (_b = (_a = this.operatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator) === null || _b === void 0 ? void 0 : _b.resetStyleDict) === null || _c === void 0 ? void 0 : _c.call(_b);
    };
    Dory.prototype.clearStyleTag = function () {
        var _a, _b, _c;
        (_c = (_b = (_a = this.operatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator) === null || _b === void 0 ? void 0 : _b.clearStyleTag) === null || _c === void 0 ? void 0 : _c.call(_b);
    };
    Dory.prototype.DeleteStyleSelector = function (compCollection, stylePropName, breakPoint) {
        var _a, _b, _c;
        (_c = (_b = (_a = this.operatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator) === null || _b === void 0 ? void 0 : _b.resetStyleSelector) === null || _c === void 0 ? void 0 : _c.call(_b, compCollection, stylePropName, breakPoint);
    };
    Dory.prototype.DeleteStyleCompCollection = function (compCollection) {
        var _a, _b, _c;
        (_c = (_b = (_a = this.operatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator) === null || _b === void 0 ? void 0 : _b.resetStyleCompCollection) === null || _c === void 0 ? void 0 : _c.call(_b, compCollection);
    };
    Dory.prototype.SetThemeName = function (theme) {
        this.currentTheme = theme;
    };
    Dory.prototype.SetThemes = function (themes) {
        this.themes = themes;
    };
    Dory.prototype.GetCurrentTheme = function () {
        return this.currentTheme;
    };
    Dory.prototype.GetThemes = function () {
        return this.themes;
    };
    Dory.ContextName = IDory_1.DoryContextName;
    return Dory;
}());
exports.Dory = Dory;


/***/ }),

/***/ "../../common/dory/src/DoryJr.ts":
/*!**************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/DoryJr.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryJr = void 0;
var hook_1 = __webpack_require__(/*! ../../shrimp/helpers/hook */ "../../common/shrimp/helpers/hook.ts");
var logger_1 = __webpack_require__(/*! ../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var INavigationDemand_1 = __webpack_require__(/*! ../../shrimp/interfaces/quick/INavigationDemand */ "../../common/shrimp/interfaces/quick/INavigationDemand.ts");
var ScopeContext_1 = __webpack_require__(/*! ./Context/ScopeContext */ "../../common/dory/src/Context/ScopeContext.ts");
var Dory_1 = __webpack_require__(/*! ./Dory */ "../../common/dory/src/Dory.ts");
var HistoryManager_1 = __webpack_require__(/*! ./Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var MessagingManager_1 = __webpack_require__(/*! ./Managers/MessagingManager */ "../../common/dory/src/Managers/MessagingManager.ts");
var DoryLikeHelper_1 = __webpack_require__(/*! ./Model/History/DoryLikeHelper */ "../../common/dory/src/Model/History/DoryLikeHelper.ts");
var HistoryItem_1 = __webpack_require__(/*! ./Model/History/HistoryItem */ "../../common/dory/src/Model/History/HistoryItem.ts");
var DoryJr = /** @class */ (function () {
    function DoryJr(contextJr) {
        this.contextName = DoryJr.ContextName;
        this.subMessaging = null;
        this.PageJrCompletedHook = new hook_1.Hook("PageJrCompletedHook", { manageState: true });
        this.contextJr = contextJr;
        this.displayHook = new hook_1.Hook("DoryJrDisplayHook");
    }
    DoryJr.prototype.delayTillPostDisplay = function (cb) {
        this.displayHook.postSubscribe(cb);
    };
    DoryJr.prototype.setCallbackDisplay = function (callBackFunc) {
        this.displayHook.forceClearAllSubscibers();
        this.displayHook.subscribe(callBackFunc);
    };
    DoryJr.prototype.Render = function (_a) {
        var qjson = _a.qjson, props = _a.props, events = _a.events, compParentInst = _a.compParentInst, storeItems = _a.storeItems, pageId = _a.pageId, pageName = _a.pageName, noHistory = _a.noHistory, children = _a.children;
        return __awaiter(this, void 0, void 0, function () {
            var historyItem, mm, hm;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.PageJrCompletedHook.ResetAndStartState();
                        this.displayHook.clearPostSubscribers(true);
                        this.contextJr.RegisterItem(new ScopeContext_1.ScopeContext({ events: events, props: props, children: children }));
                        historyItem = new HistoryItem_1.HistoryItem({ qjson: qjson, context: this.contextJr, storeItems: storeItems, pageId: pageId, pageName: pageName });
                        return [4 /*yield*/, historyItem.Render({ compParentInst: compParentInst, noHistory: noHistory })];
                    case 1:
                        _b.sent();
                        mm = new MessagingManager_1.MessagingManager(this.contextJr);
                        hm = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
                        this.subMessaging = mm.GetMessagingComponentByLevelIndex(hm.CurrentLevelIndex);
                        this.CallRender(historyItem);
                        this.PageCompleted();
                        return [2 /*return*/];
                }
            });
        });
    };
    DoryJr.prototype.CallRender = function (historyItem, navigationDirection) {
        var additionals = this.GetAdditionals({ targetHistoryItem: "last" });
        this.displayHook.triggerer(historyItem.controlList.map(function (item) { return item.domElement; }), historyItem.pageId, historyItem.pageName, navigationDirection, undefined, undefined, additionals);
    };
    DoryJr.prototype.PageCompleted = function () {
        var _this = this;
        var lastHistory = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).currentLevel().last();
        var doryJrs = lastHistory.GetDoryJrs();
        if (!doryJrs) {
            DoryLikeHelper_1.DoryLikeHelper.TriggerPageCompleteJr(this, lastHistory.pageId);
            return;
        }
        doryJrs === null || doryJrs === void 0 ? void 0 : doryJrs.forEach(function (doryJr) {
            doryJr.PageJrCompletedHook.subscribe(function () {
                if (doryJrs.find(function (jr) { return !jr.PageJrCompletedHook.IsTriggered(); })) {
                    return;
                }
                DoryLikeHelper_1.DoryLikeHelper.TriggerPageCompleteJr(_this, lastHistory.pageId);
            });
            doryJr.PageJrCompletedHook.listenHookState(function () {
                _this.PageJrCompletedHook.ResetAndStartState();
            });
        });
    };
    DoryJr.prototype.getComponentCollectionByDom = function (_a) {
        var element = _a.element, _b = _a.deep, deep = _b === void 0 ? false : _b;
        var lastHistory = this.GetLastHistory();
        return lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.getComponentCollectionByDom({ element: element, deep: deep });
    };
    DoryJr.prototype.getComponentCollectionByIdProperty = function (_a) {
        var id = _a.id, deep = _a.deep;
        var lastHistory = this.GetLastHistory();
        return lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.getComponentCollectionByIdProperty({ id: id, deep: deep });
    };
    DoryJr.prototype.Destroy = function () {
        var _a;
        (_a = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.ClearHistory();
    };
    DoryJr.prototype.Update = function () {
        var lastHist = this.GetLastHistory();
        if (lastHist) {
            lastHist.update();
        }
    };
    /**
     * Get custom events from sub component's on Messaging
     */
    DoryJr.prototype.GetMethods = function () {
        var _a, _b, _c, _d;
        if (!this.subMessaging) {
            var dory = this.contextJr.GetItemSingle(Dory_1.Dory.ContextName);
            var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
            logger_1.Logger.Log({ logMessage: "Couldn' t find any Messaging Component", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return undefined;
        }
        return (_d = (_c = this.subMessaging.events).GetExternalEventBoundFunctions) === null || _d === void 0 ? void 0 : _d.call(_c);
    };
    /**
     * Get custom created props from sub component's on Messaging
     */
    DoryJr.prototype.GetProps = function () {
        var _a, _b;
        if (!this.subMessaging) {
            var dory = this.contextJr.GetItemSingle(Dory_1.Dory.ContextName);
            var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
            logger_1.Logger.Log({ logMessage: "Couldn' t find any Messaging Component", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return undefined;
        }
        return this.subMessaging.component.props["externalProps"];
    };
    DoryJr.prototype.GetEvents = function () {
        var _a, _b;
        if (!this.subMessaging) {
            var dory = this.contextJr.GetItemSingle(Dory_1.Dory.ContextName);
            var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
            logger_1.Logger.Log({ logMessage: "Couldn' t find any Messaging Component", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return undefined;
        }
        return this.subMessaging.component.props["externalEvents"];
    };
    DoryJr.prototype.hasHistory = function (pageId, checkExternalRouter) {
        var _a;
        var historyManager = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var navigationDemand = historyManager.hasHistory(pageId);
        if (checkExternalRouter && ((_a = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last()) === null || _a === void 0 ? void 0 : _a.pageId) != (checkExternalRouter === null || checkExternalRouter === void 0 ? void 0 : checkExternalRouter.currPageId)) {
            navigationDemand.externalHistoryRouter = true;
        }
        return navigationDemand;
    };
    DoryJr.prototype.searchTargetHistoryManager = function (_a) {
        var pageId = _a.pageId;
        var historyManager = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        return historyManager.searchTargetHistoryManager({ pageId: pageId });
    };
    DoryJr.prototype.checkIfHistoryExist = function (navigationDemand) {
        var historyManager = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        return historyManager.checkIfHistoryExist(navigationDemand);
    };
    DoryJr.prototype.goHistory = function (options) {
        if (options.navigationDemand) {
            options.navigationDemand.navigationDemandType == INavigationDemand_1.INavigationDemandType.back ?
                this.goHistoryBack(options.navigationDemand) :
                this.goHistoryForward(options.navigationDemand);
        }
    };
    DoryJr.prototype.goHistoryBack = function (navigationDemand) {
        var _a;
        (_a = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.Back(navigationDemand);
    };
    DoryJr.prototype.goHistoryForward = function (navigationDemand) {
        var _a;
        (_a = this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.Forward(navigationDemand);
    };
    Object.defineProperty(DoryJr.prototype, "ContextJr", {
        get: function () {
            return this.contextJr;
        },
        enumerable: false,
        configurable: true
    });
    DoryJr.prototype.GetLastHistory = function () {
        return this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).currentLevel().last() || undefined;
    };
    DoryJr.prototype.GetComponentList = function () {
        var _a;
        return (_a = this.GetLastHistory()) === null || _a === void 0 ? void 0 : _a.GetComponentList();
    };
    DoryJr.prototype.GetComponentCollection = function () {
        var lastHistory = this.GetLastHistory();
        return (lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.GetComponentCollection()) || undefined;
    };
    DoryJr.prototype.GetPreviousHistory = function () {
        return this.contextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).currentLevel().previous() || undefined;
    };
    DoryJr.prototype.GetAdditionals = function (_a) {
        var _b = _a.targetHistoryItem, targetHistoryItem = _b === void 0 ? "last" : _b;
        var targetHI = targetHistoryItem == "last" ? this.GetLastHistory() : this.GetPreviousHistory();
        return targetHI === null || targetHI === void 0 ? void 0 : targetHI.additionals;
    };
    DoryJr.prototype.SetAdditionals = function (_a) {
        var additionals = _a.additionals, _b = _a.targetHistoryItem, targetHistoryItem = _b === void 0 ? "last" : _b;
        var targetHI = targetHistoryItem == "last" ? this.GetLastHistory() : this.GetPreviousHistory();
        targetHI && (targetHI.additionals = additionals);
    };
    DoryJr.ContextName = "DoryJr";
    return DoryJr;
}());
exports.DoryJr = DoryJr;


/***/ }),

/***/ "../../common/dory/src/Helpers/ComponentCommunicator.ts":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Helpers/ComponentCommunicator.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentCommunicator = void 0;
var compDiffHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/compDiffHelper */ "../../common/shrimp/helpers/compDiffHelper.ts");
var customCompHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/customCompHelper */ "../../common/shrimp/helpers/customCompHelper.ts");
var ICompJson_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
var IPropExtension_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/IPropExtension */ "../../common/shrimp/interfaces/ComponentInterfaces/IPropExtension.ts");
var IWebSDK_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/IWebSDK */ "../../common/shrimp/interfaces/quick/IWebSDK.ts");
var RenderingContext_1 = __webpack_require__(/*! ../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var _components = null;
function loadComponents() {
    if (!_components) {
        _components = __webpack_require__(/*! ../Components/index */ "../../common/dory/src/Components/index.ts");
    }
    return _components;
}
var ComponentCommunicator = /** @class */ (function () {
    function ComponentCommunicator() {
    }
    ComponentCommunicator.prototype.CreateComponent = function (_a) {
        var componentName = _a.componentName, props = _a.props, events = _a.events, context = _a.context, asChildType = _a.asChildType, asChildName = _a.asChildName, children = _a.children, parentInst = _a.parentInst, childrenCreators = _a.childrenCreators, compCollection = _a.compCollection, compClass = _a.compClass, text = _a.text, attrs = _a.attrs, compareCompValue = _a.compareCompValue, directives = _a.directives, styles = _a.styles;
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        var outBoundEvents = events.GetEventBoundFunctions();
        var rc = context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        rc.ComponentInCreation = compCollection;
        this.setDoryProps(props, dory.isDark);
        props = __assign(__assign({}, props), outBoundEvents.propertyEventFunctions);
        props._renderingProps = {
            shellAutoLridActivated: dory.shellConfigs.compPropsAutoLrid,
            contextLridHelper: dory.shellConfigs.lridHelper,
            isEditMode: dory.isEditorInEditState,
            context: function () { return context; },
            events: function () { return outBoundEvents.eventFunctions; },
            props: function () { return props; },
            compCollCb: function () { return compCollection; },
            getEditor: dory.GetEditor()
        };
        var arrangedChildren = this.arrangeChildren(children, props, childrenCreators);
        props = arrangedChildren.props || props;
        if (dory.siteSettings && !arrangedChildren.props.DiscardSettings) {
            var compArrangedSettings = this.arrangeSiteSettingsProps({ componentName: componentName, props: arrangedChildren.props || props, siteSettings: dory.siteSettings, compClass: compClass, attrs: attrs });
            (props = compArrangedSettings.props, compClass = compArrangedSettings.compClass, attrs = compArrangedSettings.attrs);
        }
        var customCompName = new customCompHelper_1.customCompHelper().customCompList.find(function (name) { return componentName == name; });
        if (customCompName) {
            componentName = "CustomComponent";
        }
        var targetLocalComponent = this.findLocalComponent({ compName: componentName, dory: dory });
        var createdComponent = null;
        if (targetLocalComponent) {
            createdComponent = this.createLocalComponent(targetLocalComponent, componentName, props, outBoundEvents.eventFunctions, context, dory, asChildType, asChildName, compCollection, arrangedChildren.scopedSlots, arrangedChildren.slots, parentInst, compClass, text);
        }
        else {
            createdComponent = rc.HistoryBasedConf.createComponent({ componentName: componentName, props: props, events: outBoundEvents.eventFunctions, asChildType: asChildType, asChildName: asChildName, scopedSlots: arrangedChildren.scopedSlots, slots: arrangedChildren.slots, compClass: compClass, text: text, attrs: attrs, componentCollection: compCollection, directives: directives, styles: styles });
        }
        if (compareCompValue) {
            this.calcComponentDiff({ createdComponent: createdComponent, compCollection: compCollection, props: props });
        }
        ComponentCommunicator.compCreatePostActions({ compCollection: compCollection, createdComponent: createdComponent, context: context, asChildType: asChildType, asChildName: asChildName, attrs: attrs, props: props });
        return createdComponent;
    };
    ComponentCommunicator.prototype.setDoryProps = function (props, isDark) {
        if (isDark) {
            props.dark = isDark;
        }
        if (props["qValue"] !== undefined) {
            props["value"] = props["qValue"];
            delete props.qValue;
        }
    };
    ComponentCommunicator.compCreatePostActions = function (_a) {
        var _this = this;
        var _b;
        var compCollection = _a.compCollection, createdComponent = _a.createdComponent, context = _a.context, asChildType = _a.asChildType, asChildName = _a.asChildName, attrs = _a.attrs, props = _a.props;
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        var rc = context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        if (props) {
            compCollection.SetInitialProps(props);
        }
        compCollection.WatchCreatedFields(function (created) { return _this.injectFields(created, compCollection, context); });
        compCollection.SetComponentCreatedFields({ createdComponent: createdComponent, keepAnEyeOnCreatedCompInst: true });
        (_b = dory.shellConfigs.componentInstanceTracker) === null || _b === void 0 ? void 0 : _b.TrackCompInstance({
            asChildType: asChildType,
            asChildName: asChildName,
            component: createdComponent,
            compCollection: compCollection,
            attrs: attrs,
            postRenderExecutor: function (cb) {
                rc.executeOrDelayEvent({ cb: cb, immediateEvent: false, triggerOrder: 0 });
            }, isEditMode: dory.isEditorInEditState
        });
    };
    ComponentCommunicator.injectFields = function (created, compColl, context) {
        var _a, _b;
        if (!created.instance) {
            return;
        }
        if (!Object.getOwnPropertyDescriptor(compColl.component, "visible")) {
            Object.defineProperty(compColl.component, "visible", { get: function () { return compColl.componentVisibility; }, set: function (value) { return compColl.componentVisibility = value; } });
        }
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        var compOperator = (_a = dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator;
        if (!Object.getOwnPropertyDescriptor(compColl.component, "class")) {
            Object.defineProperty(compColl.component, "class", { get: function () { return compOperator === null || compOperator === void 0 ? void 0 : compOperator.getClassString(compColl); }, set: function (value) { return compOperator === null || compOperator === void 0 ? void 0 : compOperator.setClassString(compColl, value); } });
        }
        if (!Object.getOwnPropertyDescriptor(compColl.component, "text") && ((_b = compOperator === null || compOperator === void 0 ? void 0 : compOperator.compListOfText) === null || _b === void 0 ? void 0 : _b.includes(compColl.compType))) {
            Object.defineProperty(compColl.component, "text", { get: function () { var _a; return (_a = compOperator === null || compOperator === void 0 ? void 0 : compOperator.getTextString) === null || _a === void 0 ? void 0 : _a.call(compOperator, compColl); }, set: function (value) { var _a; return (_a = compOperator === null || compOperator === void 0 ? void 0 : compOperator.setTextAndMount) === null || _a === void 0 ? void 0 : _a.call(compOperator, compColl, value); } });
        }
    };
    /**
     * Define component properties of the component dictionary from the quick-shrimp.
     * Listen those defined props to calculate its border and tooltip.
     * Also listen component instance whenever a change has been made on it.
     * @param createdComponent Created component instance
     * @param compCollection Created component collection(can't use only this collection to get comp instance bc the instance is not on it yet)
     */
    ComponentCommunicator.prototype.calcComponentDiff = function (_a) {
        var createdComponent = _a.createdComponent, compCollection = _a.compCollection, props = _a.props;
        compCollection.compareComponent = true;
        if (createdComponent && compDiffHelper_1.compDiffHelper.componentValueList[compCollection.compType]) {
            // Prop value listener has watcher on the component collection 
            compDiffHelper_1.compDiffHelper.propValueListener({
                compCollection: compCollection,
                propKey: compDiffHelper_1.compDiffHelper.componentValueList[compCollection.compType].valueField,
                props: props
            });
            compDiffHelper_1.compDiffHelper.propValueListener({
                compCollection: compCollection,
                propKey: compDiffHelper_1.ComparisonEnum.compareValueField,
                props: props
            });
        }
    };
    ComponentCommunicator.prototype.ComponentHasProp = function (componentName, options, propName, context) {
        if (options.dynProps) {
            return true;
        }
        var rc = context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        var targetLocalComponent = this.findLocalComponent({ compName: componentName, dory: dory });
        if (targetLocalComponent) {
            return true;
        }
        return rc.HistoryBasedConf.componentHasProp({ componentName: componentName, propName: propName });
    };
    ComponentCommunicator.prototype.arrangeChildren = function (children, props, childrenCreators) {
        var retVal = { scopedSlots: childrenCreators, props: props };
        for (var childKey in children) {
            children[childKey].forEach(function (child) {
                switch (child.asChildType) {
                    case ICompJson_1.CType.slot:
                        retVal.slots = retVal.slots || {};
                        retVal.slots[childKey] = retVal.slots[childKey] || [];
                        retVal.slots[childKey].push(child.vDomElement);
                        break;
                    case ICompJson_1.CType.child:
                        retVal.props.__domElements = retVal.props.__domElements || {};
                        retVal.props.__domElements[childKey] = retVal.props.__domElements[childKey] || [];
                        retVal.props.__domElements[childKey].push(child.domElement);
                        break;
                }
            });
        }
        return retVal;
    };
    ComponentCommunicator.prototype.arrangeSiteSettingsProps = function (_a) {
        var _b;
        var componentName = _a.componentName, siteSettings = _a.siteSettings, props = _a.props, compClass = _a.compClass, attrs = _a.attrs;
        var compArrangedSettings = { props: props, compClass: compClass, attrs: attrs };
        if (siteSettings && (siteSettings === null || siteSettings === void 0 ? void 0 : siteSettings.compSettings) && (siteSettings === null || siteSettings === void 0 ? void 0 : siteSettings.compSettings[componentName])) {
            var componentProps = siteSettings.compSettings[componentName];
            for (var propName in componentProps) {
                if (componentProps[propName].runTimeDefaultValue !== undefined || componentProps[propName].runTimeOverrideValue !== undefined) {
                    var uxProp = componentProps[propName];
                    if (uxProp.propType == ICompJson_1.PType.prop || uxProp.propType === undefined) {
                        if (propName == 'class') {
                            if (typeof uxProp.runTimeOverrideValue == "object") {
                                switch (uxProp.runTimeOverrideValue.type) {
                                    case IPropExtension_1.IPropOverrideType.Append:
                                        compArrangedSettings.compClass += " " + uxProp.runTimeOverrideValue.value;
                                        break;
                                    case IPropExtension_1.IPropOverrideType.Override:
                                        compArrangedSettings.compClass = uxProp.runTimeOverrideValue.value.toString();
                                        break;
                                    default:
                                        break;
                                }
                            }
                            else {
                                compArrangedSettings.compClass = (_b = (uxProp.runTimeOverrideValue || uxProp.runTimeDefaultValue)) === null || _b === void 0 ? void 0 : _b.toString();
                            }
                        }
                        compArrangedSettings.props[propName] = uxProp.runTimeOverrideValue || compArrangedSettings.props[propName] || uxProp.runTimeDefaultValue;
                    }
                    else if (uxProp.propType == ICompJson_1.PType.attr) {
                        compArrangedSettings.attrs = compArrangedSettings.attrs || {};
                        compArrangedSettings.attrs[propName] = uxProp.runTimeOverrideValue || compArrangedSettings.attrs[propName] || uxProp.runTimeDefaultValue;
                    }
                }
            }
        }
        return compArrangedSettings;
    };
    ComponentCommunicator.prototype.findLocalComponent = function (_a) {
        var compName = _a.compName, dory = _a.dory;
        var Components = loadComponents();
        var targetLocalComponent = Components[compName];
        if (targetLocalComponent) {
            if (dory.shellConfigs.coreComponentOverrider) {
                return dory.shellConfigs.coreComponentOverrider(compName) != null ? false : targetLocalComponent;
            }
        }
        return targetLocalComponent;
    };
    ComponentCommunicator.prototype.createLocalComponent = function (targetLocalComponent, componentName, props, outBoundEvents, context, dory, asChildType, asChildName, componentCollection, scopedSlots, slots, parentInst, compClass, text) {
        var _a, _b;
        var scopedFuncs;
        if (scopedSlots) {
            Object.keys(scopedSlots).forEach(function (key) {
                scopedFuncs = scopedFuncs || {};
                scopedFuncs[key] = function (scopeObject) { return scopedSlots[key]({ compCollection: componentCollection, scopeObject: scopeObject }).map(function (compColl) { return compColl.vDomElement; }); };
            });
        }
        var compCreator = new targetLocalComponent({
            props: props,
            events: outBoundEvents,
            parent: parentInst,
            context: context
        });
        if (outBoundEvents["onPageClose"] && componentName == "Messaging") {
            (_b = (_a = dory.shellConfigs).setPageClose) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
        var retVal = {};
        switch (asChildType) {
            case ICompJson_1.CType.scopedSlot:
            case ICompJson_1.CType.slot:
                props._renderingProps.targetLocalComponent = function () { return compCreator; };
                var localComponentWrapperName = "TSComponentWrapper";
                var rc = context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
                retVal = rc.HistoryBasedConf.createComponent({ componentName: localComponentWrapperName, props: props, events: outBoundEvents, scopedSlots: scopedSlots, componentCollection: componentCollection, asChildType: asChildType, asChildName: asChildName });
                retVal.compGroupType = IWebSDK_1.CompGroupType.Local;
                break;
            case ICompJson_1.CType.child:
            default:
                // let createdComp = compCreator({ context, parent: parentInst, events: outBoundEvents, props });
                retVal.instance = compCreator;
                retVal.el = compCreator.Render();
                retVal.compGroupType = IWebSDK_1.CompGroupType.Local;
                break;
        }
        this.doStyle(dory, componentCollection);
        return retVal;
    };
    ComponentCommunicator.prototype.doStyle = function (dory, componentCollection) {
        var _a, _b, _c;
        if (componentCollection.qjsonInfo && componentCollection.qjsonInfo.ver && componentCollection.qjsonInfo.ver > 1.0 && componentCollection.compStyleValues != undefined) { //#QJsonVersion
            (_c = (_b = (_a = dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator) === null || _b === void 0 ? void 0 : _b.matchComponentStyles) === null || _c === void 0 ? void 0 : _c.call(_b, componentCollection);
        }
    };
    return ComponentCommunicator;
}());
exports.ComponentCommunicator = ComponentCommunicator;


/***/ }),

/***/ "../../common/dory/src/Helpers/Formatter.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Helpers/Formatter.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Formatter = void 0;
var date_fns_1 = __webpack_require__(/*! date-fns */ "../../node_modules/date-fns/index.js");
var moment_1 = __importDefault(__webpack_require__(/*! moment */ "../../node_modules/moment/moment.js"));
//import numeral from "numeral";
var Formatter = /** @class */ (function () {
    function Formatter() {
    }
    //date-fns lib
    Formatter.prototype.formatDate = function (selfDate, formatType) {
        return (0, date_fns_1.format)(selfDate, formatType);
    };
    Formatter.prototype.getDate = function (selfDate) {
        return (0, date_fns_1.getDate)(selfDate);
    };
    Formatter.prototype.addDays = function (selfDate, value) {
        return (0, date_fns_1.addDays)(selfDate, value);
    };
    Formatter.prototype.addMonths = function (selfDate, value) {
        return (0, date_fns_1.addMonths)(selfDate, value);
    };
    Formatter.prototype.addYears = function (selfDate, value) {
        return (0, date_fns_1.addYears)(selfDate, value);
    };
    //moment lib
    Formatter.prototype.toDate = function (dateString, formatString) {
        return (0, moment_1.default)(dateString, formatString).toDate();
    };
    Formatter.prototype.dateFromNow = function (dateString, formatString, lang) {
        return (0, moment_1.default)(dateString, formatString).locale(lang).fromNow();
    };
    Formatter.prototype.dateToFormattedString = function (selfDate, formatString) {
        return (0, moment_1.default)(selfDate).format(formatString);
    };
    Formatter.prototype.formatNumber = function (selfNumber, formatType, opt) {
        //Geçici currency formatlamaTüm number formatlamalarının yapılabilmesi için Numeral kütüphanesi entegre edilecek. - Nilay
        return selfNumber.toLocaleString(formatType, opt);
    };
    Formatter.prototype.formatBigNumber = function (number, formatType) {
        var digits = 3;
        var separator = "";
        var radixPoint = "";
        if (formatType == 'tr-TR') {
            separator = ".";
            radixPoint = ",";
        }
        else {
            separator = ",";
            radixPoint = ".";
        }
        number = number.replace(separator, radixPoint);
        var len = number.indexOf(radixPoint);
        len = len > 0 ? len : number.length;
        var temp = "";
        for (var i = len; i > 0;) {
            if (i < digits) {
                digits = i;
                i = 0;
            }
            else
                i -= digits;
            temp =
                number.substring(i, i + digits) +
                    (i < len - digits && i >= 0 ? separator : "") +
                    temp;
        }
        return "" + temp + number.substring(len);
    };
    return Formatter;
}());
exports.Formatter = Formatter;


/***/ }),

/***/ "../../common/dory/src/Helpers/StringHelper.ts":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Helpers/StringHelper.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StringHelper = void 0;
var StringHelper = /** @class */ (function () {
    function StringHelper() {
    }
    StringHelper.prototype.formatString = function (selfString) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.formatStringArray(selfString, args);
    };
    StringHelper.prototype.formatStringArray = function (selfString, args) {
        return selfString.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
        });
    };
    return StringHelper;
}());
exports.StringHelper = StringHelper;


/***/ }),

/***/ "../../common/dory/src/Helpers/flowRuntimeHelper.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Helpers/flowRuntimeHelper.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.triggerFlow = void 0;
var flow_runtime_1 = __webpack_require__(/*! @stechquick/flow-runtime */ "../../node_modules/@stechquick/flow-runtime/dist/flowRuntime/src/flow.js");
var RenderingContext_1 = __webpack_require__(/*! ../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var HistoryManager_1 = __webpack_require__(/*! ../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var stepPath = function (stepName) { return "flow-components/dist/" + stepName + "/" + stepName + ".js"; }; // TODO: will not work for runtime (mobile & web). Just editor.
var cached = function (cb) { var cache; return function () { return cache ? cache : cache = cb(); }; };
function requestAsync(client, dory, context, method, url, headers, queryString, body) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var resp, err_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, client.requestAsync(dory, context, {
                            http: method,
                            url: url,
                            headers: headers,
                            data: body,
                            blockRender: true, onFail: null, onSuccess: null, responseField: "response",
                            withCredentials: true, showErrorMessage: false
                        })];
                case 1:
                    resp = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _b.sent();
                    if (!((_a = err_1.response) === null || _a === void 0 ? void 0 : _a.status)) {
                        throw err_1;
                    }
                    resp = err_1.response;
                    return [3 /*break*/, 3];
                case 3:
                    if (!resp) {
                        throw new Error("Editor is in Edit State");
                    }
                    return [2 /*return*/, { statusCode: resp.status, body: resp.data, headers: resp.headers }];
            }
        });
    });
}
var categoryMap = { error: "Error", info: "Info", success: "Success", warning: "Warning" };
var categoryMapper = function (flowCategory) { return flowCategory ? categoryMap[flowCategory] : undefined; };
function triggerFlow(context, script, dataSource, client) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var dory, renderingContext, historyManager, retValProm;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    dory = cached(function () { return context.GetItemSingle(Dory_1.Dory.ContextName); });
                    renderingContext = cached(function () { return context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName); });
                    historyManager = cached(function () { return context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName); });
                    return [4 /*yield*/, (0, flow_runtime_1.executeFlow)(script, {
                            environment: {
                                client: {
                                    getFormData: function () { return client.getFormData(dory()); },
                                    request: function (request) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, requestAsync(client, dory(), context, request.method, request.url, request.headers, request.queryString, request.body)];
                                            case 1: return [2 /*return*/, _a.sent()];
                                        }
                                    }); }); },
                                    go: function (qjsonPath) { return client.go(context, dory(), qjsonPath); },
                                    alert: function (options) { return client.alert(dory().shellConfigs.shellGlobalMethods, renderingContext().ownerComponent, historyManager(), { category: categoryMapper(options.category), title: options.title, text: options.text }); },
                                },
                            },
                            stepRetriever: function (stepName, version) { return __awaiter(_this, void 0, void 0, function () {
                                var stepResp, moduleObject;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, dory().network.get({ url: stepPath(stepName) })];
                                        case 1:
                                            stepResp = _a.sent();
                                            if (stepResp.status != 200) {
                                                throw new Error("step " + stepName + "@" + version + " could not be retrieved");
                                            }
                                            ;
                                            moduleObject = {};
                                            new Function("module", "exports", stepResp.data)(moduleObject, {});
                                            return [2 /*return*/, moduleObject.exports.default];
                                    }
                                });
                            }); }
                        })];
                case 1:
                    retValProm = _b.sent();
                    (_a = renderingContext().ownerEvent) === null || _a === void 0 ? void 0 : _a.AttachCompletionPromise(retValProm);
                    return [2 /*return*/];
            }
        });
    });
}
exports.triggerFlow = triggerFlow;


/***/ }),

/***/ "../../common/dory/src/Managers/CachedEvalHelper.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/CachedEvalHelper.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CachedEvalHelper = void 0;
var objectStore_1 = __webpack_require__(/*! ../../../shrimp/helpers/objectStore */ "../../common/shrimp/helpers/objectStore.ts");
var CachedEvalHelper = /** @class */ (function () {
    function CachedEvalHelper() {
        this.cachedEvals = (0, objectStore_1.GetObjectStore)().retrieveObject("evalGlobals");
        if (!this.cachedEvals) {
            (0, objectStore_1.GetObjectStore)().storeObject("evalGlobals", this);
        }
    }
    /**
     * Merges global variables with "Quick" fields and replaces fields
     * from globals with '_' prefix if * names are matched
     * @param globalVariables Global variables of evaluator
     */
    CachedEvalHelper.prototype.MergeEvalGlobals = function (globalVariables) {
        var QVariables = this.QuickVariables();
        Object.keys(QVariables).map(function (variable) {
            if (globalVariables.hasOwnProperty(variable)) {
                globalVariables["_" + variable] = globalVariables[variable];
                delete globalVariables[variable];
            }
        });
        //globalVariables["Quick"] = QVariables;
    };
    /**
     * Defines Quick variables
     */
    CachedEvalHelper.prototype.QuickVariables = function () {
        // let Quick = {
        //     copy(object: Object) {
        //         let cloneObject = new TypeHelper().cloneObject(object);
        //         return cloneObject;
        //     },
        // }
        // return Quick;
        return {};
    };
    return CachedEvalHelper;
}());
exports.CachedEvalHelper = CachedEvalHelper;


/***/ }),

/***/ "../../common/dory/src/Managers/ConfigManager.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/ConfigManager.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigManager = void 0;
var ConfigManager = /** @class */ (function () {
    function ConfigManager(currentContext) {
        this.contextName = ConfigManager.ContextName;
        this.currentContext = currentContext;
    }
    ConfigManager.prototype.SetConfigValues = function (configValues) {
        this.configValues = configValues;
    };
    ConfigManager.prototype.GetConfigValues = function (key) {
        if (!this.configValues || this.configValues.length == 0) {
            return undefined;
        }
        return this.configValues.find(function (item) { return item.key == key; });
    };
    ConfigManager.ContextName = "ConfigManager";
    return ConfigManager;
}());
exports.ConfigManager = ConfigManager;


/***/ }),

/***/ "../../common/dory/src/Managers/DoryBasedLRManager.ts":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/DoryBasedLRManager.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryBasedLRManager = void 0;
var Evaluator_1 = __webpack_require__(/*! ./Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var HistoryManager_1 = __webpack_require__(/*! ./HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var Compressor_1 = __webpack_require__(/*! ../../../shrimp/omniScriptCompiler/Compressor */ "../../common/shrimp/omniScriptCompiler/Compressor.js");
var Lexer_1 = __webpack_require__(/*! ../../../shrimp/omniScriptCompiler/Lexer */ "../../common/shrimp/omniScriptCompiler/Lexer.js");
var Parser_1 = __webpack_require__(/*! ../../../shrimp/omniScriptCompiler/Parser */ "../../common/shrimp/omniScriptCompiler/Parser.js");
var DoryBasedLRManager = /** @class */ (function () {
    function DoryBasedLRManager(currentContext) {
        this.contextName = DoryBasedLRManager.ContextName;
        this.currentLRTypeRTL = false;
        this.RTL = "_%RTL%_";
        this.currentContext = currentContext;
        this.evaluator = new Evaluator_1.Evaluator();
    }
    Object.defineProperty(DoryBasedLRManager.prototype, "LRType", {
        get: function () {
            return this.currentLRType;
        },
        set: function (lrType) {
            this.currentLRType = lrType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoryBasedLRManager.prototype, "LRTypeRTL", {
        get: function () {
            return this.currentLRTypeRTL;
        },
        set: function (rtl) {
            if (rtl) {
                this.currentLRTypeRTL = rtl;
            }
            else {
                this.setCurrentLRTypeRTLByResourceDict();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoryBasedLRManager.prototype, "ResourceDict", {
        set: function (CLRs) {
            this.resourceDict = CLRs;
            this.setCurrentLRTypeRTLByResourceDict();
        },
        enumerable: false,
        configurable: true
    });
    DoryBasedLRManager.prototype.setCurrentLRTypeRTLByResourceDict = function () {
        var _a;
        this.currentLRTypeRTL = false;
        if (this.resourceDict && Object.keys(this.resourceDict).length > 0) {
            var globalLR = this.resourceDict[(_a = this.currentLRType) !== null && _a !== void 0 ? _a : "tr-TR"];
            if (globalLR === null || globalLR === void 0 ? void 0 : globalLR[this.RTL]) {
                this.currentLRTypeRTL = true;
            }
            ;
        }
    };
    DoryBasedLRManager.prototype.GetResource = function (_a) {
        var _b;
        var context = _a.context, key = _a.key, dataSource = _a.dataSource;
        var result;
        if (this.resourceDict && Object.keys(this.resourceDict).length > 0) {
            var globalLR = this.resourceDict[(_b = this.currentLRType) !== null && _b !== void 0 ? _b : "tr-TR"];
            result = globalLR[key];
            if (result != null) {
                var historyManager = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
                var historyItem = historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().last();
                result = this.evaluator.Evaluate({ script: result, dataSource: dataSource, context: context, lang: historyItem === null || historyItem === void 0 ? void 0 : historyItem.getQLang() });
                return result;
            }
        }
    };
    DoryBasedLRManager.prototype.ImportResourceDict = function (langCode, localization, options) {
        var _this = this;
        var _a;
        if (options === void 0) { options = {}; }
        var override = (_a = options === null || options === void 0 ? void 0 : options.overrite) !== null && _a !== void 0 ? _a : false;
        var parse = Parser_1.ParseObj.Parse;
        if (langCode && localization && Object.keys(localization).length > 0) {
            if (this.resourceDict == undefined) {
                this.resourceDict = {};
            }
            if (this.resourceDict[langCode] == undefined) {
                this.resourceDict[langCode] = {};
            }
            Object.keys(localization).forEach(function (item) {
                if (!localization[item] || localization[item].trim().length <= 0) {
                    return;
                }
                try {
                    var script = _this.addQuotesToStr(localization[item]);
                    var compressedItem = (0, Compressor_1.Compress)(parse((0, Lexer_1.Lex)(script)));
                    if (override) {
                        _this.resourceDict[langCode][item] = compressedItem;
                    }
                    else {
                        if (_this.resourceDict[langCode][item]) {
                            return;
                        }
                        _this.resourceDict[langCode][item] = compressedItem;
                    }
                }
                catch (err) {
                }
            });
        }
    };
    DoryBasedLRManager.prototype.addQuotesToStr = function (lRvalue) {
        var lRlength = lRvalue.length;
        if (0 < lRlength && ((lRvalue.charAt(0) !== "'" && lRvalue.charAt(0) !== '"') && (lRvalue.charAt(lRlength - 1) !== "'" && lRvalue.charAt(lRlength - 1) !== '"'))) {
            lRvalue = "'" + lRvalue + "'";
        }
        return lRvalue;
    };
    DoryBasedLRManager.ContextName = "DoryBasedLRManager";
    return DoryBasedLRManager;
}());
exports.DoryBasedLRManager = DoryBasedLRManager;


/***/ }),

/***/ "../../common/dory/src/Managers/DownloadManager.ts":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/DownloadManager.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadManager = void 0;
var download_1 = __webpack_require__(/*! ../../../shrimp/helpers/download */ "../../common/shrimp/helpers/download.ts");
var DownloadManager = /** @class */ (function () {
    function DownloadManager() {
        this.generalDownload = new download_1.Download();
    }
    DownloadManager.prototype.RequestHandler = function (request) {
        var formElement = document.createElement("form");
        formElement.method = request.http;
        formElement.action = request.url;
        formElement.target = "blank";
        document.body.appendChild(formElement);
        if (request.data) {
            Object.keys(request.data).map(function (val) {
                var formInput = document.createElement("input");
                formInput.value = request.data[val];
                formInput.name = val;
                formInput.type = "hidden";
                return formInput;
            }).forEach(function (formInput) { return formElement.appendChild(formInput); });
        }
        formElement.submit();
        document.body.removeChild(formElement);
    };
    return DownloadManager;
}());
exports.DownloadManager = DownloadManager;


/***/ }),

/***/ "../../common/dory/src/Managers/DynamicCompManager.ts":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/DynamicCompManager.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicCompManager = void 0;
var ElementLocation_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/ElementLocation */ "../../common/shrimp/interfaces/ComponentInterfaces/ElementLocation.ts");
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var QJsonHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/QJsonHelper */ "../../common/shrimp/helpers/QJsonHelper.ts");
var typeHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var Evaluator_1 = __webpack_require__(/*! ./Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var RenderingManager_1 = __webpack_require__(/*! ./RenderingManager */ "../../common/dory/src/Managers/RenderingManager.ts");
var DynamicCompManager = /** @class */ (function () {
    function DynamicCompManager() {
    }
    Object.defineProperty(DynamicCompManager, "itemCounter", {
        get: function () {
            return this._itemCounter;
        },
        set: function (v) {
            this._itemCounter = v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create a new component from given template json
     * @param historyItem Current history item of the rendering
     * @returns Created component collection
     */
    DynamicCompManager.createDynamicComp = function (_a) {
        var _b, _c;
        var templateCompQID = _a.templateCompQID, newCompQID = _a.newCompQID, dataSource = _a.dataSource, context = _a.context, historyItem = _a.historyItem, placeQID = _a.placeQID;
        var compJson = historyItem.getComponentJsonByCompId(templateCompQID);
        if (!compJson) {
            var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
            var engineYamlLogType = (_c = dory === null || dory === void 0 ? void 0 : (_b = dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
            logger_1.Logger.Log({ logMessage: "Component json couldn't be found in qjson", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return;
        }
        var parentComp = DynamicCompManager.renderedParentComp(historyItem, context, compJson.path);
        parentComp = placeQID ? historyItem.getCompCollectionById(placeQID) : parentComp;
        var newComponent = DynamicCompManager.createComp(historyItem, compJson.compLoc.compJson, newCompQID, parentComp, context, dataSource);
        var retVal = { newComponent: newComponent, parentComp: parentComp };
        return retVal;
    };
    DynamicCompManager.createDynamicChildren = function (_a) {
        var _this = this;
        var _b, _c;
        var parentCompId = _a.parentCompId, templateChildName = _a.templateChildName, newChildName = _a.newChildName, historyItem = _a.historyItem, context = _a.context;
        var parentCompPJson = (_c = (_b = historyItem.getComponentJsonByCompId(parentCompId)) === null || _b === void 0 ? void 0 : _b.compLoc) === null || _c === void 0 ? void 0 : _c.compJson;
        var childJson = parentCompPJson === null || parentCompPJson === void 0 ? void 0 : parentCompPJson.C[templateChildName];
        if (childJson) {
            return Object.keys(childJson.c).map(function (child) {
                var templateCompQID = childJson.c[child].P.ID.H;
                var createdComp = _this.createDynamicComp({ templateCompQID: templateCompQID, newCompQID: newChildName, context: context, historyItem: historyItem });
                return createdComp;
            }).filter(function (item) { return item != null; });
        }
    };
    DynamicCompManager.appendDynamicCreatedComp = function (_a) {
        var _b, _c;
        var _d;
        var newComponents = _a.newComponents, parentComp = _a.parentComp, context = _a.context, _e = _a.place, place = _e === void 0 ? ElementLocation_1.ElementLocation.After : _e, historyItem = _a.historyItem, childName = _a.childName;
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        historyItem.ReCalculateCompInstDict();
        var targetList = childName && parentComp ? ((_d = parentComp.children)[childName] || (_d[childName] = [])) : historyItem.controlList;
        newComponents.forEach(function (comp) {
            targetList.push(comp);
        });
        (_c = dory === null || dory === void 0 ? void 0 : (_b = dory.shellConfigs).dynamicCompHandler) === null || _c === void 0 ? void 0 : _c.call(_b, { createdComps: newComponents, compLocater: place, parentCollection: parentComp, childName: childName });
    };
    DynamicCompManager.generateCompID = function (sourceCompID, dynamicCompIdSuffix) {
        dynamicCompIdSuffix = dynamicCompIdSuffix ? dynamicCompIdSuffix : (++this.itemCounter).toString();
        return sourceCompID + "_" + dynamicCompIdSuffix;
    };
    /**
     * Deep copy the templateJson and create a new RenderingManager and render the new component
     * @param historyItem Current history item of the rendering
     * @param templateJson Template json of the new component
     * @param newCompID Creaetd component key id. New id will be: compJson.id + '_' + newCompID
     * @returns New componentcollection by new id
     */
    DynamicCompManager.createComp = function (historyItem, templateJson, newCompID, parentCompCollection, context, dataSource, overrideComp) {
        var _this = this;
        var newCompJson = new typeHelper_1.TypeHelper().cloneObject(templateJson);
        //For each comp delete render prop, so they can be rendered, and calculate their new ID
        QJsonHelper_1.QJsonHelper.ForEachComp([newCompJson], function (childCompJson) {
            _this.deletePropRender(childCompJson);
            childCompJson.P.ID.H = childCompJson._Editor.eID = DynamicCompManager.generateCompID(childCompJson.P.ID.H, newCompID);
            return true;
        });
        var rm = new RenderingManager_1.RenderingManager({
            pjson: [newCompJson], context: context, dataItem: { data: dataSource }, asChildType: parentCompCollection === null || parentCompCollection === void 0 ? void 0 : parentCompCollection.childrenType, compareCompValue: historyItem.compareCompValue,
            controlDict: historyItem.controlDict, parentCompCollection: parentCompCollection, dynamicCompIDSuffix: newCompID, qjsonVersion: historyItem.qjsonVersion
        });
        rm.Render(rm.blockInfo.blockJsonIndex);
        var newCompCollection = historyItem.getCompCollectionById(newCompJson.P.ID.H);
        return newCompCollection;
    };
    /**
     * Find the parent component which can be rendered
     * If there is no parent, return undefined
     * @param historyItem Current history item of the rendering
     * @param parentLocation Parent location to find the porent from the json
     * @returns parent component collection or undefined
     */
    DynamicCompManager.renderedParentComp = function (historyItem, context, parentLocation) {
        var _a;
        if (!parentLocation.parent) {
            return;
        }
        var parentRenderVal = new Evaluator_1.Evaluator().Evaluate({ script: (_a = parentLocation.parent.P.Render) === null || _a === void 0 ? void 0 : _a.H, context: context });
        var isParentRenderable = (parentRenderVal === null || parentRenderVal || parentRenderVal == 'true');
        if (!isParentRenderable) {
            return;
        }
        return historyItem.getCompCollectionById(parentLocation.parent.P.ID.H);
    };
    DynamicCompManager.deletePropRender = function (compJson) {
        delete compJson.P.Render;
    };
    DynamicCompManager._itemCounter = 0;
    return DynamicCompManager;
}());
exports.DynamicCompManager = DynamicCompManager;


/***/ }),

/***/ "../../common/dory/src/Managers/Evals/QsExtensions.ts":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/Evals/QsExtensions.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QsExtensions = void 0;
var Formatter_1 = __webpack_require__(/*! ../../Helpers/Formatter */ "../../common/dory/src/Helpers/Formatter.ts");
var QsExtensions = /** @class */ (function () {
    function QsExtensions() {
    }
    QsExtensions.prototype.generateExtensions = function (dory) {
        var protoTypes = {
            String: {
                length: function (stringParam) {
                    return stringParam.length;
                },
                toString: function (stringParam) {
                    return stringParam.toString();
                },
                lowerCase: function (stringParam) {
                    return stringParam.toLowerCase();
                }
            },
            Object: {
                toString: function (object) {
                    return JSON.stringify(object, null, 4);
                },
                toJSONString: function (object) {
                    return JSON.stringify(object);
                }
            },
            Array: {
                remove: function (array, index) {
                    array.splice(index, 1);
                },
                filter: function (array, operation) {
                    return array.filter(operation());
                },
                length: function (array) {
                    return array.length;
                },
                toString: function (array) {
                    return array.toString();
                }
            },
            Date: {
                toFormattedString: function (date, formatType) {
                    if (!formatType) {
                        formatType = dory.shellConfigs.formatConfiguration.dateFormat();
                    }
                    return new Formatter_1.Formatter().formatDate(date, formatType);
                },
                getDate: function (date) {
                    return new Formatter_1.Formatter().getDate(date);
                },
                toISOString: function (date) {
                    return date === null || date === void 0 ? void 0 : date.toISOString();
                },
                addDays: function (date, value) {
                    return new Formatter_1.Formatter().addDays(date, value);
                },
                addMonths: function (date, value) {
                    return new Formatter_1.Formatter().addMonths(date, value);
                },
                addYears: function (date, value) {
                    return new Formatter_1.Formatter().addYears(date, value);
                },
                getTime: function (date) {
                    return new Date(date).getTime();
                }
            },
            Number: {
                toString: function (number) {
                    return number.toString();
                },
                toFormattedString: function (number, formatType, opt) {
                    if (!formatType) {
                        formatType = dory.shellConfigs.formatConfiguration.moneyFormat();
                    }
                    return new Formatter_1.Formatter().formatNumber(number, formatType, opt);
                },
                fixed: function (number, digits) {
                    return number.toFixed(digits);
                }
            }
        };
        var stringPrototypeNameArray = Object.getOwnPropertyNames(String.prototype);
        var extensionStringKeys = Object.keys(protoTypes.String);
        var _loop_1 = function (index) {
            var protoTypeName = stringPrototypeNameArray[index];
            if (!extensionStringKeys.includes(protoTypeName)) {
                protoTypes.String[protoTypeName] = function (stringParam) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return stringParam[protoTypeName].apply(stringParam, __spreadArray([], __read(args), false));
                };
            }
        };
        for (var index = 0; index < stringPrototypeNameArray.length; index++) {
            _loop_1(index);
        }
        var objectPrototypeNameArray = Object.getOwnPropertyNames(Object.prototype);
        var extensionObjectKeys = Object.keys(protoTypes.Object);
        var _loop_2 = function (index) {
            var protoTypeName = objectPrototypeNameArray[index];
            if (!extensionObjectKeys.includes(protoTypeName)) {
                protoTypes.Object[protoTypeName] = function (objectParam) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return objectParam[protoTypeName].apply(objectParam, __spreadArray([], __read(args), false));
                };
            }
        };
        for (var index = 0; index < objectPrototypeNameArray.length; index++) {
            _loop_2(index);
        }
        var arrayPrototypeNameArray = Object.getOwnPropertyNames(Array.prototype);
        var extensionArrayKeys = Object.keys(protoTypes.Array);
        var _loop_3 = function (index) {
            var protoTypeName = arrayPrototypeNameArray[index];
            if (!extensionArrayKeys.includes(protoTypeName)) {
                protoTypes.Array[protoTypeName] = function (arrayParam) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return arrayParam[protoTypeName].apply(arrayParam, __spreadArray([], __read(args), false));
                };
            }
        };
        for (var index = 0; index < arrayPrototypeNameArray.length; index++) {
            _loop_3(index);
        }
        var datePrototypeNameArray = Object.getOwnPropertyNames(Date.prototype);
        var _loop_4 = function (index) {
            var protoTypeName = datePrototypeNameArray[index];
            if (!protoTypes.Date[protoTypeName]) {
                protoTypes.Date[protoTypeName] = function (dateParam) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return dateParam[protoTypeName].apply(dateParam, __spreadArray([], __read(args), false));
                };
            }
        };
        for (var index = 0; index < datePrototypeNameArray.length; index++) {
            _loop_4(index);
        }
        var numberPrototypeNameArray = Object.getOwnPropertyNames(Number.prototype);
        var _loop_5 = function (index) {
            var protoTypeName = numberPrototypeNameArray[index];
            if (!protoTypes.Number[protoTypeName]) {
                protoTypes.Number[protoTypeName] = function (numberParam) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return numberParam[protoTypeName].apply(numberParam, __spreadArray([], __read(args), false));
                };
            }
        };
        for (var index = 0; index < numberPrototypeNameArray.length; index++) {
            _loop_5(index);
        }
        return protoTypes;
    };
    return QsExtensions;
}());
exports.QsExtensions = QsExtensions;


/***/ }),

/***/ "../../common/dory/src/Managers/Evals/QsProxy.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/Evals/QsProxy.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QsProxyGenerator = exports.QSProxy = void 0;
var QSProxy = /** @class */ (function () {
    function QSProxy() {
        this.functionDict = {};
    }
    QSProxy.prototype.CreateMethodProxy = function (func) {
        this.functionDict.MethodProxy = func;
    };
    QSProxy.prototype.CreateAssignProxy = function (func) {
        this.functionDict.AssignProxy = func;
    };
    QSProxy.prototype.CreateGetValueProxy = function (func) {
        this.functionDict.GetValueProxy = func;
    };
    QSProxy.prototype.mountOnObject = function (mountObject) {
        mountObject["QSProxy"] = this.functionDict;
    };
    return QSProxy;
}());
exports.QSProxy = QSProxy;
var QsProxyGenerator = /** @class */ (function () {
    function QsProxyGenerator() {
    }
    QsProxyGenerator.prototype.generateProxies = function (globals, messagingManager, dory, ownerComponent) {
        var self = this;
        var storeQSProxy = new QSProxy();
        storeQSProxy.CreateAssignProxy(globals.store.set);
        storeQSProxy.CreateGetValueProxy(globals.store.get);
        storeQSProxy.mountOnObject(globals.store);
        var mmOSProxy = new QSProxy();
        mmOSProxy.CreateMethodProxy(function (eventName, parameters) { return messagingManager.Trigger({ eventName: eventName, parameters: parameters }); });
        mmOSProxy.mountOnObject(globals.MM);
        /**
         * Get current shell objects from current Dory
         * Add them into globals as their name (dory.shellObjects)
         * Call shell custom method
         *
         */
        for (var key in dory.shellConfigs.osGlobalObjects) {
            if (dory.shellConfigs.osGlobalObjects[key]) {
                var keyField = key;
                (function (field) {
                    self.globalProxyGenerator({ proxyObject: globals, objectDict: dory.shellConfigs.osGlobalObjects, fieldKey: field, ownerComp: ownerComponent });
                })(keyField);
            }
        }
    };
    QsProxyGenerator.prototype.globalProxyGenerator = function (_a) {
        var proxyObject = _a.proxyObject, objectDict = _a.objectDict, fieldKey = _a.fieldKey, ownerComp = _a.ownerComp;
        if (proxyObject.hasOwnProperty(fieldKey)) {
            return;
        }
        var shellProxy = new QSProxy();
        proxyObject[fieldKey] = {};
        var proxyFunc = function (eventName) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (objectDict[fieldKey][eventName] && objectDict[fieldKey][eventName].get == null) {
                return objectDict[fieldKey][eventName]({ ownerComp: ownerComp, parameters: args });
            }
            return null;
        };
        shellProxy.CreateAssignProxy(function (fieldName, value) {
            var _a;
            var field = objectDict[fieldKey][fieldName];
            (_a = field === null || field === void 0 ? void 0 : field.set) === null || _a === void 0 ? void 0 : _a.call(field, { ownerComp: ownerComp, parameters: value });
        });
        shellProxy.CreateGetValueProxy(function (fieldName) {
            var _a;
            var field = objectDict[fieldKey][fieldName];
            return (_a = field === null || field === void 0 ? void 0 : field.get) === null || _a === void 0 ? void 0 : _a.call(field);
        });
        shellProxy.CreateMethodProxy(proxyFunc);
        shellProxy.mountOnObject(proxyObject[fieldKey]);
    };
    return QsProxyGenerator;
}());
exports.QsProxyGenerator = QsProxyGenerator;


/***/ }),

/***/ "../../common/dory/src/Managers/Evals/TsProxy.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/Evals/TsProxy.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TSProxy = void 0;
var TSProxy = /** @class */ (function () {
    function TSProxy(_a) {
        var dory = _a.dory, globals = _a.globals;
        this.TSProxyMapping = {
            "shell": "containerServices",
        };
        this.dory = dory;
        this.globals = globals;
    }
    TSProxy.prototype.generateTsProxy = function () {
        var _this = this;
        if (this.dory && this.dory.shellConfigs.osGlobalObjects) {
            var globalObjects_1 = this.dory.shellConfigs.osGlobalObjects;
            Object.keys(globalObjects_1).forEach(function (key) {
                var _a;
                var objectName = (_a = (_this.TSProxyMapping[key])) !== null && _a !== void 0 ? _a : key;
                _this.globals[objectName] = globalObjects_1[key];
            });
            return this.globals;
        }
    };
    return TSProxy;
}());
exports.TSProxy = TSProxy;


/***/ }),

/***/ "../../common/dory/src/Managers/Evaluator.ts":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/Evaluator.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Evaluator = void 0;
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var typeHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var ElementLocation_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/ElementLocation */ "../../common/shrimp/interfaces/ComponentInterfaces/ElementLocation.ts");
var IAlert_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/IAlert */ "../../common/shrimp/interfaces/ComponentInterfaces/IAlert.ts");
var IPropSupport_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/IPropSupport */ "../../common/shrimp/interfaces/ComponentInterfaces/IPropSupport.ts");
var INavigationDemand_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/INavigationDemand */ "../../common/shrimp/interfaces/quick/INavigationDemand.ts");
var IEvaluator_1 = __webpack_require__(/*! ../../../shrimp/interfaces/Scripting/IEvaluator */ "../../common/shrimp/interfaces/Scripting/IEvaluator.ts");
var bignumber_js_1 = __webpack_require__(/*! bignumber.js */ "../../node_modules/bignumber.js/bignumber.js");
var RenderingContext_1 = __webpack_require__(/*! ../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var ResponseContext_1 = __webpack_require__(/*! ../Context/ResponseContext */ "../../common/dory/src/Context/ResponseContext.ts");
var ScopeContext_1 = __webpack_require__(/*! ../Context/ScopeContext */ "../../common/dory/src/Context/ScopeContext.ts");
var ValueContext_1 = __webpack_require__(/*! ../Context/ValueContext */ "../../common/dory/src/Context/ValueContext.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var Formatter_1 = __webpack_require__(/*! ../Helpers/Formatter */ "../../common/dory/src/Helpers/Formatter.ts");
var ComponentCollection_1 = __webpack_require__(/*! ../Model/Component/ComponentCollection */ "../../common/dory/src/Model/Component/ComponentCollection.ts");
var Decompressor_1 = __webpack_require__(/*! ../OmniScript/Decompressor */ "../../common/dory/src/OmniScript/Decompressor.ts");
var Evaluator_1 = __webpack_require__(/*! ../OmniScript/Evaluator */ "../../common/dory/src/OmniScript/Evaluator.ts");
var HistoryManager_1 = __webpack_require__(/*! ./../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var CachedEvalHelper_1 = __webpack_require__(/*! ./CachedEvalHelper */ "../../common/dory/src/Managers/CachedEvalHelper.ts");
var DoryBasedLRManager_1 = __webpack_require__(/*! ./DoryBasedLRManager */ "../../common/dory/src/Managers/DoryBasedLRManager.ts");
var DynamicCompManager_1 = __webpack_require__(/*! ./DynamicCompManager */ "../../common/dory/src/Managers/DynamicCompManager.ts");
var QsExtensions_1 = __webpack_require__(/*! ./Evals/QsExtensions */ "../../common/dory/src/Managers/Evals/QsExtensions.ts");
var QsProxy_1 = __webpack_require__(/*! ./Evals/QsProxy */ "../../common/dory/src/Managers/Evals/QsProxy.ts");
var TsProxy_1 = __webpack_require__(/*! ./Evals/TsProxy */ "../../common/dory/src/Managers/Evals/TsProxy.ts");
var HistoryItemBasedLRManager_1 = __webpack_require__(/*! ./HistoryItemBasedLRManager */ "../../common/dory/src/Managers/HistoryItemBasedLRManager.ts");
var MessagingManager_1 = __webpack_require__(/*! ./MessagingManager */ "../../common/dory/src/Managers/MessagingManager.ts");
var RequestManager_1 = __webpack_require__(/*! ./Network/RequestManager */ "../../common/dory/src/Managers/Network/RequestManager.ts");
var PropCalcContext_1 = __webpack_require__(/*! ./PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var QPromise_1 = __webpack_require__(/*! ./QPromise */ "../../common/dory/src/Managers/QPromise.ts");
var StoreManager_1 = __webpack_require__(/*! ./StoreManager */ "../../common/dory/src/Managers/StoreManager.ts");
var ValidationManager_1 = __webpack_require__(/*! ./ValidationManager */ "../../common/dory/src/Managers/ValidationManager.ts");
var flowRuntimeHelper_1 = __webpack_require__(/*! ../Helpers/flowRuntimeHelper */ "../../common/dory/src/Helpers/flowRuntimeHelper.ts");
var DownloadManager_1 = __webpack_require__(/*! ./DownloadManager */ "../../common/dory/src/Managers/DownloadManager.ts");
var BlockInfo_1 = __webpack_require__(/*! ../Context/BlockInfo */ "../../common/dory/src/Context/BlockInfo.ts");
var IExcel_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/IExcel */ "../../common/shrimp/interfaces/quick/IExcel.ts");
var INavigationManager_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/INavigationManager */ "../../common/shrimp/interfaces/quick/INavigationManager.ts");
var IPermanentStoreOperator_1 = __webpack_require__(/*! ../../../shrimp/interfaces/RenderingInterfaces/Operators/IPermanentStoreOperator */ "../../common/shrimp/interfaces/RenderingInterfaces/Operators/IPermanentStoreOperator.ts");
var javascript = { Object: Object, String: String, Math: Math, Date: Date, Number: Number, JSON: JSON };
var cacher = function (cacheFunc) {
    var retVal = {};
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var n = args[0];
        if (n in retVal) {
            return retVal[n];
        }
        else {
            var result = cacheFunc(n);
            retVal[n] = result;
            return result;
        }
    };
};
var memoized = cacher(new QsExtensions_1.QsExtensions().generateExtensions);
var handleReturn = function (cb) {
    try {
        return cb();
    }
    catch (err) {
        if (err.type != "quickReturnExc") {
            throw err;
        }
        return err.retVal;
    }
};
var globalConstants = {
    ElementLocation: ElementLocation_1.ElementLocation,
    ExcelCellType: IExcel_1.ExcelCellType,
    LogType: logger_1.LogType,
    MobileAnimation: INavigationManager_1.MobileAnimation,
};
function concatGlobalConstants(concatItems) {
    Object.keys(globalConstants).forEach(function (key) {
        return concatItems(globalConstants[key], key);
    });
}
var Evaluator = /** @class */ (function () {
    function Evaluator() {
    }
    Evaluator.prototype.Evaluate2 = function (options) {
        var page = options.pageScripting.GetPageInstance();
        if (!page) {
            return undefined;
        }
        var func = page[options.scriptName];
        if (!func) {
            return undefined;
        }
        var _a = this.prepareEvaluationItems(options.context), globals = _a.globals, responseContext = _a.responseContext, compInstDict = _a.compInstDict;
        Object.keys(IEvaluator_1.TsFilterKeysGlobals).forEach(function (key) { return delete globals[key]; }); //js :( // including this
        return func(responseContext.response, options.dataSource, globals, compInstDict);
    };
    Evaluator.prototype.Evaluate = function (_a) {
        var script = _a.script, dataSource = _a.dataSource, context = _a.context, lang = _a.lang, sourceMap = _a.sourceMap;
        if (!script) {
            return null;
        }
        if (typeof script !== "string") {
            if (lang != "FL") {
                return new typeHelper_1.TypeHelper().cloneObject(script);
            }
            return (0, flowRuntimeHelper_1.triggerFlow)(context, script, dataSource, { getFormData: getFormData, requestAsync: requestAsync, go: go, alert: alert });
        }
        var _b = this.prepareEvaluationItems(context), globals = _b.globals, responseContext = _b.responseContext, compInstDict = _b.compInstDict, messagingManager = _b.messagingManager, dory = _b.dory, lastHistory = _b.lastHistory, ownerComponent = _b.ownerComponent;
        switch (lang) {
            case "JS":
                // const thisContext = globals.this; // backup this before deletion
                Object.keys(IEvaluator_1.TsFilterKeysGlobals).forEach(function (key) { return delete globals[key]; }); //js :( // including this
                var keys_1 = ["null", "exports", "Promise", "response"]; // first one is this context in new Function(...) -> new (Function.apply(["null", ...])) -> new Function.prototype.bind.apply(Function, ["null", ...])
                var exports_1 = {};
                var values_1 = [exports_1, QPromise_1.QPromise, responseContext.response];
                var concatItems = function (object, globalKey) {
                    var item = object || {};
                    if (!globalKey) {
                        Object.keys(item).forEach(function (key) {
                            keys_1.push(key);
                            values_1.push(item[key]);
                        });
                    }
                    else {
                        keys_1.push(globalKey);
                        values_1.push(item);
                    }
                };
                concatItems(dataSource);
                concatItems(globals, "quick");
                concatGlobalConstants(concatItems);
                concatItems(compInstDict, "components");
                if (script.indexOf("//# sourceMappingURL=data:application/json;base64") > -1) {
                    keys_1.push("script");
                    values_1.push(script);
                    keys_1.push("return eval(script);");
                }
                else {
                    keys_1.push(script);
                }
                new TsProxy_1.TSProxy({ dory: dory, globals: globals }).generateTsProxy();
                var func_1 = new (Function.prototype.bind.apply(Function, keys_1))();
                return handleReturn(function () { return func_1.apply(Object.create(null), values_1); });
            case "QS":
            default:
                new QsProxy_1.QsProxyGenerator().generateProxies(globals, messagingManager, dory, ownerComponent);
                var extensions_1 = memoized(dory);
                var forest_1 = new Decompressor_1.Decompressor().Decompress(script);
                return handleReturn(function () { return (0, Evaluator_1.Eval)(forest_1, responseContext.response, dataSource, globals, compInstDict, extensions_1, context); });
        }
    };
    Evaluator.prototype.prepareEvaluationItems = function (context) {
        var messagingManager = new MessagingManager_1.MessagingManager(context);
        var historyManager = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var lastHistory = historyManager ? historyManager.currentLevel().last() : null;
        var compInstDict = lastHistory && lastHistory.GetCompInstDict();
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        var renderingContext = context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        var ownerComponent = renderingContext && renderingContext.ownerComponent;
        var cachedEvalHelper = new CachedEvalHelper_1.CachedEvalHelper();
        var globals = this.createGlobal({ messagingManager: messagingManager, context: context, dory: dory, ownerComponent: ownerComponent, lastHistory: lastHistory, historyManager: historyManager });
        cachedEvalHelper.MergeEvalGlobals(globals);
        var responseContext = context.GetItemSingle(ResponseContext_1.ResponseContext.ContextName);
        return { globals: globals, responseContext: responseContext, compInstDict: compInstDict, messagingManager: messagingManager, dory: dory, lastHistory: lastHistory, ownerComponent: ownerComponent };
    };
    Evaluator.prototype.createGlobal = function (_a) {
        var _this = this;
        var _b, _c;
        var messagingManager = _a.messagingManager, context = _a.context, dory = _a.dory, ownerComponent = _a.ownerComponent, lastHistory = _a.lastHistory, historyManager = _a.historyManager;
        var self = this;
        var storeManager = new StoreManager_1.StoreManager(context);
        var scopeContext = (context.GetItemSingle(ScopeContext_1.ScopeContext.ContextName));
        var valueContext = context.GetItemSingle(ValueContext_1.ValueContext.ContextName);
        var engineYamlLogType = (_c = (_b = dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
        var globals = {
            Request: {
                async: function (requestObject) { return requestAsync(dory, context, requestObject); },
                download: function (requestObject) {
                    if (!dory.isEditorInEditState) {
                        var reqManager = new DownloadManager_1.DownloadManager();
                        reqManager.RequestHandler(requestObject);
                    }
                },
            },
            MM: {
                get: function (eventName) {
                    return messagingManager === null || messagingManager === void 0 ? void 0 : messagingManager.Get(eventName);
                },
                trigger: function (eventName, parameters) {
                    return messagingManager === null || messagingManager === void 0 ? void 0 : messagingManager.Trigger({ eventName: eventName, parameters: parameters });
                },
                delay: function (eventName, parameters) {
                    var timer = setTimeout(function () { var _a; return messagingManager === null || messagingManager === void 0 ? void 0 : messagingManager.Trigger({ eventName: eventName, parameters: (_a = parameters === null || parameters === void 0 ? void 0 : parameters.options) !== null && _a !== void 0 ? _a : parameters }); }, parameters === null || parameters === void 0 ? void 0 : parameters.delayTime);
                    return timer;
                },
                clearTimeout: function (timer) {
                    clearTimeout(timer);
                },
            },
            Math: {
                floor: Math.floor,
                random: function (min, max) {
                    return min + Math.floor(Math.random() * Math.floor(max - min + 1));
                },
                findIndex: function (array, searchKey, seacrhString) {
                    return array.findIndex(function (i) { return i[searchKey] == seacrhString; });
                },
                round: function (roundNumber, indexToSplit) {
                    var classedNumber = Number(roundNumber);
                    var fixedNumber = classedNumber.toFixed(indexToSplit);
                    return Number(fixedNumber);
                },
            },
            EM: {
                trace: function (traceMessage, options) {
                    var _a, _b;
                    var yamlLogType = (_b = (_a = dory.shellConfigs).getYamlLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
                    logger_1.Logger.Log({ logType: (options === null || options === void 0 ? void 0 : options.logType) || logger_1.LogType.Trace, logMessage: traceMessage, backgroundColor: "green", textColor: "white", source: "model", isClientLog: true, yamlLogType: yamlLogType });
                },
            },
            currentPage: {
                isRenderCompleted: function () {
                    return dory.isRenderCompleted;
                },
            },
            LR: function (key, dataSource) {
                //return dory.shellConfigs.lridHelper ? dory.shellConfigs.lridHelper(label) : null
                var historyItemBasedLRManager = context.GetItemSingle(HistoryItemBasedLRManager_1.HistoryItemBasedLRManager.ContextName);
                return historyItemBasedLRManager === null || historyItemBasedLRManager === void 0 ? void 0 : historyItemBasedLRManager.GetResource({ key: key, dataSource: dataSource });
            },
            importLocalization: function (langCode, localization, options) {
                if (options === void 0) { options = {}; }
                var doryBasedLRManager = context.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName);
                doryBasedLRManager === null || doryBasedLRManager === void 0 ? void 0 : doryBasedLRManager.ImportResourceDict(langCode, localization, options);
            },
            go: function () {
                var _a;
                var _b, _c;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (dory.isEditorInEditState) {
                    logger_1.Logger.Log({ logMessage: "editor is not going anywhere in edit state", logType: logger_1.LogType.Debug });
                    return;
                }
                var createrComp = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).getCreaterRenderingComponent();
                if ((createrComp === null || createrComp === void 0 ? void 0 : createrComp.compType) === "RenderingComponent" && ((_b = createrComp === null || createrComp === void 0 ? void 0 : createrComp.component) === null || _b === void 0 ? void 0 : _b.RenderGo)) {
                    return (_c = createrComp === null || createrComp === void 0 ? void 0 : createrComp.component) === null || _c === void 0 ? void 0 : _c.RenderGo.apply(_c, __spreadArray([], __read(args), false));
                }
                return dory.shellConfigs.go ? (_a = dory.shellConfigs).go.apply(_a, __spreadArray([], __read(args), false)) : null;
            },
            regex: function (value) {
                return RegExp(value);
            },
            typeOf: function (value) {
                return typeof value;
            },
            getComponent: function (compID) {
                var _a, _b, _c;
                var compInstance = dory.GetComponentCollectionByID(compID) === undefined ? null : dory.GetComponentCollectionByID(compID).component;
                compInstance = compInstance !== null && compInstance !== void 0 ? compInstance : (_b = (_a = dory.shellConfigs).getComponent) === null || _b === void 0 ? void 0 : _b.call(_a, { compID: compID });
                if (!compInstance) {
                    compInstance = (_c = dory.GetSubComponentCollectionByID(compID)) === null || _c === void 0 ? void 0 : _c.component;
                }
                return compInstance;
            },
            setFormData: function (compCol) {
                var compCollection = dory.GetComponentCollection();
                if (compCollection) {
                    Object.keys(compCol).forEach(function (compName) {
                        if (compCollection && compCollection[compName]) {
                            dory.shellConfigs.setComponentValue(compCollection[compName], compCol[compName]);
                        }
                    });
                }
            },
            getArrangedNestedData: function (obj, pairChar) {
                var baseString = "";
                var mapObj = {};
                var tempObj = {};
                var traverse = function (obj) {
                    Object.keys(obj).forEach(function (key) {
                        if (typeof obj[key] == "object") {
                            baseString += key + pairChar;
                            for (var val in obj[key]) {
                                if (typeof obj[key][val] != "object") {
                                    tempObj[baseString + val] = obj[key][val];
                                    mapObj = __assign(__assign({}, mapObj), tempObj);
                                    delete obj[key][val];
                                    tempObj = {};
                                }
                            }
                            traverse(obj[key]);
                        }
                        else {
                            baseString != "" ? (tempObj[baseString + key] = obj[key]) : (tempObj[key] = obj[key]);
                            mapObj = __assign(__assign({}, mapObj), tempObj);
                            tempObj = {};
                        }
                    });
                    baseString = "";
                };
                traverse(obj);
                return mapObj;
            },
            getFormData: function (componentQID) {
                return getFormData(dory, componentQID);
            },
            getArrangedFormData: function (formData, pairChar) {
                var CompObj = {};
                var TempObj = {};
                var isPlainObject = function (obj) {
                    return !!obj && obj.constructor === {}.constructor;
                };
                var getNestedObject = function (formData) {
                    return Object.entries(formData).reduce(function (result, _a) {
                        var _b = __read(_a, 2), prop = _b[0], val = _b[1];
                        prop.split(pairChar).reduce(function (nestedResult, prop, propIndex, propArray) {
                            var lastProp = propIndex === propArray.length - 1;
                            if (lastProp) {
                                nestedResult[prop] = isPlainObject(val) ? getNestedObject(val) : val;
                            }
                            else {
                                nestedResult[prop] = nestedResult[prop] || {};
                            }
                            return nestedResult[prop];
                        }, result);
                        return result;
                    }, {});
                };
                Object.keys(formData).forEach(function (key) {
                    if (key.includes(pairChar)) {
                        TempObj[key] = formData[key];
                        var tempNestedObj = getNestedObject(TempObj);
                        CompObj = self.mergeDeep(CompObj, tempNestedObj);
                        TempObj = {};
                    }
                    else {
                        TempObj[key] = formData[key];
                        CompObj = __assign(__assign({}, CompObj), TempObj);
                        TempObj = {};
                    }
                });
                return CompObj;
            },
            cryptography: {
                generateKeyPair: function () {
                    var _a, _b;
                    return (_b = (_a = dory.shellConfigs) === null || _a === void 0 ? void 0 : _a.cryptoGenerateKeyPair) === null || _b === void 0 ? void 0 : _b.call(_a);
                },
                store: function (keyPair) {
                    var _a, _b;
                    return (_b = (_a = dory.shellConfigs) === null || _a === void 0 ? void 0 : _a.cryptoStore) === null || _b === void 0 ? void 0 : _b.call(_a, keyPair);
                },
                hash: {
                    sha512: function (value) {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs) === null || _a === void 0 ? void 0 : _a.cryptoSha512) === null || _b === void 0 ? void 0 : _b.call(_a, value);
                    },
                },
                sign: function (value, privateKey, options) {
                    var _a, _b;
                    return (_b = (_a = dory.shellConfigs) === null || _a === void 0 ? void 0 : _a.cryptoSign) === null || _b === void 0 ? void 0 : _b.call(_a, value, privateKey, options);
                },
            },
            encoding: {
                atob: function (encodedString) {
                    return atob === null || atob === void 0 ? void 0 : atob(encodedString);
                },
                btoa: function (stringToEncode) {
                    return btoa === null || btoa === void 0 ? void 0 : btoa(stringToEncode);
                },
            },
            Quick: {
                // set region yazılacak
                //get tüm region yazılacak
                //get currentregion yazılacak
                host: {
                    trigger: function (functionName, params) {
                        var _a, _b;
                        //trigger( "startMiniApp", {applicainId :"dasd", x:5});
                        var pageNameArray = HistoryManager_1.HistoryManager.traverseUpwards([], lastHistory);
                        return (_b = (_a = dory.shellConfigs).hostTrigger) === null || _b === void 0 ? void 0 : _b.call(_a, functionName, params, pageNameArray);
                    },
                },
                region: {
                    setRegion: function (regionName) {
                        var _a, _b;
                        (_b = (_a = dory.shellConfigs).setRegion) === null || _b === void 0 ? void 0 : _b.call(_a, regionName);
                        dory.ReRender();
                    },
                    getRegionList: function () {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).getRegionList) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    getCurrentRegion: function () {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).getCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    getFormattingDefinitionByCurrentRegion: function () {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                },
                getCurrentPosition: function () {
                    var _a, _b;
                    return (_b = (_a = dory.shellConfigs).getCurrentPosition) === null || _b === void 0 ? void 0 : _b.call(_a);
                },
                platform: {
                    isMobile: function () {
                        return dory.platformType == "iOS" || dory.platformType == "Android" ? true : false;
                    },
                    isWeb: function () {
                        return dory.platformType == "Web" ? true : false;
                    },
                    getPlatformType: function () {
                        return dory.platformType;
                    },
                    getDeviceId: function () {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs.platform) === null || _a === void 0 ? void 0 : _a.getDeviceId) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                },
                theme: {
                    setTheme: function (themeName, isLight) {
                        var _a, _b;
                        lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.themeConfiguration(context, themeName, isLight);
                        (_b = (_a = dory.shellConfigs).setTheme) === null || _b === void 0 ? void 0 : _b.call(_a, themeName);
                    },
                    getThemeList: function () {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).getThemeList) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    addTheme: function (themeName) {
                        var _a, _b;
                        (_b = (_a = dory.shellConfigs).addTheme) === null || _b === void 0 ? void 0 : _b.call(_a, themeName);
                    },
                    removeTheme: function (themeName) {
                        var _a, _b;
                        (_b = (_a = dory.shellConfigs).removeTheme) === null || _b === void 0 ? void 0 : _b.call(_a, themeName);
                    },
                },
                back: function () {
                    var _a, _b;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var argControl = args && args.length >= 1 && Object.keys(args[0]).length >= 1 && args[0].withoutOverride;
                    return argControl ? dory.goHistoryBack({}) : dory.shellConfigs.triggerPreviousPage ? (_b = (_a = dory.shellConfigs).triggerPreviousPage) === null || _b === void 0 ? void 0 : _b.call(_a, args) : dory.goHistoryBack({});
                },
                goHistory: function (step) {
                    var navigationDemandType = INavigationDemand_1.INavigationDemandType.back;
                    if (step > 0) {
                        navigationDemandType = INavigationDemand_1.INavigationDemandType.forward;
                    }
                    var ownerHistoryManager = lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.getOwnerHistoryManager();
                    if (ownerHistoryManager)
                        navigationDemandType == INavigationDemand_1.INavigationDemandType.back ? ownerHistoryManager.Back({ step: step, ownerHistoryManager: ownerHistoryManager }) : ownerHistoryManager.Forward({ step: step, ownerHistoryManager: ownerHistoryManager });
                },
                go: function (qjsonPath, options) { return go(context, dory, qjsonPath, options); },
                goNative: function (_a) {
                    var _b;
                    var code = _a.code, param = _a.param;
                    ((_b = dory.shellConfigs.shellGlobalMethods) === null || _b === void 0 ? void 0 : _b.goNative) && dory.shellConfigs.shellGlobalMethods.goNative({ code: code, param: param });
                },
                redirect: function (url, options) {
                    dory.shellConfigs.redirect && dory.shellConfigs.redirect({ url: url, options: options });
                },
                performance: function () {
                    return (dory.shellConfigs.performance && dory.shellConfigs.performance());
                },
                copy: function (object) {
                    var cloneObject = new typeHelper_1.TypeHelper().cloneObject(object);
                    return cloneObject;
                },
                setComponentsProperty: function (compId, propertyName, propertyValue) {
                    var _a, _b, _c;
                    var compCollection = dory.GetComponentCollectionByID(compId);
                    var compSubCollection;
                    if (!compCollection) {
                        compSubCollection = (_a = dory.GetComponentSubCollection()) === null || _a === void 0 ? void 0 : _a.find(function (collection) { return collection.compId == compId; });
                    }
                    (_c = (_b = dory.shellConfigs).setComponentsProperty) === null || _c === void 0 ? void 0 : _c.call(_b, compCollection || compSubCollection, propertyName, propertyValue);
                },
                download: function (responseFile) {
                    var _a, _b, _c;
                    return (_c = (_b = (_a = dory.shellConfigs).downloadHandler) === null || _b === void 0 ? void 0 : _b.call(_a, responseFile)) !== null && _c !== void 0 ? _c : false;
                },
                isObject: function (obj) {
                    return obj && typeof obj === "object" && !Array.isArray(obj);
                },
                validation: {
                    required: function (message) { return new ValidationManager_1.ValidationManager(context).required(message); },
                    minLength: function (minLenght, message, options) { return new ValidationManager_1.ValidationManager(context).minLength(minLenght, message, options); },
                    maxLength: function (maxLenght, message, options) { return new ValidationManager_1.ValidationManager(context).maxLength(maxLenght, message, options); },
                    email: function (message) { return new ValidationManager_1.ValidationManager(context).email(message); },
                    iban: function (message) { return new ValidationManager_1.ValidationManager(context).iban(message, false); },
                    IBANNumOnly: function (message) { return new ValidationManager_1.ValidationManager(context).iban(message, true); },
                    regex: function (regexVal, message) { return new ValidationManager_1.ValidationManager(context).regex(regexVal, message); },
                    tckn: function (message) { return new ValidationManager_1.ValidationManager(context).tckn(message); },
                    vkn: function (message) { return new ValidationManager_1.ValidationManager(context).vkn(message); },
                },
                validate: function (compEID, displayAlertBox, displayError) {
                    return new ValidationManager_1.ValidationManager(context).validate(compEID, displayAlertBox, displayError);
                },
                validateAll: function (displayAlertBox, displayError) {
                    return new ValidationManager_1.ValidationManager(context).validateAll(displayAlertBox, displayError);
                },
                resetValidation: function (compEID) {
                    return new ValidationManager_1.ValidationManager(context).resetValidation(compEID);
                },
                reset: function (compEID) {
                    return new ValidationManager_1.ValidationManager(context).reset(compEID);
                },
                createChildren: function (_a) {
                    var parentCompQId = _a.parentCompQId, templateChildName = _a.templateChildName, newChildName = _a.newChildName;
                    // let parentCompPJson = lastHistory!.getComponentJsonByCompId(parentCompQId);
                    var createdComps = DynamicCompManager_1.DynamicCompManager.createDynamicChildren({ templateChildName: templateChildName, parentCompId: parentCompQId, newChildName: newChildName, historyItem: lastHistory, context: context, });
                    var retVal = createdComps === null || createdComps === void 0 ? void 0 : createdComps.map(function (createdComp) { return createdComp.newComponent; });
                    var appendTo = newChildName ? newChildName : templateChildName;
                    DynamicCompManager_1.DynamicCompManager.appendDynamicCreatedComp({ newComponents: retVal, context: context, historyItem: lastHistory, parentComp: createdComps[0].parentComp, childName: appendTo, });
                    return retVal;
                },
                createComponent: function (_a) {
                    var templateCompQID = _a.templateCompQID, newCompQID = _a.newCompQID, dataSource = _a.dataSource, place = _a.place, placeQID = _a.placeQID, childName = _a.childName;
                    if (!templateCompQID || !newCompQID) {
                        logger_1.Logger.Log({ logMessage: "Check TemplateCompQID: " + templateCompQID + " and newCompQID: " + newCompQID, minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    var createdComp = DynamicCompManager_1.DynamicCompManager.createDynamicComp({ newCompQID: newCompQID, templateCompQID: templateCompQID, dataSource: dataSource, context: context, historyItem: lastHistory, placeQID: placeQID, });
                    if (!createdComp) {
                        return;
                    }
                    DynamicCompManager_1.DynamicCompManager.appendDynamicCreatedComp({ newComponents: [createdComp.newComponent], context: context, historyItem: lastHistory, parentComp: createdComp.parentComp, place: place, childName: childName || "default", });
                    return createdComp.newComponent.component;
                },
                deleteComponent: function (componentInstance) {
                    var _a, _b, _c;
                    var compCollection = (lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.GetCompCollectionByCompInst(componentInstance)) || componentInstance;
                    (_b = (_a = dory.shellConfigs).deleteComponent) === null || _b === void 0 ? void 0 : _b.call(_a, compCollection);
                    if (!((_c = compCollection) === null || _c === void 0 ? void 0 : _c.compId)) {
                        logger_1.Logger.Log({ logType: logger_1.LogType.Warning, logMessage: "Component couldn' t be found at the current page", minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.destroyCollection(compCollection);
                },
                findCreateComponentRelative: function (sourceComp, targetCompID) {
                    var historyItem = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).currentLevel().last();
                    return historyItem.FindCreateComponentRelative(sourceComp, targetCompID);
                },
                bind: function (_a) {
                    var bindedObject = _a.bindedObject, fields = _a.fields;
                    var propManager = context.GetItemSingle(PropCalcContext_1.PropCalcContext.ContextName);
                    if (bindedObject != IPropSupport_1.IPropSupport.store) {
                        logger_1.Logger.Log({ logMessage: "Object is not supported yet", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    if (!fields) {
                        logger_1.Logger.Log({ logMessage: "Provide fields to be binded", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    var typeHelper = new typeHelper_1.TypeHelper();
                    if (!typeHelper.isArray(fields)) {
                        logger_1.Logger.Log({ logMessage: "Object is not supported yet", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    if (typeHelper.isArray(fields)) {
                        fields.forEach(function (field) {
                            var storeContextItems = storeManager.getTargetStore(field);
                            propManager === null || propManager === void 0 ? void 0 : propManager.watch(storeContextItems.targetStoreContext, storeContextItems.targetFieldName);
                        });
                    }
                },
                setLanguage: function (LRType) {
                    if (dory.isEditorInEditState) {
                        return;
                    } // stop setLang in messaging preRender
                    return dory.SetLRType(LRType);
                },
                getLanguage: function () {
                    return dory.GetLRType();
                },
                updateComponent: function (Comp) {
                    return Comp === null || Comp === void 0 ? void 0 : Comp.$forceUpdate();
                },
                exportToXlsx: function (excelFile) {
                    var _a, _b;
                    (_b = (_a = dory.shellConfigs).exportToXlsxHandler) === null || _b === void 0 ? void 0 : _b.call(_a, excelFile);
                },
                toLongDate: function (date, formatType) {
                    var _a, _b;
                    if (!formatType) {
                        formatType = "DD.MM.YYYY HH:MM";
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        if (reg != undefined) {
                            formatType = reg.longDateFormat.value;
                        }
                        // formatType = dory.shellConfigs.getFormattingDefinitionByCurrentRegion?.()!.longDateFormat.value ?? "DD.MM.YYYY HH:MM";
                    }
                    return new Formatter_1.Formatter().dateToFormattedString(date, formatType);
                },
                toShortDate: function (date, formatType) {
                    var _a, _b;
                    if (!formatType) {
                        formatType = "DD.MM.YYYY";
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        if (reg != undefined) {
                            formatType = reg.shortDateFormat.value;
                        }
                        // formatType = dory.shellConfigs.getFormattingDefinitionByCurrentRegion?.()!.shortDateFormat.value ?? "DD.MM.YYYY";
                    }
                    return new Formatter_1.Formatter().dateToFormattedString(date, formatType);
                },
                toLongTime: function (date, formatType) {
                    var _a, _b;
                    if (!formatType) {
                        formatType = "HH:MM:SS";
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        if (reg != undefined) {
                            formatType = reg.longTimeFormat.value;
                        }
                        // formatType = dory.shellConfigs.getFormattingDefinitionByCurrentRegion?.()!.longTimeFormat.value ?? "HH:MM:SS";
                    }
                    return new Formatter_1.Formatter().dateToFormattedString(date, formatType);
                },
                toShortTime: function (date, formatType) {
                    var _a, _b;
                    if (!formatType) {
                        formatType = "HH:MM";
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        if (reg != undefined) {
                            formatType = reg.shortTimeFormat.value;
                        }
                        // formatType = dory.shellConfigs.getFormattingDefinitionByCurrentRegion?.()!.shortTimeFormat.value ?? "HH:MM";
                    }
                    return new Formatter_1.Formatter().dateToFormattedString(date, formatType);
                },
                toDate: function (dateString, formatType) {
                    var _a, _b;
                    if (!formatType) {
                        formatType = "DDMMYYYY";
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        if (reg != undefined) {
                            formatType = reg.displayDateFormat.value;
                        }
                        // formatType = dory.shellConfigs.getFormattingDefinitionByCurrentRegion?.()!.displayDateFormat.value ?? "DDMMYYYY";
                    }
                    return new Formatter_1.Formatter().toDate(dateString, formatType);
                },
                dateFromNow: function (dateString, formatType) {
                    var _a, _b;
                    if (!formatType) {
                        formatType = "DDMMYYYY";
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        if (reg != undefined) {
                            formatType = reg.displayDateFormat.value;
                        }
                    }
                    return new Formatter_1.Formatter().dateFromNow(dateString, formatType, dory.GetLRType());
                },
                toMoney: function (number, formatType, opt, bigDecimal) {
                    var _a, _b;
                    var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                    if (!formatType) {
                        formatType = "tr-TR";
                        if (reg != undefined) {
                            formatType = reg.moneyFormat.value;
                        }
                    }
                    if (!opt) {
                        var digits = reg === null || reg === void 0 ? void 0 : reg.digits.value;
                        if (digits !== undefined) {
                            opt = { minimumFractionDigits: +digits };
                        }
                    }
                    if (bigDecimal) {
                        return new Formatter_1.Formatter().formatBigNumber(number, formatType);
                    }
                    return new Formatter_1.Formatter().formatNumber(number, formatType, opt);
                },
                toDecimal: function (value, radixPoint) {
                    var _a, _b;
                    // Return 0 as-is if value is undefined:
                    if (!value) {
                        return 0;
                    }
                    // Default radix point comes from settings, but could be set to eg. "." in opts:
                    if (!radixPoint) {
                        var reg = (_b = (_a = dory.shellConfigs).getFormattingDefinitionByCurrentRegion) === null || _b === void 0 ? void 0 : _b.call(_a);
                        var radixPointValue = reg === null || reg === void 0 ? void 0 : reg.radixPoint.value;
                        if (radixPointValue !== undefined) {
                            radixPoint = radixPointValue;
                        }
                    }
                    if (!radixPoint) {
                        radixPoint = "";
                    }
                    // Build regex to strip out everything except digits, radix point and minus sign:
                    var regex = new RegExp("[^0-9-" + radixPoint + "]", "g");
                    value = value
                        .replace(/\((?=\d+)(.*)\)/, "-$1") // replace bracketed values with negatives
                        .replace(regex, ""); // strip out any cruft
                    var unformatted = radixPoint ? parseFloat(value.replace(radixPoint, ".")) : parseFloat(value); // make sure decimal point is standard
                    // This will fail silently which may cause trouble, let's wait and see:
                    return !isNaN(unformatted) ? unformatted : 0;
                },
                toBigNumber: function (value) {
                    return new bignumber_js_1.BigNumber(value);
                },
                setComponentClass: function (componentInstance, classes) {
                    var _a, _b;
                    var compCollection = lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.GetCompCollectionByCompInst(componentInstance);
                    if (!compCollection || !classes) {
                        return;
                    }
                    (_b = (_a = dory.shellConfigs).setComponentClass) === null || _b === void 0 ? void 0 : _b.call(_a, compCollection, classes);
                },
                setPageTitle: function (value) {
                    var _a, _b;
                    return dory.editor ? undefined : (_b = (_a = dory.shellConfigs).setPageTitle) === null || _b === void 0 ? void 0 : _b.call(_a, value);
                },
                copyToClipboard: function (value) {
                    dory.shellConfigs.copyToClipboard && dory.shellConfigs.copyToClipboard(value);
                },
                get dm() {
                    return valueContext;
                },
                // dm: valueContext,
                getEditor: function () {
                    return dory.editor;
                },
                get isEditMode() {
                    return dory.isEditorInEditState;
                },
                // isEditMode: dory.isEditorInEditState,
                getComponentIdByInstance: function (componentInstance) {
                    var compCollection = lastHistory === null || lastHistory === void 0 ? void 0 : lastHistory.GetCompCollectionByCompInst(componentInstance);
                    if (!compCollection) {
                        logger_1.Logger.Log({ logType: logger_1.LogType.Warning, logMessage: "Component couldn' t be found at the current page", minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    return compCollection.compId;
                },
                screen: {
                    get XOffset() {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).XOffset) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    get YOffset() {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).YOffset) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    intoView: function (component) {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).scrollIntoView) === null || _b === void 0 ? void 0 : _b.call(_a, component);
                    },
                    toTop: function () {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).toTop) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    scrollIntoView: function (component) {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).scrollIntoView) === null || _b === void 0 ? void 0 : _b.call(_a, component);
                    }
                },
                environment: {
                    get variable() {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).getEnvironmentVariable) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                    // variable: dory.shellConfigs.getEnvironmentVariable?.()
                },
                yamlLogType: {
                    get yamlLogType() {
                        var _a, _b;
                        return (_b = (_a = dory.shellConfigs).getYamlLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
                    },
                },
                loading: {
                    show: function () {
                        var _a;
                        (_a = dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.loadingOperator.showLoading(true);
                    },
                    hide: function () {
                        var _a;
                        (_a = dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.loadingOperator.showLoading(false);
                    }
                },
                render: {
                    block: function () {
                        var blockInfo = context.GetItemSingle(BlockInfo_1.BlockInfo.ContextName);
                        blockInfo === null || blockInfo === void 0 ? void 0 : blockInfo.addManualPromise();
                    },
                    resume: function () {
                        var blockInfo = context.GetItemSingle(BlockInfo_1.BlockInfo.ContextName);
                        blockInfo === null || blockInfo === void 0 ? void 0 : blockInfo.resolveManualPromise();
                    },
                },
                authentication: {
                    getIamToken: function () {
                        var _a, _b, _c;
                        return (_c = (_b = (_a = dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.authenticationOperator) === null || _b === void 0 ? void 0 : _b.getIamToken) === null || _c === void 0 ? void 0 : _c.call(_b);
                    }
                },
                network: {
                    get isConnected() {
                        var _a, _b, _c;
                        return (_c = (_b = (_a = dory.shellConfigs).getNetworkConnection) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : false;
                    },
                },
                config: {
                    get: function (key) {
                        var _a;
                        return (_a = dory.GetConfigValues(key)) === null || _a === void 0 ? void 0 : _a.value;
                    }
                },
            },
            sso: {
                start: function (_a) {
                    var clientId = _a.clientId, authorizeEndpoint = _a.authorizeEndpoint, redirectUri = _a.redirectUri, scope = _a.scope;
                    var codeVerifier = self.generateRandomString(64);
                    var state = self.generateRandomString(32);
                    if (!scope || !clientId) {
                        var error = "scope or clientid is missing";
                        logger_1.Logger.Log({ logMessage: error, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType, });
                        return;
                    }
                    self.generateCodeChallenge(codeVerifier).then(function (codeChallenge) {
                        var _a;
                        if (!((_a = dory.shellConfigs.storeAccess) === null || _a === void 0 ? void 0 : _a.setSessionStorage)) {
                            logger_1.Logger.Log({ logMessage: "storeAccess NotImplemented", logType: logger_1.LogType.Error, });
                            return;
                        }
                        dory.shellConfigs.storeAccess.setSessionStorage({ key: "code_verifier", value: codeVerifier, });
                        dory.shellConfigs.storeAccess.setSessionStorage({ key: "state", value: state, });
                        dory.shellConfigs.storeAccess.setSessionStorage({ key: "clientId", value: clientId, });
                        var urlParams = { response_type: "code", client_id: clientId, code_challenge_method: "S256", code_challenge: codeChallenge, scope: scope, redirect_uri: redirectUri, state: state, };
                        if (!dory.shellConfigs.redirectTo) {
                            logger_1.Logger.Log({ logMessage: "redirectTo NotImplemented", logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType, });
                            return;
                        }
                        var suffix = authorizeEndpoint.indexOf("?") > -1 ? authorizeEndpoint.endsWith("&") ? "" : "&" : "?";
                        var url = authorizeEndpoint + suffix + self.urlConcat(urlParams);
                        dory.shellConfigs.redirectTo({ url: url });
                    });
                },
                validate: function (_a) {
                    var _b, _c, _d, _e, _f, _g, _h;
                    var urlParams = _a.urlParams, tokenEndpoint = _a.tokenEndpoint, type = _a.type, onSuccess = _a.onSuccess, onFail = _a.onFail;
                    var ownerComp = (_b = context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName)) === null || _b === void 0 ? void 0 : _b.ownerComponent;
                    if (!urlParams["code"]) {
                        var error = "urlParams code not exist";
                        logger_1.Logger.Log({ logMessage: error, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType, });
                        ownerComp === null || ownerComp === void 0 ? void 0 : ownerComp.events.Trigger({ eventName: onFail, eventArguments: { error: error }, });
                        return;
                    }
                    if (!urlParams["state"]) {
                        var error = "state not exist";
                        logger_1.Logger.Log({ logMessage: error, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType, });
                        ownerComp === null || ownerComp === void 0 ? void 0 : ownerComp.events.Trigger({ eventName: onFail, eventArguments: { error: error }, });
                        return;
                    }
                    if (!dory.shellConfigs.network || !((_c = dory.shellConfigs.storeAccess) === null || _c === void 0 ? void 0 : _c.getItemFromSessionStorage)) {
                        var error = "network or storeAccess NotImplemented";
                        logger_1.Logger.Log({ logMessage: error, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType, });
                        //ownerComp?.events.Trigger({ eventName: onFail, eventArguments: { error } });
                        return;
                    }
                    var state = (_d = dory.shellConfigs.storeAccess) === null || _d === void 0 ? void 0 : _d.getItemFromSessionStorage({ key: "state", });
                    if (urlParams["state"] != state) {
                        var error = "state not matched";
                        logger_1.Logger.Log({ logMessage: error, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType, });
                        ownerComp === null || ownerComp === void 0 ? void 0 : ownerComp.events.Trigger({ eventName: onFail, eventArguments: { error: error }, });
                        return;
                    }
                    var body = {
                        client_id: (_e = dory.shellConfigs.storeAccess) === null || _e === void 0 ? void 0 : _e.getItemFromSessionStorage({ key: "clientId" }),
                        code_verifier: (_f = dory.shellConfigs.storeAccess) === null || _f === void 0 ? void 0 : _f.getItemFromSessionStorage({ key: "code_verifier" }),
                        grant_type: "authorization_code",
                        redirect_uri: (_h = (_g = dory.shellConfigs).getUrl) === null || _h === void 0 ? void 0 : _h.call(_g, { noQueryString: true }),
                        type: type,
                        code: urlParams["code"],
                    };
                    var data = Object.keys(body).map(function (dataKey) { return encodeURIComponent(dataKey) + "=" + encodeURIComponent(body[dataKey]); }).join("&").replace(/%20/g, "+");
                    var reqManager = new RequestManager_1.RequestManager(context);
                    reqManager.RequestHandler({ url: tokenEndpoint, data: data, blockRender: false, onSuccess: onSuccess, onFail: onFail, http: "post", headers: { "Content-type": "application/x-www-form-urlencoded" }, responseField: null });
                },
            },
            store: {
                set: storeManager.set.bind(storeManager),
                get: storeManager.get.bind(storeManager),
                getAll: storeManager.getAll.bind(storeManager),
                delete: storeManager.delete.bind(storeManager),
                deleteAll: storeManager.deleteAll.bind(storeManager),
            },
            permanentStore: {
                set: function (object) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dory.OperatorCollection.permanentStoreOperator.set(object)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                get: function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dory.OperatorCollection.permanentStoreOperator.get(key)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); },
                delete: function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dory.OperatorCollection.permanentStoreOperator.delete(key)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                getAll: function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dory.OperatorCollection.permanentStoreOperator.getAll()];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); },
                createOrChangeStore: function (storeName) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dory.OperatorCollection.permanentStoreOperator.createOrChangeStore(storeName || IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                deleteStore: function (storeName) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dory.OperatorCollection.permanentStoreOperator.deleteStore(storeName || IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                defaultStoreName: IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name,
                get currentStoreName() {
                    return dory.OperatorCollection.permanentStoreOperator.getCurrentStoreName() || IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name;
                }
            },
            cookie: {
                set: function (key, cookieValue) {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.cookieAccess) === null || _a === void 0 ? void 0 : _a.setCookie)) {
                        return;
                    }
                    return (_b = dory.shellConfigs.cookieAccess) === null || _b === void 0 ? void 0 : _b.setCookie({ key: key, cookieValue: cookieValue });
                },
                get: function (key) {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.cookieAccess) === null || _a === void 0 ? void 0 : _a.getItemFromCookies)) {
                        return;
                    }
                    return (_b = dory.shellConfigs.cookieAccess) === null || _b === void 0 ? void 0 : _b.getItemFromCookies({ key: key });
                },
                getAll: function () {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.cookieAccess) === null || _a === void 0 ? void 0 : _a.getAllCookies)) {
                        return {};
                    }
                    return ((_b = dory.shellConfigs.cookieAccess) === null || _b === void 0 ? void 0 : _b.getAllCookies()) || {};
                },
                delete: function (key) {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.cookieAccess) === null || _a === void 0 ? void 0 : _a.removeItemFromCookies)) {
                        return;
                    }
                    return (_b = dory.shellConfigs.cookieAccess) === null || _b === void 0 ? void 0 : _b.removeItemFromCookies({ key: key });
                },
            },
            localStorage: {
                set: function (key, value) {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.storeAccess) === null || _a === void 0 ? void 0 : _a.setLocalStorage)) {
                        return null;
                    }
                    return (_b = dory.shellConfigs.storeAccess) === null || _b === void 0 ? void 0 : _b.setLocalStorage({ key: key, value: value });
                },
                get: function (key) {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.storeAccess) === null || _a === void 0 ? void 0 : _a.getItemFromLocalStorage)) {
                        return null;
                    }
                    return (_b = dory.shellConfigs.storeAccess) === null || _b === void 0 ? void 0 : _b.getItemFromLocalStorage({ key: key });
                },
                clear: function () {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.storeAccess) === null || _a === void 0 ? void 0 : _a.clearLocalStorage)) {
                        return {};
                    }
                    return (_b = dory.shellConfigs.storeAccess) === null || _b === void 0 ? void 0 : _b.clearLocalStorage();
                },
                delete: function (key) {
                    var _a, _b;
                    if (!((_a = dory.shellConfigs.storeAccess) === null || _a === void 0 ? void 0 : _a.removeItemFromLocalStorage)) {
                        return;
                    }
                    return (_b = dory.shellConfigs.storeAccess) === null || _b === void 0 ? void 0 : _b.removeItemFromLocalStorage({ key: key });
                },
            },
            Url: {
                resolve: function (_a) {
                    var _b;
                    var url = _a.url;
                    // todo: this function should resolve url with settings.yaml
                    if (!((_b = dory === null || dory === void 0 ? void 0 : dory.siteSettings) === null || _b === void 0 ? void 0 : _b.selectedProjectUrl)) {
                        return url;
                    }
                    var resolvedUrl = dory.siteSettings.selectedProjectUrl + url;
                    return resolvedUrl;
                },
            },
            findControl: function () {
                logger_1.Logger.Log({ logMessage: "Rezerved for future use", minEngineLogLevel: engineYamlLogType, });
            },
            Date: {
                parse: function (value, month) {
                    var date = month && typeof value === "number" ? new Date(value, month, 1) : new Date(value);
                    return date;
                },
                now: function () { return new Date(); },
                time: function () {
                    return new Date().getTime();
                },
                compare: function (first, second) {
                    var firstDate, 
                    // firstMonth: string,
                    // firstYear: string,
                    secondDate;
                    // secondMonth: string,
                    // secondYear: string;
                    /**
                     * Check if date is YYYY-M-D or YYYY-D-Y
                     * This format is not compatible for IE11
                     * Turn it into YYYY-MM-DD or YYYY-DD-MM
                     */
                    if (typeof first === "string") {
                        var firstSeparator = first.substring(4, 5);
                        var secondSeparator = first.substring(6, 7);
                        if (firstSeparator == "-" && secondSeparator == "-") {
                            var date = first.substring(7).length == 2 ? first.substring(7) : "0" + first.substring(7);
                            firstDate = first.substring(0, 4) + "-" + "0" + first.substring(5, 6) + "-" + date;
                        }
                        else {
                            firstDate = first;
                        }
                    }
                    else {
                        firstDate = first.toString();
                    }
                    if (typeof second === "string") {
                        var firstSeparator = second.substring(4, 5);
                        var secondSeparator = second.substring(6, 7);
                        if (firstSeparator == "-" && secondSeparator == "-") {
                            var date = second.substring(7).length == 2 ? second.substring(7) : "0" + second.substring(7);
                            secondDate = second.substring(0, 4) + "-" + "0" + second.substring(5, 6) + "-" + date;
                        }
                        else {
                            secondDate = second;
                        }
                    }
                    else {
                        secondDate = second.toString();
                    }
                    //For cross browser support, date must be in YYYY-MM-DD format, other types cant to be parsed
                    var firstDateLocalized = Date.parse(firstDate);
                    var secondDateLocalized = Date.parse(secondDate);
                    if (firstDateLocalized == secondDateLocalized) {
                        return "Equal";
                    }
                    return firstDateLocalized > secondDateLocalized;
                },
                getTimezoneOffset: function (date) {
                    return date.getTimezoneOffset();
                },
                ISOString: function () {
                    return new Date().toISOString();
                },
                differenceInDays: function (first, second) {
                    var firstDate = Date.parse(first.toString());
                    var secondDate = Date.parse(second.toString());
                    var timeDiff = Math.abs(secondDate - firstDate);
                    return Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
                },
                differenceInMonths: function (first, second) {
                    var _a;
                    if (first > second) {
                        _a = __read([second, first], 2), first = _a[0], second = _a[1];
                    }
                    var months = (second.getFullYear() - first.getFullYear()) * 12;
                    months += second.getMonth() - first.getMonth();
                    var hasDayDifference = second.getMonth() == first.getMonth() && first.getDate() > second.getDate();
                    if (hasDayDifference) {
                        months -= 1;
                    }
                    return months <= 0 ? 0 : months;
                },
            },
            Number: {
                parse: function (value) {
                    return Number(value);
                },
                parseFloat: function (value) {
                    return Number.parseFloat(value);
                },
                mod: function (firstValue, secondValue) {
                    return firstValue % secondValue;
                },
            },
            JSON: {
                parse: function (jsonString) {
                    return JSON.parse(jsonString);
                },
            },
            this: ownerComponent && ownerComponent.component,
            parent: { props: scopeContext === null || scopeContext === void 0 ? void 0 : scopeContext.GetProps(), events: scopeContext === null || scopeContext === void 0 ? void 0 : scopeContext.GetEvents() },
            string: {
                space: "\xa0",
                replace: function (string, searchValue, replaceValue) {
                    return string.replace(searchValue, replaceValue);
                },
            },
            process: {
                getMetadata: function () {
                    var _a, _b;
                    return ((_a = dory.shellConfigs.processManager) === null || _a === void 0 ? void 0 : _a.getMetadata)
                        ? (_b = dory.shellConfigs.processManager) === null || _b === void 0 ? void 0 : _b.getMetadata()
                        : storeManager.get("$process")
                            ? storeManager.get("$process").Metadata
                            : storeManager.get("process")
                                ? storeManager.get("process")
                                : undefined;
                },
                setMetadata: function (_a) {
                    var _b, _c, _d;
                    var Metadata = _a.Metadata;
                    if ((_b = dory.shellConfigs.processManager) === null || _b === void 0 ? void 0 : _b.setMetadata) {
                        (_c = dory.shellConfigs.processManager) === null || _c === void 0 ? void 0 : _c.setMetadata({ Metadata: Metadata });
                        return;
                    }
                    var process = (_d = storeManager.get("$process")) !== null && _d !== void 0 ? _d : {};
                    process.Metadata = Metadata;
                    storeManager.set("$process", process);
                },
                changeProcessMetadata: function (key, onSuccess) {
                    var _a, _b, _c;
                    if (key === void 0) { key = ""; }
                    var onSuccessFunc = function () {
                        if (onSuccess) {
                            ownerComponent === null || ownerComponent === void 0 ? void 0 : ownerComponent.events.Trigger({ eventName: onSuccess });
                        }
                    };
                    if ((_a = dory.shellConfigs.processManager) === null || _a === void 0 ? void 0 : _a.changeProcessMetadata) {
                        (_b = dory.shellConfigs.processManager) === null || _b === void 0 ? void 0 : _b.changeProcessMetadata({ key: key, onSuccessFunc: onSuccessFunc });
                        return;
                    }
                    else {
                        // for Qscript and rshell, it is coming from osGlobalObjects.
                        (_c = dory.shellConfigs.osGlobalObjects) === null || _c === void 0 ? void 0 : _c.process.changeProcessMetadata({ key: key, onSuccessFunc: onSuccessFunc });
                    }
                },
            },
            Object: Object,
            js: javascript,
            return: function (retVal) {
                throw { type: "quickReturnExc", retVal: retVal };
            },
            await: function (retVal) {
                throw { type: "quickReturnExc", retVal: retVal };
            },
            webScripts: {}
        };
        globals.webScripts = new Proxy(globals.webScripts, {
            get: function (target, prop) {
                // if (!(prop in target)) {
                //   target[prop] = function (...args: any[]) {
                //     console.log(`Executing ${prop} with arguments:`, args);
                //   }
                // }
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    console.log("Executing " + prop + " with arguments:", args);
                    dory.shellConfigs.integrationsEventTrigger ? dory.shellConfigs.integrationsEventTrigger(prop, args) : null;
                };
            }
        });
        var shellGlobalMethods = dory.shellConfigs.shellGlobalMethods;
        if (shellGlobalMethods === null || shellGlobalMethods === void 0 ? void 0 : shellGlobalMethods.alert) {
            globals.Quick.alert = function (options) {
                return alert(shellGlobalMethods, ownerComponent, historyManager, options);
            };
        }
        if (shellGlobalMethods === null || shellGlobalMethods === void 0 ? void 0 : shellGlobalMethods.getDeepLinkParams) {
            globals.Url.getDeepLinkParams = function () {
                return shellGlobalMethods.getDeepLinkParams();
            };
        }
        var getUrl = dory.shellConfigs.getUrl;
        if (getUrl) {
            globals.Url.getUrl = function () {
                return getUrl();
            };
        }
        return globals;
    };
    Evaluator.prototype.generateCodeChallenge = function (codeVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var digest, array;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, crypto.subtle.digest("SHA-256", new TextEncoder().encode(codeVerifier))];
                    case 1:
                        digest = _a.sent();
                        array = new Uint8Array(digest);
                        return [2 /*return*/, btoa(String.fromCharCode.apply(String, __spreadArray([], __read(array), false))).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_")];
                }
            });
        });
    };
    Evaluator.prototype.generateRandomString = function (length) {
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    Evaluator.prototype.fillComponentData = function (key, compMap, componentByKey) {
        if (componentByKey["dataValue"]) {
            compMap.set(key, componentByKey["dataValue"]);
        }
        if (componentByKey["valueData"]) {
            compMap.set(key, componentByKey["valueData"]);
        }
        if (componentByKey["radioGroupValue"]) {
            compMap.set(key, componentByKey["radioGroupValue"]);
        }
        if (componentByKey["constRateValue"]) {
            compMap.set(key, componentByKey["constRateValue"]);
        }
        if (componentByKey["internalValue"]) {
            compMap.set(key, componentByKey["internalValue"]);
        }
        return compMap;
    };
    Evaluator.prototype.isObject = function (item) {
        return item && typeof item === "object" && !Array.isArray(item);
    };
    Evaluator.prototype.urlConcat = function (dict) {
        var query = [];
        for (var key in dict) {
            query.push(this.encode(key) + "=" + this.encode(dict[key]));
        }
        return query.join("&");
    };
    Evaluator.prototype.encode = function (str) {
        var replace = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
            "%00": "\x00",
        };
        return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function (match) { return replace[match]; });
    };
    /**
     * Deep merge two objects.
     * @param target
     * @param ...sources
     */
    Evaluator.prototype.mergeDeep = function (target) {
        var _a, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        var source = sources.shift();
        if (this.isObject(target) && this.isObject(source)) {
            for (var key in source) {
                if (this.isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    }
                    this.mergeDeep(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
        return this.mergeDeep.apply(this, __spreadArray([target], __read(sources), false));
    };
    return Evaluator;
}());
exports.Evaluator = Evaluator;
function requestAsync(dory, context, requestObject) {
    if (!dory.isEditorInEditState) {
        var reqManager = new RequestManager_1.RequestManager(context);
        return reqManager.RequestHandler(requestObject);
    }
}
/**
 * This method using for getting all form not empty data.
 */
function getFormData(dory, componentQID) {
    var _a;
    // let compMap = new Map();
    var CompObj = {};
    var tempCompCollection = {};
    if (componentQID) {
        var compColl = (_a = dory.GetComponentCollectionByID(componentQID)) !== null && _a !== void 0 ? _a : dory.GetSubComponentCollectionByID(componentQID);
        if (!compColl) {
            return {};
        }
        ComponentCollection_1.ComponentCollection.IterateToChild(compColl, function (item) {
            tempCompCollection[item.compId] = item;
            return true;
        });
    }
    else {
        tempCompCollection = Object.assign({}, dory.GetComponentCollection());
    }
    if (tempCompCollection != null) {
        Object.keys(tempCompCollection).forEach(function (key) {
            if (tempCompCollection && tempCompCollection[key]) {
                if (tempCompCollection[key].componentVisibility == false) {
                    if (!tempCompCollection[key].children) {
                        delete tempCompCollection[key];
                        return;
                    }
                    var deleteChildCompfromCollection_1 = function (childItems) {
                        Object.values(childItems).forEach(function (childItem) {
                            delete tempCompCollection[childItem.compEID];
                            if (childItem.children && childItem.children.default) {
                                deleteChildCompfromCollection_1(childItem.children.default);
                            }
                        });
                    };
                    deleteChildCompfromCollection_1(tempCompCollection[key].children.default);
                }
            }
        });
        Object.keys(tempCompCollection).forEach(function (item) {
            if (tempCompCollection && tempCompCollection[item]) {
                var compData = dory.shellConfigs.getComponentValue(tempCompCollection[item]);
                if (compData) {
                    CompObj[item] = compData;
                }
            }
        });
    }
    return CompObj;
}
function go(context, dory, qjsonPath, options) {
    var _a, _b;
    if (dory.isEditorInEditState) {
        logger_1.Logger.Log({ logMessage: "editor is not going anywhere in edit state", logType: logger_1.LogType.Debug });
        return;
    }
    var createrComp = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).getCreaterRenderingComponent();
    if ((createrComp === null || createrComp === void 0 ? void 0 : createrComp.compType) === "RenderingComponent" && ((_a = createrComp === null || createrComp === void 0 ? void 0 : createrComp.component) === null || _a === void 0 ? void 0 : _a.RenderGo) && !(options === null || options === void 0 ? void 0 : options.newTab)) {
        return (_b = createrComp === null || createrComp === void 0 ? void 0 : createrComp.component) === null || _b === void 0 ? void 0 : _b.RenderGo(qjsonPath);
    }
    return dory.shellConfigs.go2 ? dory.shellConfigs.go2(qjsonPath, options) : null;
}
function alert(shellGlobalMethods, ownerComponent, historyManager, options) {
    var _a, _b;
    if (options.category) {
        options.category = (_a = options.category) !== null && _a !== void 0 ? _a : IAlert_1.AlertType.Error;
    }
    (_b = options.actionButtons) === null || _b === void 0 ? void 0 : _b.filter(function (button) { return !IAlert_1.AlertButtonType[button.type]; }).forEach(function (actionButton) {
        actionButton.type = IAlert_1.AlertButtonType.Cancel;
    });
    var currentPageId = historyManager.getRootHM().currentLevel().last().pageId;
    shellGlobalMethods.alert(options, { ownerComponent: ownerComponent, currentPageId: currentPageId });
}


/***/ }),

/***/ "../../common/dory/src/Managers/HistoryItemBasedLRManager.ts":
/*!******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/HistoryItemBasedLRManager.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryItemBasedLRManager = void 0;
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var DoryBasedLRManager_1 = __webpack_require__(/*! ./DoryBasedLRManager */ "../../common/dory/src/Managers/DoryBasedLRManager.ts");
var Evaluator_1 = __webpack_require__(/*! ./Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var HistoryItemBasedLRManager = /** @class */ (function () {
    function HistoryItemBasedLRManager(_a) {
        var currentContext = _a.currentContext, qLang = _a.qLang;
        this.contextName = HistoryItemBasedLRManager.ContextName;
        this.resourceDict = {};
        this.currentLRTypeRTL = false;
        this.RTL = "_%RTL%_";
        this.currentContext = currentContext;
        this.evaluator = new Evaluator_1.Evaluator();
        var doryLRManager = this.currentContext.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName);
        this.currentLRType = doryLRManager === null || doryLRManager === void 0 ? void 0 : doryLRManager.LRType;
        this.currentLRTypeRTL = doryLRManager === null || doryLRManager === void 0 ? void 0 : doryLRManager.LRTypeRTL;
        this.qLang = qLang;
    }
    Object.defineProperty(HistoryItemBasedLRManager.prototype, "LRType", {
        get: function () {
            return this.currentLRType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HistoryItemBasedLRManager.prototype, "LRTypeRTL", {
        get: function () {
            var doryLRManager = this.currentContext.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName);
            if (doryLRManager === null || doryLRManager === void 0 ? void 0 : doryLRManager.LRTypeRTL)
                return doryLRManager.LRTypeRTL;
            return this.currentLRTypeRTL;
        },
        enumerable: false,
        configurable: true
    });
    HistoryItemBasedLRManager.prototype.SetResourceDict = function (CLRs, lrType) {
        this.currentLRType = lrType;
        this.currentLRTypeRTL = CLRs && CLRs[this.RTL] ? true : false;
        this.resourceDict = CLRs;
    };
    HistoryItemBasedLRManager.prototype.GetResource = function (_a) {
        var key = _a.key, dataSource = _a.dataSource, returnKey = _a.returnKey;
        var dory = this.currentContext.GetItemSingle(Dory_1.Dory.ContextName);
        // HistoryContext based LR
        var result;
        if (this.resourceDict) {
            result = this.resourceDict[key];
            if (result != null) {
                result = this.evaluator.Evaluate({ script: result, dataSource: dataSource, context: this.currentContext, lang: this.qLang });
                return result;
            }
        }
        //Dorybased LR
        var DoryBasedLR = this.currentContext.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName);
        result = DoryBasedLR === null || DoryBasedLR === void 0 ? void 0 : DoryBasedLR.GetResource({ context: this.currentContext, key: key, dataSource: dataSource });
        if (result != null) {
            return result;
        }
        //from shell 
        if (dory === null || dory === void 0 ? void 0 : dory.shellConfigs.lridHelper) {
            return dory.shellConfigs.lridHelper(key, dataSource);
        }
        //return key.
        return returnKey !== false ? key : undefined;
    };
    HistoryItemBasedLRManager.ContextName = "HistoryItemBasedLRManager";
    return HistoryItemBasedLRManager;
}());
exports.HistoryItemBasedLRManager = HistoryItemBasedLRManager;


/***/ }),

/***/ "../../common/dory/src/Managers/HistoryManager.ts":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/HistoryManager.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryManager = void 0;
var INavigationDemand_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/INavigationDemand */ "../../common/shrimp/interfaces/quick/INavigationDemand.ts");
var RenderingComponent_1 = __webpack_require__(/*! ../Components/ContainerComponents/RenderingComponent */ "../../common/dory/src/Components/ContainerComponents/RenderingComponent.ts");
var HistoryManager = /** @class */ (function () {
    function HistoryManager(context, doryLike) {
        this.contextName = HistoryManager.ContextName;
        this.HistoryLevels = [];
        this.CurrentLevelIndex = 0;
        this.context = context;
        this.ClearHistory();
        this.doryLike = doryLike;
        // this.OverrideBrowserBackEvent();
    }
    HistoryManager.prototype.GetCreaterComp = function () {
        return this.doryLike.GetCreaterComp();
    };
    HistoryManager.prototype.currentLevel = function () {
        return this.HistoryLevels[this.CurrentLevelIndex];
    };
    HistoryManager.prototype.addLevel = function () {
        ++this.CurrentLevelIndex;
        this.HistoryLevels[this.CurrentLevelIndex] = new HistoryLevel();
    };
    HistoryManager.prototype.isCurrentlyOnLightbox = function () {
        return this.CurrentLevelIndex !== 0;
    };
    HistoryManager.prototype.dropLevel = function () {
        delete this.HistoryLevels[this.CurrentLevelIndex];
        this.CurrentLevelIndex--;
        return this.currentLevel().last();
    };
    /**
     * @param callback
     * @param traverseBeginLevelIndex
     * traverse from this level downwards or null for all levels
     */
    HistoryManager.prototype.traverseLevelsUpwards = function (callback, traverseBeginLevelIndex) {
        for (var i = (traverseBeginLevelIndex || this.CurrentLevelIndex); i >= 0; i--) {
            var currentLevelHistoryItems = this.HistoryLevels[i].historyItems();
            var retVal = callback(currentLevelHistoryItems[currentLevelHistoryItems.length - 1]);
            if (!retVal) {
                break;
            }
        }
    };
    HistoryManager.prototype.getLastHistoryOnLevel = function (levelIndex) {
        if (levelIndex === null || levelIndex === undefined || !this.HistoryLevels[levelIndex]) {
            return null;
        }
        return this.HistoryLevels[levelIndex].last();
    };
    HistoryManager.prototype.AddTempHistory_delete = function (historyItem) {
        this.currentLevel().historyItems().push(historyItem);
    };
    HistoryManager.prototype.RemoveTempHistory_delete = function () {
        this.currentLevel().historyItems().splice(-1);
    };
    /**
     * * Add a history item for back support
     * @param historyItem: Item to be added to history
     * type="HistoryItem"
     * value="new HistoryItem()"
     */
    HistoryManager.prototype.AddHistory = function (historyItem) {
        var historyLevel = this.currentLevel();
        var oldHistoryItem = historyLevel.previous();
        if (oldHistoryItem) {
            oldHistoryItem.hibernate();
        }
        historyLevel.addHistory(historyItem);
    };
    ;
    HistoryManager.prototype.Forward = function (options) {
        var historyItems = this.currentLevel().forward(options);
        if (!(historyItems === null || historyItems === void 0 ? void 0 : historyItems.new)) {
            return;
        }
        historyItems.old.forEach(function (historyItem) {
            historyItem.hibernate();
        });
        historyItems.new.resurrect();
        this.doryLike.OwnerDoryLike.CallRender(historyItems.new, INavigationDemand_1.INavigationDemandType.forward);
    };
    ;
    HistoryManager.prototype.Back = function (options) {
        var historyItems = this.currentLevel().back(options);
        if (!(historyItems === null || historyItems === void 0 ? void 0 : historyItems.new)) {
            return;
        }
        historyItems.old.forEach(function (historyItem) {
            historyItem.hibernate();
        });
        historyItems.new.resurrect();
        this.doryLike.OwnerDoryLike.CallRender(historyItems.new, INavigationDemand_1.INavigationDemandType.back);
    };
    ;
    /**
     * @param typeName GetControlWithTypeName
     * @param levelIndex Which index of level will be searched. undefined for CurrentLevel
     * @returns ComponentCollection | null
     */
    HistoryManager.prototype.GetComponentByType = function (typeName, levelIndex) {
        levelIndex = levelIndex || this.CurrentLevelIndex;
        var lastLevel = this.getLastHistoryOnLevel(levelIndex);
        if (!lastLevel) {
            return null;
        }
        var component = lastLevel.GetControlWithTypeName(typeName);
        if (!component) {
            return null;
        }
        return component;
    };
    HistoryManager.prototype.ClearHistory = function () {
        var curLevel = this.currentLevel();
        this.HistoryLevels = new Array();
        this.CurrentLevelIndex = 0;
        this.addLevel();
        curLevel === null || curLevel === void 0 ? void 0 : curLevel.destroy();
    };
    HistoryManager.prototype.checkIfHistoryExist = function (options) {
        return this.currentLevel().checkIfHistoryExist(options).historyExist;
    };
    HistoryManager.prototype.hasHistory = function (pageId) {
        var retVal = this.searchTargetHistoryManager({ pageId: pageId });
        if (!retVal) {
            return this.getNavDemand(pageId);
        }
        return retVal.ownerHistoryManager.getNavDemand(retVal.pageId ? retVal.pageId : pageId);
    };
    HistoryManager.prototype.searchTargetHistoryManager = function (_a) {
        var _b, _c;
        var pageId = _a.pageId;
        var pageIdArray = pageId === null || pageId === void 0 ? void 0 : pageId.split('.');
        if (pageId && pageIdArray && ((_b = this.currentLevel().last()) === null || _b === void 0 ? void 0 : _b.pageId) != pageIdArray[0]) {
            //back is on root or rshell
            return { ownerHistoryManager: this, pageId: pageId };
        }
        var renderingComponent = (_c = this.GetComponentByType(RenderingComponent_1.RenderingComponent.ComponentName)) === null || _c === void 0 ? void 0 : _c.component;
        if (!renderingComponent) {
            //rShell will return from here.
            return { ownerHistoryManager: this, pageId: pageId };
        }
        var newPageIdString = pageId;
        if (pageId && pageIdArray && pageIdArray[1]) {
            //browser back
            var firstPageId = pageIdArray[0] + '.';
            newPageIdString = pageId.replace(firstPageId, '');
            return renderingComponent.searchTargetHistoryManager(newPageIdString) || null;
        }
        return null;
    };
    HistoryManager.prototype.getNavDemand = function (pageId) {
        var navigationDemand = null;
        var historyItems = this.HistoryLevels[this.CurrentLevelIndex].historyItems();
        var futureItems = this.HistoryLevels[this.CurrentLevelIndex].futureItems();
        for (var index = historyItems.length - 1; index >= 0; index--) {
            var curItem = historyItems[index];
            if (curItem.pageId == pageId) {
                navigationDemand = { pageId: pageId, pageName: curItem.pageName, navigationDemandType: INavigationDemand_1.INavigationDemandType.back, step: historyItems.length - index - 1, ownerHistoryManager: this }; //when calculating step extract current historyItem (-1)
                break;
            }
        }
        if (!navigationDemand) {
            for (var index = futureItems.length - 1; index >= 0; index--) {
                if (index != futureItems.length && futureItems[index].pageId == pageId) {
                    navigationDemand = { pageId: pageId, pageName: futureItems[index].pageName, navigationDemandType: INavigationDemand_1.INavigationDemandType.forward, step: futureItems.length - index, ownerHistoryManager: this };
                    break;
                }
            }
        }
        return navigationDemand;
    };
    HistoryManager.prototype.getCreaterRenderingComponent = function () {
        return this.doryLike.GetCreaterRenderingComponent();
    };
    HistoryManager.prototype.getRootHM = function () {
        if (!this.rootHMCache) {
            var creator = this.doryLike.GetCreatorComponent();
            this.rootHMCache = creator ? creator.context.GetItemSingle(HistoryManager.ContextName).getRootHM() : this;
        }
        return this.rootHMCache;
    };
    HistoryManager.prototype.GetCompUIDPrefix = function () {
        return this.doryLike.GetCompUIDPrefix();
    };
    HistoryManager.traverseUpwards = function (retVal, historyItem) {
        var _a, _b;
        if (!historyItem) {
            return retVal;
        }
        retVal = retVal !== null && retVal !== void 0 ? retVal : [];
        if (historyItem.pageName) {
            retVal.push(historyItem.pageName);
        }
        var ownerComp = (_a = historyItem.getOwnerHistoryManager()) === null || _a === void 0 ? void 0 : _a.doryLike.GetCreaterComp();
        if (!ownerComp) {
            return retVal;
        }
        var upwardHistoryItem = (_b = ownerComp.context.GetItemSingle("HistoryManager")) === null || _b === void 0 ? void 0 : _b.currentLevel().last();
        return HistoryManager.traverseUpwards(retVal, upwardHistoryItem);
    };
    HistoryManager.ContextName = "HistoryManager";
    return HistoryManager;
}());
exports.HistoryManager = HistoryManager;
var HistoryLevel = /** @class */ (function () {
    function HistoryLevel() {
        this.HistoryItems = [];
        this.FutureItems = [];
    }
    /**
     * clear future on every new action
     * @param historyItem
     */
    HistoryLevel.prototype.addHistory = function (historyItem) {
        this.destroyer(this.FutureItems);
        this.FutureItems = [];
        this.HistoryItems.push(historyItem);
        delete this.MomentaryItem;
    };
    ;
    HistoryLevel.prototype.destroy = function () {
        this.destroyer(this.FutureItems);
        this.destroyer(this.HistoryItems);
    };
    HistoryLevel.prototype.historyItems = function () {
        return this.HistoryItems;
    };
    ;
    HistoryLevel.prototype.futureItems = function () {
        return this.FutureItems;
    };
    ;
    HistoryLevel.prototype.last = function () {
        if (this.MomentaryItem) {
            return this.MomentaryItem;
        }
        if (this.HistoryItems.length < 1) {
            return null;
        }
        return this.HistoryItems[this.HistoryItems.length - 1];
    };
    ;
    HistoryLevel.prototype.setMomentaryItem = function (momentaryItem) {
        this.MomentaryItem = momentaryItem;
    };
    HistoryLevel.prototype.previous = function () {
        var offset = (!this.MomentaryItem) ? 2 : 1;
        if (this.HistoryItems.length < offset) {
            return null;
        }
        return this.HistoryItems[this.HistoryItems.length - offset];
    };
    ;
    HistoryLevel.prototype.checkIfHistoryExist = function (options) {
        if (options.externalHistoryRouter) { //#legacyCode : this if is for rallyUi Quick 1.0
            return { historyExist: true };
        }
        options.step = options.step ? options.step : 1;
        if (options.navigationDemandType == INavigationDemand_1.INavigationDemandType.back) {
            if (this.HistoryItems.length > Math.abs(options.step)) {
                return { historyExist: true, step: options.step };
            }
        }
        else {
            if (this.FutureItems.length >= options.step) {
                return { historyExist: true, step: options.step };
            }
        }
        // //below code is for checking if it is coming from doryJr. 
        // let doryLikeData = (<HistoryManager><unknown>options.ownerHistoryManager).doryLike;
        // if (doryLikeData.OwnerDoryLike.contextName == "DoryJr") {
        //     let ownerHistoryManagerStep =
        //         options.step - (options.navigationDemandType == INavigationDemandType.back ? (this.HistoryItems.length-1) : (this.FutureItems.length));
        //     const ownerHistoryManager = <HistoryManager><unknown>doryLikeData.GetCreaterComponent()?.context?.GetItemSingle(HistoryManager.ContextName);
        //     if (ownerHistoryManager) {
        //         (ownerHistoryManager)?.Back({
        //             ownerHistoryManager: (ownerHistoryManager),
        //             step: ownerHistoryManagerStep,
        //             navigationDemandType: options.navigationDemandType
        //         });
        //     }
        //     return { historyExist: true, step: this.HistoryItems.length };
        // }
        return { historyExist: false };
    };
    HistoryLevel.prototype.back = function (options) {
        var _a;
        options.navigationDemandType = (_a = options.navigationDemandType) !== null && _a !== void 0 ? _a : INavigationDemand_1.INavigationDemandType.back;
        var retVal = this.checkIfHistoryExist(options);
        if (!retVal.historyExist) {
            return undefined;
        }
        var step = options.step ? (options.step == retVal.step ? options.step : retVal.step) : 1;
        var oldItems = [];
        for (var index = 0; index < Math.abs(step); index++) {
            var currentItem = this.HistoryItems.pop();
            if (!currentItem) {
                throw new Error('abcdeb');
            }
            this.FutureItems.push(currentItem);
            oldItems.push(currentItem);
        }
        var newHistoryItem = this.HistoryItems.length > 0 ? this.HistoryItems[this.HistoryItems.length - 1] : null;
        return { old: oldItems, new: newHistoryItem };
    };
    ;
    HistoryLevel.prototype.forward = function (options) {
        var _a;
        options.navigationDemandType = (_a = options.navigationDemandType) !== null && _a !== void 0 ? _a : INavigationDemand_1.INavigationDemandType.forward;
        var retVal = this.checkIfHistoryExist(options);
        if (!retVal.historyExist) {
            return undefined;
        }
        var step = options.step ? (options.step == retVal.step ? options.step : retVal.step) : 1;
        var oldItems = [];
        var newHistoryItem;
        var currentHistoryItem = this.last();
        oldItems.push(currentHistoryItem);
        for (var index = 0; index < step; index++) {
            var futureItem = this.FutureItems.pop();
            if (!futureItem) {
                throw new Error('there is no future in this land.');
            }
            this.HistoryItems.push(futureItem);
            (index == step - 1) ? newHistoryItem = futureItem : oldItems.push(futureItem);
        }
        return { old: oldItems, new: newHistoryItem };
    };
    ;
    HistoryLevel.prototype.destroyer = function (historyItems) {
        if (historyItems) {
            historyItems.forEach(function (item) { return item.destroy(); });
        }
    };
    ;
    return HistoryLevel;
}());


/***/ }),

/***/ "../../common/dory/src/Managers/MessagingManager.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/MessagingManager.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagingManager = void 0;
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var RenderingContext_1 = __webpack_require__(/*! ../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var HistoryManager_1 = __webpack_require__(/*! ./HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var MessagingManager = /** @class */ (function () {
    function MessagingManager(context) {
        this.context = context;
    }
    /**
     * Returns a messaging component if it is exists on the given level index
     * @param levelIndex Index that will be searched for Messaging component
     * @returns IComponentCollection
     */
    MessagingManager.prototype.GetMessagingComponentByLevelIndex = function (levelIndex) {
        var _a, _b;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
        var messagingComponent = historyManager === null || historyManager === void 0 ? void 0 : historyManager.GetComponentByType(MessagingManager.MessagingCompName, levelIndex);
        if (!messagingComponent) {
            logger_1.Logger.Log({ logMessage: MessagingManager.MessagingCompName + " component couldn' t found on { " + levelIndex + " + } index level", minEngineLogLevel: engineYamlLogType });
            return null;
        }
        return messagingComponent;
    };
    /**
     * Get component property value by eventName
     * @param eventName Name of the component event
     * @returns void | null
     */
    MessagingManager.prototype.Get = function (eventName) {
        var _a, _b;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        if (!historyManager) {
            return;
        }
        var messagingComponent = this.GetMessagingComponentByLevelIndex(historyManager.CurrentLevelIndex);
        if (messagingComponent && messagingComponent.events) {
            var eventBoundFuntions = messagingComponent.events.GetEventBoundFunctions();
            return (_a = eventBoundFuntions.eventFunctions[eventName]) !== null && _a !== void 0 ? _a : (_b = eventBoundFuntions.propertyEventFunctions) === null || _b === void 0 ? void 0 : _b[eventName];
        }
    };
    // /**
    //  * Set component property value by propertyName
    //  * @param propertyName Name of the component property
    //  * @param propertyValue Value that will be setted to the @propertyName
    //  * @returns void
    //  */
    // Set(propertyName: string, propertyValue: object) {
    //     const historyManager = this.context.GetItemSingle<HistoryManager>(HistoryManager.ContextName);
    //     const messagingComponent = this.GetMessagingComponentByLevelIndex(historyManager.CurrentLevelIndex);
    //     if (messagingComponent) {
    //         messagingComponent[propertyName] = propertyValue;
    //     }
    // }
    /**
     * Trigger an event on current index level of currentLevel
     * @param eventName Event that will be triggered
     * @param parameters Which parameters or arguments that will be passed
     * @returns void
     */
    MessagingManager.prototype.Trigger = function (_a) {
        var eventName = _a.eventName, parameters = _a.parameters;
        var historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        if (!historyManager) {
            return;
        }
        var messagingComponent = this.GetMessagingComponentByLevelIndex(historyManager.CurrentLevelIndex);
        var immediate = true;
        if (!messagingComponent) {
            var renderingContext = this.context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
            var ownerComp = renderingContext === null || renderingContext === void 0 ? void 0 : renderingContext.ownerComponent;
            messagingComponent = ownerComp && ownerComp.compType == MessagingManager.MessagingCompName ? ownerComp : null;
        }
        var retVal = null;
        if (messagingComponent) {
            retVal = messagingComponent.events.Trigger({ eventName: eventName, eventArguments: parameters, immediate: immediate });
        }
        return retVal;
    };
    MessagingManager.MessagingCompName = "Messaging";
    return MessagingManager;
}());
exports.MessagingManager = MessagingManager;


/***/ }),

/***/ "../../common/dory/src/Managers/Network/MockManager.ts":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/Network/MockManager.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MockManager = exports.MockMode = exports.MockObject = void 0;
var MockObject = /** @class */ (function () {
    function MockObject(mockKey) {
        this.playCounter = 0;
        this.values = [];
        this.mockKey = mockKey;
        this.Reset();
    }
    MockObject.prototype.Reset = function () {
        this.playCounter = 0;
    };
    MockObject.prototype.AddMock = function (value, overrideCapture) {
        if (overrideCapture) {
            this.values[0] = value;
        }
        else {
            this.values.push(value);
        }
    };
    MockObject.prototype.GetMock = function (overrideCapture) {
        if (overrideCapture) {
            return this.values[0];
        }
        if (this.values.length <= this.playCounter) {
            throw new Error("Not enough capture was taken for key: " + this.mockKey + " access counter:" + this.playCounter);
        }
        return this.values[this.playCounter++];
    };
    return MockObject;
}());
exports.MockObject = MockObject;
var MockMode;
(function (MockMode) {
    MockMode["off"] = "off";
    MockMode["captureOnly"] = "captureOnly";
    MockMode["playOnly"] = "playOnly";
})(MockMode = exports.MockMode || (exports.MockMode = {}));
var MockManager = /** @class */ (function () {
    function MockManager(options) {
        this.contextName = MockManager.ContextName;
        this.mocks = {};
        this.options = options;
    }
    MockManager.GetMocker = function (options, dory) {
        var interDoryContext = dory.GetInterDoryContext();
        var mm = interDoryContext.GetItemSingle(MockManager.ContextName);
        if (!mm) {
            mm = new MockManager(options);
            interDoryContext.RegisterItem(mm);
        }
        return mm;
    };
    Object.defineProperty(MockManager.prototype, "MockMode", {
        set: function (mockMode) {
            this.options.mockMode = mockMode;
            this.Reset();
        },
        enumerable: false,
        configurable: true
    });
    MockManager.prototype.Reset = function () {
        var _this = this;
        Object.keys(this.mocks).forEach(function (key) { return _this.mocks[key].Reset(); });
    };
    MockManager.prototype.Execute = function (key, realCall) {
        var retVal = undefined;
        switch (this.options.mockMode) {
            case MockMode.off:
            default:
                retVal = realCall();
                break;
            case MockMode.captureOnly:
                retVal = realCall();
                this.SetMock(key, retVal);
                break;
            case MockMode.playOnly:
                var mockObj = this.mocks[key];
                if (!mockObj) {
                    throw new Error("No mock captured for: " + key);
                }
                retVal = mockObj.GetMock(this.options.overrideCapture);
                break;
        }
        return retVal;
    };
    MockManager.prototype.SetMock = function (key, value, options) {
        if (options === void 0) { options = {}; }
        if (options.overrideMockMode != true) {
            switch (this.options.mockMode) {
                case MockMode.off:
                case MockMode.playOnly:
                default:
                    return;
                case MockMode.captureOnly:
                    break;
            }
        }
        var curMock = this.mocks[key] || (this.mocks[key] = new MockObject(key));
        var overrideCapture = options.overrideCapture !== undefined ? options.overrideCapture : this.options.overrideCapture;
        curMock.AddMock(value, overrideCapture);
    };
    MockManager.ContextName = "MockManager";
    return MockManager;
}());
exports.MockManager = MockManager;


/***/ }),

/***/ "../../common/dory/src/Managers/Network/RequestManager.ts":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/Network/RequestManager.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestManager = void 0;
var httpHeaderHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/httpHeaderHelper */ "../../common/shrimp/helpers/httpHeaderHelper.ts");
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var IAlert_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/IAlert */ "../../common/shrimp/interfaces/ComponentInterfaces/IAlert.ts");
var IPromiseData_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var performance_1 = __webpack_require__(/*! ../../../../shrimp/performance */ "../../common/shrimp/performance.ts");
var BlockInfo_1 = __webpack_require__(/*! ../../Context/BlockInfo */ "../../common/dory/src/Context/BlockInfo.ts");
var RenderingContext_1 = __webpack_require__(/*! ../../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var ResponseContext_1 = __webpack_require__(/*! ../../Context/ResponseContext */ "../../common/dory/src/Context/ResponseContext.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var HistoryManager_1 = __webpack_require__(/*! ../HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var MockManager_1 = __webpack_require__(/*! ./MockManager */ "../../common/dory/src/Managers/Network/MockManager.ts");
var RequestManager = /** @class */ (function () {
    function RequestManager(context) {
        this.context = context;
    }
    /**
     * Handle Async Request
     * @param requestObject Request obejct with paramaters
     * @returns void
     */
    RequestManager.prototype.RequestHandler = function (requestObject) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var dory, engineYamlLogType, awaitProm, blockInfo, renderingContext, ownerComp, ownerEvent, ex_1, mm, promise;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
                        engineYamlLogType = (_b = (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
                        awaitProm = (0, IPromiseData_1.CreatePromiseData)();
                        if (requestObject.blockRender) {
                            blockInfo = this.context.GetItemSingle(BlockInfo_1.BlockInfo.ContextName);
                            blockInfo === null || blockInfo === void 0 ? void 0 : blockInfo.addBlockPromise(awaitProm.promise);
                        }
                        renderingContext = this.context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
                        renderingContext === null || renderingContext === void 0 ? void 0 : renderingContext.IsRenderingEventsComplete();
                        ownerComp = renderingContext === null || renderingContext === void 0 ? void 0 : renderingContext.ownerComponent;
                        ownerEvent = renderingContext === null || renderingContext === void 0 ? void 0 : renderingContext.ownerEvent;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        if (!requestObject.headers) {
                            requestObject.headers = {};
                        }
                        return [4 /*yield*/, (dory === null || dory === void 0 ? void 0 : dory.SettingsQJsonContext.TriggerPipeline("onBeforeRequest", { requestObject: requestObject }))];
                    case 2:
                        _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _c.sent();
                        awaitProm.reject(ex_1);
                        throw ex_1;
                    case 4:
                        mm = MockManager_1.MockManager.GetMocker({ mockMode: MockManager_1.MockMode.off, overrideCapture: false }, dory);
                        promise = mm.Execute(requestObject.url, function () {
                            return _this.requestMethod(requestObject);
                        });
                        if (ownerComp) {
                            performance_1.PerfSingles.Instance().Start(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + "->");
                        }
                        //Make the setted request
                        promise.then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                            var ex_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        logger_1.Logger.Log({ logMessage: "Response has successfully returned", logType: logger_1.LogType.Trace, minEngineLogLevel: engineYamlLogType });
                                        requestObject.responseField = requestObject.responseField || null;
                                        this.MergeResponseToMainResponse(requestObject.responseField, response);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, (dory === null || dory === void 0 ? void 0 : dory.SettingsQJsonContext.TriggerPipeline("onAfterResponse", { response: response }))];
                                    case 2:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        ex_2 = _a.sent();
                                        awaitProm.reject(ex_2);
                                        throw ex_2;
                                    case 4:
                                        if (ownerComp) {
                                            performance_1.PerfSingles.Instance().End(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + "->", ownerEvent);
                                        }
                                        if (requestObject.onSuccess) {
                                            if (!ownerComp) {
                                                logger_1.Logger.Log({ logMessage: "RenderingContext has no owner component", logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                                            }
                                            else {
                                                ownerComp.events.Trigger({ eventName: requestObject.onSuccess, eventArguments: requestObject.args, immediate: ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.immediate });
                                            }
                                        }
                                        awaitProm.promise.then(function () { if (ownerComp) {
                                            performance_1.PerfSingles.Instance().End(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + " after await", ownerEvent);
                                        } });
                                        awaitProm.resolver(response);
                                        if (ownerComp) {
                                            performance_1.PerfSingles.Instance().Start(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + " after await");
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //Block all rendering
                        promise.catch(function (err) { return __awaiter(_this, void 0, void 0, function () {
                            var ex_3, error, currentPageId;
                            var _a, _b, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        logger_1.Logger.Log({ logMessage: "Response has not successfully returned. Error: " + err, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                                        if (!(err === null || err === void 0 ? void 0 : err.response)) return [3 /*break*/, 4];
                                        _d.label = 1;
                                    case 1:
                                        _d.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, dory.SettingsQJsonContext.TriggerPipeline("onAfterErrorResponse", { response: err.response })];
                                    case 2:
                                        _d.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        ex_3 = _d.sent();
                                        awaitProm.reject(ex_3);
                                        throw ex_3;
                                    case 4:
                                        if (ownerComp) {
                                            performance_1.PerfSingles.Instance().End(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + "->", ownerEvent);
                                        }
                                        if (requestObject.onFail) {
                                            if (!ownerComp) {
                                                logger_1.Logger.Log({ logMessage: "RenderingContext has no owner component", logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                                            }
                                            else {
                                                error = new Error(err.message);
                                                error.response = err.response;
                                                error.stack = err.stack;
                                                error.request = requestObject;
                                                ownerComp.events.Trigger({ eventName: requestObject.onFail, eventArguments: { error: error }, immediate: ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.immediate });
                                            }
                                        }
                                        else {
                                            if (requestObject.showErrorMessage != false) {
                                                if ((_a = dory.shellConfigs.shellGlobalMethods) === null || _a === void 0 ? void 0 : _a.alert) {
                                                    currentPageId = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).getRootHM().currentLevel().last().pageId;
                                                    (_b = dory.shellConfigs.shellGlobalMethods) === null || _b === void 0 ? void 0 : _b.alert({ category: IAlert_1.AlertType.Error, error: { errorMessage: err.message, errorCode: 'HTTP_' + ((_c = err.response) === null || _c === void 0 ? void 0 : _c.status), errorSource: IAlert_1.ErrorSource.Network, response: err.response } }, { currentPageId: currentPageId });
                                                }
                                            }
                                        }
                                        awaitProm.promise.catch(function () { if (ownerComp) {
                                            performance_1.PerfSingles.Instance().End(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + " after catch", ownerEvent);
                                        } });
                                        awaitProm.reject(err);
                                        if (ownerComp) {
                                            performance_1.PerfSingles.Instance().Start(ownerComp.compId + "." + (ownerEvent === null || ownerEvent === void 0 ? void 0 : ownerEvent.eventName) + " after catch");
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/, awaitProm.promise];
                }
            });
        });
    };
    /**
     * Merge response to the main response object with returned response
     * @param responseKey Key that will be attached to the response on last history item
     * @param returnedResponse Response value that has been returned from the request
     * @returns void
     */
    RequestManager.prototype.MergeResponseToMainResponse = function (responseKey, returnedResponse) {
        var returnedResponseObject = returnedResponse;
        var responseContext = this.context.GetItemSingle(ResponseContext_1.ResponseContext.ContextName);
        if (!responseContext)
            return;
        responseContext.response = responseContext.response || {};
        if (responseKey) {
            responseContext.response[responseKey] = returnedResponseObject.data;
            responseContext.response["headers"] = responseContext.response["headers"] || {};
            responseContext.response["status"] = responseContext.response["status"] || {};
            returnedResponseObject["headers"] ? responseContext.response["headers"][responseKey] = returnedResponseObject["headers"] : undefined;
            returnedResponseObject["status"] ? responseContext.response["status"][responseKey] = returnedResponseObject["status"] : undefined;
        }
        else {
            responseContext.response = __assign(__assign({}, responseContext.response), returnedResponseObject.data);
            (returnedResponseObject["headers"] && !responseContext.response["__headers"]) ? responseContext.response["__headers"] = returnedResponseObject["headers"] : undefined;
            (returnedResponseObject["status"] && !responseContext.response["__status"]) ? responseContext.response["__status"] = returnedResponseObject["status"] : undefined;
        }
    };
    RequestManager.prototype.requestMethod = function (request) {
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var self = this;
        httpHeaderHelper_1.HTTPHeader.createDefaultHeaders(dory, request);
        var instance = new Promise(function (resolve, reject) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            var network = dory.shellConfigs.network;
            var promHandler = function (prom) {
                prom.then(resolve).catch(reject);
                return prom;
            };
            switch (request.http.toUpperCase()) {
                case "GET":
                    promHandler(network.get({ url: request.url, urlParams: request.data, headers: request.headers, options: { disableLoading: (_a = request.disableLoading) !== null && _a !== void 0 ? _a : false, withCredentials: (_b = request.withCredentials) !== null && _b !== void 0 ? _b : false, timeout: request.timeout } }));
                    break;
                case "POST":
                    promHandler(network.post({ url: request.url, body: request.data, headers: request.headers, options: { disableLoading: (_c = request.disableLoading) !== null && _c !== void 0 ? _c : false, withCredentials: (_d = request.withCredentials) !== null && _d !== void 0 ? _d : false, timeout: request.timeout } }));
                    break;
                case "MULTIPART":
                    promHandler(network.multipart({ url: request.url, body: request.data, headers: request.headers, options: { disableLoading: (_e = request.disableLoading) !== null && _e !== void 0 ? _e : false, withCredentials: (_f = request.withCredentials) !== null && _f !== void 0 ? _f : false, timeout: request.timeout } }));
                    break;
                case "PUT":
                    promHandler(network.put({ url: request.url, body: request.data, headers: request.headers, options: { disableLoading: (_g = request.disableLoading) !== null && _g !== void 0 ? _g : false, withCredentials: (_h = request.withCredentials) !== null && _h !== void 0 ? _h : false, timeout: request.timeout } }));
                    break;
                case "POSTBLOB":
                    promHandler(network.post({ url: request.url, config: { responseType: "blob" }, body: request.data, headers: request.headers, options: { disableLoading: (_j = request.disableLoading) !== null && _j !== void 0 ? _j : false, withCredentials: (_k = request.withCredentials) !== null && _k !== void 0 ? _k : false, timeout: request.timeout } }));
                    break;
                case "GETBLOB":
                    promHandler(network.get({ url: request.url, urlParams: request.data, config: { responseType: "blob" }, headers: request.headers, options: { disableLoading: (_l = request.disableLoading) !== null && _l !== void 0 ? _l : false, withCredentials: (_m = request.withCredentials) !== null && _m !== void 0 ? _m : false, timeout: request.timeout } }));
                    break;
                case "DELETE":
                    promHandler(network.delete({ url: request.url, body: request.data, headers: request.headers, options: { disableLoading: (_o = request.disableLoading) !== null && _o !== void 0 ? _o : false, withCredentials: (_p = request.withCredentials) !== null && _p !== void 0 ? _p : false, timeout: request.timeout } }));
                    break;
                case "PATCH":
                    promHandler(network.patch({ url: request.url, body: request.data, urlParams: request.data, headers: request.headers, options: { disableLoading: (_q = request.disableLoading) !== null && _q !== void 0 ? _q : false, withCredentials: (_r = request.withCredentials) !== null && _r !== void 0 ? _r : false, timeout: request.timeout } }));
                    break;
            }
        });
        return instance;
    };
    return RequestManager;
}());
exports.RequestManager = RequestManager;


/***/ }),

/***/ "../../common/dory/src/Managers/PropCalcContext.ts":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/PropCalcContext.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PropCalcContext = void 0;
var Evaluator_1 = __webpack_require__(/*! ./Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var PropDepTracker_1 = __webpack_require__(/*! ./PropDepTracker */ "../../common/dory/src/Managers/PropDepTracker.ts");
var PropCalcContext = /** @class */ (function () {
    function PropCalcContext(context, contextTarget) {
        this.contextName = PropCalcContext.ContextName;
        this.evaluator = new Evaluator_1.Evaluator();
        this.context = context;
        var propCalcContext = this.context.GetItemSingle(PropCalcContext.ContextName);
        if (!propCalcContext) {
            this.context.RegisterItem(this);
        }
    }
    PropCalcContext.prototype.watch = function (bindObject, field) {
        new PropDepTracker_1.PropDepTracker().createDepTracker(bindObject, field, this.propContextDepGetter, this.propContextDepTriggerer, this);
    };
    /**
     * Return prop context value
     * @param self 'this' will be lost when triggering from Object defined get method
     */
    PropCalcContext.prototype.propContextDepGetter = function (self) {
        return self.contextTarget;
    };
    /**
     * Trigger the dependent target with new value
     * @param depTarget Dependency target
     * @param dataItem Evaluator dataSource
     * @param self 'this' will be lost when triggering from Object defined get method
     * @param lang Evaluator language option
     */
    PropCalcContext.prototype.propContextDepTriggerer = function (_a) {
        var depTarget = _a.depTarget, dataItem = _a.dataItem, self = _a.self, lang = _a.lang;
        if (depTarget && depTarget.instanceHolder.targetInstance.ref.component) {
            var evaluationResult = self.evaluator.Evaluate({ script: depTarget.depScriptValue, dataSource: dataItem, context: self.context, lang: lang });
            var targetComp = depTarget.instanceHolder.targetInstance.ref.component;
            if (targetComp[depTarget.field] == evaluationResult) {
                return;
            }
            targetComp[depTarget.field] = evaluationResult;
        }
    };
    /**
     * Set prop context value with field and scriptValue
     * @param instanceHolder Target object instance
     * @param field Binded field
     * @param scriptValue Binded script value
     */
    PropCalcContext.prototype.setContextTarget = function (instanceHolder, field, scriptValue) {
        if (typeof scriptValue != "string") {
            return;
        }
        this.contextTarget = { instanceHolder: instanceHolder, field: field, depScriptValue: scriptValue };
    };
    /**
     * Reset prop context
     */
    PropCalcContext.prototype.clearPropTarget = function () {
        this.contextTarget = undefined;
    };
    PropCalcContext.prototype.isTargetCompInstance = function (targetInstance) {
        return targetInstance.ref !== undefined;
    };
    //property'ler typescript'e geçerken, await ve then'in ya kapatılması lazım, ya da propertyCalculationContext'in resurrect edilip tekrar hibernate'e alınması lazım.(ikiside burada)
    PropCalcContext.ContextName = "PropCalcContext";
    return PropCalcContext;
}());
exports.PropCalcContext = PropCalcContext;


/***/ }),

/***/ "../../common/dory/src/Managers/PropDepTracker.ts":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/PropDepTracker.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PropDepTracker = void 0;
var PropCalcContext_1 = __webpack_require__(/*! ./PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var HistoryManager_1 = __webpack_require__(/*! ./HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var PropDepTracker = /** @class */ (function () {
    function PropDepTracker() {
    }
    /**
     * Create a new object with one way binded
     * @param bindObject Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.
     * @param field The property name
     * @param depGetter Get method of subscribed fields
     * @param depTriggerer Trigger method of subscribers
     */
    PropDepTracker.prototype.createDepTracker = function (bindObject, field, depGetter, depTriggerer, propCalcContext) {
        var _this = this;
        var fieldValue;
        Object.defineProperty(bindObject["contextItems"], field, {
            set: function (value) {
                var _a;
                fieldValue = value;
                var currPage = (_a = propCalcContext.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
                var pageID = currPage === null || currPage === void 0 ? void 0 : currPage.pageId;
                var propCalcParam = currPage === null || currPage === void 0 ? void 0 : currPage.context.GetItemSingle(PropCalcContext_1.PropCalcContext.ContextName);
                var dpndnts = bindObject.getDependants(field, pageID);
                _this.propSetter(depTriggerer, dpndnts, propCalcParam);
            },
            get: function () {
                var _a;
                var currPage = (_a = propCalcContext.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
                var pageID = currPage === null || currPage === void 0 ? void 0 : currPage.pageId;
                var propCalcParam = currPage === null || currPage === void 0 ? void 0 : currPage.context.GetItemSingle(PropCalcContext_1.PropCalcContext.ContextName);
                bindObject.addDependant(field, pageID, propCalcParam);
                _this.propGetter(depGetter, propCalcParam);
                return fieldValue;
            }, enumerable: true,
            configurable: true
        });
    };
    /**
     * Getter of one way binded object
     * @param depGetter Get method of subscribed fields
     * @param subscribers Subscriber list of new object
     * @param retVal Return value of new object
     */
    PropDepTracker.prototype.propGetter = function (depGetter, propCalcContext) {
        depGetter(propCalcContext);
    };
    /**
     * Setter of one way binded object
     * @param deepTriggerer Trigger method of subscribers
     * @param subscribers Subscriber list of new object
     */
    PropDepTracker.prototype.propSetter = function (deepTriggerer, subscribers, propCalcContext) {
        if (!subscribers) {
            return;
        }
        Object.keys(subscribers).forEach(function (key) { return deepTriggerer({ depTarget: subscribers[key], self: propCalcContext }); });
    };
    return PropDepTracker;
}());
exports.PropDepTracker = PropDepTracker;


/***/ }),

/***/ "../../common/dory/src/Managers/QPromise.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/QPromise.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QPromise = void 0;
var QPromise = /** @class */ (function () {
    function QPromise(executor) {
        var _this = this;
        this.finalize = function () { return _this.finalized = true; }; // caution!! must be lambda. Attention to "What is this"!!
        this.callbacks = {};
        this[_b] = "Promise";
        this.selfPromise = executor === QPromise.noop ? undefined : new Promise(executor);
        this.callbacks = QPromise.staticCallbacks;
    }
    QPromise.setStaticCallbacksAndRetrieveOld = function (staticCallbacks) {
        var oldCb = QPromise.staticCallbacks;
        QPromise.staticCallbacks = staticCallbacks;
        return oldCb;
    };
    QPromise.directCreate = function (selfProm) {
        var prom = new QPromise(QPromise.noop);
        prom.selfPromise = selfProm;
        return prom;
    };
    QPromise.all = function (values) {
        return QPromise.directCreate(Promise.all(values));
    };
    QPromise.race = function (values) {
        return QPromise.directCreate(Promise.race(values));
    };
    QPromise.reject = function (reason) {
        return QPromise.directCreate(Promise.reject(reason));
    };
    QPromise.resolve = function (value) {
        var retVal = value !== void (0) ? Promise.resolve(value) : Promise.resolve();
        return QPromise.directCreate(retVal);
    };
    Object.defineProperty(QPromise.prototype, "Finalized", {
        get: function () { return this.finalized; },
        enumerable: false,
        configurable: true
    });
    QPromise.prototype.then = function (onfulfilled, onrejected) {
        var _this = this;
        var _c, _d;
        //property'ler typescript'e geçerken, await ve then'in ya kapatılması lazım, ya da propertyCalculationContext'in resurrect edilip tekrar hibernate'e alınması lazım.(ikiside burada)
        (_d = (_c = this.callbacks).onThen) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        var fulfillWrapper = !onfulfilled ? undefined : function (value) {
            var old = QPromise.setStaticCallbacksAndRetrieveOld(_this.callbacks);
            var retVal = onfulfilled(value);
            QPromise.setStaticCallbacksAndRetrieveOld(old);
            return retVal;
        };
        var rejectWrapper = !onrejected ? undefined : function (reason) {
            var old = QPromise.setStaticCallbacksAndRetrieveOld(_this.callbacks);
            var retVal = onrejected(reason);
            QPromise.setStaticCallbacksAndRetrieveOld(old);
            return retVal;
        };
        var childPromise = this.selfPromise.then(fulfillWrapper, rejectWrapper);
        this.selfPromise.finally(this.finalize);
        return QPromise.directCreate(childPromise);
    };
    QPromise.prototype.catch = function (onrejected) {
        var _this = this;
        var _c, _d;
        (_d = (_c = this.callbacks).onCatch) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        var rejectWrapper = !onrejected ? undefined : function (reason) {
            var old = QPromise.setStaticCallbacksAndRetrieveOld(_this.callbacks);
            var retVal = onrejected(reason);
            QPromise.setStaticCallbacksAndRetrieveOld(old);
            return retVal;
        };
        var childPromise = this.selfPromise.catch(rejectWrapper);
        this.selfPromise.finally(this.finalize);
        return QPromise.directCreate(childPromise);
    };
    QPromise.prototype.finally = function (onfinally) {
        var _this = this;
        var _c, _d;
        (_d = (_c = this.callbacks).onFinally) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        var finallyWrapper = !onfinally ? undefined : function () {
            var old = QPromise.setStaticCallbacksAndRetrieveOld(_this.callbacks);
            var retVal = onfinally();
            QPromise.setStaticCallbacksAndRetrieveOld(old);
            return retVal;
        };
        var childPromise = this.selfPromise.finally(finallyWrapper);
        this.selfPromise.finally(this.finalize);
        return QPromise.directCreate(childPromise);
    };
    var _a, _b;
    _a = Symbol.species, _b = Symbol.toStringTag;
    QPromise.staticCallbacks = {};
    QPromise.noop = function () { };
    QPromise[_a] = Promise;
    return QPromise;
}());
exports.QPromise = QPromise;


/***/ }),

/***/ "../../common/dory/src/Managers/RenderingManager.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/RenderingManager.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingManager = void 0;
var QJsonManagerForAIService_1 = __webpack_require__(/*! ../../../shrimp/helpers/AIServiceHelper/QJsonManagerForAIService */ "../../common/shrimp/helpers/AIServiceHelper/QJsonManagerForAIService.ts");
var CompJsonMigrator_1 = __webpack_require__(/*! ../../../shrimp/helpers/CompJsonMigrator */ "../../common/shrimp/helpers/CompJsonMigrator.ts");
var QJsonHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/QJsonHelper */ "../../common/shrimp/helpers/QJsonHelper.ts");
var StyleHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/StyleHelper */ "../../common/shrimp/helpers/StyleHelper.ts");
var compDiffHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/compDiffHelper */ "../../common/shrimp/helpers/compDiffHelper.ts");
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var typeHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var ICompJson_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
var IPromiseData_1 = __webpack_require__(/*! ../../../shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var LangCalc_1 = __webpack_require__(/*! ../../../shrimp/interfaces/Scripting/LangCalc */ "../../common/shrimp/interfaces/Scripting/LangCalc.ts");
var performance_1 = __webpack_require__(/*! ../../../shrimp/performance */ "../../common/shrimp/performance.ts");
var Dory_1 = __webpack_require__(/*! ../../src/Dory */ "../../common/dory/src/Dory.ts");
var BlockInfo_1 = __webpack_require__(/*! ../Context/BlockInfo */ "../../common/dory/src/Context/BlockInfo.ts");
var RenderingContext_1 = __webpack_require__(/*! ../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var ComponentCommunicator_1 = __webpack_require__(/*! ../Helpers/ComponentCommunicator */ "../../common/dory/src/Helpers/ComponentCommunicator.ts");
var ComponentCollection_1 = __webpack_require__(/*! ../Model/Component/ComponentCollection */ "../../common/dory/src/Model/Component/ComponentCollection.ts");
var EventCollection_1 = __webpack_require__(/*! ../Model/Component/EventCollection */ "../../common/dory/src/Model/Component/EventCollection.ts");
var EventData_1 = __webpack_require__(/*! ../Model/Component/EventData */ "../../common/dory/src/Model/Component/EventData.ts");
var Evaluator_1 = __webpack_require__(/*! ./Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var PropCalcContext_1 = __webpack_require__(/*! ./PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var RenderingManager = /** @class */ (function () {
    function RenderingManager(_a) {
        var pjson = _a.pjson, context = _a.context, _b = _a.dataItem, dataItem = _b === void 0 ? null : _b, _c = _a.asChildType, asChildType = _c === void 0 ? ICompJson_1.CType.child : _c, asChildName = _a.asChildName, controlDict = _a.controlDict, qLang = _a.qLang, parentCompCollection = _a.parentCompCollection, compareCompValue = _a.compareCompValue, dynamicCompIDSuffix = _a.dynamicCompIDSuffix, pageScripting = _a.pageScripting, qjsonVersion = _a.qjsonVersion;
        this.contextName = RenderingManager.ContextName;
        this.controlList = [];
        this.evaluator = new Evaluator_1.Evaluator();
        this.compCommunicator = new ComponentCommunicator_1.ComponentCommunicator();
        this.typeHelper = new typeHelper_1.TypeHelper();
        this.pjson = pjson;
        this.context = context;
        this.dataItem = dataItem;
        this.asChildType = asChildType;
        this.asChildName = asChildName;
        this.controlDict = controlDict;
        var renderingmanagerContext = this.context.GetItemSingle(RenderingManager.ContextName);
        if (!renderingmanagerContext) {
            this.context.RegisterItem(this);
        }
        this.blockInfo = new BlockInfo_1.BlockInfo({});
        this.context.RegisterItem(this.blockInfo);
        this.QLang = qLang;
        this.parentCompCollection = parentCompCollection;
        this.compareCompValue = compareCompValue;
        this.dynamicCompIDSuffix = dynamicCompIDSuffix;
        this.pageScrtipting = pageScripting;
        this.qjsonVersion = qjsonVersion;
        if (this.isEditMode()) {
            this.QJsonManagerForAIService = new QJsonManagerForAIService_1.QJsonManagerForAIService();
        }
    }
    RenderingManager.prototype.getLang = function (_a) {
        var self = _a.self, ctrl = _a.ctrl;
        return LangCalc_1.LangCalc.getLang({ self: self, ctrl: ctrl, qLang: this.QLang });
    };
    RenderingManager.prototype.WillRender = function (ctrl) {
        var _a, _b, _c;
        if (((_a = ctrl.P.Render) === null || _a === void 0 ? void 0 : _a.H) && !this.isEditMode()) {
            // don't render
            var display = this.CalculatePropValue({ ctrl: ctrl, prop: "Render", defaultValue: true });
            if (!display) {
                var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
                var engineYamlLogType = (_c = dory === null || dory === void 0 ? void 0 : (_b = dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
                logger_1.Logger.Log({ logMessage: "Not displaying component: " + ctrl.T + " - ID : " + ctrl.P.ID.H, minEngineLogLevel: engineYamlLogType });
                return false;
            }
        }
        return true;
    };
    RenderingManager.prototype.CalculatePropValue = function (_a) {
        var _b, _c, _d, _e;
        var ctrl = _a.ctrl, prop = _a.prop, _f = _a.defaultValue, defaultValue = _f === void 0 ? undefined : _f, compRef = _a.compRef;
        var retVal = defaultValue;
        var value = (_b = ctrl.P[prop]) === null || _b === void 0 ? void 0 : _b.H;
        var handlerFile = (_c = ctrl.P[prop]) === null || _c === void 0 ? void 0 : _c.HF;
        var propContextManager = this.context.GetItemSingle(PropCalcContext_1.PropCalcContext.ContextName);
        if (compRef && value) {
            propContextManager.setContextTarget({ targetInstance: compRef }, prop, value);
        }
        try {
            if (handlerFile) {
                retVal = this.evaluator.Evaluate2({ scriptName: value, pageScripting: this.pageScrtipting, dataSource: this.dataItem, context: this.context });
            }
            else {
                retVal = this.evaluator.Evaluate({ script: value, dataSource: this.dataItem, context: this.context, lang: this.getLang({ ctrl: ctrl }) });
            }
        }
        catch (e) {
            var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
            var engineYamlLogType = (_e = dory === null || dory === void 0 ? void 0 : (_d = dory.shellConfigs).getMinEngineLogType) === null || _e === void 0 ? void 0 : _e.call(_d);
            logger_1.Logger.Log({ logMessage: ctrl.P.ID.H + ".P." + prop + " failed on comp(" + ctrl.T + "): " + e.message, error: e, logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
        }
        finally {
            propContextManager.clearPropTarget();
        }
        return retVal;
    };
    RenderingManager.prototype.GenerateProps = function (ctrl, compRef, compCollection) {
        var _a, _b;
        var props = {};
        var attrs = { "q_UID": compCollection.GetCompUID() };
        var compClass;
        var text;
        if (ctrl._Editor && ctrl._Editor.eID) {
            props.eID = ctrl._Editor.eID;
        }
        for (var prop in ctrl.P) {
            var propJson = ctrl.P[prop];
            switch (prop) {
                case "ID": {
                    props[prop] = propJson.H;
                    continue;
                }
            }
            if (propJson.T == ICompJson_1.PType.prop && !this.compCommunicator.ComponentHasProp(ctrl.T, ctrl.O, prop, this.context)) {
                var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
                var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
                logger_1.Logger.Log({ logMessage: "P is not implemented on comp " + ctrl.T + ": prop ", minEngineLogLevel: engineYamlLogType });
                continue;
            }
            var value = propJson.DE ? propJson.H : this.CalculatePropValue({ ctrl: ctrl, prop: prop, compRef: compRef });
            switch (propJson.T) {
                default:
                case ICompJson_1.PType.prop:
                    props[prop] = value;
                    break;
                case ICompJson_1.PType.class:
                    compClass = value;
                    break;
                case ICompJson_1.PType.text:
                    text = value;
                    break;
                case ICompJson_1.PType.attr: {
                    attrs = attrs !== null && attrs !== void 0 ? attrs : {};
                    attrs[prop] = value;
                    break;
                }
            }
        }
        if (ctrl.O && ctrl.O.layout) {
            if (compClass === undefined) {
                compClass = ctrl.O.layout.class;
            }
            else {
                compClass = compClass + " " + ctrl.O.layout.class;
            }
        }
        if (ctrl.SA) {
            compClass = compClass ? compClass + " " + ctrl.SA[0] : ctrl.SA[0];
        }
        return { props: props, compClass: compClass, text: text, attrs: attrs };
    };
    RenderingManager.prototype.GenerateEvents = function (ctrl, events) {
        for (var key in ctrl.E) {
            var eJson = ctrl.E[key];
            if (typeof eJson.H == "object" && eJson.H.type != "flow_r") {
                throw new Error("uncompiled flow model in qjson");
            }
            events.RegisterEvent({
                eventData: new EventData_1.EventData({
                    eventName: key,
                    handler: eJson.H,
                    context: this.context,
                    eventParameters: eJson.P,
                    immediate: eJson.I,
                    customEvent: eJson.C,
                    propertyEvent: eJson.PE,
                    triggerOrder: eJson.TO,
                    externalVisible: eJson.EV,
                    handlerLang: this.getLang({ self: eJson.HL, ctrl: ctrl }),
                    scopeObject: this.dataItem
                })
            });
        }
    };
    /**
     * Generate directives of the component. Collect them into DirectiveCollection on directives fields.
     * Set handler method which has been set already on ctrl with the same name event.
     * @param ctrl ICompJson of the component
     * @param directives Directive collection of the component. Get all the directives from this collection
     */
    RenderingManager.prototype.GenerateDirectives = function (_a) {
        var _this = this;
        var ctrl = _a.ctrl, directives = _a.directives;
        if (!directives)
            return;
        var _loop_1 = function (directiveName) {
            var directiveElement = { name: directiveName, value: { handler: function () { }, options: {} } };
            if (Object.prototype.hasOwnProperty.call(ctrl.D, directiveName)) {
                var directiveJson_1 = ctrl.D[directiveName];
                Object.keys(directiveJson_1).map(function (field) {
                    var directiveField = directiveJson_1[field];
                    if (directiveField.P) {
                        directives.RegisterDirectiveEvent(directiveName, new EventData_1.EventData({
                            eventName: field,
                            handler: directiveField.H,
                            context: _this.context,
                            eventParameters: directiveField.P,
                            handlerLang: directiveField.HL
                        }));
                    }
                    else {
                        directiveElement.value.options = directiveElement.value.options || {};
                        directiveElement.value.options[field] = _this.evaluator.Evaluate({ script: directiveField.H, dataSource: _this.dataItem, context: _this.context, lang: _this.getLang({ ctrl: ctrl }) });
                    }
                });
            }
            var directiveFunctions = directives.GetEventBoundFunctions().eventFunctions;
            directiveElement.value.handler = directiveFunctions[directiveName];
            directives.RegisterDirective(directiveElement);
        };
        for (var directiveName in ctrl.D) {
            _loop_1(directiveName);
        }
    };
    RenderingManager.prototype.CalculateStyle = function (_a) {
        var _b, _c, _d;
        var compType = _a.compType, compInlineStyles = _a.compInlineStyles, compStyleNames = _a.compStyleNames;
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var assetValue = dory === null || dory === void 0 ? void 0 : dory.GetAssetValues();
        var currentTheme = dory === null || dory === void 0 ? void 0 : dory.GetCurrentTheme();
        var theme = (_b = dory === null || dory === void 0 ? void 0 : dory.GetThemes()) === null || _b === void 0 ? void 0 : _b.find(function (theme) { return theme.name == (currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.name); });
        var themeColors = (currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.isLight) ? theme === null || theme === void 0 ? void 0 : theme.lightTheme.colors : (_c = theme === null || theme === void 0 ? void 0 : theme.darkTheme) === null || _c === void 0 ? void 0 : _c.colors;
        var themeFonts = (currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.isLight) ? theme === null || theme === void 0 ? void 0 : theme.lightTheme.fonts : (_d = theme === null || theme === void 0 ? void 0 : theme.darkTheme) === null || _d === void 0 ? void 0 : _d.fonts;
        this.matchTheme(themeColors, compInlineStyles, themeFonts);
        var calculatedStyles = {};
        var compStyle = assetValue === null || assetValue === void 0 ? void 0 : assetValue[compType];
        compStyleNames === null || compStyleNames === void 0 ? void 0 : compStyleNames.forEach(function (name) { return calculatedStyles = __assign(__assign({}, calculatedStyles), compStyle === null || compStyle === void 0 ? void 0 : compStyle[name]); });
        calculatedStyles = __assign(__assign({}, calculatedStyles), compInlineStyles);
        return Object.keys(calculatedStyles).length > 0 ? calculatedStyles : compStyle === null || compStyle === void 0 ? void 0 : compStyle.default;
    };
    RenderingManager.prototype.matchTheme = function (themeColors, compInlineStyles, themeFonts) {
        var _this = this;
        if (!themeColors || !compInlineStyles) {
            return;
        }
        Object.keys(compInlineStyles).forEach(function (breakPoint) {
            Object.keys(compInlineStyles[breakPoint]).forEach(function (param) {
                var _a;
                var styleValue = (_a = compInlineStyles[breakPoint]) === null || _a === void 0 ? void 0 : _a[param];
                var color = themeColors.find(function (color) { return color.name == styleValue; });
                compInlineStyles[breakPoint][param] = (color === null || color === void 0 ? void 0 : color.color) || styleValue;
                if (styleValue && styleValue.indexOf("_") == 0 && styleValue.lastIndexOf("_") == styleValue.length - 1 && themeFonts) {
                    compInlineStyles[breakPoint][param] = _this.matchThemeFonts(themeFonts, styleValue);
                }
            });
        });
    };
    RenderingManager.prototype.matchThemeFonts = function (themeFonts, styleValue) {
        var themeSplit = styleValue.replaceAll("_", "").split(".");
        if (themeSplit.length != 2) {
            return styleValue;
        }
        var currentTheme = themeFonts.find(function (theme) { return theme.fontClassName == themeSplit[0]; });
        var configValue = currentTheme.configs[themeSplit[1]];
        if (configValue == "Italic") {
            return configValue;
        }
        return currentTheme.configs[themeSplit[1]].replace("Italic", "");
    };
    RenderingManager.prototype.generatePropsFromStyle = function (comJson, styles) {
        var additonalCompType = StyleHelper_1.StyleHelper.additionalPropsFromStyle[comJson.T];
        if (!additonalCompType || !styles) {
            return;
        }
        var forcedProps = undefined;
        Object.keys(additonalCompType).forEach(function (styleName) {
            var _a, _b, _c, _d;
            var propArray = additonalCompType[styleName];
            var definedStyle = true;
            for (var index = 0; index < Object.keys(styles).length; index++) {
                var breakPointName = Object.keys(styles)[index];
                definedStyle = ((_a = styles[breakPointName]) === null || _a === void 0 ? void 0 : _a[styleName]) === "unset" || ((_b = styles[breakPointName]) === null || _b === void 0 ? void 0 : _b[styleName]) === "" || ((_c = styles[breakPointName]) === null || _c === void 0 ? void 0 : _c[styleName]) === undefined || ((_d = styles[breakPointName]) === null || _d === void 0 ? void 0 : _d[styleName]) === "false";
                if (!definedStyle) {
                    break;
                }
            }
            if (definedStyle) {
                return;
            }
            forcedProps = forcedProps || {};
            propArray.forEach(function (prop) { return forcedProps[prop] = true; });
        });
        return forcedProps;
    };
    RenderingManager.prototype.getItemValue = function (item, itemKey) {
        if (!item || !itemKey) {
            return "";
        }
        var index = itemKey.indexOf(".");
        if (index > -1) {
            var newKey = itemKey.substring(0, index);
            return this.getItemValue(item[newKey], itemKey.substring(index + 1));
        }
        else {
            return item[itemKey];
        }
    };
    RenderingManager.prototype.GenerateChildren = function (compJson, props, parentCompCollection) {
        var _this = this;
        var _a;
        if (Object.keys(compJson.C).length <= 0) {
            return null;
        }
        var retVal = { children: {} };
        var calcChildForKey = function (_a) {
            var _b, _c;
            var key = _a.key, childJson = _a.childJson, parentCompCollection = _a.parentCompCollection, dataItem = _a.dataItem, props = _a.props;
            // This code block added for environment differences. If dataItem has no item you don't have to recreate it. 
            var hasScopedData = dataItem && Object.keys(dataItem).length == 0 ? false : true;
            if (retVal.children[key] && !hasScopedData) {
                return retVal.children[key];
            }
            if (props.itemKey && props.uniqueSlots) {
                childJson.c.forEach(function (childJson) {
                    var splittedID = childJson.P.ID.H.split("_q_");
                    childJson.P.ID.H = splittedID[0] + "_q_" + _this.getItemValue(dataItem === null || dataItem === void 0 ? void 0 : dataItem.item, props["itemKey"]);
                });
            }
            if (_this.compareCompValue && parentCompCollection && compDiffHelper_1.compDiffHelper.componentValueList[parentCompCollection.compType] &&
                ((_b = parentCompCollection.component) === null || _b === void 0 ? void 0 : _b[compDiffHelper_1.ComparisonEnum.compareValueField])) {
                compDiffHelper_1.compDiffHelper.compareAndSetFields({ compJson: childJson, valueField: dataItem["item"], compareValue: parentCompCollection.component[compDiffHelper_1.ComparisonEnum.compareValueField], compareDataField: props["CompareDataField"], headerValue: dataItem["header"]["value"] });
            }
            var managerOptions = {
                pjson: childJson.c,
                dataItem: Object.assign({}, _this.dataItem, dataItem),
                context: _this.context,
                asChildType: childJson.cType,
                asChildName: key,
                controlDict: _this.controlDict,
                parentCompCollection: parentCompCollection,
                compareCompValue: _this.compareCompValue,
                dynamicCompIDSuffix: _this.dynamicCompIDSuffix,
                pageScripting: _this.pageScrtipting,
                qjsonVersion: _this.qjsonVersion,
            };
            var rm = new RenderingManager(managerOptions);
            rm.Render(rm.blockInfo.blockJsonIndex);
            retVal.children[key] = rm.controlList;
            if (_this.isEditMode()) {
                (_c = _this.QJsonManagerForAIService) === null || _c === void 0 ? void 0 : _c.setModelChild(props.ID, key, rm.QJsonManagerForAIService);
            }
            parentCompCollection === null || parentCompCollection === void 0 ? void 0 : parentCompCollection.RootHistoryItem.ReCalculateCompInstDict();
            return rm.controlList;
        };
        for (var key in compJson.C) {
            var childJson = compJson.C[key];
            var childFields = { key: key, childJson: childJson, parentCompCollection: parentCompCollection, props: props };
            switch (childJson.cType) {
                case ICompJson_1.CType.child:
                    calcChildForKey(childFields);
                    break;
                case ICompJson_1.CType.scopedSlot:
                    retVal.childrenCreators = (_a = retVal.childrenCreators) !== null && _a !== void 0 ? _a : {};
                    retVal.childrenCreators[key] = (function (closureObj) { return function (scopeObject) { return calcChildForKey({ key: closureObj.key, childJson: closureObj.childJson, parentCompCollection: closureObj.parentCompColl, dataItem: scopeObject, props: props }); }; })({ key: key, childJson: childJson, parentCompColl: parentCompCollection });
                    break;
                case ICompJson_1.CType.slot:
                    calcChildForKey(childFields);
                    break;
            }
        }
        return retVal;
    };
    RenderingManager.prototype.isEditMode = function () {
        var _a;
        return (_a = this.context.GetItemSingle(Dory_1.Dory.ContextName)) === null || _a === void 0 ? void 0 : _a.isEditorInEditState;
    };
    RenderingManager.prototype.getComponentParentInstance = function () {
        var _a;
        return (_a = this.context.GetItemSingle(RenderingContext_1.RenderingContext.ContextName)) === null || _a === void 0 ? void 0 : _a.getCompParentInst();
    };
    RenderingManager.prototype.RenderRoot = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1, ex2_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 1, , 6]);
                        this.Render(this.blockInfo.blockJsonIndex);
                        return [3 /*break*/, 6];
                    case 1:
                        ex_1 = _a.sent();
                        if (!this.blockInfo.blockPromises) {
                            throw ex_1;
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, (0, IPromiseData_1.PromiseAllSettled)(this.blockInfo.blockPromises)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ex2_1 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        this.Render(this.blockInfo.blockJsonIndex);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    RenderingManager.prototype.Render = function (jsonIndexParam) {
        var _a;
        performance_1.PerfSingles.Instance().Start("RenderingManagerRender");
        for (var jsonIndex = jsonIndexParam; jsonIndex < this.pjson.length; jsonIndex++) {
            var compJson = this.pjson[jsonIndex];
            performance_1.PerfSingles.Instance().Start(compJson.T);
            if (!this.WillRender(compJson)) {
                continue;
            }
            CompJsonMigrator_1.CompJsonMigrator.fixCtrlOldStyle(compJson);
            var component = null;
            var children = void 0;
            var childrenCreators = void 0;
            var props = void 0;
            var attrs = void 0;
            var parentInstance = void 0;
            var compCollection = new ComponentCollection_1.ComponentCollection({
                asChildIndex: jsonIndex, compJson: compJson, context: this.context, asChildType: this.asChildType, asChildName: this.asChildName,
                parentCompCollection: this.parentCompCollection, compareComponent: this.compareCompValue, dynamicCompIdSuffix: this.dynamicCompIDSuffix, qjsonVersion: this.qjsonVersion
            });
            var events = compCollection.events;
            var directiveFields = compCollection.directiveFields;
            var compClass = undefined;
            var text = undefined;
            try {
                var compRefCollection = { ref: compCollection };
                (_a = this.GenerateProps(compJson, compRefCollection, compCollection), props = _a.props, text = _a.text, compClass = _a.compClass, attrs = _a.attrs);
                if (this.compareCompValue && compDiffHelper_1.compDiffHelper.componentValueList[compCollection.compType] && props.CompareDataField) {
                    compDiffHelper_1.compDiffHelper.createChipComponentOnNonSlotChilds(compJson, props);
                }
                this.overrideChildStylesFromParent(compJson);
                var generatedChildren = this.GenerateChildren(compJson, props, compCollection);
                children = generatedChildren === null || generatedChildren === void 0 ? void 0 : generatedChildren.children;
                childrenCreators = generatedChildren === null || generatedChildren === void 0 ? void 0 : generatedChildren.childrenCreators;
                this.GenerateEvents(compJson, events);
                this.GenerateDirectives({ ctrl: compJson, directives: directiveFields });
                parentInstance = this.getComponentParentInstance();
                var styles = undefined;
                if (this.qjsonVersion && this.qjsonVersion > 1.0) {
                    styles = this.CalculateStyle({ compType: compJson.T, compStyleNames: compJson.SA, compInlineStyles: compJson.S });
                    var newProps = this.generatePropsFromStyle(compJson, styles);
                    Object.assign(props, newProps);
                    compCollection.SetComponentStyles(styles);
                }
                compCollection.SetChildrenFields({ children: children, childrenCreators: childrenCreators });
                compRefCollection.ref = compCollection;
                events.SetOwner({ ownerComponent: compCollection });
                directiveFields.SetOwner({ ownerComponent: compCollection });
                component = this.compCommunicator.CreateComponent({
                    componentName: compJson.T, props: props, events: events, context: this.context, asChildType: this.asChildType, asChildName: this.asChildName,
                    children: children,
                    parentInst: parentInstance,
                    childrenCreators: childrenCreators,
                    compCollection: compCollection,
                    compClass: compClass,
                    text: text,
                    attrs: attrs,
                    compareCompValue: this.compareCompValue, directives: directiveFields.GetDirectives(),
                    styles: styles
                });
            }
            catch (e) {
                var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
                this.createErrorComp(compJson, e, props = {}, events = new EventCollection_1.EventCollection(dory), compCollection, parentInstance, component);
            }
            finally {
                if (compCollection) {
                    this.Chain({ ctrl: compJson, compCollection: compCollection });
                }
            }
            performance_1.PerfSingles.Instance().End(compJson.T, compCollection);
            var blockInfo = this.context.GetItemSingle(BlockInfo_1.BlockInfo.ContextName);
            if (blockInfo === null || blockInfo === void 0 ? void 0 : blockInfo.blockRender) {
                blockInfo.blockJsonIndex = jsonIndex + 1;
                blockInfo.blockRender = false;
                performance_1.PerfSingles.Instance().End("RenderingManagerRender");
                throw new Error("Render has been blocked");
            }
        }
        performance_1.PerfSingles.Instance().End("RenderingManagerRender");
    };
    RenderingManager.prototype.overrideChildStylesFromParent = function (compJson) {
        var _this = this;
        if (!compJson.SC || !compJson.S) {
            return;
        }
        QJsonHelper_1.QJsonHelper.ForEachComp([compJson], function (childComp, path) {
            // works only 3 sub children below
            if (path.length < 8) {
                Object.keys(compJson.SC).forEach(function (overrider) {
                    var overrideDictionary = compJson.SC[overrider];
                    var foundComp = Object.keys(overrideDictionary).find(function (compName) { return compName == childComp.T; });
                    if (!foundComp) {
                        return;
                    }
                    childComp.S = childComp.S || {};
                    _this.removeReservedFields(childComp, overrideDictionary[foundComp]);
                    Object.keys(compJson.S).forEach(function (item) {
                        var _a;
                        if (item != 'layoutMap' && item != 'selectedLayout' && typeof compJson.S[item] == "object") {
                            childComp.S[item] = childComp.S[item] || {};
                            childComp.S[item][overrideDictionary[foundComp]] = (_a = compJson.S[item]) === null || _a === void 0 ? void 0 : _a[overrider];
                        }
                    });
                });
            }
            return true;
        });
    };
    RenderingManager.prototype.removeReservedFields = function (compJson, fieldName) {
        Object.keys(compJson.S).forEach(function (item) {
            var styleItem = compJson.S[item];
            styleItem === null || styleItem === void 0 ? true : delete styleItem[fieldName];
        });
    };
    /**
     * Error component property setter function
     * @param props Property dictionary that will be used for error component
     * @param componentName Which component has not rendered
     * @param componentID PropertyID of component that was not rendered
     * @param errorMessage Message that will be prompted
     * @returns void
     */
    RenderingManager.prototype.setErrorComponentProperties = function (_a) {
        var props = _a.props, componentName = _a.componentName, componentID = _a.componentID, errorMessage = _a.errorMessage;
        props["visible"] = true;
        props["componentName"] = componentName;
        props["componentID"] = componentID;
        props["errorMessage"] = errorMessage;
    };
    RenderingManager.prototype.Chain = function (_a) {
        var _b;
        var ctrl = _a.ctrl, compCollection = _a.compCollection;
        if (!compCollection) {
            return;
        }
        this.controlDict[ctrl.P.ID.H] = compCollection;
        this.controlList.push(compCollection);
        if (this.isEditMode()) {
            (_b = this.QJsonManagerForAIService) === null || _b === void 0 ? void 0 : _b.setModels(ctrl);
        }
    };
    /**
     * Create a new error component when a acomponent creation is failed in somehow
     * @param ctrl Failed component json
     * @param e Message of the error
     * @param props New error component properties
     * @param events New error component events
     * @param compCollection Will be created component collection
     * @param jsonIndex Index of failed render length
     * @param parentInstance Parent of the failed component
     * @param component Wİll be created component instance
     */
    RenderingManager.prototype.createErrorComp = function (ctrl, e, props, events, compCollection, parentInstance, component) {
        var _a, _b;
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
        logger_1.Logger.Log({ logMessage: "control name : " + ctrl.T + ": " + e.message, logType: logger_1.LogType.Error, error: e, minEngineLogLevel: engineYamlLogType });
        events.SetOwner({ ownerComponent: compCollection });
        this.setErrorComponentProperties({ props: props, componentName: ctrl.T, componentID: ctrl.P.ID.H, errorMessage: e.message });
        parentInstance = this.getComponentParentInstance();
        component = this.compCommunicator.CreateComponent({ componentName: "DError", props: props, events: events, context: this.context, asChildType: this.asChildType, asChildName: this.asChildName, parentInst: parentInstance, compCollection: compCollection, compareCompValue: false });
        compCollection.SetComponentCreatedFields({ createdComponent: component, keepAnEyeOnCreatedCompInst: true });
    };
    RenderingManager.ContextName = "RenderingManager";
    return RenderingManager;
}());
exports.RenderingManager = RenderingManager;


/***/ }),

/***/ "../../common/dory/src/Managers/StoreManager.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/StoreManager.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreManager = void 0;
var BagStoreContext_1 = __webpack_require__(/*! ../Context/Store/BagStoreContext */ "../../common/dory/src/Context/Store/BagStoreContext.ts");
var GlobalStoreContext_1 = __webpack_require__(/*! ../Context/Store/GlobalStoreContext */ "../../common/dory/src/Context/Store/GlobalStoreContext.ts");
var PageStoreContext_1 = __webpack_require__(/*! ../Context/Store/PageStoreContext */ "../../common/dory/src/Context/Store/PageStoreContext.ts");
var SharedStoreContext_1 = __webpack_require__(/*! ../Context/Store/SharedStoreContext */ "../../common/dory/src/Context/Store/SharedStoreContext.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var StoreContextInfo = /** @class */ (function () {
    function StoreContextInfo(targetStoreContext, targetName) {
        this.targetStoreContext = targetStoreContext;
        this.targetFieldName = targetName;
    }
    return StoreContextInfo;
}());
var StoreManager = /** @class */ (function () {
    function StoreManager(context) {
        this.context = context;
    }
    StoreManager.prototype.decideStoreContext = function (name) {
        var contextName;
        var newName;
        var targetContext = this.context;
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        switch (name[0]) {
            case "$":
                contextName = GlobalStoreContext_1.GlobalStoreContext.ContextName;
                newName = name.substring(1);
                break;
            default:
                contextName = PageStoreContext_1.PageStoreContext.ContextName;
                newName = name;
                break;
            case "#":
                contextName = BagStoreContext_1.BagStoreContext.ContextName;
                newName = name.substring(1);
                break;
            case "@":
                contextName = null;
                newName = name.substring(1);
                break;
            case "&":
                contextName = SharedStoreContext_1.SharedStoreContext.ContextName;
                targetContext = dory.GetInterDoryContext();
                newName = name.substring(1);
                break;
        }
        var targetStoreContext;
        if (contextName) {
            targetStoreContext = targetContext.GetItemSingle(contextName);
        }
        else {
            var dory_1 = targetContext.GetItemSingle(Dory_1.Dory.ContextName);
            targetStoreContext = dory_1 === null || dory_1 === void 0 ? void 0 : dory_1.shellConfigs.storeAccess;
        }
        var sci = new StoreContextInfo(targetStoreContext, newName);
        return sci;
    };
    StoreManager.prototype.set = function (name, value) {
        var storeContext = this.decideStoreContext(name);
        storeContext.targetStoreContext.set(storeContext.targetFieldName, value);
    };
    StoreManager.prototype.get = function (name) {
        var storeContext = this.decideStoreContext(name);
        return storeContext.targetStoreContext.get(storeContext.targetFieldName);
    };
    StoreManager.prototype.delete = function (name) {
        var storeContext = this.decideStoreContext(name);
        storeContext.targetStoreContext.delete(storeContext.targetFieldName);
    };
    StoreManager.prototype.getAll = function (name) {
        var _a, _b;
        var storeContext = this.decideStoreContext(name);
        return (_b = (_a = storeContext.targetStoreContext).getAll) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    StoreManager.prototype.deleteAll = function (name) {
        var _a, _b;
        var storeContext = this.decideStoreContext(name);
        return (_b = (_a = storeContext.targetStoreContext).deleteAll) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    StoreManager.prototype.bulkSet = function (items) {
        var _this = this;
        Object.keys(items).forEach(function (key) { return _this.set(key, items[key]); });
    };
    StoreManager.prototype.getTargetStore = function (name) {
        var storeContext = this.decideStoreContext(name);
        return storeContext;
    };
    return StoreManager;
}());
exports.StoreManager = StoreManager;


/***/ }),

/***/ "../../common/dory/src/Managers/ValidationManager.ts":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Managers/ValidationManager.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationManager = void 0;
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var typeHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var validationHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/validationHelper */ "../../common/shrimp/helpers/validationHelper.ts");
var IAlert_1 = __webpack_require__(/*! ../../../shrimp/interfaces/ComponentInterfaces/IAlert */ "../../common/shrimp/interfaces/ComponentInterfaces/IAlert.ts");
var ScopeContext_1 = __webpack_require__(/*! ../Context/ScopeContext */ "../../common/dory/src/Context/ScopeContext.ts");
var Dory_1 = __webpack_require__(/*! ../Dory */ "../../common/dory/src/Dory.ts");
var HistoryItemBasedLRManager_1 = __webpack_require__(/*! ./HistoryItemBasedLRManager */ "../../common/dory/src/Managers/HistoryItemBasedLRManager.ts");
var HistoryManager_1 = __webpack_require__(/*! ./HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var ValidationManager = /** @class */ (function () {
    function ValidationManager(currentContext) {
        this.currentContext = currentContext;
        this.dory = this.currentContext.GetItemSingle(Dory_1.Dory.ContextName);
        this.historyItemBasedLRManager = this.currentContext.GetItemSingle(HistoryItemBasedLRManager_1.HistoryItemBasedLRManager.ContextName);
    }
    ValidationManager.prototype.validate = function (compId, displayAlertBox, displayError) {
        var compColl = this.getComponentCollectionbyID(compId);
        if (!compColl) {
            return;
        }
        if (this.isCreatorComp(compColl)) {
            compColl = this.getCollectionbyParentID(compId);
        }
        var isValid = true;
        this.iterateToChild(compColl, function (item) {
            if (item.component && !item.component.validate && item.component.validationRefs && item.component.validationRefs().length > 0) {
                var components = item.component.validationRefs();
                components.forEach(function (component) {
                    if (component && component.validate) {
                        if (!component.validate(true)) {
                            isValid = false;
                        }
                    }
                });
            }
            else if (item.component && item.component.validate) {
                if (!item.component.validate(true)) {
                    isValid = false;
                }
            }
            return true;
        });
        displayAlertBox = displayAlertBox !== null && displayAlertBox !== void 0 ? displayAlertBox : true;
        if (!isValid && displayAlertBox) {
            this.showAlertBox();
        }
        return isValid;
    };
    ValidationManager.prototype.validateAll = function (displayAlertBox, displayError) {
        var _this = this;
        var controlDict = this.getControlDict();
        if (controlDict) {
            var isValid_1 = true;
            var traverse_1 = function (control, compID) {
                var e_1, _a, e_2, _b;
                if (control instanceof Array) {
                    try {
                        for (var control_1 = __values(control), control_1_1 = control_1.next(); !control_1_1.done; control_1_1 = control_1.next()) {
                            var controlMultiple = control_1_1.value;
                            traverse_1(controlMultiple, compID);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (control_1_1 && !control_1_1.done && (_a = control_1.return)) _a.call(control_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    if (control.validationRefs && !control.validate && control.validationRefs().length > 0) {
                        try {
                            for (var _c = __values(control.validationRefs()), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var controlMultiple = _d.value;
                                traverse_1(controlMultiple, compID);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    else if (control.validate && _this.isComponentValid(control)) {
                        if (!control.validate(true)) {
                            isValid_1 = false;
                        }
                    }
                }
            };
            Object.keys(controlDict).filter(function (compID) { return controlDict[compID].rules; }).map(function (component) {
                var control = controlDict[component];
                traverse_1(control, component);
            });
            displayAlertBox = displayAlertBox !== null && displayAlertBox !== void 0 ? displayAlertBox : true;
            if (!isValid_1 && displayAlertBox) {
                this.showAlertBox();
            }
            return isValid_1;
        }
    };
    ValidationManager.prototype.resetValidation = function (compId) {
        var compColl = this.getComponentCollectionbyID(compId);
        if (!compColl) {
            return;
        }
        if (this.isCreatorComp(compColl)) {
            compColl = this.getCollectionbyParentID(compId);
        }
        this.iterateToChild(compColl, function (item) {
            if (item.component && !item.component.resetValidation && item.component.validationRefs && item.component.validationRefs().length > 0) {
                var components = item.component.validationRefs();
                components.forEach(function (component) {
                    if (component.resetValidation) {
                        component.resetValidation();
                    }
                });
            }
            else if (item.component && item.component.resetValidation) {
                item.component.resetValidation();
            }
            return true;
        });
    };
    ValidationManager.prototype.reset = function (compId) {
        var _this = this;
        var compColl = this.getComponentCollectionbyID(compId);
        if (!compColl) {
            return;
        }
        if (this.isCreatorComp(compColl)) {
            compColl = this.getCollectionbyParentID(compId);
        }
        this.iterateToChild(compColl, function (item) {
            var _a, _b;
            if (item.component && !item.component.reset && item.component.validationRefs && item.component.validationRefs().length > 0) {
                var components = item.component.validationRefs();
                components.forEach(function (component) {
                    if (component.reset) {
                        component.reset();
                    }
                });
            }
            else if (item.component && item.component.reset) {
                if (item.component.type == 'time') {
                    (_b = (_a = _this.dory.shellConfigs).resetTimeTextField) === null || _b === void 0 ? void 0 : _b.call(_a, item.component);
                }
                item.component.reset();
            }
            return true;
        });
    };
    /**
     * @description This method checks if the parent component has components such as custom component, rendering component.
     * @param compColl
     * @returns boolean
     */
    ValidationManager.prototype.isCreatorComp = function (compColl) {
        return compColl[0].GetDoryJr() ? true : false;
    };
    ValidationManager.prototype.isComponentValid = function (component) {
        return !component.disabled && component.visible;
    };
    /**
     * This method returns control dictionary with subs.
     * @returns controlDict
     */
    ValidationManager.prototype.getControlDict = function () {
        var _a;
        var historyItem = (_a = this.currentContext.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        if (!historyItem) {
            return null;
        }
        var compInstDict = Object.assign({}, historyItem.GetCompInstDict());
        var subCollection = this.dory.GetComponentSubCollection();
        if (subCollection && compInstDict) {
            subCollection.forEach(function (item) {
                if (item.component) {
                    compInstDict[item.compId] = item.component;
                }
            });
        }
        return compInstDict;
    };
    /**
     * @description This method returns DoryJr child components.
     * @param compId
     * @returns compCollection
     */
    ValidationManager.prototype.getCollectionbyParentID = function (compId) {
        var _a;
        var historyItem = (_a = this.currentContext.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        var compCollection;
        var doryJrs = historyItem === null || historyItem === void 0 ? void 0 : historyItem.GetDoryJrs();
        if (doryJrs) {
            doryJrs.forEach(function (doryJr) {
                var _a, _b, _c;
                var scopeProps = (_a = doryJr.ContextJr.GetItemSingle(ScopeContext_1.ScopeContext.ContextName)) === null || _a === void 0 ? void 0 : _a.GetProps();
                if (scopeProps && scopeProps["ID"] == compId) {
                    compCollection = (_c = (_b = doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _b === void 0 ? void 0 : _b.currentLevel().last()) === null || _c === void 0 ? void 0 : _c.controlDict;
                }
            });
        }
        return Object.values(compCollection);
    };
    /**
     * This method returns component colleciton by id. If it is not present in the parent, it looks subs. (Actually getComponentCollectionByIdProperty should have called but it is empty?!?!?!)
     * @param compID
     * @returns Component Collection
     */
    ValidationManager.prototype.getComponentCollectionbyID = function (compId) {
        var _a;
        var historyItem = (_a = this.currentContext.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
        if (!historyItem) {
            return null;
        }
        var compColl = (historyItem === null || historyItem === void 0 ? void 0 : historyItem.controlDict[compId]) || this.dory.GetSubComponentCollectionByID(compId);
        return [compColl];
    };
    ValidationManager.prototype.iterateToChild = function (controlList, callback) {
        var _this = this;
        controlList.forEach(function (item) {
            var cbretVal = callback(item);
            var children = item.children;
            if (cbretVal !== true || !children) {
                return;
            }
            Object.keys(children).forEach(function (key) {
                var _a, _b;
                var currentChildren = children[key];
                if (currentChildren instanceof Function) {
                    var dory = _this.currentContext.GetItemSingle(Dory_1.Dory.ContextName);
                    var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
                    logger_1.Logger.Log({ logMessage: "Scoped Slot children should have been resolved by now child: " + key, logType: logger_1.LogType.Error, minEngineLogLevel: engineYamlLogType });
                    return;
                }
                _this.iterateToChild(currentChildren, callback);
            });
        });
    };
    ;
    ValidationManager.prototype.showAlertBox = function () {
        var dory = this.currentContext.GetItemSingle(Dory_1.Dory.ContextName);
        var historyManager = this.currentContext.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var currentPageId = historyManager.getRootHM().currentLevel().last().pageId;
        var shellGlobalMethods = dory === null || dory === void 0 ? void 0 : dory.shellConfigs.shellGlobalMethods;
        var alertTitle = this.dory.GetLRType() == "tr-TR" ? "Kontrol edilmesi gereken alanlar var." : "There are items that needs your attention.";
        var errorText = this.dory.GetLRType() == "tr-TR" ? "Lütfen alanları kontrol ediniz." : "Please check the fields.";
        if (shellGlobalMethods && shellGlobalMethods.alert) {
            shellGlobalMethods.alert({ title: alertTitle, category: IAlert_1.AlertType.Error, error: { errorMessage: errorText, errorCode: 'notValidErrDefaultMessage', errorSource: IAlert_1.ErrorSource.Validation } }, { currentPageId: currentPageId });
        }
    };
    ValidationManager.prototype.required = function (message) {
        var _a, _b;
        var defaultMessage = (_b = (_a = this.historyItemBasedLRManager) === null || _a === void 0 ? void 0 : _a.GetResource({ key: "validationRequiredDefaultMessage", returnKey: false })) !== null && _b !== void 0 ? _b : (this.dory.GetLRType() == "tr-TR" ? "Lütfen giriş yapınız." : "Please fill out this field.");
        return function (value) {
            var tHelper = new typeHelper_1.TypeHelper();
            if (value === undefined || value === null || value instanceof Array && value.length == 0) {
                return message ? message : defaultMessage;
            }
            else if (tHelper.isObject(value)) {
                return Object.keys(value).length > 0 ? true : message ? message : defaultMessage;
            }
            else if (tHelper.isNumber(value)) {
                return true;
            }
            else if (tHelper.isFile(value)) { //VFileInput
                return value.size && value.size > 0 ? true : message ? message : defaultMessage;
            }
            else {
                return value.length > 0 ? true : message ? message : defaultMessage;
            }
        };
    };
    ValidationManager.prototype.minLength = function (minLength, message, options) {
        var _a, _b;
        var defaultMessage = (_b = (_a = this.historyItemBasedLRManager) === null || _a === void 0 ? void 0 : _a.GetResource({ key: "validationMinLengthDefaultMessage", dataSource: { minLength: minLength }, returnKey: false })) !== null && _b !== void 0 ? _b : (this.dory.GetLRType() == "tr-TR" ? "En az " + minLength + " hane giri\u015F yap\u0131n\u0131z." : "Please enter at least " + minLength + " digits.");
        return function (value) {
            if (value && (options === null || options === void 0 ? void 0 : options.disableNewlineOnCount)) {
                var reg = /\n/g;
                var regValue = value.replace(reg, "");
                value = regValue;
            }
            return value && value.length >= minLength ? true : message ? message : defaultMessage;
        };
    };
    ValidationManager.prototype.maxLength = function (maxLength, message, options) {
        var _a, _b;
        var defaultMessage = (_b = (_a = this.historyItemBasedLRManager) === null || _a === void 0 ? void 0 : _a.GetResource({ key: "validationMaxLengthDefaultMessage", dataSource: { maxLength: maxLength }, returnKey: false })) !== null && _b !== void 0 ? _b : (this.dory.GetLRType() == "tr-TR" ? "En fazla " + maxLength + " hane giri\u015F yap\u0131n\u0131z." : "Please enter up to " + maxLength + " digits.");
        return function (value) {
            if (value && (options === null || options === void 0 ? void 0 : options.disableNewlineOnCount)) {
                var reg = /\n/g;
                var regValue = value === null || value === void 0 ? void 0 : value.replace(reg, "");
                value = regValue;
            }
            return value && value.length <= maxLength ? true : message ? message : defaultMessage;
        };
    };
    ValidationManager.prototype.email = function (message) {
        var _a, _b;
        var defaultMessage = (_b = (_a = this.historyItemBasedLRManager) === null || _a === void 0 ? void 0 : _a.GetResource({ key: "validationEmailDefaultMessage", returnKey: false })) !== null && _b !== void 0 ? _b : (this.dory.GetLRType() == "tr-TR" ? "L\u00FCtfen e-mail format\u0131n\u0131 kontrol ediniz." : "Please check the e-mail format.");
        return function (value) {
            if (!value) {
                return message ? message : defaultMessage;
            }
            var emails = value.split(/,|;/);
            //let reg = ^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$;
            var reg = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$/;
            var control = true;
            emails.forEach(function (val) {
                if (!reg.test(val)) {
                    control = false;
                    return;
                }
            });
            return control ? true : message ? message : defaultMessage;
        };
    };
    ValidationManager.prototype.iban = function (message, ibanOnly) {
        var _a, _b;
        var defaultMessage = (_b = (_a = this.historyItemBasedLRManager) === null || _a === void 0 ? void 0 : _a.GetResource({ key: "validationIbanDefaultMessage", returnKey: false })) !== null && _b !== void 0 ? _b : (this.dory.GetLRType() == "tr-TR" ? "IBAN format\u0131n\u0131 kontrol ediniz." : "Please check the IBAN format");
        return function (value) {
            if (value) {
                var codeLengths = {
                    AD: 24, AE: 23, AL: 28, AT: 20, AZ: 28, BA: 20, BE: 16, BG: 22, BH: 22, BR: 29, CH: 21, CR: 21, CY: 28, CZ: 24,
                    DE: 22, DK: 18, DO: 28, EE: 20, ES: 24, LC: 30, FI: 18, FO: 18, FR: 27, GB: 22, GI: 23, GL: 18, GR: 27, GT: 28,
                    HR: 21, HU: 28, IE: 22, IL: 23, IS: 26, IT: 27, JO: 30, KW: 30, KZ: 20, LB: 28, LI: 21, LT: 20, LU: 20, LV: 21,
                    MC: 27, MD: 24, ME: 22, MK: 19, MR: 27, MT: 31, MU: 30, NL: 18, NO: 15, PK: 24, PL: 28, PS: 29, PT: 25, QA: 29,
                    RO: 24, RS: 22, SA: 24, SE: 24, SI: 19, SK: 24, SM: 27, TN: 24, TR: 26
                };
                var iban = value.toUpperCase('tr').replace(/[^A-Z0-9]/g, '');
                if (ibanOnly) {
                    iban = "TR" + iban;
                }
                var code = iban.match(/^([A-Z]{2})(\d{2})([A-Z\d]+)$/);
                var digits = void 0;
                if (!code || iban.length !== codeLengths[code[1]]) {
                    return message ? message : defaultMessage;
                }
            }
        };
    };
    ValidationManager.prototype.regex = function (regexVal, message) {
        return function (value) {
            return regexVal.test(value) ? true : message;
        };
    };
    ValidationManager.prototype.tckn = function (message) {
        return function (value) {
            return new validationHelper_1.ValidationHelper().checkTCKN(value) ? true : (message ? message : false);
        };
    };
    ValidationManager.prototype.vkn = function (message) {
        return function (value) {
            return new validationHelper_1.ValidationHelper().checkVKN(value) ? true : (message ? message : false);
        };
    };
    return ValidationManager;
}());
exports.ValidationManager = ValidationManager;


/***/ }),

/***/ "../../common/dory/src/Model/Component/ComponentCollection.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/Component/ComponentCollection.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentCollection = void 0;
var hook_1 = __webpack_require__(/*! ../../../../shrimp/helpers/hook */ "../../common/shrimp/helpers/hook.ts");
var ICompJson_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var HistoryManager_1 = __webpack_require__(/*! ../../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var DirectiveCollection_1 = __webpack_require__(/*! ./DirectiveCollection */ "../../common/dory/src/Model/Component/DirectiveCollection.ts");
var EventCollection_1 = __webpack_require__(/*! ./EventCollection */ "../../common/dory/src/Model/Component/EventCollection.ts");
var ComponentCollection = /** @class */ (function () {
    function ComponentCollection(_a) {
        var compJson = _a.compJson, context = _a.context, _b = _a.asChildType, asChildType = _b === void 0 ? ICompJson_1.CType.child : _b, asChildName = _a.asChildName, asChildIndex = _a.asChildIndex, parentCompCollection = _a.parentCompCollection, _c = _a.compareComponent, compareComponent = _c === void 0 ? true : _c, dynamicCompIdSuffix = _a.dynamicCompIdSuffix, qjsonVersion = _a.qjsonVersion;
        var _d, _e;
        this._componentVisibility = true;
        this.compareComponent = false;
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        this.events = new EventCollection_1.EventCollection(dory);
        this.directiveFields = new DirectiveCollection_1.DirectiveCollection(dory);
        this.compId = (compJson === null || compJson === void 0 ? void 0 : compJson.P.ID.H) || "";
        this.compEID = (compJson === null || compJson === void 0 ? void 0 : compJson._Editor.eID) || "";
        this.compType = (compJson === null || compJson === void 0 ? void 0 : compJson.T) || "";
        this.context = context;
        this.asChildIndex = asChildIndex;
        this.childrenType = compJson ? compJson.O.cType : undefined;
        this.asChildType = asChildType;
        this.asChildName = asChildName;
        this.collectionRef = { ref: this };
        this.parentCompCollection = parentCompCollection;
        this.class = (_d = compJson === null || compJson === void 0 ? void 0 : compJson.P.class) === null || _d === void 0 ? void 0 : _d.H;
        this.compDomClass = (_e = compJson === null || compJson === void 0 ? void 0 : compJson.O) === null || _e === void 0 ? void 0 : _e.compDomClasses;
        this.createdFieldsHook = new hook_1.Hook("CreatedFieldsHook");
        this.dynamicCompIdSuffix = dynamicCompIdSuffix;
        this.rootHistoryItem = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).getRootHM().currentLevel().last();
        this.qjsonInfo = { ver: qjsonVersion };
    }
    ComponentCollection.IterateToChild = function (controlListOrItem, callback, options) {
        if (options === void 0) { options = {}; }
        var traverse = function (controlList) {
            var _a, _b;
            for (var index = controlList.length - 1; index >= 0; index--) {
                var item = controlList[index];
                if (callback(item) === false) {
                    return false;
                }
                if (item.children) {
                    for (var key in item.children) {
                        if (Object.prototype.hasOwnProperty.call(item.children, key)) {
                            var currentChildren = item.children[key];
                            if (currentChildren instanceof Function) {
                                return false;
                            }
                            if (traverse(currentChildren) === false) {
                                return false;
                            }
                        }
                    }
                    ;
                }
                if (options === null || options === void 0 ? void 0 : options.iterateDoryJrs) {
                    var jrComps = (_b = (_a = item.GetDoryJr()) === null || _a === void 0 ? void 0 : _a.GetLastHistory()) === null || _b === void 0 ? void 0 : _b.GetComponentList();
                    if (jrComps) {
                        if (traverse(jrComps) === false) {
                            return false;
                        }
                    }
                }
            }
        };
        // let clonedObject = new TypeHelper().cloneObject(controlListOrItem);
        if (!(controlListOrItem instanceof Array)) {
            controlListOrItem = [controlListOrItem];
        }
        traverse(controlListOrItem);
    };
    ;
    Object.defineProperty(ComponentCollection.prototype, "RootHistoryItem", {
        get: function () {
            return this.rootHistoryItem;
        },
        enumerable: false,
        configurable: true
    });
    ComponentCollection.prototype.SetChildrenFields = function (_a) {
        var children = _a.children, childrenCreators = _a.childrenCreators;
        this.children = children;
        this.childrenCreators = childrenCreators;
    };
    ComponentCollection.prototype.SetComponentCreatedFields = function (_a) {
        var _b, _c, _d, _e;
        var createdComponent = _a.createdComponent, _f = _a.keepAnEyeOnCreatedCompInst, keepAnEyeOnCreatedCompInst = _f === void 0 ? false : _f;
        if (keepAnEyeOnCreatedCompInst && !createdComponent.instance) {
            this.compInstanceSetCb = function (compInstance) { return createdComponent.instance = compInstance; };
        }
        if (createdComponent.instance) {
            (_b = this.compInstanceSetCb) === null || _b === void 0 ? void 0 : _b.call(this, createdComponent.instance);
        }
        if (this.domElement == createdComponent.el) {
            createdComponent.el = undefined;
        } //componentInstance setter on vNode "value.$mount()" might have changed $el. If not changed mark $el as unchanged (undef)
        this.component = createdComponent.instance || this.component;
        this.domElement = createdComponent.el || this.domElement;
        this.vDomElement = createdComponent.vel || this.vDomElement;
        this.compGroupType = createdComponent.compGroupType;
        this.createdFieldsHook.triggerer(createdComponent);
        this.lockedFields = createdComponent.lockedFields;
        //reApply visibility when instance is changed and comp should be invisible
        if (createdComponent.instance && !this.componentVisibility) {
            this.componentVisibility = false;
        }
        (_e = (_c = this.context.GetItemSingle(Dory_1.Dory.ContextName)) === null || _c === void 0 ? void 0 : (_d = _c.shellConfigs).createComponentQValue) === null || _e === void 0 ? void 0 : _e.call(_d, this);
        if (this.qjsonInfo.ver && this.qjsonInfo.ver > 1.0) {
            this.proxifyStyleField(this);
            this.watchStyledComponent(this);
        }
    };
    Object.defineProperty(ComponentCollection.prototype, "componentVisibility", {
        get: function () {
            return this._componentVisibility;
        },
        set: function (componentVisibility) {
            var _a, _b, _c;
            if (((_a = this.context.GetItemSingle(Dory_1.Dory.ContextName)) === null || _a === void 0 ? void 0 : _a.isEditorInEditState) == true) {
                return;
            }
            if ((_b = this.lockedFields) === null || _b === void 0 ? void 0 : _b.visible) {
                return;
            }
            this._componentVisibility = componentVisibility;
            (_c = this.context.GetItemSingle(Dory_1.Dory.ContextName)) === null || _c === void 0 ? void 0 : _c.shellConfigs.setVisibility(this, componentVisibility);
        },
        enumerable: false,
        configurable: true
    });
    ComponentCollection.prototype.WatchCreatedFields = function (cb) {
        this.createdFieldsHook.subscribe(cb);
    };
    ComponentCollection.prototype.SetInitialProps = function (props) {
        if (props.visible === false) {
            this._componentVisibility = false;
        }
    };
    /**
     * If component makes an internal rendering for a QJSON (ex: customComponent | renderingComponent) retrieves components internal doryJr.
     * Assumed max 1 doryJr
     */
    ComponentCollection.prototype.GetDoryJr = function () {
        return this.doryJr;
    };
    ComponentCollection.prototype.SetDoryJr = function (doryJr) {
        this.doryJr = doryJr;
    };
    ComponentCollection.prototype.GetCompUID = function () {
        var compUIDPrefix = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).GetCompUIDPrefix();
        if (!compUIDPrefix) {
            return this.compId;
        }
        return compUIDPrefix + "-" + this.compId;
    };
    ComponentCollection.prototype.SetComponentStyles = function (compStyles) {
        this.compStyleValues = compStyles;
    };
    /**
     * Create style field on the component instance and proxify the newly created field
     * @param compCollection Component collection
     * @returns void
     */
    ComponentCollection.prototype.proxifyStyleField = function (compCollection) {
        var _this = this;
        if (!compCollection.compStyleValues) {
            return;
        }
        if (!compCollection.component) {
            return;
        }
        var handler = {
            set: function (target, property, value) {
                var _a, _b, _c;
                compCollection.compStyleValues = compCollection.compStyleValues || {};
                // if (compCollection.compStyleValues[property]) {
                //     compCollection.compStyleValues[property] = value
                // } else {
                var currentTheme = _this.context.GetItemSingle(Dory_1.Dory.ContextName).GetCurrentTheme();
                var theme = (_a = _this.context.GetItemSingle(Dory_1.Dory.ContextName).GetThemes()) === null || _a === void 0 ? void 0 : _a.find(function (theme) { return theme.name == (currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.name); });
                var themeColors = (currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.isLight) ? theme === null || theme === void 0 ? void 0 : theme.lightTheme.colors : (_b = theme === null || theme === void 0 ? void 0 : theme.darkTheme) === null || _b === void 0 ? void 0 : _b.colors;
                value = _this.matchThemeColors(themeColors, value);
                Object.keys(compCollection.compStyleValues).forEach(function (breakPoint) {
                    compCollection.compStyleValues[breakPoint][property] = value;
                });
                // }
                (_c = _this.context.GetItemSingle(Dory_1.Dory.ContextName)) === null || _c === void 0 ? void 0 : _c.shellConfigs.setComponentStyle(compCollection, property, value);
                target[property] = value;
                return true;
            }
        };
        var storeObj = {};
        compCollection.component.style = new Proxy(storeObj, handler);
    };
    ComponentCollection.prototype.matchThemeColors = function (themeColors, value) {
        if (!themeColors) {
            return value;
        }
        var foundThemeColor = themeColors.find(function (color) { return color.name == value; });
        return foundThemeColor || value;
    };
    /**
     * Create style field on the component instance and proxify the newly created field
     * @param compCollection Component collection
     * @returns void
     */
    ComponentCollection.prototype.watchStyledComponent = function (compCollection) {
        var _this = this;
        if (!compCollection.component) {
            return;
        }
        Object.defineProperty(compCollection.component, "styledComponent", {
            set: function (val) {
                compCollection.styledComponent = val;
                var dory = _this.context.GetItemSingle(Dory_1.Dory.ContextName);
                var assetValue = dory === null || dory === void 0 ? void 0 : dory.GetAssetValues();
                if (assetValue) {
                    dory === null || dory === void 0 ? void 0 : dory.DeleteStyleCompCollection(compCollection);
                    compCollection.compStyleValues = assetValue[compCollection.compType][val];
                    dory === null || dory === void 0 ? void 0 : dory.shellConfigs.setComponentStyle(compCollection);
                }
            },
            get: function () { return compCollection.styledComponent; },
            configurable: true
        });
    };
    return ComponentCollection;
}());
exports.ComponentCollection = ComponentCollection;


/***/ }),

/***/ "../../common/dory/src/Model/Component/DirectiveCollection.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/Component/DirectiveCollection.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectiveCollection = void 0;
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var Evaluator_1 = __webpack_require__(/*! ../../Managers/Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var DirectiveCollection = /** @class */ (function () {
    function DirectiveCollection(dory) {
        this.directiveEventDict = {};
        this.dory = dory;
    }
    DirectiveCollection.prototype.SetOwner = function (_a) {
        var _this = this;
        var ownerComponent = _a.ownerComponent;
        this.ownerComponent = ownerComponent;
        Object.keys(this.directiveEventDict).map(function (directiveName) {
            var _a, _b;
            for (var key in _this.directiveEventDict[directiveName]) {
                (_b = (_a = _this.directiveEventDict[directiveName]) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.SetOwner({ ownerComponent: _this.ownerComponent });
            }
        });
    };
    DirectiveCollection.prototype.Trigger = function (_a) {
        var _this = this;
        var _b, _c;
        var directiveName = _a.directiveName, handlerName = _a.handlerName, _d = _a.eventArguments, eventArguments = _d === void 0 ? [] : _d;
        var targetEvent = this.directiveEventDict[directiveName];
        if (!targetEvent) {
            var engineYamlLogType = (_c = (_b = this.dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
            logger_1.Logger.Log({ logMessage: "no directive named " + directiveName + " on " + this.ownerComponent.compId + " type " + this.ownerComponent.compType, logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return null;
        }
        var evaluator = new Evaluator_1.Evaluator();
        Object.keys(targetEvent).map(function (handlerName) {
            var dataSource;
            //from comp code
            if (eventArguments instanceof Array) {
                //possible vue fix :/
                dataSource = _this.MatchEventDataToArguments({ eventData: targetEvent[handlerName], eventArguments: eventArguments });
            }
            else {
                dataSource = eventArguments;
            }
            dataSource = Object.assign({}, targetEvent.scopeObject, dataSource);
            var retVal = targetEvent[handlerName].Trigger({ evaluator: evaluator, dataSource: dataSource });
            return retVal;
        });
    };
    DirectiveCollection.prototype.GenerateTriggerFunction = function (_a) {
        var directiveName = _a.directiveName, handlerName = _a.handlerName;
        var self = this;
        return function () {
            var eventArguments = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                eventArguments[_i] = arguments[_i];
            }
            return self.Trigger({ directiveName: directiveName, handlerName: handlerName, eventArguments: eventArguments });
        };
    };
    DirectiveCollection.prototype.GetEventBoundFunctions = function () {
        var _this = this;
        var eventFunctions = {};
        var targetDict;
        Object.keys(this.directiveEventDict).map(function (directiveName) {
            targetDict = eventFunctions;
            Object.keys(_this.directiveEventDict[directiveName]).map(function (handlerName) {
                targetDict[directiveName] = _this.GenerateTriggerFunction({ directiveName: directiveName, handlerName: handlerName });
            });
        });
        return { eventFunctions: eventFunctions };
    };
    DirectiveCollection.prototype.MatchEventDataToArguments = function (_a) {
        var eventData = _a.eventData, eventArguments = _a.eventArguments;
        if (!eventData.eventParams) {
            return null;
        }
        var loopLimit = eventData.eventParams.length < eventArguments.length ? eventData.eventParams.length : eventArguments.length;
        var retVal = {};
        for (var i = 0; i < loopLimit; i++) {
            var paramName = eventData.eventParams[i].name;
            retVal[paramName] = eventArguments[i];
        }
        return retVal;
    };
    /**
     * Collect all the event as a directive
     * @param directiveName Directive name that will be registered with its name
     * @param eventData Directive event that will be added on dictionary
     */
    DirectiveCollection.prototype.RegisterDirectiveEvent = function (directiveName, eventData) {
        var _a;
        this.directiveEventDict[directiveName] = (_a = {}, _a[eventData.eventName] = eventData, _a);
    };
    /**
     * Register a directive on the lise
     * @param directive Current directive that will be added on the list
     */
    DirectiveCollection.prototype.RegisterDirective = function (directive) {
        this.directives = this.directives || [];
        this.directives.push(directive);
    };
    /**
     * Return all the directives on this collecyion
     */
    DirectiveCollection.prototype.GetDirectives = function () {
        return this.directives;
    };
    return DirectiveCollection;
}());
exports.DirectiveCollection = DirectiveCollection;


/***/ }),

/***/ "../../common/dory/src/Model/Component/EventCollection.ts":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/Component/EventCollection.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCollection = void 0;
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var typeHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var performance_1 = __webpack_require__(/*! ../../../../shrimp/performance */ "../../common/shrimp/performance.ts");
var Evaluator_1 = __webpack_require__(/*! ../../Managers/Evaluator */ "../../common/dory/src/Managers/Evaluator.ts");
var EventCollection = /** @class */ (function () {
    function EventCollection(dory) {
        this.eventDict = {};
        this.dory = dory;
        this.ownerComponent = null;
    }
    EventCollection.prototype.RegisterEvent = function (_a) {
        var eventData = _a.eventData;
        this.eventDict[eventData.eventName] = eventData;
    };
    EventCollection.prototype.SetOwner = function (_a) {
        var ownerComponent = _a.ownerComponent;
        this.ownerComponent = ownerComponent;
        for (var key in this.eventDict) {
            this.eventDict[key].SetOwner({ ownerComponent: this.ownerComponent });
        }
    };
    EventCollection.prototype.Trigger = function (_a) {
        var _b, _c;
        var eventName = _a.eventName, _d = _a.eventArguments, eventArguments = _d === void 0 ? [] : _d, immediate = _a.immediate;
        var targetEvent = this.eventDict[eventName];
        if (!targetEvent) {
            var engineYamlLogType = (_c = (_b = this.dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
            logger_1.Logger.Log({ logMessage: "no event named " + eventName + " on " + this.ownerComponent.compId + " type " + this.ownerComponent.compType, logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return null;
        }
        immediate && (targetEvent.immediate = immediate);
        performance_1.PerfSingles.Instance().Start(this.ownerComponent.compId + "." + eventName);
        var evaluator = new Evaluator_1.Evaluator();
        var dataSource;
        if (!targetEvent.customEvent) {
            //from comp code
            if (eventArguments instanceof Array) {
                //possible vue fix :/
                dataSource = this.MatchEventDataToArguments({ eventData: targetEvent, eventArguments: eventArguments });
            }
            else {
                dataSource = eventArguments;
            }
        }
        else {
            //MM.trigger or (vue emit :()
            if (new typeHelper_1.TypeHelper().isArray(eventArguments)) {
                //possible vue fix :/
                dataSource = eventArguments[0];
            }
            else {
                //MM.trigger
                dataSource = eventArguments;
            }
        }
        dataSource = Object.assign({}, targetEvent.scopeObject, dataSource);
        var retVal = targetEvent.Trigger({ evaluator: evaluator, dataSource: dataSource });
        performance_1.PerfSingles.Instance().End(this.ownerComponent.compId + "." + eventName, targetEvent);
        return retVal;
    };
    EventCollection.prototype.GenerateTriggerFunction = function (_a) {
        var eventName = _a.eventName;
        var self = this;
        return function () {
            var eventArguments = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                eventArguments[_i] = arguments[_i];
            }
            return self.Trigger({ eventName: eventName, eventArguments: eventArguments });
        };
    };
    EventCollection.prototype.GetExternalEventBoundFunctions = function () {
        var _this = this;
        var eventFunctions = {};
        Object.keys(this.eventDict).map(function (key) { return _this.eventDict[key]; }).filter(function (event) { return event.externalVisible; }).forEach(function (event) {
            eventFunctions[event.eventName] = _this.GenerateTriggerFunction({ eventName: event.eventName });
        });
        return eventFunctions;
    };
    EventCollection.prototype.GetEventBoundFunctions = function () {
        var eventFunctions = {};
        var propertyEventFunctions = {};
        var targetDict;
        for (var key in this.eventDict) {
            targetDict = this.eventDict[key].propertyEvent ? propertyEventFunctions : eventFunctions;
            targetDict[key] = this.GenerateTriggerFunction({ eventName: key });
        }
        return { eventFunctions: eventFunctions, propertyEventFunctions: propertyEventFunctions };
    };
    EventCollection.prototype.MatchEventDataToArguments = function (_a) {
        var _b, _c;
        var eventData = _a.eventData, eventArguments = _a.eventArguments;
        if (!eventData.eventParams) {
            return null;
        }
        var loopLimit = eventData.eventParams.length < eventArguments.length ? eventData.eventParams.length : eventArguments.length;
        if (eventData.eventParams.length != eventArguments.length) {
            var log = "event (" + eventData.eventName + ") has " + eventData.eventParams.length + " parameters but called with " + eventArguments.length + " arguments. Go on with " + loopLimit + " parameters";
            var engineYamlLogType = (_c = (_b = this.dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
            logger_1.Logger.Log({ logMessage: log, minEngineLogLevel: engineYamlLogType });
        }
        var retVal = {};
        for (var i = 0; i < loopLimit; i++) {
            var paramName = eventData.eventParams[i].name;
            retVal[paramName] = eventArguments[i];
        }
        return retVal;
    };
    return EventCollection;
}());
exports.EventCollection = EventCollection;


/***/ }),

/***/ "../../common/dory/src/Model/Component/EventData.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/Component/EventData.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventData = void 0;
var QJsonHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/QJsonHelper */ "../../common/shrimp/helpers/QJsonHelper.ts");
var performance_1 = __webpack_require__(/*! ../../../../shrimp/performance */ "../../common/shrimp/performance.ts");
var RenderingContext_1 = __webpack_require__(/*! ../../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var QPromise_1 = __webpack_require__(/*! ../../Managers/QPromise */ "../../common/dory/src/Managers/QPromise.ts");
var EventData = /** @class */ (function () {
    function EventData(_a) {
        var _this = this;
        var eventName = _a.eventName, handler = _a.handler, context = _a.context, _b = _a.eventParameters, eventParameters = _b === void 0 ? undefined : _b, immediate = _a.immediate, customEvent = _a.customEvent, propertyEvent = _a.propertyEvent, _c = _a.triggerOrder, triggerOrder = _c === void 0 ? null : _c, externalVisible = _a.externalVisible, handlerLang = _a.handlerLang, scopeObject = _a.scopeObject;
        this.handler = handler;
        this.eventParams = QJsonHelper_1.QJsonHelper.ParseParameters(eventParameters, handlerLang);
        this.eventName = eventName;
        this.immediate = immediate == undefined ? false : immediate;
        this.customEvent = customEvent || false;
        this.propertyEvent = propertyEvent || false;
        this.triggerOrder = triggerOrder;
        this.creationContext = context;
        this.externalVisible = externalVisible;
        this.handlerLang = handlerLang;
        this.scopeObject = scopeObject;
        this.promisses = [];
        var onPromiseInterraction = function (prom) { if (prom.Finalized) {
            return;
        } _this.promisses.push(prom); };
        this.promiseCallbacks = { onThen: onPromiseInterraction, onCatch: onPromiseInterraction, onFinally: onPromiseInterraction };
    }
    EventData.prototype.SetOwner = function (_a) {
        var ownerComponent = _a.ownerComponent;
        this.ownerComponent = ownerComponent;
    };
    EventData.prototype.GetOwner = function (owners, dory) {
        dory.errorInfo.errorOwnerInfo.componentId = owners.ownerComponent.compEID;
        dory.errorInfo.errorOwnerInfo.componentType = owners.ownerComponent.compType;
        dory.errorInfo.errorOwnerInfo.fieldName = owners.ownerEvent.eventName;
        return dory;
    };
    EventData.prototype.Trigger = function (_a) {
        var _this = this;
        var evaluator = _a.evaluator, dataSource = _a.dataSource;
        var renderingContext = this.creationContext.GetItemSingle(RenderingContext_1.RenderingContext.ContextName);
        var dory = this.creationContext.GetItemSingle(Dory_1.Dory.ContextName);
        var returnVal = renderingContext === null || renderingContext === void 0 ? void 0 : renderingContext.executeOrDelayEvent({
            cb: function () {
                performance_1.PerfSingles.Instance().Start(_this.ownerComponent.compId + "." + _this.eventName + "_Real");
                var oldOwners = renderingContext.SetOwnersAndRetrieveOld({ ownerComponent: _this.ownerComponent, ownerEvent: _this });
                var oldCbs = QPromise_1.QPromise.setStaticCallbacksAndRetrieveOld(_this.promiseCallbacks);
                var retVal;
                try {
                    retVal = evaluator.Evaluate({ script: _this.handler, dataSource: dataSource, context: _this.creationContext, lang: _this.handlerLang });
                }
                finally {
                    QPromise_1.QPromise.setStaticCallbacksAndRetrieveOld(oldCbs);
                    var owners = renderingContext.SetOwnersAndRetrieveOld(oldOwners);
                    performance_1.PerfSingles.Instance().End(_this.ownerComponent.compId + "." + _this.eventName + "_Real", _this);
                    _this.GetOwner(owners, dory);
                    _this.awaitAllPromises(function () {
                        var _a, _b;
                        return (_b = (_a = dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.eventOperator) === null || _b === void 0 ? void 0 : _b.eventCompleteCb({
                            pageId: _this.ownerComponent.RootHistoryItem.pageId,
                            compUID: _this.ownerComponent.GetCompUID(), eventName: _this.eventName, isPageComplete: dory.PageCompletedHook.IsTriggered()
                        });
                    });
                }
                return retVal;
            },
            immediateEvent: this.immediate,
            triggerOrder: this.triggerOrder
        });
        return returnVal;
    };
    EventData.prototype.AttachCompletionPromise = function (prom) {
        this.promisses.push(prom);
    };
    EventData.prototype.awaitAllPromises = function (cb) {
        return __awaiter(this, void 0, void 0, function () {
            var proms, sweep, prom;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sweep = function () { proms = _this.promisses, _this.promisses = []; };
                        sweep();
                        _a.label = 1;
                    case 1:
                        if (!(proms && proms.length > 0)) return [3 /*break*/, 3];
                        prom = Promise.all(proms);
                        prom.finally(sweep);
                        return [4 /*yield*/, prom];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3:
                        cb();
                        return [2 /*return*/];
                }
            });
        });
    };
    return EventData;
}());
exports.EventData = EventData;


/***/ }),

/***/ "../../common/dory/src/Model/Component/OrderedEvent.ts":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/Component/OrderedEvent.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderedEvent = void 0;
var OrderedEvent = /** @class */ (function () {
    function OrderedEvent(_a) {
        var handler = _a.handler, triggerOrder = _a.triggerOrder;
        this.handler = handler,
            this.triggerOrder = triggerOrder;
    }
    return OrderedEvent;
}());
exports.OrderedEvent = OrderedEvent;


/***/ }),

/***/ "../../common/dory/src/Model/History/DoryLikeData.ts":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/History/DoryLikeData.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryLikeData = void 0;
var HistoryManager_1 = __webpack_require__(/*! ../../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var DoryLikeData = /** @class */ (function () {
    function DoryLikeData(ownerDoryLike, options) {
        this.ownerDoryLike = ownerDoryLike;
        this.createrComp = options.creatorComp;
        this.compUIDPrefix = options.compUIDPrefix;
    }
    DoryLikeData.prototype.GetCompUIDPrefix = function () {
        if (this.createrComp) {
            return this.createrComp.GetCompUID();
        }
        if (this.compUIDPrefix) {
            return this.compUIDPrefix;
        }
        return "";
    };
    Object.defineProperty(DoryLikeData.prototype, "OwnerDoryLike", {
        get: function () {
            return this.ownerDoryLike;
        },
        enumerable: false,
        configurable: true
    });
    DoryLikeData.prototype.GetCreaterRenderingComponent = function () {
        var _a, _b, _c, _d, _e, _f;
        if (((_a = this.createrComp) === null || _a === void 0 ? void 0 : _a.compType) === "RenderingComponent" && ((_c = (_b = this.createrComp) === null || _b === void 0 ? void 0 : _b.component) === null || _c === void 0 ? void 0 : _c.RenderGo)) {
            return this.createrComp;
        }
        return (_f = (_e = (_d = this.createrComp) === null || _d === void 0 ? void 0 : _d.context) === null || _e === void 0 ? void 0 : _e.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _f === void 0 ? void 0 : _f.getCreaterRenderingComponent();
    };
    DoryLikeData.prototype.GetCreatorComponent = function () {
        return this.createrComp;
    };
    DoryLikeData.prototype.GetCreaterComp = function () {
        return this.createrComp;
    };
    return DoryLikeData;
}());
exports.DoryLikeData = DoryLikeData;


/***/ }),

/***/ "../../common/dory/src/Model/History/DoryLikeHelper.ts":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/History/DoryLikeHelper.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryLikeHelper = void 0;
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var DoryLikeHelper = /** @class */ (function () {
    function DoryLikeHelper() {
    }
    DoryLikeHelper.TriggerPageComplete = function (dory, pageId, historyItem) {
        dory.PageCompletedHook.triggerer({ pageId: pageId, additionals: historyItem.additionals });
    };
    DoryLikeHelper.TriggerPageCompleteJr = function (doryJr, pageId) {
        var dory = doryJr.ContextJr.GetItemSingle(Dory_1.Dory.ContextName);
        doryJr.PageJrCompletedHook.triggerer({ pageId: pageId });
    };
    return DoryLikeHelper;
}());
exports.DoryLikeHelper = DoryLikeHelper;


/***/ }),

/***/ "../../common/dory/src/Model/History/HistoryItem.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/History/HistoryItem.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryItem = void 0;
var arrayHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/arrayHelper */ "../../common/shrimp/helpers/arrayHelper.ts");
var compDiffHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/compDiffHelper */ "../../common/shrimp/helpers/compDiffHelper.ts");
var compUIDHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/compUIDHelper */ "../../common/shrimp/helpers/compUIDHelper.ts");
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var QJsonHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/QJsonHelper */ "../../common/shrimp/helpers/QJsonHelper.ts");
var PageScripting_1 = __webpack_require__(/*! ../../../../shrimp/helpers/scripting/PageScripting */ "../../common/shrimp/helpers/scripting/PageScripting.ts");
var ICompJson_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
var performance_1 = __webpack_require__(/*! ../../../../shrimp/performance */ "../../common/shrimp/performance.ts");
var RenderingContext_1 = __webpack_require__(/*! ../../Context/RenderingContext */ "../../common/dory/src/Context/RenderingContext.ts");
var ResponseContext_1 = __webpack_require__(/*! ../../Context/ResponseContext */ "../../common/dory/src/Context/ResponseContext.ts");
var PageStoreContext_1 = __webpack_require__(/*! ../../Context/Store/PageStoreContext */ "../../common/dory/src/Context/Store/PageStoreContext.ts");
var Dory_1 = __webpack_require__(/*! ../../Dory */ "../../common/dory/src/Dory.ts");
var DoryJr_1 = __webpack_require__(/*! ../../DoryJr */ "../../common/dory/src/DoryJr.ts");
var DoryBasedLRManager_1 = __webpack_require__(/*! ../../Managers/DoryBasedLRManager */ "../../common/dory/src/Managers/DoryBasedLRManager.ts");
var DynamicCompManager_1 = __webpack_require__(/*! ../../Managers/DynamicCompManager */ "../../common/dory/src/Managers/DynamicCompManager.ts");
var HistoryItemBasedLRManager_1 = __webpack_require__(/*! ../../Managers/HistoryItemBasedLRManager */ "../../common/dory/src/Managers/HistoryItemBasedLRManager.ts");
var HistoryManager_1 = __webpack_require__(/*! ../../Managers/HistoryManager */ "../../common/dory/src/Managers/HistoryManager.ts");
var PropCalcContext_1 = __webpack_require__(/*! ../../Managers/PropCalcContext */ "../../common/dory/src/Managers/PropCalcContext.ts");
var RenderingManager_1 = __webpack_require__(/*! ../../Managers/RenderingManager */ "../../common/dory/src/Managers/RenderingManager.ts");
var StoreManager_1 = __webpack_require__(/*! ../../Managers/StoreManager */ "../../common/dory/src/Managers/StoreManager.ts");
var ComponentCollection_1 = __webpack_require__(/*! ../Component/ComponentCollection */ "../../common/dory/src/Model/Component/ComponentCollection.ts");
var IndexManager_1 = __webpack_require__(/*! ./IndexManager */ "../../common/dory/src/Model/History/IndexManager.ts");
var HistoryItem = /** @class */ (function () {
    //Code 1234: additioanls parametresi kaldırılacak.
    function HistoryItem(_a) {
        var qjson = _a.qjson, context = _a.context, storeItems = _a.storeItems, pageId = _a.pageId, pageName = _a.pageName, additionals = _a.additionals;
        this.controlDict = {};
        this.controlList = [];
        this.compareCompValue = false;
        this.qjson = qjson;
        this.context = context;
        this.pageId = pageId;
        this.pageName = pageName;
        this.additionals = additionals;
        this.context.RegisterItem(new ResponseContext_1.ResponseContext());
        this.context.RegisterItem(new PageStoreContext_1.PageStoreContext());
        this.context.RegisterItem(new HistoryItemBasedLRManager_1.HistoryItemBasedLRManager({ currentContext: context, qLang: this.getQLang() }));
        if (storeItems) {
            new StoreManager_1.StoreManager(this.context).bulkSet(storeItems);
        }
    }
    HistoryItem.prototype.Render = function (_a) {
        var _b, _c;
        var compParentInst = _a.compParentInst, noHistory = _a.noHistory;
        return __awaiter(this, void 0, void 0, function () {
            var dory, historyManager, renderingContext, renderingManager;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        performance_1.PerfSingles.Instance().Start("HistoryItemRender");
                        this.pageScripting = this.qjson.cFiles ? new PageScripting_1.PageScripting(this.qjson.cFiles) : undefined;
                        (_b = this.pageScripting) === null || _b === void 0 ? void 0 : _b.GetPageClass(); //initiate first page class initiation
                        this.indexManager = undefined;
                        dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
                        historyManager = this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
                        historyManager === null || historyManager === void 0 ? void 0 : historyManager.currentLevel().setMomentaryItem(this);
                        renderingContext = this.renderingContext = new RenderingContext_1.RenderingContext({ compParentInst: compParentInst, historyBasedConf: dory === null || dory === void 0 ? void 0 : dory.shellConfigs.historyBasedConf });
                        this.context.RegisterItem(renderingContext);
                        new PropCalcContext_1.PropCalcContext(this.context);
                        this.UpdateLRType();
                        renderingContext.startRendering();
                        this.compareCompValue = this.findComparisonCompAndReplace(this.qjson.cJson);
                        this.qjsonVersion = (_c = this.qjson.opt) === null || _c === void 0 ? void 0 : _c.V;
                        renderingManager = new RenderingManager_1.RenderingManager({
                            pjson: this.qjson.cJson, context: this.context, controlDict: this.controlDict, qLang: this.getQLang(),
                            compareCompValue: this.compareCompValue, pageScripting: this.pageScripting, qjsonVersion: this.qjsonVersion
                        });
                        return [4 /*yield*/, renderingManager.RenderRoot()];
                    case 1:
                        _d.sent();
                        renderingContext.postRenderRoot();
                        this.controlList = renderingManager.controlList;
                        if (!noHistory) {
                            historyManager === null || historyManager === void 0 ? void 0 : historyManager.AddHistory(this);
                        }
                        renderingContext.endRendering();
                        performance_1.PerfSingles.Instance().End("HistoryItemRender");
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    HistoryItem.prototype.getOwnerHistoryManager = function () {
        return this.context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
    };
    HistoryItem.prototype.FindCreateComponentRelative = function (sourceComp, targetCompID) {
        var _a, _b;
        var compCol = this.GetCompCollectionByCompInst(sourceComp);
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
        if (!compCol) {
            logger_1.Logger.Log({ logMessage: "can not find source component", logType: logger_1.LogType.Debug, minEngineLogLevel: engineYamlLogType });
            return undefined;
        }
        if (!compCol.dynamicCompIdSuffix) {
            logger_1.Logger.Log({ logMessage: "comp " + compCol.compId + "[" + compCol.compType + "] is not a dynamic created component", logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
            return undefined;
        }
        var searchID = DynamicCompManager_1.DynamicCompManager.generateCompID(targetCompID, compCol.dynamicCompIdSuffix);
        var foundCompColl = this.getCompCollectionById(searchID);
        if (!foundCompColl) {
            logger_1.Logger.Log({ logMessage: "can not find relative of " + targetCompID + " with regards to " + compCol.compId, logType: logger_1.LogType.Debug, minEngineLogLevel: engineYamlLogType });
            return undefined;
        }
        return foundCompColl.component;
    };
    /**
     * Get component by tyoe of the component name
     * @param typeName Component type name( {T: ..., P: ..., ...})
     * @returns ComponentCollection | null
     */
    HistoryItem.prototype.GetControlWithTypeName = function (typeName) {
        var _a, _b;
        for (var item in this.controlDict) {
            if (this.controlDict[item].compType == typeName) {
                return this.controlDict[item];
            }
        }
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var engineYamlLogType = (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).getMinEngineLogType) === null || _b === void 0 ? void 0 : _b.call(_a);
        logger_1.Logger.Log({ logMessage: "Component can not be found with type: " + typeName, minEngineLogLevel: engineYamlLogType });
        return null;
    };
    HistoryItem.prototype.GetCompCollectionByCompInst = function (component) {
        var _a;
        if (!this.compIndexedCollection) {
            this.extractCompInstDictFrom(this.controlDict);
        }
        return ((_a = this.compIndexedCollection) === null || _a === void 0 ? void 0 : _a.get(component)) || null;
    };
    HistoryItem.prototype.getComponentCollectionByIdProperty = function (_a) {
        var _b;
        var id = _a.id, _c = _a.deep, deep = _c === void 0 ? false : _c;
        if (!this.indexManager) {
            this.indexManager = new IndexManager_1.IndexManager(this.controlDict);
        }
        var compColl = this.indexManager.getComponentCollectionByIdProperty(id);
        if (!deep || compColl) {
            return compColl;
        }
        var historyItems = (_b = this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName)) === null || _b === void 0 ? void 0 : _b.map(function (doryJr) { var _a; return (_a = doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last(); });
        historyItems === null || historyItems === void 0 ? void 0 : historyItems.find(function (historyItem) { return compColl = historyItem === null || historyItem === void 0 ? void 0 : historyItem.getComponentCollectionByIdProperty({ id: id, deep: deep }); });
        return compColl;
    };
    HistoryItem.prototype.getComponentCollectionByDom = function (_a) {
        var _b;
        var element = _a.element, _c = _a.deep, deep = _c === void 0 ? false : _c;
        if (!this.indexManager) {
            this.indexManager = new IndexManager_1.IndexManager(this.controlDict);
        }
        var compColl = this.indexManager.getComponentCollectionByDom(element);
        if (!deep || compColl) {
            return compColl;
        }
        var historyItems = (_b = this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName)) === null || _b === void 0 ? void 0 : _b.map(function (doryJr) { var _a; return (_a = doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last(); });
        historyItems === null || historyItems === void 0 ? void 0 : historyItems.find(function (historyItem) { return compColl = historyItem === null || historyItem === void 0 ? void 0 : historyItem.getComponentCollectionByDom({ element: element, deep: deep }); });
        return compColl;
    };
    HistoryItem.prototype.getComponentSubCollectionByID = function (_a) {
        var _this = this;
        var id = _a.id;
        var compColl;
        var arrangeControlDict = function (item) { return item.map(function (doryJr) {
            var _a, _b, _c;
            if (!doryJr)
                return;
            var historyItem = (_a = doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last();
            if (historyItem && historyItem.controlDict && historyItem.controlDict[id]) {
                compColl = historyItem.controlDict[id];
                return;
            }
            else {
                var doryCtx = doryJr.ContextJr.GetItemGroup(DoryJr_1.DoryJr.ContextName);
                if (!doryCtx) {
                    var dory = _this.context.GetItemSingle(Dory_1.Dory.ContextName);
                    var engineYamlLogType = (_c = dory === null || dory === void 0 ? void 0 : (_b = dory.shellConfigs).getMinEngineLogType) === null || _c === void 0 ? void 0 : _c.call(_b);
                    logger_1.Logger.Log({ logMessage: "Cannot find component at sub dictionary for " + id, logType: logger_1.LogType.Warning, minEngineLogLevel: engineYamlLogType });
                    return;
                }
                arrangeControlDict(doryCtx);
            }
        }); };
        var doryJr = this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName);
        if (doryJr)
            arrangeControlDict(doryJr);
        return compColl;
    };
    HistoryItem.prototype.iterateSubHistoryItems = function (cb) {
        var doryJrs = this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName);
        if (!doryJrs) {
            return undefined;
        }
        var historyItems = doryJrs.map(function (doryJr) { return doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName).currentLevel().last(); })
            .filter(function (historyItem) { return historyItem != undefined; });
        return arrayHelper_1.ArrayHelper.findAndRet(historyItems, cb);
    };
    HistoryItem.prototype.GetComponentCollectionByUID = function (compUID) {
        var targetComp = compUIDHelper_1.CompUIDHelper.GetRootCompId(compUID);
        var candidate = this.controlDict[targetComp.rootCompId];
        if (!candidate) {
            return undefined;
        }
        if (!targetComp.subCompUID) {
            return candidate;
        }
        return this.iterateSubHistoryItems(function (hi) { return hi.GetComponentCollectionByUID(targetComp.subCompUID); });
    };
    HistoryItem.prototype.GetComponentCollection = function () {
        return this.controlDict;
    };
    HistoryItem.prototype.GetComponentList = function () {
        return this.controlList;
    };
    HistoryItem.prototype.getCompCollectionById = function (id) {
        if (typeof id == "string") {
            return this.controlDict[id] || undefined;
        }
        else {
            return this.controlDict[id["_renderingProps"].props().ID] || undefined;
        }
    };
    HistoryItem.prototype.destroyComponentCollectionById = function (Id) {
        if (typeof Id == "string") {
            this.destroyCollection(this.getCompCollectionById(Id));
            return true;
        }
        return false;
    };
    HistoryItem.prototype.update = function () {
        ComponentCollection_1.ComponentCollection.IterateToChild(this.controlList, function (item) {
            if (item.component && item.asChildType != ICompJson_1.CType.slot && item.component.$forceUpdate) {
                item.component.$forceUpdate();
            }
            return true;
        });
    };
    HistoryItem.prototype.hibernate = function () {
        ComponentCollection_1.ComponentCollection.IterateToChild(this.controlList, function (item) {
            // child yapısı:   slot > slot > child > ..   olan bir yapıda bir dal için child'larının slot olmasına bakmak yetmez. O daldaki her bir comp.'a ayrı ayrı bakılıp child'ların peşi toplanmalı
            if (item.component && item.asChildType != ICompJson_1.CType.slot && item.component.hibernate) {
                item.component.hibernate();
            }
            return true;
        }, { iterateDoryJrs: true });
    };
    HistoryItem.prototype.resurrect = function () {
        var _this = this;
        this.UpdateLRType();
        ComponentCollection_1.ComponentCollection.IterateToChild(this.controlList, function (item) {
            var _a, _b, _c;
            // child yapısı:   slot > slot > child > ..   olan bir yapıda bir dal için child'larının slot olmasına bakmak yetmez. O daldaki her bir comp.'a ayrı ayrı bakılıp child'ların peşi toplanmalı
            if (item.component && item.asChildType != ICompJson_1.CType.slot && item.component.resurrect) {
                item.component.resurrect();
            }
            var dory = _this.context.GetItemSingle(Dory_1.Dory.ContextName);
            (_c = (_b = (_a = dory === null || dory === void 0 ? void 0 : dory.OperatorCollection) === null || _a === void 0 ? void 0 : _a.componentOperator) === null || _b === void 0 ? void 0 : _b.matchComponentStyles) === null || _c === void 0 ? void 0 : _c.call(_b, item);
            return true;
        }, { iterateDoryJrs: true });
    };
    HistoryItem.prototype.destroyCollection = function (compCollection) {
        this.destroyPriv(true, compCollection);
    };
    HistoryItem.prototype.destroy = function () {
        var _this = this;
        this.controlList.forEach(function (item) { return _this.destroyPriv(false, item); });
    };
    /**
     * Do not use. -> destroyCollection or destroy
     */
    HistoryItem.prototype.destroyPriv = function (obliviateComponent, compCollection) {
        var _this = this;
        if (!compCollection) {
            return;
        }
        ComponentCollection_1.ComponentCollection.IterateToChild(compCollection, function (item) {
            // child yapısı:   slot > slot > child > ..   olan bir yapıda bir dal için child'larının slot olmasına bakmak yetmez. O daldaki her bir comp.'a ayrı ayrı bakılıp child'ların peşi toplanmalı
            if (item.component && item.component.$destroy) {
                item.component.$destroy();
                delete item.component;
            }
            if (obliviateComponent) {
                _this.obliviateComponent(item);
            }
            return true;
        });
    };
    HistoryItem.prototype.remount = function () {
        ComponentCollection_1.ComponentCollection.IterateToChild(this.controlList, function (item) {
            if (item.component && item.component.$mount) {
                var mountComp_1 = function (comp) {
                    var _a;
                    if (comp.$children) {
                        comp.$children.forEach(function (child) { return mountComp_1(child); });
                    }
                    (_a = comp.$mount) === null || _a === void 0 ? void 0 : _a.call(comp);
                };
                mountComp_1(item.component);
            }
            return true;
        });
    };
    HistoryItem.prototype.registerDoryJr = function (doryJr) {
        this.context.RegisterItem(doryJr);
    };
    HistoryItem.prototype.getQLang = function () {
        var _a;
        return (_a = this.qjson.opt) === null || _a === void 0 ? void 0 : _a.QL;
    };
    HistoryItem.prototype.GetRenderingContext = function () {
        return this.renderingContext;
    };
    HistoryItem.prototype.GetDoryJrs = function () {
        return this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName);
    };
    HistoryItem.prototype.GetRenderingManager = function () {
        return this.context.GetItemSingle(RenderingManager_1.RenderingManager.ContextName);
    };
    /**
     * Do not use directly, use Dory.SetLRType.
     */
    HistoryItem.prototype.UpdateLRType = function () {
        this.arrangeLRType();
    };
    HistoryItem.prototype.arrangeLRType = function () {
        if (!this.qjson.clrids) {
            return;
        }
        ;
        var doryBasedLRManager = this.context.GetItemSingle(DoryBasedLRManager_1.DoryBasedLRManager.ContextName);
        var LRType = doryBasedLRManager === null || doryBasedLRManager === void 0 ? void 0 : doryBasedLRManager.LRType;
        var historyItemBasedLRManager = this.context.GetItemSingle(HistoryItemBasedLRManager_1.HistoryItemBasedLRManager.ContextName);
        historyItemBasedLRManager === null || historyItemBasedLRManager === void 0 ? void 0 : historyItemBasedLRManager.SetResourceDict(this.qjson.clrids[LRType], LRType);
    };
    HistoryItem.prototype.obliviateComponent = function (item) {
        var _this = this;
        var dory = this.context.GetItemSingle(Dory_1.Dory.ContextName);
        var deleteComp = function (comp) {
            var _a, _b;
            delete _this.controlDict[comp.compId];
            if (_this.compInstDict) {
                _this.compInstDict[comp.compId];
            }
            (_a = _this.compInstDict) === null || _a === void 0 ? true : delete _a[comp.compId];
            var parent = comp.parentCompCollection;
            if (parent) {
                var childNameKeys = Object.keys(parent.children);
                arrayHelper_1.ArrayHelper.findAndRet(childNameKeys, (function (childName) {
                    var _a, _b;
                    var index = parent.children[childName].findIndex(function (childColl) { return childColl == comp; });
                    if (index != -1) {
                        (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).onComponentDestroy) === null || _b === void 0 ? void 0 : _b.call(_a, { parentComponent: parent.component, childKey: childName, childVDomElement: comp.vDomElement });
                        parent.children[childName].splice(index, 1);
                    }
                }));
            }
            else {
                var index = _this.controlList.findIndex(function (collection) { return collection == comp; });
                _this.controlList.splice(index, 1);
            }
            (_b = _this.compIndexedCollection) === null || _b === void 0 ? void 0 : _b.delete(comp.component);
        };
        deleteComp(item);
    };
    HistoryItem.prototype.GetCompInstDict = function () {
        if (this.compInstDict) {
            return this.compInstDict;
        }
        this.extractCompInstDictFrom(this.controlDict);
        return this.compInstDict || {};
    };
    HistoryItem.prototype.ReCalculateCompInstDict = function () {
        this.compInstDict = undefined;
        this.compIndexedCollection = undefined;
    };
    HistoryItem.prototype.extractCompInstDictFrom = function (dict) {
        var _this = this;
        if (this.GetRenderingContext().IsRendering()) {
            return;
        }
        this.compInstDict = {};
        this.compIndexedCollection = new WeakMap();
        Object.keys(dict).forEach(function (compPID) {
            var curColl = dict[compPID];
            if (curColl.component) {
                _this.compIndexedCollection.set(curColl.component, curColl);
                _this.compInstDict[compPID] = curColl.component;
            }
            else {
                curColl.WatchCreatedFields(function (createdFields) {
                    if (!_this.compIndexedCollection || !_this.compInstDict) {
                        return;
                    }
                    _this.compIndexedCollection.set(curColl.component, curColl);
                    _this.compInstDict[compPID] = curColl.component;
                });
            }
        });
    };
    HistoryItem.prototype.getComponentJsonByCompId = function (compId) {
        if (!this.qjson.cJson) {
            return null;
        }
        var compLoc = QJsonHelper_1.QJsonHelper.FindCompBySearchField(this.qjson.cJson, compId, QJsonHelper_1.CompSearchKey.PID);
        var path = QJsonHelper_1.QJsonHelper.FindParentArrayPath(compLoc.curPath, this.qjson.cJson);
        return { compLoc: compLoc, path: path };
    };
    HistoryItem.prototype.getComponentSubCollections = function () {
        var _a;
        var dicts = [];
        (_a = this.context.GetItemGroup(DoryJr_1.DoryJr.ContextName)) === null || _a === void 0 ? void 0 : _a.forEach(function (doryJr) {
            var _a, _b;
            var dict = (_b = (_a = doryJr.ContextJr.GetItemSingle(HistoryManager_1.HistoryManager.ContextName)) === null || _a === void 0 ? void 0 : _a.currentLevel().last()) === null || _b === void 0 ? void 0 : _b.controlDict;
            if (dict) {
                Object.keys(dict).forEach(function (key) { return dicts.push(dict[key]); });
            }
        });
        return dicts;
    };
    /**
     * Find comparison component at the current pjson
     * @param pjson Current pjson
     * @returns boolean
     */
    HistoryItem.prototype.findComparisonCompAndReplace = function (pjson) {
        if (!pjson) {
            return false;
        }
        var hasCompareComp = false;
        QJsonHelper_1.QJsonHelper.ForEachComp(pjson, function (compJson, path) {
            if (compDiffHelper_1.compDiffHelper.comparisonComponent == compJson.T) {
                hasCompareComp = true;
                return false;
            }
            return true;
        });
        if (hasCompareComp) {
            QJsonHelper_1.QJsonHelper.ForEachComp(pjson, function (compJson, path, info) {
                var _a;
                if (compDiffHelper_1.compDiffHelper.componentValueList[compJson.T] && !compDiffHelper_1.compDiffHelper.componentValueList[compJson.T].classCompare && (info === null || info === void 0 ? void 0 : info.parentCompJson) &&
                    info.parentCompJson.T != compDiffHelper_1.ComparisonEnum.tooltipCompType && !((_a = compDiffHelper_1.compDiffHelper.componentValueList[info.parentCompJson.T]) === null || _a === void 0 ? void 0 : _a.classCompare)) {
                    compDiffHelper_1.compDiffHelper.replaceTooltipComponent(info.parentCompJson, compJson);
                }
                return true;
            });
        }
        return hasCompareComp;
    };
    HistoryItem.prototype.themeConfiguration = function (context, themeName, isLight) {
        // if (!(themeName == "light" || themeName == "dark")) return;
        var _a;
        var historyManager = context.GetItemSingle(HistoryManager_1.HistoryManager.ContextName);
        var dory = context.GetItemSingle(Dory_1.Dory.ContextName);
        var isDark = dory.isDark = themeName == "dark" ? true : undefined;
        var rootControlList = (_a = historyManager === null || historyManager === void 0 ? void 0 : historyManager.getRootHM().currentLevel().last()) === null || _a === void 0 ? void 0 : _a.controlList;
        if (!rootControlList)
            return;
        dory === null || dory === void 0 ? void 0 : dory.SetThemeName({ name: themeName, isLight: isLight !== null && isLight !== void 0 ? isLight : true });
        setCompPropAndJrHistory(rootControlList);
        function setCompPropAndJrHistory(compList) {
            var _a, _b, _c, _d, _e;
            for (var index = 0; index < compList.length; index++) {
                var compCollection = compList[index];
                var comp = { children: { default: [compCollection] } };
                (_b = dory === null || dory === void 0 ? void 0 : (_a = dory.shellConfigs).setComponentsProperty) === null || _b === void 0 ? void 0 : _b.call(_a, comp, "dark", isDark);
                (_d = dory === null || dory === void 0 ? void 0 : (_c = dory.shellConfigs).setDarkTheme) === null || _d === void 0 ? void 0 : _d.call(_c, compCollection, isDark || false);
                var compDoryJrCompList = (_e = compCollection.GetDoryJr()) === null || _e === void 0 ? void 0 : _e.GetComponentList();
                if (compDoryJrCompList) {
                    setCompPropAndJrHistory(compDoryJrCompList);
                }
            }
        }
        // return true;
    };
    return HistoryItem;
}());
exports.HistoryItem = HistoryItem;


/***/ }),

/***/ "../../common/dory/src/Model/History/IndexManager.ts":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/Model/History/IndexManager.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexManager = void 0;
var IndexManager = /** @class */ (function () {
    function IndexManager(controlDict) {
        var _this = this;
        this.compIdPropIndex = {};
        this.compDomIndex = new WeakMap();
        //TODO: move index createion to each function on demand
        Object.keys(controlDict).forEach(function (compId) {
            var _a, _b;
            var compColl = controlDict[compId];
            var propId = (_b = (_a = compColl.component) === null || _a === void 0 ? void 0 : _a.$props) === null || _b === void 0 ? void 0 : _b.id;
            if (propId) {
                _this.compIdPropIndex[propId] = compColl;
            }
            var dom = compColl.domElement;
            if (dom) {
                _this.compDomIndex.set(dom, compColl);
            }
            compColl.WatchCreatedFields(function (created) {
                var _a;
                if (created.el) {
                    if (dom) {
                        _this.compDomIndex.delete(dom);
                    }
                    dom = created.el;
                    _this.compDomIndex.set(dom, compColl);
                }
                if (created.instance) {
                    if (propId) {
                        delete _this.compIdPropIndex.propId;
                    }
                    propId = (_a = created.instance.$props) === null || _a === void 0 ? void 0 : _a.id;
                    if (propId) {
                        _this.compIdPropIndex[propId] = compColl;
                    }
                }
            });
        });
    }
    IndexManager.prototype.getComponentCollectionByIdProperty = function (compPropId /*, controlDict: Record<string, IComponentCollection>*/) {
        // if (!this.compIdPropIndex){
        //     this.compIdPropIndex = Object.keys(controlDict).reduce((prev, cur) => {
        //         const compColl = controlDict[cur];
        //         const propId = compColl.component!.$props?.id;
        //         if (!propId){
        //             return prev;
        //         }
        //         prev[propId] = compColl;
        //         return prev;
        //     }, <Record<string, IComponentCollection | undefined>>{})
        // }
        return this.compIdPropIndex[compPropId];
    };
    IndexManager.prototype.getComponentCollectionByDom = function (element /*, controlDict: Record<string, IComponentCollection>*/) {
        // if (!this.compDomIndex){
        //     this.compDomIndex = Object.keys(controlDict).reduce((prev, cur) => {
        //         const compColl = controlDict[cur];
        //         prev.set(compColl.domElement!, compColl);
        //         return prev;
        //     }, new WeakMap<IDomElement, IComponentCollection>());
        // }
        return this.compDomIndex.get(element);
    };
    return IndexManager;
}());
exports.IndexManager = IndexManager;


/***/ }),

/***/ "../../common/dory/src/OmniScript/DNode.ts":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/DNode.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DNode = void 0;
var Error_1 = __webpack_require__(/*! ./Error */ "../../common/dory/src/OmniScript/Error.ts");
//TODO: Converted from JS -> TS in a hurry. convert for real
var error = function (message) {
    Error_1.OSError.throwWithMessage("DNode", message, undefined);
};
var op = "operator";
var key = "keyword";
//#R2.2
var tokenDict = {
    "if": key,
    "foreach": key,
    "continue": key,
    "break": key,
    "in": key,
    ">=": op,
    "<=": op,
    "<": op,
    ">": op,
    ".": op,
    "{}": op,
    "[]": op,
    "&&": op,
    "||": op,
    "!": op,
    "=": op,
    "!=": op,
    "==": op,
    "+": op,
    "*": op,
    "/": op,
    "-": op,
    "()": op
};
var numberChars = {
    "0": true, "1": true, "2": true, "3": true, "4": true, "5": true, "6": true, "7": true, "8": true, "9": true, ".": true
};
var dNode = /** @class */ (function () {
    function dNode(tokenValue) {
        ///<summary>Decompressed node</summary>
        ///<field name="token" value="{value: '', type:''}">Token of node</field>
        ///<field name="left" type="dNode" value="this">Left of currenct node. Means leftArray is null</field>
        ///<field name="right" type="dNode" value="this">Right of currenct node. Means rightArray is null</field>
        ///<field name="leftArray" type="dNode[]" value="[this]">array of left children. Means left is null</field>
        ///<field name="rightArray" type="dNode[]" value="[this]">array of right children. Means right is null</field>
        ///<field name="array" type="dNode[]" value="[this]">array of node children this is not node, just an array. means tokens is null</field>
        this.token = null;
        this.left = null;
        this.right = null;
        this.parent = null;
        this.leftArray = null;
        this.rightArray = null;
        this.array = null;
        this.LoadToken(tokenValue);
    }
    dNode.prototype.LoadToken = function (tokenValue) {
        if (tokenValue === null || tokenValue === undefined) {
            return;
        }
        if (this.IsArray()) {
            error("can not load token to an array node");
        }
        this.token = { type: tokenDict[tokenValue], value: tokenValue };
        if (this.token.type === undefined) {
            if (this.token.value.startsWith("'")) {
                //string
                if (!this.token.value.endsWith("'")) {
                    error("strings must end with '");
                }
                // string'lerin başındaki ' atılır.
                this.token.value = this.token.value.substring(1, this.token.value.length - 1);
                this.token.type = dNode.TokenTypes.string;
            }
            else {
                // number or identifier
                var foundNaN = false;
                for (var i = 0; i < this.token.value.length; i++) {
                    if (numberChars[this.token.value[i]] === undefined) {
                        foundNaN = true;
                        break;
                    }
                }
                if (foundNaN) {
                    this.token.type = dNode.TokenTypes.identifier;
                }
                else {
                    this.token.type = dNode.TokenTypes.number;
                }
            }
        }
    };
    dNode.prototype.IsLeftArray = function () {
        return this.leftArray !== null;
    };
    dNode.prototype.IsRightArray = function () {
        return this.rightArray !== null;
    };
    dNode.prototype.IsRightNull = function () {
        return this.rightArray === null && this.right === null;
    };
    dNode.prototype.IsLeftNull = function () {
        return this.leftArray === null && this.left === null;
    };
    dNode.prototype.IsArray = function () {
        return this.array !== null;
    };
    dNode.prototype.IsNode = function () {
        if (this.left !== null || this.right !== null || this.token !== null || this.rightArray !== null || this.leftArray !== null) {
            return true;
        }
        return false;
    };
    dNode.prototype.PushToArray = function (newNode) {
        ///<summary>Append a new node to array elements of this node.</summary>
        ///<param name="newNode" type="dNode" value="new dNode('')">new node to append to array elements</param>
        if (this.IsNode()) {
            error("can not push to a non array node");
        }
        if (this.array === null) {
            this.array = [];
        }
        if (newNode !== null) {
            this.array.push(newNode);
            newNode.parent = this;
        }
    };
    dNode.prototype.AppendLeft = function (newNode) {
        ///<summary>Append a new node to left of this node.</summary>
        ///<param name="newNode" type="dNode" value="new dNode('')">new node to append to tree</param>
        if (this.IsArray()) {
            error("can not appendLeft to an array node");
        }
        if (this.left === null && this.leftArray === null) {
            this.left = newNode;
        }
        else if (this.left === null && this.leftArray !== null) {
            this.leftArray.push(newNode);
        }
        else if (this.left !== null && this.leftArray === null) {
            this.leftArray = [this.left];
            this.left = null;
            this.leftArray.push(newNode);
        }
        else {
            error("Append left error no situation found");
        }
        if (newNode !== null) {
            newNode.parent = this;
        }
    };
    dNode.prototype.AppendRight = function (newNode) {
        ///<summary>Append a new node to right of this node.</summary>
        ///<param name="newNode" type="dNode" value="new dNode('')">new node to append to tree</param>
        if (this.IsArray()) {
            error("can not appendRight to an array node");
        }
        if (this.right === null && this.rightArray === null) {
            this.right = newNode;
        }
        else if (this.right === null && this.rightArray !== null) {
            this.rightArray.push(newNode);
        }
        else if (this.right !== null && this.rightArray === null) {
            this.rightArray = [this.right];
            this.right = null;
            this.rightArray.push(newNode);
        }
        else {
            error("Append right error no situation found");
        }
        if (newNode !== null) {
            newNode.parent = this;
        }
    };
    dNode.TokenTypes = {
        identifier: "identifier",
        keyword: "keyword",
        string: "string",
        number: "number",
        operator: "operator"
    };
    return dNode;
}());
exports.DNode = dNode;


/***/ }),

/***/ "../../common/dory/src/OmniScript/Decompressor.ts":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/Decompressor.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Decompressor = void 0;
var Error_1 = __webpack_require__(/*! ./Error */ "../../common/dory/src/OmniScript/Error.ts");
var DNode_1 = __webpack_require__(/*! ./DNode */ "../../common/dory/src/OmniScript/DNode.ts");
//TODO: Converted from JS -> TS in a hurry. convert for real
var error = function (message) {
    Error_1.OSError.throwWithMessage("Decompression", message, undefined);
};
var directions = {
    left: "╣",
    right: "╠",
    up: "╩",
    array: "╬",
    "null": "■"
};
var directionDict = {
    "╣": {
        doCharBucket: function (lastDNode, charBucket) {
            ///<param name="lastDNode" value="new DNode()"></param>
            var newLast = lastDNode;
            if (charBucket !== "") {
                if (lastDNode.IsArray()) {
                    newLast = new DNode_1.DNode(charBucket);
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.PushToArray(newLast);
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.LoadToken(charBucket);
                }
            }
            return newLast;
        },
        getNewLast: function (lastDNode, nextIsNull) {
            ///<param name="lastDNode" value="new DNode()"></param>
            ///<param name="nextIsNull" value="true">true is next char is null, false if not</param>
            var newNode;
            if (nextIsNull) {
                if (lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.IsArray()) {
                    error("nextIsNull. illogical to have null on array.");
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.AppendLeft(null);
                }
                newNode = lastDNode;
            }
            else {
                newNode = new DNode_1.DNode(null);
                if (lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.IsArray()) {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.PushToArray(newNode);
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.AppendLeft(newNode);
                }
            }
            return newNode;
        }
    },
    "╠": {
        doCharBucket: function (lastDNode, charBucket) {
            ///<param name="lastDNode" value="new DNode()"></param>
            var newLast = lastDNode;
            if (charBucket !== "") {
                if (lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.IsArray()) {
                    newLast = new DNode_1.DNode(charBucket);
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.PushToArray(newLast);
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.LoadToken(charBucket);
                }
            }
            return newLast;
        },
        getNewLast: function (lastDNode, nextIsNull) {
            ///<param name="lastDNode" value="new DNode()"></param>
            ///<param name="nextIsNull" value="true">true is next char is null, false if not</param>
            var newNode;
            if (nextIsNull) {
                if (lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.IsArray()) {
                    error("nextIsNull. illogical to have null on array.");
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.AppendRight(null);
                }
                newNode = lastDNode;
            }
            else {
                newNode = new DNode_1.DNode(null);
                if (lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.IsArray()) {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.PushToArray(newNode);
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.AppendRight(newNode);
                }
            }
            return newNode;
        }
    },
    "╩": {
        doCharBucket: function (lastDNode, charBucket) {
            ///<param name="lastDNode" value="new DNode()"></param>
            var newLast = lastDNode;
            if (charBucket !== "") {
                if (lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.IsArray()) {
                    newLast = new DNode_1.DNode(charBucket);
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.PushToArray(newLast);
                }
                else {
                    lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.LoadToken(charBucket);
                }
            }
            return newLast;
        },
        getNewLast: function (lastDNode, nextIsNull) {
            ///<param name="lastDNode" value="new DNode()"></param>
            ///<param name="nextIsNull" value="true">true is next char is null, false if not</param>
            if (nextIsNull) {
                error("nextIsNull. null char can not follow directions.up.");
            }
            return lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.parent;
        }
    },
    "╬": {
        doCharBucket: null,
        getNewLast: function (lastDNode, nextIsNull) {
            ///<param name="lastDNode" value="new DNode()"></param>
            ///<param name="nextIsNull" value="true">true is next char is null, false if not</param>
            if (nextIsNull) {
                error("nextIsNull. null char can not follow directions.array.");
            }
            lastDNode === null || lastDNode === void 0 ? void 0 : lastDNode.PushToArray(null);
            return lastDNode;
        }
    }
};
var decompressForest = function (forestString) {
    ///<param name="forestString" type="String" value="''">string of forest</param>
    var charBucket = "";
    var rootDNode = new DNode_1.DNode(null);
    var lastDNode = rootDNode;
    //var newNode = null;
    for (var i = 0, len = forestString.length; i < len; i++) {
        var char = forestString[i];
        var directionOp = directionDict[char];
        if (directionOp !== undefined) {
            if (directionOp.doCharBucket !== null) {
                lastDNode = directionOp.doCharBucket(lastDNode, charBucket);
                charBucket = "";
            }
            // peek next char for null
            var nextIsNull = i + 1 < len && forestString[i + 1] === directions.null;
            lastDNode = directionOp.getNewLast(lastDNode, nextIsNull);
            if (nextIsNull) {
                i++;
            }
        }
        else {
            //this is a character
            charBucket += char;
        }
    }
    if (lastDNode !== null) {
        error("Decompression not symmetrical");
    }
    return rootDNode;
};
var Decompressor = /** @class */ (function () {
    function Decompressor() {
    }
    Decompressor.prototype.Decompress = function (forestString) {
        ///<param name="forestString" type="String" value="''">array of tree strings</param>
        ///<returns type="DNode">Forest of DNode trees in a root DNode.</returns>
        return decompressForest(forestString);
    };
    Decompressor.directions = directions;
    return Decompressor;
}());
exports.Decompressor = Decompressor;
;


/***/ }),

/***/ "../../common/dory/src/OmniScript/Error.ts":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/Error.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OSError = void 0;
var logger_1 = __webpack_require__(/*! ../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var OSError = /** @class */ (function () {
    function OSError(source, message, node) {
        this.message = message;
        this.source = source;
        this.node = node;
    }
    OSError.throwWithMessage = function (source, message, node) {
        throw new OSError(source, message, node);
    };
    OSError.errorWithMessage = function (source, message, node) {
        logger_1.Logger.Log({ logMessage: message + " | source: " + source + " ", logType: logger_1.LogType.Warning });
        logger_1.Logger.Log({ logMessage: node, logType: logger_1.LogType.Warning });
    };
    ;
    return OSError;
}());
exports.OSError = OSError;


/***/ }),

/***/ "../../common/dory/src/OmniScript/EvalContext.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/EvalContext.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EvalContext = void 0;
/**
 * * Evaluation scope Context Object which lasts for whole evaluation.
 * * Context object must be destroyed when evaluation completes. It must not leak to another scope of evaluation//56041
 * @param {*} dataSource
 * Data Source object if any exists.
 * value="{}"
 * @param {*} response
 * Response object
 * @param {*} symDict
 * type="SymbolDict"
 * value="new SymbolDict()"
 * Symbol dictionary for current scope
 * @param {*} global
 * @param {*} controlDict
 * @param {*} extensions
 * @param {*} context
 * Context of Dory instance
 * type=IContext
 */
var EvalContext = /** @class */ (function () {
    function EvalContext(dataSource, response, symDict, globals, controls, extensions, context) {
        this.dataSource = dataSource;
        this.response = response;
        this.symDict = symDict;
        this.global = globals;
        this.controlDict = controls || {};
        this.extensions = extensions;
        this.context = context;
        this.forestStack = [];
    }
    EvalContext.prototype.addStack = function (stack) {
        this.forestStack.push(stack);
        stack.setContextIndex(this.forestStack.length - 1);
    };
    EvalContext.prototype.popStack = function () {
        var lastStack = this.forestStack.pop();
        lastStack === null || lastStack === void 0 ? void 0 : lastStack.clearContextIndex();
        return lastStack;
    };
    EvalContext.prototype.getStackWithReason = function (reason) {
        for (var i = this.forestStack.length - 1; i >= 0; i--) {
            if (this.forestStack[i].Reason == reason) {
                return this.forestStack[i];
            }
        }
        return null;
    };
    EvalContext.prototype.messageStacksAbove = function (stack, message) {
        for (var index = stack.ContextIndex; index < this.forestStack.length; index++) {
            this.forestStack[index].setMessage(message);
        }
    };
    return EvalContext;
}());
exports.EvalContext = EvalContext;


/***/ }),

/***/ "../../common/dory/src/OmniScript/Evaluator.ts":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/Evaluator.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.summarizeToken = exports.Eval = void 0;
var typeHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var StringHelper_1 = __webpack_require__(/*! ../Helpers/StringHelper */ "../../common/dory/src/Helpers/StringHelper.ts");
var Error_1 = __webpack_require__(/*! ./Error */ "../../common/dory/src/OmniScript/Error.ts");
var EvalContext_1 = __webpack_require__(/*! ./EvalContext */ "../../common/dory/src/OmniScript/EvalContext.ts");
var Stack_1 = __webpack_require__(/*! ./Stack */ "../../common/dory/src/OmniScript/Stack.ts");
var Symbol_1 = __webpack_require__(/*! ./Symbol */ "../../common/dory/src/OmniScript/Symbol.ts");
var SymbolDict_1 = __webpack_require__(/*! ./SymbolDict */ "../../common/dory/src/OmniScript/SymbolDict.ts");
//TODO: Converted from JS -> TS in a hurry. convert for real
var determineSymbolType = function (objectValue) {
    /// <summary>Determine symbol type of an object</summary>
    ///<param name="objectValue" type="object" value="{}">Value of an object to be type determined</param>
    var symType = Symbol_1.Symbol.Types.native;
    var typeHelper = new typeHelper_1.TypeHelper();
    if (typeHelper.isNumber(objectValue)) {
        symType = Symbol_1.Symbol.Types.number;
    }
    else if (typeHelper.isString(objectValue)) {
        symType = Symbol_1.Symbol.Types.string;
    }
    else if (typeHelper.isArray(objectValue)) {
        symType = Symbol_1.Symbol.Types.array;
    }
    else if (typeHelper.isBool(objectValue)) {
        //#R2.10a
        symType = Symbol_1.Symbol.Types.boolean;
    }
    else if (typeHelper.isDate(objectValue)) {
        //#R2.3
        symType = Symbol_1.Symbol.Types.date;
    }
    else if (typeHelper.isObject(objectValue)) {
        symType = Symbol_1.Symbol.Types.object;
    }
    return symType;
};
var isMathOperation = function (leftSymbol, rightSymbol) {
    /// <summary>Check wheter a mathematical operation can be executed on these left and right symbols</summary>
    ///<param name="leftSymbol" type="Symbol" value="new Symbol('a', 5)">Left symbol</param>
    ///<param name="rightSymbol" type="Symbol" value="new Symbol('a', 5)">Right symbol</param>
    var isMathOp = true;
    switch (leftSymbol.type) {
        case Symbol_1.Symbol.Types.boolean:
        case Symbol_1.Symbol.Types.number:
            isMathOp = true;
            break;
        case Symbol_1.Symbol.Types.string:
        case Symbol_1.Symbol.Types.object:
        case Symbol_1.Symbol.Types.native:
        case Symbol_1.Symbol.Types.date:
            isMathOp = false;
            break;
        case Symbol_1.Symbol.Types.null:
            break;
        default:
            throwError("Type Not Defined Yet ! : " + leftSymbol.type, null);
            break;
    }
    switch (rightSymbol.type) {
        case Symbol_1.Symbol.Types.boolean:
        case Symbol_1.Symbol.Types.number:
            isMathOp = isMathOp && true;
            break;
        case Symbol_1.Symbol.Types.string:
        case Symbol_1.Symbol.Types.object:
        case Symbol_1.Symbol.Types.native:
        case Symbol_1.Symbol.Types.date:
            isMathOp = isMathOp && false;
            break;
        case Symbol_1.Symbol.Types.null:
            break;
        default:
            throwError("Type Not Defined Yet ! : " + leftSymbol.type, null);
            break;
    }
    return isMathOp;
};
var validationLogic = function (leftStatus, rightStatus) {
    ///<summary>Validation logic of node for left and right existance</summary>
    ///<param name="leftStatus" type="integer" value="1">Nodes left status. {>=2: "must have array with at least size on left", 1: "must have left", 0: "does not matter", -1: "must not have left", -2: "must have an array sized 1"}</param>
    ///<param name="rightStatus" type="integer" value="-1">Nodes right status. {>=2: "must have array with at least size on right", 1: "must have right", 0: "does not matter", -1: "must not have right", -2: "must have an array sized 1"}</param>
    return function (node) {
        ///<param name="node" type="Isbank.OmniScript.DNode" value="new Isbank.OmniScript.DNode()">Node to bind to function</param>
        if (node.left !== null && node.left !== undefined && node.leftArray !== null && node.leftArray !== undefined) {
            throwError("Node has both left", node);
        }
        if (node.right !== null && node.right !== undefined && node.rightArray !== null && node.rightArray !== undefined) {
            throwError("Node has both right", node);
        }
        var hasLeft = ((node.left === null || node.left === undefined) && (node.leftArray === null || node.leftArray === undefined)) ? -1 : 1;
        var hasRight = ((node.right === null || node.right === undefined) && (node.rightArray === null || node.rightArray === undefined)) ? -1 : 1;
        if (leftStatus !== 0) {
            var forceLeft = leftStatus >= 1 ? 1 : -1;
            if (hasLeft !== forceLeft) {
                throwError("Node has left hand side error", node);
            }
            if (leftStatus >= 2 || leftStatus === -2) {
                if (!node.IsLeftArray()) {
                    throwError("Node should have an array on left hand side", node);
                }
                leftStatus = leftStatus !== -2 ? leftStatus : 1;
                if (node.leftArray.length < leftStatus) {
                    throwError("Node should have an array of size " + leftStatus + " on left hand side", node);
                }
            }
        }
        if (rightStatus !== 0) {
            var forceRight = rightStatus >= 1 ? 1 : -1;
            if (hasRight !== forceRight) {
                throwError("Node has right hand side error", node);
            }
            if (rightStatus >= 2 || rightStatus === -2) {
                if (!node.IsRightArray()) {
                    throwError("Node should have an array on right hand side", node);
                }
                rightStatus = rightStatus !== -2 ? rightStatus : 1;
                if (node.rightArray.length < rightStatus) {
                    throwError("Node should have an array of size " + rightStatus + " on right hand side", node);
                }
            }
        }
    };
};
var gsn = function (token) {
    ///<summary>Generate Symbol Name for a token used inline. Ex: a=5, for 5 a symbol name should be generated</summary>
    ///<param name="token" value="new Isbank.OmniScript.Token()"></param>
    return "Inline_" + token.type + "_" + token.value;
};
var comparisionLogic = function (innerLogic) {
    ///<param name="innerLogic" type="function(leftNumber, rightNumber)" value="function(leftNumber, rightNumber){return true}"></param>
    return function (node, evalContext) {
        ///<param name="node" value="new DNode()"></param>
        var leftSymbol = EvalTree(node.left, evalContext);
        var rightSymbol = EvalTree(node.right, evalContext);
        var numberLeft = leftSymbol.GetNumber();
        var numberRight = rightSymbol.GetNumber();
        var result = innerLogic(numberLeft, numberRight);
        var retVal = new Symbol_1.Symbol(null, result, Symbol_1.Symbol.Types.boolean, evalContext);
        return retVal;
    };
};
var arrayConcat = function (leftSymbol, rightSymbol, evalContext) {
    ///<summary>Concat two arrays</summary>
    ///<param name="leftSymbol" type="Symbol" value="new Symbol('a', 5)"></param>
    ///<param name="rightSymbol" type="Symbol" value="new Symbol('a', 5)"></param>
    ///<returns type="Symbol" value="new Symbol('a', 5)"></returns>
    var i;
    var newArrayVal = [];
    if (leftSymbol.type === Symbol_1.Symbol.Types.array) {
        for (i = 0; i < leftSymbol.value.length; i++) {
            newArrayVal.push(leftSymbol.value[i]);
        }
    }
    else {
        newArrayVal.push(leftSymbol.value);
    }
    if (rightSymbol.type === Symbol_1.Symbol.Types.array) {
        for (i = 0; i < rightSymbol.value.length; i++) {
            newArrayVal.push(rightSymbol.value[i]);
        }
    }
    else {
        newArrayVal.push(rightSymbol.value);
    }
    return new Symbol_1.Symbol(null, newArrayVal, Symbol_1.Symbol.Types.array, evalContext);
};
var mathOperationLogic = function (mathLogic, stringLogic, arrayLogic) {
    ///<param name="mathLogic" type="function(leftNumber, rightNumber)" value="function(leftNumber, rightNumber){return 6;}"></param>
    ///<param name="stringLogic" type="function(leftString, rightString)" value="function(leftString, rightString){return 'a';}"></param>
    ///<param name="arrayLogic" type="function(leftSymbol, rightSymbol)" value="function(leftSymbol, rightSymbol){return [];}"></param>
    return function (node, evalContext) {
        ///<param name="node" value="new DNode()"></param>
        var leftSymbol = EvalTree(node.left, evalContext);
        var rightSymbol = EvalTree(node.right, evalContext);
        if (leftSymbol.type === Symbol_1.Symbol.Types.array || rightSymbol.type === Symbol_1.Symbol.Types.array) {
            if (arrayLogic === null) {
                throwError("Can not do \"" + node.token.value + "\" on arrays", node);
            }
            return arrayLogic(leftSymbol, rightSymbol, evalContext);
        }
        var leftVal;
        var rightVal;
        if (isMathOperation(leftSymbol, rightSymbol)) {
            leftVal = leftSymbol.GetNumber();
            rightVal = rightSymbol.GetNumber();
            return new Symbol_1.Symbol(null, mathLogic(leftVal, rightVal), Symbol_1.Symbol.Types.number, evalContext);
        }
        else {
            //string operation
            if (stringLogic === null) {
                throwError("Can not do \"" + node.token.value + "\" operation for ", node);
            }
            leftVal = leftSymbol.GetString();
            rightVal = rightSymbol.GetString();
            return new Symbol_1.Symbol(null, stringLogic(leftVal, rightVal), Symbol_1.Symbol.Types.string, evalContext);
        }
    };
};
var breakingLogic = function (reason) {
    return function (node, evalContext) {
        var foreachStack = evalContext.getStackWithReason(Stack_1.StackReason.foreach);
        if (!foreachStack) {
            throwError(reason + " should be used inside foreach", node);
            return; // for the sake of intellisense
        }
        evalContext.messageStacksAbove(foreachStack, reason == "break" ? Stack_1.StackMessage.break : Stack_1.StackMessage.continue);
    };
};
var tokenLogicGroups = {
    keyword: {
        "if": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var leftSymbol = EvalTree(node.left, evalContext);
                var trueForest, falseForest = null;
                if (node.IsRightArray()) {
                    trueForest = node.rightArray[0];
                    falseForest = node.rightArray[1];
                }
                else {
                    trueForest = node.right;
                }
                var rightSymbol = new Symbol_1.Symbol(null, null, Symbol_1.Symbol.Types.null, evalContext);
                var myStack = new Stack_1.Stack({ reason: Stack_1.StackReason.if });
                if (leftSymbol.GetBoolean()) {
                    rightSymbol = EvalForest(trueForest, evalContext, myStack);
                }
                else {
                    if (falseForest !== null) {
                        rightSymbol = EvalForest(falseForest, evalContext, myStack);
                    }
                }
                //nothing to do if myStack.hasReturnMessage // already returning :)
                return rightSymbol;
            },
            validate: validationLogic(1, 2)
        },
        //#R2.2
        "foreach": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var inn = node.left;
                var inRight = EvalTree(inn.right, evalContext);
                if (inRight.type !== Symbol_1.Symbol.Types.array) {
                    throwError("Node must have [] at left's right", node);
                }
                var eachSymbol = new Symbol_1.Symbol(null, null, Symbol_1.Symbol.Types.null, evalContext);
                for (var i = 0; i < inRight.value.length; i++) {
                    var symbolName = inn.left.token.value;
                    var symbolValue = inRight.value[i];
                    evalContext.symDict.Define(symbolName, symbolValue, determineSymbolType(symbolValue), evalContext);
                    var selfStack = new Stack_1.Stack({ reason: Stack_1.StackReason.foreach });
                    eachSymbol = EvalForest(node.right, evalContext, selfStack);
                    var stackMessage = selfStack.Message;
                    if (stackMessage == Stack_1.StackMessage.break) {
                        break;
                    }
                    else if (stackMessage == Stack_1.StackMessage.continue) {
                        continue;
                    }
                }
                return eachSymbol;
            },
            validate: validationLogic(1, 1)
        },
        "break": {
            resolve: breakingLogic("break"),
            validate: validationLogic(-1, -1)
        },
        "continue": {
            resolve: breakingLogic("continue"),
            validate: validationLogic(-1, -1)
        }
    },
    string: {
        resolve: function (node, evalContext) {
            var _a, _b;
            ///<param name="node" value="new DNode()"></param>
            var stringText = node.token.value;
            if (node.IsRightArray()) {
                var stringParameters = [];
                for (var i = 0; i < node.rightArray.length; i++) {
                    stringParameters.push(((_a = EvalForest(node.rightArray[i], evalContext, new Stack_1.Stack({ reason: Stack_1.StackReason.string }))) === null || _a === void 0 ? void 0 : _a.GetString()) || "");
                }
                stringText = new StringHelper_1.StringHelper().formatStringArray(stringText, stringParameters);
            }
            else if (node.right !== null) {
                var stringParameter = ((_b = EvalForest(node.right, evalContext, new Stack_1.Stack({ reason: Stack_1.StackReason.string }))) === null || _b === void 0 ? void 0 : _b.GetString()) || "";
                stringText = new StringHelper_1.StringHelper().formatString(stringText, stringParameter);
            }
            return new Symbol_1.Symbol(null, stringText, Symbol_1.Symbol.Types.string, evalContext);
        },
        validate: validationLogic(-1, 0)
    },
    number: {
        resolve: function (node, evalContext) {
            ///<param name="node" value="new DNode()"></param>
            return new Symbol_1.Symbol(gsn(node.token), Number(node.token.value), Symbol_1.Symbol.Types.number, evalContext);
        },
        validate: validationLogic(-1, -1)
    },
    identifier: {
        /**
         *
         * @param {*} node
         * value="new DNode()"
         * @param {*} evalContext
         */
        resolve: function (node, evalContext) {
            var tokenVal = node.token.value;
            switch (tokenVal) {
                // this is case sensitive
                case "response":
                    return new Symbol_1.Symbol("response", evalContext.response, determineSymbolType(evalContext.response), evalContext);
                case "true":
                case "false":
                    return new Symbol_1.Symbol(tokenVal, tokenVal === "true", Symbol_1.Symbol.Types.boolean, evalContext);
                case "null":
                    return new Symbol_1.Symbol(null, null, Symbol_1.Symbol.Types.null, evalContext);
                default:
                    break;
            }
            if (evalContext.dataSource) {
                var dataSourceObj = evalContext.dataSource[tokenVal];
                if (dataSourceObj !== undefined) {
                    return new Symbol_1.Symbol("Prm_" + tokenVal, dataSourceObj, determineSymbolType(dataSourceObj), evalContext);
                }
            }
            var symbol = evalContext.symDict.Retrieve(tokenVal);
            if (symbol !== null) {
                return symbol;
            }
            var objectValue = evalContext.global[tokenVal];
            if (objectValue !== undefined) {
                // this means field is not defined on object
                return new Symbol_1.Symbol("Global." + tokenVal, objectValue, determineSymbolType(objectValue), evalContext);
            }
            //try to get from control dict
            var control = evalContext.controlDict && evalContext.controlDict[tokenVal];
            if (!new typeHelper_1.TypeHelper().isNull(control)) {
                return new Symbol_1.Symbol("Ctrl_" + tokenVal, control, determineSymbolType(control), evalContext);
            }
            return evalContext.symDict.Define(tokenVal, null, null, evalContext);
        },
        validate: validationLogic(-1, -1)
    },
    operator: {
        ">=": {
            resolve: comparisionLogic(function (leftNumber, rightNumber) { return leftNumber >= rightNumber; }),
            validate: validationLogic(1, 1)
        },
        "<=": {
            resolve: comparisionLogic(function (leftNumber, rightNumber) { return leftNumber <= rightNumber; }),
            validate: validationLogic(1, 1)
        },
        "<": {
            resolve: comparisionLogic(function (leftNumber, rightNumber) { return leftNumber < rightNumber; }),
            validate: validationLogic(1, 1)
        },
        ">": {
            resolve: comparisionLogic(function (leftNumber, rightNumber) { return leftNumber > rightNumber; }),
            validate: validationLogic(1, 1)
        },
        ".": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var leftSymbol = EvalTree(node.left, evalContext);
                var targetValue = leftSymbol.GetValue(node.right.token.value, node, evalContext);
                return new Symbol_1.Symbol(null, targetValue, determineSymbolType(targetValue), evalContext);
            },
            validate: validationLogic(1, 1)
        },
        "{}": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var newObject = {};
                var retVal = new Symbol_1.Symbol(null, newObject, Symbol_1.Symbol.Types.object, evalContext);
                if (node.IsRightNull()) {
                    return retVal;
                }
                var rightItems;
                if (!node.IsRightArray()) {
                    // right can be array or can have 1 item.
                    rightItems = [node.right];
                }
                else {
                    rightItems = node.rightArray;
                }
                for (var i = 0; i < rightItems.length; i++) {
                    var currentNode = rightItems[i];
                    var rightSymbol = EvalTree(currentNode.right, evalContext);
                    var fieldName = currentNode.left.token.value;
                    retVal.AssignSymbol(fieldName, rightSymbol, node, evalContext);
                }
                return retVal;
            },
            validate: validationLogic(-1, 0)
        },
        "()": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var parameterSymbols = [];
                if (!node.IsRightNull()) {
                    if (node.IsRightArray()) {
                        for (var i = 0; i < node.rightArray.length; i++) {
                            parameterSymbols.push(EvalTree(node.rightArray[i], evalContext));
                        }
                    }
                    else {
                        parameterSymbols.push(EvalTree(node.right, evalContext));
                    }
                }
                var leftSymbol;
                var indexerName = null;
                if (node.left.token.value === "[]") {
                    var accessStructure = tokenLogicGroups.operator["[]"].getAccessStructure(node.left, evalContext);
                    leftSymbol = accessStructure.leftSymbol;
                    indexerName = accessStructure.indexerString;
                }
                else if (node.left.token.value == ".") {
                    leftSymbol = EvalTree(node.left.left, evalContext);
                    indexerName = node.left.right.token.value;
                }
                else {
                    leftSymbol = EvalTree(node.left, evalContext);
                }
                var retVal = leftSymbol.CallFunction(indexerName, parameterSymbols, node, evalContext);
                return new Symbol_1.Symbol(null, retVal, determineSymbolType(retVal), evalContext);
            },
            validate: validationLogic(1, 0)
        },
        "[]": {
            getAccessStructure: function (node, evalContext) {
                ///<summary>Access structure access tokens for array</summary>
                ///<param name="node" value="new Isbank.OmniScript.DNode()"></param>
                var leftSymbol = EvalTree(node.left, evalContext);
                var rightSymbol = EvalTree(node.right, evalContext);
                var accessStructure = {
                    indexerString: rightSymbol.GetString(),
                    leftSymbol: leftSymbol
                };
                return accessStructure;
            },
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var retVal;
                if (node.left === null) {
                    //array definition
                    retVal = new Symbol_1.Symbol(null, [], Symbol_1.Symbol.Types.array, evalContext);
                    var rightItems;
                    if (node.IsRightNull()) {
                        // if does not have right means an array with 0 elements
                        rightItems = [];
                    }
                    else {
                        if (!node.IsRightArray()) {
                            // right can be array or can have 1 item.
                            rightItems = [node.right];
                        }
                        else {
                            rightItems = node.rightArray;
                        }
                    }
                    for (var i = 0; i < rightItems.length; i++) {
                        // arrays hold symbols value, not symbol itself. Array access symbolizes value. /56041
                        retVal.value.push(EvalTree(rightItems[i], evalContext).value);
                    }
                    return retVal;
                }
                else {
                    //array access
                    var accessStructure = this.getAccessStructure(node, evalContext);
                    var targetValue = accessStructure.leftSymbol.GetValue(accessStructure.indexerString, node, evalContext);
                    retVal = new Symbol_1.Symbol(null, targetValue, determineSymbolType(targetValue), evalContext);
                    return retVal;
                }
            },
            // array access is not multidimensional, traditionally slower than jagged /56041 https://msdn.microsoft.com/en-us/library/ms182277.aspx
            validate: validationLogic(0, 0)
        },
        "&&": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var retVal = new Symbol_1.Symbol(null, false, Symbol_1.Symbol.Types.boolean, evalContext);
                var leftSymbol = EvalTree(node.left, evalContext);
                //now short curcuit evaluation of "AND" /56041
                if (leftSymbol.GetBoolean()) {
                    var rightSymbol = EvalTree(node.right, evalContext);
                    retVal.value = rightSymbol.GetBoolean();
                }
                return retVal;
            },
            validate: validationLogic(1, 1)
        },
        "||": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var retVal = new Symbol_1.Symbol(null, true, Symbol_1.Symbol.Types.boolean, evalContext);
                var leftSymbol = EvalTree(node.left, evalContext);
                //now short curcuit evaluation of "OR" /56041
                if (!leftSymbol.GetBoolean()) {
                    var rightSymbol = EvalTree(node.right, evalContext);
                    retVal.value = rightSymbol.GetBoolean();
                }
                return retVal;
            },
            validate: validationLogic(1, 1)
        },
        "!": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var rightSymbol = EvalTree(node.right, evalContext);
                var retVal = new Symbol_1.Symbol(null, false, Symbol_1.Symbol.Types.boolean, evalContext);
                retVal.value = !rightSymbol.GetBoolean();
                return retVal;
            },
            validate: validationLogic(-1, 1)
        },
        "=": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var rightSymbol = EvalTree(node.right, evalContext);
                var leftSymbol;
                var indexerName = null;
                if (node.left.token.value === "[]") {
                    var accessStructure = tokenLogicGroups.operator["[]"].getAccessStructure(node.left, evalContext);
                    leftSymbol = accessStructure.leftSymbol;
                    indexerName = accessStructure.indexerString;
                }
                else if (node.left.token.value == ".") {
                    leftSymbol = EvalTree(node.left.left, evalContext);
                    indexerName = node.left.right.token.value;
                }
                else {
                    leftSymbol = EvalTree(node.left, evalContext);
                }
                leftSymbol.AssignSymbol(indexerName, rightSymbol, node, evalContext);
                return leftSymbol;
            },
            validate: validationLogic(1, 1)
        },
        "!=": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var retVal = tokenLogicGroups.operator["=="].resolve(node, evalContext);
                retVal.value = !retVal.value;
                return retVal;
            },
            validate: function (node) { return tokenLogicGroups.operator["=="].validate(node); }
        },
        "==": {
            resolve: function (node, evalContext) {
                ///<param name="node" value="new DNode()"></param>
                var leftSymbol = EvalTree(node.left, evalContext);
                var rightSymbol = EvalTree(node.right, evalContext);
                var retVal = new Symbol_1.Symbol(null, false, Symbol_1.Symbol.Types.boolean, evalContext);
                if (leftSymbol.Equals(rightSymbol)) {
                    retVal.value = true;
                }
                return retVal;
            },
            validate: validationLogic(1, 1)
        },
        "+": {
            resolve: mathOperationLogic(function (leftNumber, rightNumber) {
                return leftNumber + rightNumber;
            }, function (leftString, rightString) {
                return leftString + rightString;
            }, arrayConcat),
            validate: validationLogic(1, 1)
        },
        "*": {
            resolve: mathOperationLogic(function (leftNumber, rightNumber) {
                return leftNumber * rightNumber;
            }, function () { return "NaN"; }, null),
            validate: validationLogic(1, 1)
        },
        "/": {
            resolve: mathOperationLogic(function (leftNumber, rightNumber) {
                return leftNumber / rightNumber;
            }, function () { return "NaN"; }, null),
            validate: validationLogic(1, 1)
        },
        "-": {
            resolve: mathOperationLogic(function (leftNumber, rightNumber) {
                return leftNumber - rightNumber;
            }, function () { return "NaN"; }, null),
            validate: validationLogic(1, 1)
        }
    }
};
var summarizeToken = function (self) {
    ///<param>Summarize a node</param>
    ///<remarks>Inside a node</remarks>
    var retVal = "node: \"" + self.token.value + "\" type: \"" + self.token.type;
    // for strongly typed this must be converted to inline code. nothing dynamic.
    if (self.token.position !== undefined) {
        retVal += "\" @ line: " + self.token.position.line + " column: " + self.token.position.column;
    }
    return retVal;
};
exports.summarizeToken = summarizeToken;
var throwError = function (message, node) {
    Error_1.OSError.throwWithMessage("Evaluator", message + (node === null ? "" : " on " + summarizeToken(node)), node);
};
/**
 * * Evaluate a single statement tree and return target Symbol
 * @param {*} tree
 * value="new DNode()"
 * @param {*} evalContext
 * * returns type="Symbol" value="new Symbol('a', 5)"
 */
var EvalTree = function (tree, evalContext) {
    var tokenLogicGroup = tokenLogicGroups[tree.token.type];
    var retSymbol;
    var targetLogic;
    if (tokenLogicGroup === undefined) {
        throwError("Unexpected token", tree);
    }
    if (tokenLogicGroup.resolve !== undefined) {
        //If the logic does not change when tokens value changes. Ex: For string token type, whatever the value of the string, evaluation logic is same.
        targetLogic = tokenLogicGroup;
    }
    else {
        //Get logic based on tokens value.
        targetLogic = tokenLogicGroup[tree.token.value];
        if (targetLogic === undefined) {
            throwError("Unexpected token", tree);
        }
    }
    targetLogic.validate(tree);
    retSymbol = targetLogic.resolve(tree, evalContext);
    return retSymbol;
};
/**
 * * Evaluate a single statement tree and return target Symbol
 * @param {*} forest
 * Forest of trees to be evaluated.
 * value="new DNode()"
 * @param {*} evalContext
 * * returns type="Symbol" value="new Symbol('a', 5)
 */
var EvalForest = function (forest, evalContext, stack) {
    var retSymbol = null;
    evalContext.addStack(stack);
    //#R2.11
    if (forest.array) {
        for (var i = 0; i < forest.array.length; i++) {
            retSymbol = EvalTree(forest.array[i], evalContext);
            if (stack.hasReturnMessage()) {
                break; // pop stack, down below
            }
        }
    }
    else {
        retSymbol = new Symbol_1.Symbol(null, null, Symbol_1.Symbol.Types.null, evalContext);
    }
    evalContext.popStack();
    return retSymbol;
};
/**
 * * Evaluate a forest of trees and return value
 * @param {*} forest
 * Forest of trees to be evaluated
 * value="new DNode()"
 * @param {*} response
 * Response object
 * value="{}"
 * @param {*} dataSource
 * Data Source object if any exists.
 * value="{}"
 * @param {*} globals
 * Global instances and libraries: SM, LR, Math, ...
 * value="{}"
 * @param {*} controlDict
 * Component instances
 * value="{}"
 * @param {*} extensions
 * Type extensions: [].length, "".length, [].push, ...
 * value="{}"
 * @param {*} context
 * Context of Dory instance
 */
var Eval = function (forest, response, dataSource, globals, controlDict, extensions, context) {
    var _a;
    // local variable store lasts for evaluation scope
    var symDict = new SymbolDict_1.SymbolDict();
    //create new Evaluation scope context
    var evalContext = new EvalContext_1.EvalContext(dataSource, response, symDict, globals, controlDict, extensions, context);
    var evalForestSymbol = EvalForest(forest, evalContext, new Stack_1.Stack({ reason: Stack_1.StackReason.root }));
    return (_a = evalForestSymbol === null || evalForestSymbol === void 0 ? void 0 : evalForestSymbol.value) !== null && _a !== void 0 ? _a : null;
};
exports.Eval = Eval;


/***/ }),

/***/ "../../common/dory/src/OmniScript/Stack.ts":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/Stack.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = exports.StackMessage = exports.StackReason = void 0;
var StackReason;
(function (StackReason) {
    StackReason["root"] = "root";
    StackReason["if"] = "if";
    StackReason["foreach"] = "foreach";
    StackReason["string"] = "string";
})(StackReason = exports.StackReason || (exports.StackReason = {}));
var StackMessage;
(function (StackMessage) {
    StackMessage["break"] = "break";
    StackMessage["continue"] = "continue";
})(StackMessage = exports.StackMessage || (exports.StackMessage = {}));
var Stack = /** @class */ (function () {
    function Stack(_a) {
        var reason = _a.reason;
        this.message = null;
        this.contextIndex = null;
        this.reason = reason;
    }
    Object.defineProperty(Stack.prototype, "Reason", {
        get: function () {
            return this.reason;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stack.prototype, "Message", {
        get: function () {
            return this.message;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stack.prototype, "ContextIndex", {
        get: function () {
            return this.contextIndex;
        },
        enumerable: false,
        configurable: true
    });
    Stack.prototype.setContextIndex = function (index) {
        this.contextIndex = index;
    };
    Stack.prototype.clearContextIndex = function () {
        this.contextIndex = null;
    };
    Stack.prototype.setMessage = function (message) {
        this.message = message;
    };
    Stack.prototype.hasReturnMessage = function () {
        switch (this.message) {
            case StackMessage.break:
            case StackMessage.continue:
                return true;
            default:
                return false;
        }
    };
    return Stack;
}());
exports.Stack = Stack;


/***/ }),

/***/ "../../common/dory/src/OmniScript/Symbol.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/Symbol.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Symbol = void 0;
var stringHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/stringHelper */ "../../common/shrimp/helpers/stringHelper.ts");
var typeHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var Evaluator_1 = __webpack_require__(/*! ../OmniScript/Evaluator */ "../../common/dory/src/OmniScript/Evaluator.ts");
var Error_1 = __webpack_require__(/*! ./Error */ "../../common/dory/src/OmniScript/Error.ts");
//TODO: Converted from JS -> TS in a hurry. convert for real
var throwError = function (message, node) {
    Error_1.OSError.throwWithMessage("Symbol", message + (node === null ? "" : " on " + (0, Evaluator_1.summarizeToken)(node)), node);
};
var messageError = function (message, node) {
    Error_1.OSError.errorWithMessage("Symbol", message + (node === null ? "" : " on " + (0, Evaluator_1.summarizeToken)(node)), node);
};
var compareObjects = function (objectOne, objectTwo, compareContext) {
    // Compare primitives and functions and same instances
    if (objectOne === null || objectTwo === null || isNaN(objectOne) || isNaN(objectTwo)) {
        if (objectOne === null && objectTwo === null) {
            return true;
        }
        // remember that NaN === NaN returns false.
        if (isNaN(objectOne) && isNaN(objectTwo)) {
            return true;
        }
        return false;
    }
    //ok now complex object compare
    var equalsObjOne = objectOne["Equals"];
    var equalsObjTwo = objectTwo["Equals"];
    var equalsWay = equalsObjOne !== undefined;
    equalsWay = equalsWay && (equalsObjTwo !== undefined);
    if (equalsWay) {
        //if objects implement Equals style comparision. Each environment has to spesify its own way of Equals comparision implementation checking. //56041
        //js true|false returning Equals, .net bool returning Equals override, objc BOOL returning isEqual, java boolean returning equals, etc... //56041
        return equalsObjOne.call(objectOne, objectTwo);
    }
    else {
        // :) hard way. check fields one by one recursively.
        //Javascript spesific
        {
            if (objectOne === objectTwo) {
                return true;
            }
            // Works in case when functions are created in constructor.
            // Comparing dates is a common scenario. Another built-ins?
            // We can even handle functions passed across iframes
            if ((typeof objectOne === 'function' && typeof objectTwo === 'function') ||
                (objectOne instanceof Date && objectTwo instanceof Date) ||
                (objectOne instanceof RegExp && objectTwo instanceof RegExp) ||
                (objectOne instanceof String && objectTwo instanceof String) ||
                (objectOne instanceof Number && objectTwo instanceof Number)) {
                return objectOne.toString() === objectTwo.toString();
            }
            // At last checking prototypes as good a we can
            if (!(objectOne instanceof Object && objectTwo instanceof Object)) {
                return false;
            }
            if (objectOne.isPrototypeOf(objectTwo) || objectTwo.isPrototypeOf(objectOne)) {
                return false;
            }
            if (objectOne.constructor !== objectTwo.constructor) {
                return false;
            }
            if (objectOne.prototype !== objectTwo.prototype) {
                return false;
            }
            // Check for infinitive linking loops
            if (compareContext.leftChain.indexOf(objectOne) > -1 || compareContext.rightChain.indexOf(objectTwo) > -1) {
                return false;
            }
            var p;
            for (p in objectTwo) {
                if (objectTwo.hasOwnProperty(p) !== objectOne.hasOwnProperty(p)) {
                    return false;
                }
                else if (typeof objectTwo[p] !== typeof objectOne[p]) {
                    return false;
                }
            }
            for (p in objectOne) {
                if (objectTwo.hasOwnProperty(p) !== objectOne.hasOwnProperty(p)) {
                    return false;
                }
                else if (typeof objectTwo[p] !== typeof objectOne[p]) {
                    return false;
                }
                switch (typeof (objectOne[p])) {
                    case 'object':
                    case 'function':
                        compareContext.leftChain.push(objectOne);
                        compareContext.rightChain.push(objectTwo);
                        if (!compareObjects(objectOne[p], objectTwo[p], compareContext)) {
                            return false;
                        }
                        compareContext.leftChain.pop();
                        compareContext.rightChain.pop();
                        break;
                    default:
                        if (objectOne[p] !== objectTwo[p]) {
                            return false;
                        }
                        break;
                }
            }
        }
        //\Javascript Spesific
    }
};
var getTypeExtension = function (type, extensionName, evalContext) {
    ///<summary>Get types extension properties. Because languages differ native and primitive object properties should be mapped externally</summary>
    ///<param name="type" type="Symbol.Types" value="''">Type of value. Symbol.Types</param>
    ///<param name="extensionName">Name of property</param>
    var quickKey = Object.keys(evalContext.global["Quick"]).includes(extensionName);
    if (quickKey) {
        return null;
    }
    var typesExtensions = evalContext.extensions[stringHelper_1.StringHelper.capitalizeString(type)];
    if (!typesExtensions) {
        return null;
    }
    var targetExtension = typesExtensions[extensionName];
    if (!targetExtension) {
        return null;
    }
    return targetExtension;
};
var isFieldAFunctionProperty = function (field) {
    return new typeHelper_1.TypeHelper().isFunction(field) && field.isProperty;
};
var isItemAComponent = function (item) {
    return item.M !== null && item.M !== undefined;
};
var Symbol = /** @class */ (function () {
    function Symbol(name, value, type, evalContext) {
        /// <summary>Symbol structure. Every token is a symbol structure</summary>
        ///<param name="name" type="string" value="''">Name of symbol</param>
        ///<param name="value" type="object" value="{}">Value of symbol. Can be null, can be object, ...</param>
        ///<param name="type" type="Symbol.Types" value="''">Type of value. Symbol.Types</param>
        ///<field name="name" type="string" value="''">Name of symbol</field>
        ///<field name="value" type="object" value="{}">Value of symbol. Can be null, can be object, ...</field>
        ///<field name="type" type="Symbol.Types" value="''">Type of value. Symbol.Types</field>
        name = name;
        this.AssignValue(null, value, type, null, evalContext);
    }
    Symbol.prototype.AssignValue = function (indexerName, value, type, assignerNode, evalContext) {
        /// <summary>Assign another value to a symbol</summary>
        ///<param name="indexerName" type="String" value="'5'">indexer or field name of source symbol to assign destination</param>
        ///<param name="type" type="Symbol.Types" value="''">Type of value. Symbol.Types... </param>
        ///<param name="assignerNode" value="new DNode()">assignment responsible node</param>
        if (indexerName === null) {
            this.value = value === undefined ? null : value;
            this.type = this.value === null ? "null" : type;
        }
        else {
            if (this.IsArrayAccess(indexerName, assignerNode, evalContext)) {
                //number, means array assign
                this.value[parseInt(indexerName, 10)] = value;
            }
            else {
                //Not A Number, means field asssign
                if (new typeHelper_1.TypeHelper().isFunction(this.value[indexerName])) {
                    return this.value[indexerName](value);
                    // javascript only-> Because js does not have real props, this might be property simulated through a function. Pre IE9. IF IE9 dies might change... /56041
                }
                else {
                    if (this.value.QSProxy && this.value.QSProxy.AssignProxy) {
                        return this.value.QSProxy.AssignProxy(indexerName, value);
                    }
                    this.value[indexerName] = value;
                    // javascript field access does not require reflection and variations :) objects are json pure, sorry.. /56041
                }
            }
        }
    };
    Symbol.prototype.GetValue = function (indexerName, retrieverNode, evalContext) {
        /// <summary>Get value from Symbol</summary>
        ///<param name="indexerName" type="String" value="'5'">indexer or field name of source symbol to retrieve destination</param>
        ///<param name="retrieverNode" value="new DNode()">retrieval responsible node</param>
        //Object null reference prevention
        if (this.type === Symbol.Types.null) {
            return null;
        }
        if (indexerName === null) {
            // normal value access for an identifier. like: b in -> a=b
            return this.value;
        }
        else {
            // field or array type of access  like: c in -> (b object a=b.c) or  ( b array a=b[c])
            // normally JS array access is enough for both
            // for strongly typed language compliance, field or array assign must be decided. 56041
            //for JS: IsNaN return true for 5.5 :)
            if (parseInt(indexerName, 10).toString() === indexerName) {
                //number, means array retrieve
                if (this.type !== Symbol.Types.array) {
                    throwError("Left of indexed access must be array", retrieverNode);
                }
                return this.value[parseInt(indexerName, 10)];
            }
            else {
                //Not A Number, means field retrieve
                var targetExtension = getTypeExtension(this.type, indexerName, evalContext);
                if (targetExtension) {
                    return targetExtension(this.value);
                }
                if (this.type !== Symbol.Types.native && this.type !== Symbol.Types.object) {
                    throwError("Left of indexed access (" + indexerName + ") must be object", retrieverNode);
                }
                if (isFieldAFunctionProperty(this.value[indexerName])) {
                    return this.value[indexerName]();
                    // javascript only-> Because js does not have real props, this might be property simulated through a function. Pre IE9. IF IE9 dies might change... /56041
                }
                else {
                    if (this.value.QSProxy && this.value.QSProxy.GetValueProxy) {
                        return this.value.QSProxy.GetValueProxy(indexerName);
                    }
                    return this.value[indexerName];
                    // javascript field access does not require reflection and variations :) objects are json pure, sorry.. /56041
                }
            }
        }
    };
    Symbol.prototype.CallFunction = function (indexerName, parameterSymbols, responsibleNode, evalContext) {
        ///<summary>Call this symbols function</summary>
        ///<param name="indexerName" type="String" value="'5'">indexer or field name of source symbol</param>
        ///<param name="parameterSymbols" value="[new Symbol()]">Function parameters. Consist of array of symbols.</param>
        ///<param name="responsibleNode" value="new DNode()">responsible function call node</param>
        //Object null reference prevention
        if (this.type === Symbol.Types.null) {
            return null;
        }
        var parameters = [];
        for (var i = 0; i < parameterSymbols.length; i++) {
            parameters.push(parameterSymbols[i].value);
        }
        var retVal;
        if (indexerName === null) {
            retVal = this.value.apply(null, parameters);
        }
        else {
            if (this.IsArrayAccess(indexerName, responsibleNode, evalContext)) {
                retVal = this.value[parseInt(indexerName, 10)].apply(this.value, parameters);
            }
            else {
                //#R2.2a
                var targetExtension = getTypeExtension(this.type, indexerName, evalContext);
                if (targetExtension) {
                    parameters.unshift(this.value);
                    return targetExtension.apply(null, parameters);
                }
                if (isFieldAFunctionProperty(this.value[indexerName])) {
                    throwError(indexerName + " is a property, can not be called as a function.", responsibleNode);
                }
                var funcSearchTarget = this.value;
                // // this was MCM. DELETE ----> 08.07.2020
                // //if called object is a component, we should change function search target to M (force $func declaration)
                // var itemIsComp = isItemAComponent(this.value);
                // if (itemIsComp) {
                //     funcSearchTarget = this.value.M;
                // }
                if (funcSearchTarget.QSProxy && funcSearchTarget.QSProxy.MethodProxy) {
                    if (indexerName == "get" || indexerName == "set" || indexerName == "trigger" || indexerName == "delay" || indexerName == "clearTimeout") {
                        return funcSearchTarget[indexerName].apply(this.value, parameters);
                    }
                    else {
                        parameters.unshift(indexerName);
                        return funcSearchTarget.QSProxy.MethodProxy.apply(this.value, parameters);
                    }
                }
                if (funcSearchTarget[indexerName]) {
                    retVal = funcSearchTarget[indexerName].apply(this.value, parameters);
                }
                else {
                    // // this was MCM. DELETE ----> 08.07.2020
                    // var msg = "No function named " + indexerName + " on " + (itemIsComp ? "component, check missin $func definition" : "object");
                    var msg = "No function named " + indexerName + " on object";
                    messageError(msg, responsibleNode);
                    return null;
                }
            }
        }
        return retVal;
    };
    Symbol.prototype.IsArrayAccess = function (indexerName, responsibleNode, evalContext) {
        ///<summary>Indexer is array or field access</summary>
        ///<param name="indexerName" type="String" value="'5'">indexer or field name of source symbol to assign destination</param>
        ///<param name="responsibleNode" value="new DNode()">responsible node of this access</param>
        // normally JS array access is enough for both
        // for strongly typed language compliance, field or array assign must be decided
        //for JS: IsNaN return true for 5.5 :)
        if (parseInt(indexerName, 10).toString() === indexerName) {
            //number, means array access
            if (this.type !== Symbol.Types.array) {
                throwError("Left of assignment must be array", responsibleNode);
            }
            return true;
        }
        else {
            //Not A Number, means field asssign
            //#R2.2a
            if (getTypeExtension(this.type, indexerName, evalContext)) {
                return false;
            }
            if (this.type !== Symbol.Types.native && this.type !== Symbol.Types.object) {
                throwError("Left of assignment must be object", responsibleNode);
            }
            return false;
            //Not A Number, means field access
        }
    };
    Symbol.prototype.AssignSymbol = function (indexerName, symbol, assignerNode, evalContext) {
        /// <summary>Assign another symbol to this</summary>
        ///<param name="indexerName" type="String" value="'5'">indexer or field name of source symbol to assign destination</param>
        ///<param name="symbol" type="Symbol" value="new Symbol()">symbol to assign</param>
        ///<param name="assignerNode" value="new DNode()">assignment responsible node</param>
        //maybe symdict lookup in future, pointer, ref. or sth else someday. Everyone started somewhere :) //56041
        //or maybe we will leave everything to hosting environment, based on their implementation of pointers. js, .net, objc, java assign objects by pointer allready //56041
        this.AssignValue(indexerName, symbol.value, symbol.type, assignerNode, evalContext);
    };
    Symbol.prototype.Equals = function (symbol) {
        /// <summary>Check equality with another symbol</summary>
        ///<param name="symbol" type="Symbol" value="new Symbol()">symbol to check</param>
        //todo: what to do with array... just bored...
        if (this.type === Symbol.Types.native || this.type === Symbol.Types.object) {
            if (symbol.type === Symbol.Types.native || symbol.type === Symbol.Types.object) {
                return compareObjects(this.value, symbol.value, null);
            }
            return false;
        }
        if (this.type !== symbol.type) {
            //different types can not be equal
            return false;
        }
        if (this.type === Symbol.Types.null) {
            // if one is null other is definatelly null. Different types eliminated prev.
            return true;
        }
        //boolean, number, string reached this point
        if (this.value === symbol.value) {
            return true;
        }
        return false;
    };
    Symbol.prototype.GetString = function () {
        ///<summary>Get string value of symbol</summary>
        if (this.type === Symbol.Types.null || this.value === null) {
            return "null";
        }
        if (this.type === Symbol.Types.string) {
            return this.value;
        }
        if (this.type === Symbol.Types.array) {
            var retVal = "";
            for (var i = 0, len = this.value.length; i < len; i++) {
                retVal += (i !== 0 ? "," : "") + this.value[i].toString();
            }
            return retVal;
        }
        return this.value.toString();
    };
    Symbol.prototype.GetBoolean = function () {
        ///<summary>Get boolean value of symbol</summary>
        if (this.type === Symbol.Types.null || this.value === null) {
            // null is behaved as null
            return false;
        }
        if (this.type === Symbol.Types.boolean && this.value === false) {
            return false;
        }
        if (this.type === Symbol.Types.number && this.value === 0) {
            //0 is false
            return false;
        }
        //everything else is true because they exist. //56041
        return true;
    };
    Symbol.prototype.GetNumber = function () {
        if (this.type === Symbol.Types.null || this.value === null) {
            return null;
        }
        if (this.type === Symbol.Types.number) {
            return this.value;
        }
        if (this.type === Symbol.Types.string) {
            // parse string to number.
            return Number(this.value);
        }
        if (this.type === Symbol.Types.boolean) {
            return this.value === true ? 1 : 0;
        }
        return 0;
    };
    Symbol.Types = {
        //For a symbol keyword, operator drops. identifier is translated into a number, string or object, native, boolean, null in evaluation. 56041
        string: "string",
        number: "number",
        object: "object",
        native: "native",
        boolean: "boolean",
        array: "array",
        //#R2.3
        date: "date",
        "null": "null"
    };
    return Symbol;
}());
exports.Symbol = Symbol;


/***/ }),

/***/ "../../common/dory/src/OmniScript/SymbolDict.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/dory/src/OmniScript/SymbolDict.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbolDict = void 0;
var Error_1 = __webpack_require__(/*! ./Error */ "../../common/dory/src/OmniScript/Error.ts");
var Symbol_1 = __webpack_require__(/*! ./Symbol */ "../../common/dory/src/OmniScript/Symbol.ts");
//TODO: Converted from JS -> TS in a hurry. add type infos
/// <summary>Symbol dictionary class</summary>
/// <field name="symbolDict">Symbol dictionary itself</field>
var SymbolDict = /** @class */ (function () {
    function SymbolDict() {
        this.symbolDict = {};
    }
    SymbolDict.prototype.Define = function (symbolName, value, type, evalContext) {
        /// <summary>Define a new symbol in dictionary</summary>
        ///<param name="symbolName" type="string" value="''">Name of new symbol</param>
        ///<param name="value" value="{}">Value of new symbol. Can be null, can be object, ...</param>
        ///<param name="type" type="Symbol.Types" value="''">Type of value. Symbol.Types</param>
        ///<returns type="Symbol" value="new Symbol('a', 5)"></returns>
        if (symbolName === null || symbolName === undefined) {
            Error_1.OSError.throwWithMessage("SymbolDict", "A symbol name can not be null", null);
        }
        var newSymbol = null;
        if (value === undefined) {
            // this means undefine field on the object. so delete it :) //56041
            //undefined is not null. maybe we sould think about this?
            delete this.symbolDict[symbolName];
        }
        else {
            //#R2.2a
            newSymbol = new Symbol_1.Symbol(symbolName, value, type, evalContext);
            this.symbolDict[symbolName] = newSymbol;
        }
        return newSymbol;
    };
    SymbolDict.prototype.Retrieve = function (symbolName) {
        /// <summary>Retrieve a symbol value from dictionary</summary>
        ///<param name="symbolName" type="string" value="''">Name of symbol to retrieve</param>
        ///<returns type="Symbol" value="new Symbol('a', 5)"></returns>
        var retVal = this.symbolDict[symbolName];
        if (retVal === undefined) {
            return null;
        }
        return retVal;
    };
    return SymbolDict;
}());
exports.SymbolDict = SymbolDict;


/***/ }),

/***/ "../../common/qshell/index.ts":
/*!***********************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/index.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RendererChild = exports.QShell = exports.DoryRenderer = void 0;
var context_1 = __webpack_require__(/*! ../shrimp/context */ "../../common/shrimp/context.ts");
var IExternalLocalizationFunc_1 = __webpack_require__(/*! ../shrimp/interfaces/quick/IExternalLocalizationFunc */ "../../common/shrimp/interfaces/quick/IExternalLocalizationFunc.ts");
var IRoleBaseAuthorizationFunc_1 = __webpack_require__(/*! ../shrimp/interfaces/quick/IRoleBaseAuthorizationFunc */ "../../common/shrimp/interfaces/quick/IRoleBaseAuthorizationFunc.ts");
var IUXManager_1 = __webpack_require__(/*! ../shrimp/interfaces/quick/IUXManager */ "../../common/shrimp/interfaces/quick/IUXManager.ts");
var QJsonPool_1 = __webpack_require__(/*! ./src/helpers/QJsonHelpers/QJsonPool */ "../../common/qshell/src/helpers/QJsonHelpers/QJsonPool.ts");
var Renderer_1 = __webpack_require__(/*! ./src/helpers/Renderer */ "../../common/qshell/src/helpers/Renderer.ts");
Object.defineProperty(exports, "DoryRenderer", { enumerable: true, get: function () { return Renderer_1.DoryRenderer; } });
var RendererChild_1 = __webpack_require__(/*! ./src/helpers/RendererChild */ "../../common/qshell/src/helpers/RendererChild.ts");
Object.defineProperty(exports, "RendererChild", { enumerable: true, get: function () { return RendererChild_1.RendererChild; } });
var CompInstanceTracker_1 = __webpack_require__(/*! ./src/interfaces/construction/CompInstanceTracker */ "../../common/qshell/src/interfaces/construction/CompInstanceTracker.ts");
var IComponentManager_1 = __webpack_require__(/*! ./src/interfaces/construction/IComponentManager */ "../../common/qshell/src/interfaces/construction/IComponentManager.ts");
var ICookieManager_1 = __webpack_require__(/*! ./src/interfaces/construction/ICookieManager */ "../../common/qshell/src/interfaces/construction/ICookieManager.ts");
var ICryptographyManager_1 = __webpack_require__(/*! ./src/interfaces/construction/ICryptographyManager */ "../../common/qshell/src/interfaces/construction/ICryptographyManager.ts");
var IGlobalMethods_1 = __webpack_require__(/*! ./src/interfaces/construction/IGlobalMethods */ "../../common/qshell/src/interfaces/construction/IGlobalMethods.ts");
var IHostTriggerer_1 = __webpack_require__(/*! ./src/interfaces/construction/IHostTriggerer */ "../../common/qshell/src/interfaces/construction/IHostTriggerer.ts");
var IIntegrationsManager_1 = __webpack_require__(/*! ./src/interfaces/construction/IIntegrationsManager */ "../../common/qshell/src/interfaces/construction/IIntegrationsManager.ts");
var ILanguageExtensions_1 = __webpack_require__(/*! ./src/interfaces/construction/ILanguageExtensions */ "../../common/qshell/src/interfaces/construction/ILanguageExtensions.ts");
var INavigationManager_1 = __webpack_require__(/*! ./src/interfaces/construction/INavigationManager */ "../../common/qshell/src/interfaces/construction/INavigationManager.ts");
var INetworkManager_1 = __webpack_require__(/*! ./src/interfaces/construction/INetworkManager */ "../../common/qshell/src/interfaces/construction/INetworkManager.ts");
var IPlatformManager_1 = __webpack_require__(/*! ./src/interfaces/construction/IPlatformManager */ "../../common/qshell/src/interfaces/construction/IPlatformManager.ts");
var IProcessManager_1 = __webpack_require__(/*! ./src/interfaces/construction/IProcessManager */ "../../common/qshell/src/interfaces/construction/IProcessManager.ts");
var IQJsonRetriever_1 = __webpack_require__(/*! ./src/interfaces/construction/IQJsonRetriever */ "../../common/qshell/src/interfaces/construction/IQJsonRetriever.ts");
var IRegionalManager_1 = __webpack_require__(/*! ./src/interfaces/construction/IRegionalManager */ "../../common/qshell/src/interfaces/construction/IRegionalManager.ts");
var IStoreManager_1 = __webpack_require__(/*! ./src/interfaces/construction/IStoreManager */ "../../common/qshell/src/interfaces/construction/IStoreManager.ts");
var QShell = /** @class */ (function () {
    function QShell(_a, operatorCollection) {
        var qjsonRetriever = _a.qjsonRetriever, moduleManager = _a.moduleManager, network = _a.network, ux = _a.ux, region = _a.region, hostTriggerer = _a.hostTriggerer, platformType = _a.platformType, platformManager = _a.platformManager;
        this.contextName = "QShell";
        this.context = new context_1.ContextManager();
        this.network = network;
        this.qjsonRetriever = qjsonRetriever;
        this.qjsonPool = new QJsonPool_1.QJsonPool({ qjsonRetriever: qjsonRetriever, moduleManager: moduleManager, context: this.context });
        this.ux = ux;
        this.region = region;
        this.platformType = platformType;
        this.hostTriggerer = hostTriggerer;
        this.operatorCollection = operatorCollection;
        this.platformManager = platformManager;
        this.context.RegisterItem(this);
    }
    QShell.prototype.CreateRenderer = function (_a) {
        var componentManager = _a.componentManager, globalMethods = _a.globalMethods, doryInstanceName = _a.doryInstanceName, componentInstanceTracker = _a.componentInstanceTracker, langExtensions = _a.langExtensions, navigationManager = _a.navigationManager, integrationsManager = _a.integrationsManager, storeManager = _a.storeManager, cookieManager = _a.cookieManager, processManager = _a.processManager, cryptoManager = _a.cryptoManager, config = _a.config;
        this.network.contextName = INetworkManager_1.NetworkManagerContextName;
        this.qjsonRetriever.contextName = IQJsonRetriever_1.QJsonRetrieverContextName;
        componentManager.contextName = IComponentManager_1.ComponentManagerContextName;
        globalMethods.contextName = IGlobalMethods_1.GlobalMethodsContextName;
        if (this.ux) {
            this.ux.contextName = IUXManager_1.UXManagerContextName;
            this.context.RegisterItem(this.ux);
        }
        if (this.region) {
            this.region.contextName = IRegionalManager_1.RegionalManagerContextName;
            this.context.RegisterItem(this.region);
        }
        if (this.hostTriggerer) {
            this.hostTriggerer.contextName = IHostTriggerer_1.HostTriggererContextName;
            this.context.RegisterItem(this.hostTriggerer);
        }
        if (this.platformManager) {
            this.platformManager.contextName = IPlatformManager_1.PlatformManagerContextName;
            this.context.RegisterItem(this.platformManager);
        }
        if (langExtensions) {
            langExtensions.contextName = ILanguageExtensions_1.LanguageExtensionsContextName;
            this.context.RegisterItem(langExtensions);
        }
        if (componentInstanceTracker) {
            componentInstanceTracker.contextName = CompInstanceTracker_1.CompInstanceTrackerContextName;
            this.context.RegisterItem(componentInstanceTracker);
        }
        if (navigationManager) {
            navigationManager.contextName = INavigationManager_1.NavigationManagerContextName;
            this.context.RegisterItem(navigationManager);
        }
        if (integrationsManager) {
            integrationsManager.contextName = IIntegrationsManager_1.IntegrationsManagerContextName;
            this.context.RegisterItem(integrationsManager);
        }
        if (config === null || config === void 0 ? void 0 : config.roleBaseAuthorizationFunc) {
            config.roleBaseAuthorizationFunc.contextName = IRoleBaseAuthorizationFunc_1.RoleBaseAuthorizationFuncContextName;
            this.context.RegisterItem(config.roleBaseAuthorizationFunc);
        }
        if (config === null || config === void 0 ? void 0 : config.externaLocalizationFunc) {
            config.externaLocalizationFunc.contextName = IExternalLocalizationFunc_1.ExternalLocalizationFuncContextName;
            this.context.RegisterItem(config.externaLocalizationFunc);
        }
        if (storeManager) {
            storeManager.contextName = IStoreManager_1.StoreManagerContextName;
            this.context.RegisterItem(storeManager);
        }
        if (cookieManager) {
            cookieManager.contextName = ICookieManager_1.CookieManagerContextName;
            this.context.RegisterItem(cookieManager);
        }
        if (processManager) {
            processManager.contextName = IProcessManager_1.ProcessManagerContextName;
            this.context.RegisterItem(processManager);
        }
        if (cryptoManager) {
            cryptoManager.contextName = ICryptographyManager_1.CryptographyContextName;
            this.context.RegisterItem(cryptoManager);
        }
        this.context.RegisterItem(this.network);
        this.context.RegisterItem(this.qjsonRetriever);
        this.context.RegisterItem(componentManager);
        this.context.RegisterItem(globalMethods);
        this.context.RegisterItem(this.qjsonPool);
        this.qshellRenderer = new Renderer_1.DoryRenderer({ context: this.context, doryInstanceName: doryInstanceName, operatorCollection: this.operatorCollection });
        this.qjsonPool.Dory = this.qshellRenderer.DoryInst;
        this.qshellRenderer.SetLRType(config === null || config === void 0 ? void 0 : config.LRType);
        this.qshellRenderer.SetConfigValues(config === null || config === void 0 ? void 0 : config.configValues);
        this.qshellRenderer.SetGlobalLRDict(config === null || config === void 0 ? void 0 : config.GlobalLRDict);
        this.qshellRenderer.SetPlatformType(this.platformType);
        if (config === null || config === void 0 ? void 0 : config.SiteSettings) {
            this.qshellRenderer.SetSiteSettings(config.SiteSettings);
        }
        return this.qshellRenderer;
    };
    QShell.prototype.getRender = function () {
        return this.qshellRenderer;
    };
    QShell.prototype.ResetQJsonPool = function () {
        this.qjsonPool.ResetPool();
    };
    return QShell;
}());
exports.QShell = QShell;


/***/ }),

/***/ "../../common/qshell/src/customComponents/QCaptcha.ts":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/customComponents/QCaptcha.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pjson = {
    "pJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_3",
                    "T": "prop"
                },
                "externalEvents": {
                    "H": "[{name='setUrl', params=['url']}, {name='setCodeValue', params=['codeValue']},{name='clickSubmit',params=['']},{name= 'onChangeGetCodeValue',params=['codeValue']}]",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "['maxLength']",
                    "T": "prop"
                }
            },
            "E": {
                "setUrl": {
                    "H": "imgCaptcha.src = url ",
                    "C": true,
                    "EV": true
                },
                "clickSubmit": {
                    "H": "parent.events.clickSubmit()",
                    "C": true
                },
                "setCodeValue": {
                    "H": "txtVerCode.internalValue = codeValue ",
                    "C": true,
                    "EV": true
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_3"
            },
            "O": {
                "compDomClasses": "",
                "cType": "child"
            }
        },
        {
            "T": "VRow",
            "P": {
                "ID": {
                    "H": "rowCaptcha",
                    "T": "prop"
                },
                "class": {
                    "H": "'d-flex flex-row'",
                    "T": "class"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VTextField",
                            "P": {
                                "ID": {
                                    "H": "txtVerCode",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "LR('lblDogrulamaKodu')",
                                    "T": "prop"
                                },
                                "regular": {
                                    "H": "'true'",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "'col-2 mt-1'",
                                    "T": "class"
                                },
                                "solo": {
                                    "H": "false",
                                    "T": "prop"
                                },
                                "outlined": {
                                    "H": "true",
                                    "T": "prop"
                                },
                                "dense": {
                                    "H": "true",
                                    "T": "prop"
                                },
                                "maxlength": {
                                    "H": "parent.props.maxLength",
                                    "T": "attr"
                                }
                            },
                            "E": {
                                "change": {
                                    "H": "parent.events.onChangeGetCodeValue({codeValue=value})",
                                    "P": "value"
                                },
                                "input": {
                                    "H": "parent.events.onChangeGetCodeValue({codeValue=value})",
                                    "P": "value"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "Ghost",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_10",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {},
                                            "_Editor": {
                                                "eID": "EdtrComp_10"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": ""
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_5"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input v-input--dense theme--light v-text-field v-text-field--is-booted v-text-field--enclosed v-text-field--outlined col-2 mt-1"
                            }
                        },
                        {
                            "T": "VImg",
                            "P": {
                                "ID": {
                                    "H": "imgCaptcha",
                                    "T": "prop"
                                },
                                "src": {
                                    "H": "'https://www.tsohost.com/assets/uploads/blog/capcha.jpeg'",
                                    "T": "prop"
                                },
                                "height": {
                                    "H": "'50'",
                                    "T": "prop"
                                },
                                "width": {
                                    "H": "'50'",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "'col-1 ml-2'",
                                    "T": "class"
                                },
                                "maxHeight": {
                                    "H": "'80px'",
                                    "T": "prop"
                                },
                                "maxWidth": {
                                    "H": "'100px'",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "Ghost",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_11",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {},
                                            "_Editor": {
                                                "eID": "EdtrComp_11"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": "editor-ghost-comp"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_6"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-image v-responsive theme--light col-1 ml-2"
                            }
                        },
                        {
                            "T": "VBtn",
                            "P": {
                                "ID": {
                                    "H": "btnSubmit",
                                    "T": "prop"
                                },
                                "color": {
                                    "H": "'primary'",
                                    "T": "prop"
                                },
                                "regular": {
                                    "H": "true",
                                    "T": "prop"
                                },
                                "icon": {
                                    "H": "true",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "'mt-1 ml-3'",
                                    "T": "class"
                                }
                            },
                            "E": {
                                "click": {
                                    "H": "MM.trigger('clickSubmit')",
                                    "P": "mouseEvent"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VIcon",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_14",
                                                    "T": "prop"
                                                },
                                                "text": {
                                                    "H": "'mdi-refresh'",
                                                    "T": "text"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "Ghost",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_13",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {},
                                                            "_Editor": {
                                                                "eID": "EdtrComp_13"
                                                            },
                                                            "O": {
                                                                "cType": "child",
                                                                "compDomClasses": ""
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_14"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "v-icon notranslate mdi mdi-refresh theme--light"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_12"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default primary--text mt-1 ml-3"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_2"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-row"
            }
        },
    ],
    "cJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_3",
                    "T": "prop"
                },
                "externalEvents": {
                    "H": "╬[]╠{}╠=╣name╩╠'setUrl'╩╩╠=╣params╩╠[]╠'url'╩╩╩╩╠{}╠=╣name╩╠'setCodeValue'╩╩╠=╣params╩╠[]╠'codeValue'╩╩╩╩╠{}╠=╣name╩╠'clickSubmit'╩╩╠=╣params╩╠[]╠''╩╩╩╩╠{}╠=╣name╩╠'onChangeGetCodeValue'╩╩╠=╣params╩╠[]╠'codeValue'╩╩╩╩╩╩",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "╬[]╠'maxLength'╩╩╩",
                    "T": "prop"
                }
            },
            "E": {
                "setUrl": {
                    "H": "╬=╣.╣imgCaptcha╩╠src╩╩╠url╩╩╩",
                    "C": true,
                    "EV": true
                },
                "clickSubmit": {
                    "H": "╬()╣.╣.╣parent╩╠events╩╩╠clickSubmit╩╩╩╩",
                    "C": true
                },
                "setCodeValue": {
                    "H": "╬=╣.╣txtVerCode╩╠internalValue╩╩╠codeValue╩╩╩",
                    "C": true,
                    "EV": true
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_3"
            },
            "O": {
                "compDomClasses": "",
                "cType": "child"
            }
        },
        {
            "T": "VRow",
            "P": {
                "ID": {
                    "H": "rowCaptcha",
                    "T": "prop"
                },
                "class": {
                    "H": "╬'d-flex flex-row'╩╩",
                    "T": "class"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VTextField",
                            "P": {
                                "ID": {
                                    "H": "txtVerCode",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "╬()╣LR╩╠'lblDogrulamaKodu'╩╩╩",
                                    "T": "prop"
                                },
                                "regular": {
                                    "H": "╬'true'╩╩",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "╬'col-2 mt-1'╩╩",
                                    "T": "class"
                                },
                                "solo": {
                                    "H": "╬false╩╩",
                                    "T": "prop"
                                },
                                "outlined": {
                                    "H": "╬true╩╩",
                                    "T": "prop"
                                },
                                "dense": {
                                    "H": "╬true╩╩",
                                    "T": "prop"
                                },
                                "maxlength": {
                                    "H": "╬.╣.╣parent╩╠props╩╩╠maxLength╩╩╩",
                                    "T": "attr"
                                }
                            },
                            "E": {
                                "change": {
                                    "H": "╬()╣.╣.╣parent╩╠events╩╩╠onChangeGetCodeValue╩╩╠{}╠=╣codeValue╩╠value╩╩╩╩╩",
                                    "P": "value"
                                },
                                "input": {
                                    "H": "╬()╣.╣.╣parent╩╠events╩╩╠onChangeGetCodeValue╩╩╠{}╠=╣codeValue╩╠value╩╩╩╩╩",
                                    "P": "value"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "Ghost",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_10",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {},
                                            "_Editor": {
                                                "eID": "EdtrComp_10"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": ""
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_5"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input v-input--dense theme--light v-text-field v-text-field--is-booted v-text-field--enclosed v-text-field--outlined col-2 mt-1"
                            }
                        },
                        {
                            "T": "VImg",
                            "P": {
                                "ID": {
                                    "H": "imgCaptcha",
                                    "T": "prop"
                                },
                                "src": {
                                    "H": "╬'https://www.tsohost.com/assets/uploads/blog/capcha.jpeg'╩╩",
                                    "T": "prop"
                                },
                                "height": {
                                    "H": "╬'50'╩╩",
                                    "T": "prop"
                                },
                                "width": {
                                    "H": "╬'50'╩╩",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "╬'col-1 ml-2'╩╩",
                                    "T": "class"
                                },
                                "maxHeight": {
                                    "H": "╬'80px'╩╩",
                                    "T": "prop"
                                },
                                "maxWidth": {
                                    "H": "╬'100px'╩╩",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "Ghost",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_11",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {},
                                            "_Editor": {
                                                "eID": "EdtrComp_11"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": "editor-ghost-comp"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_6"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-image v-responsive theme--light col-1 ml-2"
                            }
                        },
                        {
                            "T": "VBtn",
                            "P": {
                                "ID": {
                                    "H": "btnSubmit",
                                    "T": "prop"
                                },
                                "color": {
                                    "H": "╬'primary'╩╩",
                                    "T": "prop"
                                },
                                "regular": {
                                    "H": "╬true╩╩",
                                    "T": "prop"
                                },
                                "icon": {
                                    "H": "╬true╩╩",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "╬'mt-1 ml-3'╩╩",
                                    "T": "class"
                                }
                            },
                            "E": {
                                "click": {
                                    "H": "╬()╣.╣MM╩╠trigger╩╩╠'clickSubmit'╩╩╩",
                                    "P": "mouseEvent"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VIcon",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_14",
                                                    "T": "prop"
                                                },
                                                "text": {
                                                    "H": "╬'mdi-refresh'╩╩",
                                                    "T": "text"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "Ghost",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_13",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {},
                                                            "_Editor": {
                                                                "eID": "EdtrComp_13"
                                                            },
                                                            "O": {
                                                                "cType": "child",
                                                                "compDomClasses": ""
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_14"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "v-icon notranslate mdi mdi-refresh theme--light"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_12"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default primary--text mt-1 ml-3"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_2"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-row"
            }
        },
    ],
    "lrids": {
        "tr-TR": {
            "lblDogrulamaKodu": "'Doğrulama Kodu'"
        },
        "en-US": {
            "lblDogrulamaKodu": "'Verification Code'"
        }
    },
    "clrids": {
        "tr-TR": {
            "lblDogrulamaKodu": "╬'Doğrulama Kodu'╩╩"
        },
        "en-US": {
            "lblDogrulamaKodu": "╬'Verification Code'╩╩"
        }
    }
};
exports.default = pjson;


/***/ }),

/***/ "../../common/qshell/src/customComponents/QDynamicFields.ts":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/customComponents/QDynamicFields.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pjson = {
    "pJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_8",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "['authorizationKey','serviceName', 'serviceFilterKey', 'model', 'data']",
                    "T": "prop"
                }
            },
            "E": {
                "GetDynamicData": {
                    "H": "quick.EM.trace(\"GetDynamicData event triggered\")\r\n\r\nconst dynamicComponentData: any = quick.getFormData(\"DynamicFields\");\r\n\r\nconst serviceData: any = {};\r\nObject.keys(dynamicComponentData).forEach(key => {\r\n    debugger;\r\n    const dataGroup = key.split('_')[1];\r\n    const dataField = key.split('_')[2];\r\n    let dataValue = dynamicComponentData[key];\r\n    dataValue = typeof dataValue === 'object' ? dataValue.value : dataValue ;\r\n\r\n    serviceData[dataGroup] = serviceData[dataGroup] ?? {}\r\n    serviceData[dataGroup][dataField] = dataValue;\r\n});\r\n\r\nquick.EM.trace('DynamicFieldsData result:');\r\nquick.EM.trace(serviceData);\r\n\r\nserviceData;\r\n\r\n",
                    "C": true,
                    "EV": true,
                    "HL": "TS"
                },
                "CreateFields": {
                    "H": "quick.EM.trace('DS LoadComponent running')\r\nquick.EM.trace(\"model\")\r\nquick.EM.trace(model)\r\nquick.EM.trace(\"data\")\r\nquick.EM.trace(data)\r\n\r\n\r\ndeclare let model: IDynamicScreenModel;\r\ndeclare let data: any;\r\ndeclare let modelKey: string;\r\ndeclare let modelUrl: string;\r\n\r\nquick.store.set('modelKey',modelKey);\r\nquick.store.set('modelUrl',modelUrl);\r\n\r\n//__INTERFACES__//\r\ninterface IDynFieldSimple {\r\n    name: \"text\" | \"numeric\" | \"money\" | \"multiline\" | \"date\"\r\n}\r\n\r\ntype DynLocalizationGuid = string;\r\n\r\ninterface IDynFieldOption {\r\n    label: DynLocalizationGuid | string;\r\n    value: string;\r\n}\r\ninterface IDynFieldOptions {\r\n    name: \"combobox\" | \"multiselect\";\r\n    options: Array<IDynFieldOption>\r\n}\r\n\r\ninterface IDynamicField {\r\n    fieldName: string;\r\n    label: DynLocalizationGuid | string;\r\n    format?: string\r\n    type: IDynFieldOptions | IDynFieldSimple;\r\n}\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: DynLocalizationGuid | string;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<IDynamicField>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\ninterface IDynamicRuleRegex {\r\n    type: \"regex\";\r\n    regex: string;\r\n}\r\ninterface IDynamicRuleLength {\r\n    type: \"minlen\" | \"maxlen\";\r\n    length: number;\r\n}\r\ninterface IDynamicRuleMaxLength extends IDynamicRuleLength {\r\n    type: \"maxlen\";\r\n    preventKeys?: boolean;\r\n}\r\ninterface IDynamicRuleValue {\r\n    type: \"minval\" | \"maxval\";\r\n    value: number | Date;\r\n}\r\ninterface IDynamicRuleSimple {\r\n    type: \"required\";\r\n}\r\ninterface IDynamicRuleOptions {\r\n    type: \"options\";\r\n    options: Array<string>;\r\n}\r\n\r\ntype DynamicFieldType = \"text\" | \"numeric\" | \"money\" | \"multiline\" | \"date\" | \"combobox\" | \"multiselect\";\r\n\r\ninterface IDynamicValFields {\r\n    fieldName: string;\r\n    rules: Array<IDynamicRuleRegex | IDynamicRuleLength | IDynamicRuleMaxLength | IDynamicRuleValue | IDynamicRuleSimple | IDynamicRuleOptions>,\r\n    type: DynamicFieldType\r\n}\r\ninterface IDynamicValGroups {\r\n    groupName: string;\r\n    fields: Array<IDynamicValFields>\r\n}\r\n\r\ninterface IDynamicScreenModel {\r\n    uiFields: IDynamicUIFields;\r\n    serviceFields: Array<IDynamicValGroups>\r\n}\r\n\r\n\r\nLoadFromDataModel();\r\n\r\nfunction LoadFromDataModel() {\r\n    if (model) {\r\n        model.uiFields.groups.forEach(function (group) {\r\n            group.layout = group.layout ?? 1;\r\n\r\n            const containerPlaceQID = CreateContainer(group);\r\n\r\n\r\n            const rowCount = Math.ceil(group.fields.length / group.layout)\r\n            const gridColCount = 12 / group.layout;\r\n            let rowIndex = 0;\r\n\r\n            group.fields.forEach((field, fieldIndex) => {\r\n                if (fieldIndex % group.layout! == 0) {\r\n                    //Create Row\r\n                    rowIndex++;\r\n                    quick.Quick.createComponent({\r\n                        templateCompQID: \"VRow\",\r\n                        newCompQID: group.groupName + '_' + rowIndex,\r\n                        placeQID: containerPlaceQID,\r\n                        place: containerPlaceQID ? <any>\"Default\" : undefined\r\n                    })\r\n                }\r\n\r\n                let templateComp;\r\n                switch (field.type.name) {\r\n                    case \"text\":\r\n                    case \"numeric\":\r\n                    case \"money\": {\r\n                        templateComp = \"VColTextField\";\r\n                        break;\r\n                    }\r\n                    case \"combobox\":\r\n                    case \"multiselect\": {\r\n                        templateComp = \"VColCombo\";\r\n                        break;\r\n                    }\r\n                    case \"date\": {\r\n                        templateComp = \"VColDatepicker\";\r\n                        break;\r\n                    }\r\n                    case \"multiline\": {\r\n                        templateComp = \"VColTextArea\";\r\n                        break;\r\n                    }\r\n                }\r\n                if (templateComp) {\r\n                    const colComp = quick.Quick.createComponent({\r\n                        templateCompQID: templateComp,\r\n                        newCompQID: group.groupName + '_' + field.fieldName,\r\n                        placeQID: \"VRow_\" + group.groupName + '_' + rowIndex,\r\n                        place: <any>\"Default\"\r\n                    })\r\n\r\n                    const fieldComp = colComp.$children[0];\r\n                    fieldComp.label = GetLR(field.label);\r\n                    fieldComp.customCompClass = 'col-' + gridColCount;\r\n\r\n                    //Formats?? money, number, text (card,Iban,email), phone- QPhone comp??\r\n                    if (field.type.name == \"text\") {\r\n                        fieldComp.format = field.format;\r\n                    }\r\n\r\n                    if (field.type.name == \"combobox\" || field.type.name == \"multiselect\") {\r\n                        const comboItems = <any>[];\r\n                        (<IDynFieldOptions>field.type).options.forEach((item) => {\r\n                            comboItems.push({ text: GetLR(item.label), value: item.value })\r\n                        })\r\n                        fieldComp.items = comboItems\r\n                        fieldComp.multiple = field.type.name == \"multiselect\"\r\n                    }\r\n                    debugger;\r\n                    AddValidationRules(group, field, fieldComp);\r\n                    LoadData(group, field, fieldComp);\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction CreateContainer(group: IDynamicGroup): string {\r\n    let containerPlaceQID = <any>undefined;\r\n\r\n    if (group.boxWithCard) {\r\n\r\n        //Create Container\r\n        quick.Quick.createComponent({\r\n            templateCompQID: \"VContainerTemp\",\r\n            newCompQID: group.groupName + \"Box\",\r\n            placeQID: \"DynamicFields\",\r\n            place: <any>\"Default\"\r\n\r\n        })\r\n\r\n        containerPlaceQID = \"VContainer_\" + group.groupName + \"Box\"\r\n\r\n        if (group.groupName !== \"defaultGroup\") {\r\n            const titleComponent = quick.getComponent(\"QLabel_\" + group.groupName + \"Box\");\r\n            titleComponent.text = group.label;\r\n        }\r\n\r\n    }\r\n    return containerPlaceQID ?? \"DynamicFields\";\r\n}\r\n\r\n\r\nfunction GetLR(key: string) {\r\n    const lang = quick.Quick.getLanguage();\r\n    return model.uiFields.localization[lang][key] ?? key;\r\n}\r\n\r\nfunction LoadData(group: IDynamicGroup, field: IDynamicField, fieldComp: any) {\r\n    if (data && data[group.groupName!]) {\r\n        switch (field.type.name) {\r\n            case \"text\":\r\n            case \"numeric\":\r\n            case \"money\":\r\n            case \"multiline\":\r\n                fieldComp.internalValue = data[group.groupName!][field.fieldName];\r\n                break;\r\n            case \"date\":\r\n                fieldComp.value = data[group.groupName!][field.fieldName];\r\n                break;\r\n            case \"combobox\":\r\n                const fieldValue = (<Array<any>>fieldComp.items).filter((item) => item.value == data[group.groupName!][field.fieldName])\r\n                fieldComp.internalValue = fieldValue[0];\r\n                break;\r\n            case \"multiselect\":\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction AddValidationRules(group: IDynamicGroup, field: IDynamicField, fieldComp: any) {\r\n    let validationRules: Array<Function> = [];\r\n\r\n    const currentGroup = model.serviceFields.filter((groupItem) => groupItem.groupName == group.groupName)[0];\r\n    const currentField = currentGroup?.fields.filter((fieldItem) => fieldItem.fieldName == field.fieldName)[0];\r\n        currentField?.rules.forEach((rule) => {\r\n            switch (rule.type) {\r\n                case 'required':\r\n                    validationRules.push(quick.Quick.validation.required());\r\n                    break;\r\n                case 'maxlen':\r\n                    validationRules.push(quick.Quick.validation.maxLength(rule.length));\r\n                    break;\r\n                case 'minlen':\r\n                    validationRules.push(quick.Quick.validation.minLength(rule.length));\r\n                    break;\r\n                case 'regex':\r\n                    validationRules.push(quick.Quick.validation.regex(new RegExp(rule.regex)));\r\n                    break;\r\n            }\r\n        })\r\n    fieldComp.rules = validationRules;\r\n}\r\n\r\n\r\n//Validation Error response\r\nvar dynamicErrors = {\r\n    \"selfDemographics.name\": \"required\",\r\n    \"selfJobInfo.occupation\": \"combobox\",\r\n    \"favouriteCurrency\": \"options\",\r\n};\r\n\r\n//UI Validation constants\r\nvar errorConstants = {\r\n    required: \"{0} alanına bilgi girişi zorunludur.\",\r\n    combobox: \"{0} alanına birden fazla veri girilemez.\",\r\n    options: \"{0} alanına geçerli bir değer girmediniz.\"\r\n}\r\n\r\n\r\n\r\n",
                    "C": true,
                    "EV": true,
                    "HL": "TS"
                },
                "PreRender": {
                    "H": "//requestObject={}\r\n//requestObject.url='http://customer.tkb-int.dev.rally.softtech/getCustomerInfo'\r\n//requestObject.http='get'\r\n//requestObject.responseField='firstResponse'\r\n//requestObject.blockRender=true\r\n//requestObject.onSuccess='onSuccess'\r\n//Request.async(requestObject)\r\n\r\n",
                    "I": true
                },
                "EndRender": {
                    "H": "dynamicFieldEditBtn.visible = false\r\n\r\neditAuthorization = shell.getResource(parent.props.authorizationKey)\r\neditAuthorization = true //Test Code\r\ndynamicFieldEditBtn.visible = editAuthorization\r\n",
                    "HL": "QS"
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_8"
            },
            "O": {
                "cType": "child",
                "compDomClasses": ""
            }
        },
        {
            "T": "VContainer",
            "P": {
                "ID": {
                    "H": "DynamicFields",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VRow",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_1",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "'d-flex flex-row'",
                                    "T": "class"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VCol",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_3",
                                                    "T": "prop"
                                                },
                                                "class": {
                                                    "H": "''",
                                                    "T": "class"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VBtn",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "dynamicFieldEditBtn",
                                                                    "T": "prop"
                                                                },
                                                                "color": {
                                                                    "H": "'warning'",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "''",
                                                                    "T": "class"
                                                                },
                                                                "regular": {
                                                                    "H": "false",
                                                                    "T": "prop"
                                                                },
                                                                "icon": {
                                                                    "H": "false",
                                                                    "T": "prop"
                                                                },
                                                                "fab": {
                                                                    "H": "false",
                                                                    "T": "prop"
                                                                },
                                                                "visible": {
                                                                    "H": "true",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {
                                                                "click": {
                                                                    "H": "\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: any;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<any>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\n\r\nconst uiFields: IDynamicUIFields = quick.store.get('dynamicModel')?.uiFields;\r\n\r\nif (uiFields && uiFields.groups && uiFields.groups[0].fields) {\r\n    components.dynamicFieldsDataTable.items = uiFields.groups[0].fields;\r\n    components.cbTableGroupList.items = { text: uiFields.groups[0].groupName, value: uiFields.groups[0].groupName };\r\n}\r\n\r\n(<any>components.dynamicFieldsDialog).value = true",
                                                                    "P": "mouseEvent:unknown | undefined",
                                                                    "HL": "TS"
                                                                }
                                                            },
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "QLabel",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_9",
                                                                                    "T": "prop"
                                                                                },
                                                                                "text": {
                                                                                    "H": "'Dynamic Fields'",
                                                                                    "T": "prop"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {},
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_9"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "q-label "
                                                                            }
                                                                        },
                                                                        {
                                                                            "T": "VIcon",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_7",
                                                                                    "T": "prop"
                                                                                },
                                                                                "text": {
                                                                                    "H": "'mdi-pencil'",
                                                                                    "T": "text"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {},
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_7"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "v-icon notranslate mdi mdi-pencil theme--light"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_5"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default warning"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_3"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "col col-2 d-flex",
                                                "layout": {
                                                    "dOpt": {
                                                        "xs": [
                                                            "c:col-2",
                                                            "d:d-flex"
                                                        ]
                                                    },
                                                    "class": "col-2 d-flex"
                                                }
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_1"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "row d-flex flex-row"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_20"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "container"
            }
        },
        {
            "T": "VContainer",
            "P": {
                "ID": {
                    "H": "VContainerTemp",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VCard",
                            "P": {
                                "ID": {
                                    "H": "VCard",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VContainer",
                                            "P": {
                                                "ID": {
                                                    "H": "VContainer",
                                                    "T": "prop"
                                                },
                                                "Render": {
                                                    "H": "false",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "QLabel",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "QLabel",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "'v-card__title'",
                                                                    "T": "class"
                                                                },
                                                                "Render": {
                                                                    "H": "false",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {},
                                                            "_Editor": {
                                                                "eID": "EdtrComp_59"
                                                            },
                                                            "O": {
                                                                "cType": "child",
                                                                "compDomClasses": "q-label v-card__title newDropBorder"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_43"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "container newDropBorder"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_52"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-card v-sheet theme--light"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_50"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "container"
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColTextField",
                    "T": "prop"
                },
                "class": {
                    "H": "''",
                    "T": "class"
                },
                "Render": {
                    "H": "false",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VTextField",
                            "P": {
                                "ID": {
                                    "H": "VTextField",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "'Text field label'",
                                    "T": "prop"
                                },
                                "regular": {
                                    "H": "'true'",
                                    "T": "prop"
                                },
                                "Render": {
                                    "H": "false",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_11"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_44"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColTextArea",
                    "T": "prop"
                },
                "class": {
                    "H": "''",
                    "T": "class"
                },
                "Render": {
                    "H": "false",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VTextarea",
                            "P": {
                                "ID": {
                                    "H": "VTextArea",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_16"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input v-textarea theme--light v-text-field v-text-field--is-booted undefined newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_14"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColCombo",
                    "T": "prop"
                },
                "class": {
                    "H": "''",
                    "T": "class"
                },
                "Render": {
                    "H": "false",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VCombobox",
                            "P": {
                                "ID": {
                                    "H": "VCombobox",
                                    "T": "prop"
                                },
                                "attach": {
                                    "H": "true",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "'My Combobox'",
                                    "T": "prop"
                                },
                                "items": {
                                    "H": "[{text = 'test1', value = 1},\n{ text = 'test2', value = 2}]",
                                    "T": "prop"
                                },
                                "Render": {
                                    "H": "false",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_12"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_39"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColDatepicker",
                    "T": "prop"
                },
                "class": {
                    "H": "''",
                    "T": "class"
                },
                "Render": {
                    "H": "false",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VInlineDatepicker",
                            "P": {
                                "ID": {
                                    "H": "VDatepicker",
                                    "T": "prop"
                                },
                                "willAttach": {
                                    "H": "false",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "'Pick a date'",
                                    "T": "prop"
                                },
                                "locale": {
                                    "H": "'tr'",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_19"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_17"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VRow",
            "P": {
                "ID": {
                    "H": "VRow",
                    "T": "prop"
                },
                "class": {
                    "H": "'d-flex flex-row'",
                    "T": "class"
                },
                "Render": {
                    "H": "false",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "Ghost",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_61",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_61"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "editor-ghost-comp newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_60"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-row newDropBorder"
            }
        },
        {
            "T": "VRow",
            "P": {
                "ID": {
                    "H": "EdtrComp_31",
                    "T": "prop"
                },
                "class": {
                    "H": "'d-flex flex-row justify-space-around'",
                    "T": "class"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VBtn",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_10",
                                    "T": "prop"
                                },
                                "color": {
                                    "H": "'primary'",
                                    "T": "prop"
                                }
                            },
                            "E": {
                                "click": {
                                    "H": "let serviceModel = {\r\n    uiFields: {\r\n        groups: [\r\n            {\r\n                groupName: \"selfDemographics\", label: \"Kişisel Bilgiler\", layout: 3, boxWithCard: true, fields: [\r\n                    { fieldName: \"identityNo\", type: { name: \"text\" }, label: \"LR_selfDemographics_tckn\" },\r\n                    { fieldName: \"name\", type: { name: \"text\" }, label: \"LR_selfDemographics_name\" },\r\n                    { fieldName: \"surname\", type: { name: \"text\" }, label: \"LR_selfDemographics_surname\" },\r\n                    { fieldName: \"dateOfBirth\", type: { name: \"date\" }, label: \"LR_selfDemographics_dateOfBirth\" },\r\n                    {\r\n                        fieldName: \"country\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"Almanya\", value: \"2\" },\r\n                                { label: \"Türkiye\", value: \"1\" }\r\n                            ]\r\n                        }, label: \"Ülke\"\r\n                    },\r\n                    { fieldName: \"phone\", type: { name: \"text\" }, label: \"Telefon\" },\r\n                    { fieldName: \"address\", type: { name: \"multiline\" }, label: \"Adres\" }\r\n                ]\r\n            },\r\n            {\r\n                groupName: \"selfJobInfo\", label: \"Çalışma Bilgileri\", layout: 1, boxWithCard: true, fields: [\r\n                    { fieldName: \"name\", type: { name: \"text\" }, label: \"LR_selfDemographics_occupation\" },\r\n                    {\r\n                        fieldName: \"occupation\", label: \"LR_selfDemographics_occupation\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200605\", value: \"1\" },\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200606\", value: \"2\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                groupName: \"defaultGroup\", label: \"Çalışma Bilgileri\", layout: 2, boxWithCard: true, fields: [\r\n                    { fieldName: \"name\", type: { name: \"text\" }, label: \"LR_selfDemographics_occupation\" },\r\n                    {\r\n                        fieldName: \"occupation\", label: \"LR_selfDemographics_occupation\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200605\", value: \"1\" },\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200606\", value: \"2\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                groupName: \"defaultGroup\", layout: 2, fields: [\r\n                    { fieldName: \"address\", type: { name: \"text\" }, label: \"Adres\" },\r\n                    { fieldName: \"phone\", type: { name: \"text\" }, label: \"Telefon\" },\r\n                    {\r\n                        fieldName: \"favouriteCurrency\", label: \"B6F651E2-A822-4381-868E-4CE55D200607\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"TRY\", value: \"try\" }, { label: \"EUR\", value: \"eur\" }, { label: \"USD\", value: \"usd\" },\r\n                            ]\r\n                        },\r\n                    },\r\n                    { fieldName: \"address\", type: { name: \"text\" }, label: \"Adres\" },\r\n                    { fieldName: \"phone\", type: { name: \"text\" }, label: \"Telefon\" }\r\n                ]\r\n            }\r\n        ],\r\n        localization: {\r\n            \"tr-TR\": {\r\n                \"LR_selfDemographics_tckn\": \"TCKN\",\r\n                \"LR_selfDemographics_name\": \"Ad\",\r\n                \"LR_selfDemographics_surname\": \"Soyad\",\r\n                \"LR_selfDemographics_occupation\": \"Meslek\",\r\n                \"LR_selfDemographics_dateOfBirth\": \"Doğum Tarihi\",\r\n                \"B6F651E2-A822-4381-868E-4CE55D200605\": \"Çalışıyor\",\r\n                \"B6F651E2-A822-4381-868E-4CE55D200606\": \"Çalışmıyor\"\r\n            },\r\n            \"en-US\": {\r\n                \"LR_selfDemographics_tckn\": \"Identity No\",\r\n                \"LR_selfDemographics_name\": \"Name\",\r\n                \"LR_selfDemographics_surname\": \"Surname\",\r\n                \"LR_selfDemographics_occupation\": \"Occupation\",\r\n                \"LR_selfDemographics_dateOfBirth\": \"Date Of Birth\"\r\n            }\r\n        }\r\n    },\r\n    serviceFields : [\r\n        {\r\n            groupName: \"selfDemographics\",\r\n            fields: [\r\n                {\r\n                    fieldName: \"name\", type: \"text\", rules: [\r\n                        { type: \"required\" },\r\n                        { type: \"maxlen\", length: 30, preventKeys: true },\r\n                        { type: \"minlen\", length: 2 }   \r\n                    ]\r\n                },\r\n                { fieldName: \"surname\", type: \"text\", rules: [{ type: \"required\" }] }\r\n            ]\r\n        },\r\n        {\r\n            groupName: \"selfJobInfo\",\r\n            fields: [\r\n                { fieldName: \"name\", type: \"text\", rules: [{ type: \"required\" }] },\r\n                { fieldName: \"occupation\", type: \"combobox\", rules: [{ type: \"options\", options: [\"1\", \"2\"] }] }\r\n            ]\r\n        },\r\n        {\r\n\t\t\tgroupName: \"defaultGroup\",\r\n            fields: [\r\n                {\r\n                    fieldName: \"favouriteCurrency\", type: \"multiselect\",\r\n                    rules: [{ type: \"required\" }, { type: \"options\", options: [\"try\", \"eur\", \"usd\"] }]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nlet serviceData = {\"selfDemographics\":{\"name\":\"Nilay\",\"surname\":\"Akdoğan\",\"country\":\"1\",\"dateOfBirth\":\"19890104\",\"address\":\"Reisdere Mah. Çeşme / İzmir\"},\r\n\"selfJobInfo\":{\"name\":\"Software Developer\",\"occupation\":\"1\"},\"defaultGroup\":{\"favouriteCurrency\":[\"eur\",\"try\"]}};\r\n\r\nlet serviceModelKey = \"customerInfoModelKey\";\r\nlet serviceModelUrl = \"http://customer.tkb-int.dev.rally.softtech/api/SaveDynamicScreenModel/\";\r\n\r\nquick.MM.trigger('CreateFields',[{model:serviceModel,data:serviceData, modelKey: serviceModelKey, modelUrl: serviceModelUrl}])",
                                    "P": "mouseEvent:unknown | undefined",
                                    "HL": "TS"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "QLabel",
                                            "C": {},
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_13",
                                                    "T": "prop"
                                                },
                                                "text": {
                                                    "H": "'Create Fields'",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_13"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": "q-label "
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_10"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                            }
                        },
                        {
                            "T": "VBtn",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_33",
                                    "T": "prop"
                                },
                                "color": {
                                    "H": "'primary'",
                                    "T": "prop"
                                }
                            },
                            "E": {
                                "click": {
                                    "H": "const dynamicComponentData: any = quick.getFormData(\"DynamicFields\");\r\n\r\nconst serviceData: any = {};\r\nObject.keys(dynamicComponentData).forEach(key => {\r\n    debugger;\r\n    const dataGroup = key.split('_')[1];\r\n    const dataField = key.split('_')[2];\r\n    let dataValue = dynamicComponentData[key];\r\n    dataValue = typeof dataValue === 'object' ? dataValue.value : dataValue ;\r\n\r\n    serviceData[dataGroup] = serviceData[dataGroup] ?? {}\r\n    serviceData[dataGroup][dataField] = dataValue;\r\n});\r\n\r\nquick.EM.trace('Dynamic Fields Get Data');\r\nquick.EM.trace(serviceData);\r\n\r\nserviceData;\r\n",
                                    "P": "mouseEvent:unknown | undefined",
                                    "HL": "TS"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "QLabel",
                                            "C": {},
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_34",
                                                    "T": "prop"
                                                },
                                                "text": {
                                                    "H": "'Get Data'",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_34"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": "q-label "
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_33"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_31"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-row justify-space-around"
            }
        },
        {
            "T": "VDialog",
            "P": {
                "ID": {
                    "H": "dynamicFieldsDialog",
                    "T": "prop"
                },
                "width": {
                    "H": "1500",
                    "T": "prop"
                },
                "eager": {
                    "H": "true",
                    "T": "prop"
                }
            },
            "E": {
                "click:outside": {
                    "H": "(<any>components.dynamicFieldsDialog).value = false",
                    "HL": "TS"
                }
            },
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VCard",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_24",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VContainer",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_26",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_56",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "'d-flex flex-row'",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_71",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "''",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "QLabel",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_75",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "text": {
                                                                                                    "H": "'Dynamic Fields'",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "''",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {},
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_75"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "q-label  text-h4",
                                                                                                "layout": {
                                                                                                    "dOpt": {
                                                                                                        "xs": [
                                                                                                            "tt:text-h4"
                                                                                                        ]
                                                                                                    },
                                                                                                    "class": "text-h4"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_71"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex col-12 flex-row ml-2",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "c:col-12",
                                                                                            "fd:flex-row",
                                                                                            "sp:ml-2"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex col-12 flex-row ml-2"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_56"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_28",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "'d-flex flex-row'",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_30",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "''",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VExpansionPanels",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "expansionPanels",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VExpansionPanel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_37",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {
                                                                                                                "default": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelHeader",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_40",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "expandIcon": {
                                                                                                                                    "H": "'mdi-plus'",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "class": {
                                                                                                                                    "H": "'warning'",
                                                                                                                                    "T": "class"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "QLabel",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "EdtrComp_53",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "text": {
                                                                                                                                                    "H": "'Group'",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "''",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {},
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_53"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "q-label  text-h5",
                                                                                                                                                "layout": {
                                                                                                                                                    "dOpt": {
                                                                                                                                                        "xs": [
                                                                                                                                                            "tt:text-h5"
                                                                                                                                                        ]
                                                                                                                                                    },
                                                                                                                                                    "class": "text-h5"
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_40"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-header warning"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelContent",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_42",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "eager": {
                                                                                                                                    "H": "true",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "VRow",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "groupContainer",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {
                                                                                                                                                "default": {
                                                                                                                                                    "c": [
                                                                                                                                                        {
                                                                                                                                                            "T": "VCol",
                                                                                                                                                            "P": {
                                                                                                                                                                "ID": {
                                                                                                                                                                    "H": "EdtrComp_67",
                                                                                                                                                                    "T": "prop"
                                                                                                                                                                },
                                                                                                                                                                "class": {
                                                                                                                                                                    "H": "''",
                                                                                                                                                                    "T": "class"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "E": {},
                                                                                                                                                            "C": {
                                                                                                                                                                "default": {
                                                                                                                                                                    "c": [
                                                                                                                                                                        {
                                                                                                                                                                            "T": "VCard",
                                                                                                                                                                            "P": {
                                                                                                                                                                                "ID": {
                                                                                                                                                                                    "H": "EdtrComp_95",
                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "E": {},
                                                                                                                                                                            "C": {
                                                                                                                                                                                "default": {
                                                                                                                                                                                    "c": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "T": "VContainer",
                                                                                                                                                                                            "P": {
                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                    "H": "grpContainer",
                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "E": {},
                                                                                                                                                                                            "C": {
                                                                                                                                                                                                "default": {
                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_101",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_102",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtGroupName",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Group Name'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "rules": {
                                                                                                                                                                                                                                                    "H": "camelCaseRegex = regex('[a-z]+((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?')\r\n[Quick.validation.required(), Quick.validation.regex(camelCaseRegex, 'GroupName must be a camelCase format')]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_115"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_102"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_91",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbLayout",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "true",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Layout'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "[{text = 'Columun 1', value = 1},\n{ text = 'Columun 2', value = 2},\n{ text = 'Columun 3', value = 3},\n{ text = 'Columun 4', value = 4}]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_96"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_91"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_129",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCheckbox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "chkAddCard",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Add group card'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "'primary'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_130"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-input--selection-controls v-input--checkbox"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_129"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_101"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_63",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_64",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtLabelTR",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Label (tr-TR)'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_72"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_64"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_69",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtLabelEN",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Label (en-US)'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_73"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_69"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_63"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_126",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row justify-end'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_127",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VBtn",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_82",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "'primary'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "outlined": {
                                                                                                                                                                                                                                                    "H": "false",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "click": {
                                                                                                                                                                                                                                                    "H": "interface IDynFieldSimple {\r\n    name: \"text\" | \"numeric\" | \"money\" | \"multiline\" | \"date\"\r\n}\r\n\r\ntype DynLocalizationGuid = string;\r\ninterface IDynFieldOption {\r\n    label: DynLocalizationGuid | string;\r\n    value: string;\r\n}\r\ninterface IDynFieldOptions {\r\n    name: \"combobox\" | \"multiselect\";\r\n    options: Array<IDynFieldOption>\r\n}\r\n\r\ninterface IDynamicField {\r\n    fieldName: string;\r\n    label: DynLocalizationGuid | string;\r\n    format?: string\r\n    type: IDynFieldOptions | IDynFieldSimple;\r\n}\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: DynLocalizationGuid | string;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<IDynamicField>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\ninterface IDynamicValGroups {\r\n    groupName: string;\r\n    fields: any\r\n}\r\n\r\ninterface IDynamicScreenModel {\r\n    uiFields: IDynamicUIFields;\r\n    serviceFields: Array<IDynamicValGroups>\r\n}\r\n\r\n\r\n\r\nCreateGroup();\r\n\r\nfunction CreateGroup() {\r\n    debugger;\r\n    const LRPrefix = \"LR_\";\r\n\r\n    const dynamicModel: IDynamicScreenModel = quick.store.get('dynamicModel') ?? {\r\n        uiFields: { groups: [], localization: { \"tr-TR\": {}, \"en-US\": {} } },\r\n        serviceFields: []\r\n    };\r\n\r\n    const groupLRID = LRPrefix + (<any>components.txtGroupName).internalValue;\r\n    const groupName = (<any>components.txtGroupName).internalValue ?? \"defaultGroup\";\r\n\r\n    dynamicModel.uiFields.groups.push({\r\n        \"groupName\": groupName,\r\n        \"label\": groupLRID,\r\n        \"layout\": (<any>components.cbLayout).internalValue?.value,\r\n        \"boxWithCard\": (<any>components.chkAddCard).internalValue,\r\n        \"fields\": []\r\n    });\r\n\r\n    dynamicModel.serviceFields.push({\r\n        \"groupName\": groupName,\r\n        \"fields\": []\r\n    });\r\n\r\n    //LRID Business - Dil Dynamic Eklenecek mi? Önyüzde validation olacak mı? Hangi dili girerse onu modele setle?\r\n    if ((<any>components.txtLabelTR).internalValue)\r\n        dynamicModel.uiFields.localization[\"tr-TR\"][groupLRID] = (<any>components.txtLabelTR).internalValue;\r\n    if ((<any>components.txtLabelEN).internalValue)\r\n        dynamicModel.uiFields.localization[\"en-US\"][groupLRID] = (<any>components.txtLabelEN).internalValue;\r\n\r\n\r\n    quick.store.set('dynamicModel', dynamicModel);\r\n\r\n    const groupComboItems = dynamicModel.uiFields.groups.map((grp) => { return { \"text\": grp.groupName, \"value\": grp.groupName } });\r\n    components.comboGroupName.items = groupComboItems;\r\n    components.cbTableGroupList.items = groupComboItems;\r\n}\r\n\r\n\r\nquick.Quick.reset('groupContainer');",
                                                                                                                                                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                                                                                                                                                    "HL": "TS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            "T": "QLabel",
                                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                                    "H": "EdtrComp_88",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "text": {
                                                                                                                                                                                                                                                                    "H": "'Save Group'",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                                "eID": "EdtrComp_88"
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                                "cType": "child",
                                                                                                                                                                                                                                                                "compDomClasses": "q-label "
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_82"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_127"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex col-12 flex-row justify-end",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "c:col-12",
                                                                                                                                                                                                                                            "fd:flex-row",
                                                                                                                                                                                                                                            "j:justify-end"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex col-12 flex-row justify-end"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_126"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row justify-end"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                "eID": "EdtrComp_97"
                                                                                                                                                                                            },
                                                                                                                                                                                            "O": {
                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                "compDomClasses": "container"
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                "eID": "EdtrComp_95"
                                                                                                                                                                            },
                                                                                                                                                                            "O": {
                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                "compDomClasses": "v-card v-sheet theme--light"
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    ],
                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "_Editor": {
                                                                                                                                                                "eID": "EdtrComp_67"
                                                                                                                                                            },
                                                                                                                                                            "O": {
                                                                                                                                                                "cType": "slot",
                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                "layout": {
                                                                                                                                                                    "dOpt": {
                                                                                                                                                                        "xs": [
                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                        ]
                                                                                                                                                                    },
                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    "cType": "slot"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_58"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_42"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-content"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "slot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_37"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-expansion-panel"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VExpansionPanel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_46",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {
                                                                                                                "default": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelHeader",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_47",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "expandIcon": {
                                                                                                                                    "H": "'mdi-plus'",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "class": {
                                                                                                                                    "H": "'warning'",
                                                                                                                                    "T": "class"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "QLabel",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "EdtrComp_54",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "text": {
                                                                                                                                                    "H": "'Field'",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "''",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {},
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_54"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "q-label  text-h5",
                                                                                                                                                "layout": {
                                                                                                                                                    "dOpt": {
                                                                                                                                                        "xs": [
                                                                                                                                                            "tt:text-h5"
                                                                                                                                                        ]
                                                                                                                                                    },
                                                                                                                                                    "class": "text-h5"
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_47"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-header warning"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelContent",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_49",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "eager": {
                                                                                                                                    "H": "true",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "VRow",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "fieldContainer",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {
                                                                                                                                                "default": {
                                                                                                                                                    "c": [
                                                                                                                                                        {
                                                                                                                                                            "T": "VCol",
                                                                                                                                                            "P": {
                                                                                                                                                                "ID": {
                                                                                                                                                                    "H": "EdtrComp_99",
                                                                                                                                                                    "T": "prop"
                                                                                                                                                                },
                                                                                                                                                                "class": {
                                                                                                                                                                    "H": "''",
                                                                                                                                                                    "T": "class"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "E": {},
                                                                                                                                                            "C": {
                                                                                                                                                                "default": {
                                                                                                                                                                    "c": [
                                                                                                                                                                        {
                                                                                                                                                                            "T": "VCard",
                                                                                                                                                                            "P": {
                                                                                                                                                                                "ID": {
                                                                                                                                                                                    "H": "EdtrComp_100",
                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "E": {},
                                                                                                                                                                            "C": {
                                                                                                                                                                                "default": {
                                                                                                                                                                                    "c": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "T": "VContainer",
                                                                                                                                                                                            "P": {
                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                    "H": "EdtrComp_103",
                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "E": {},
                                                                                                                                                                                            "C": {
                                                                                                                                                                                                "default": {
                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_117",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_118",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "comboGroupName",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "true",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Group Name'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "[]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_154"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_118"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_120",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtFieldName",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'FieldName'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "rules": {
                                                                                                                                                                                                                                                    "H": "camelCaseRegex = regex('[a-z]+((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?')\r\n[Quick.validation.required(), Quick.validation.regex(camelCaseRegex, 'FieldName must be a camelCase format')]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_119"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_120"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_117"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_124",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_125",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbFieldType",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "true",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Type'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "[{text = 'text', value = 'text'},\n{ text = 'numeric', value = 'numeric'},\n{ text = 'money', value = 'money'},\n{ text = 'multiline', value = 'multiline'},\n{ text = 'combo', value = 'combo'},\n{ text = 'multiselect', value = 'multiselect'},\n{ text = 'date', value = 'date'}]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "change": {
                                                                                                                                                                                                                                                    "H": "\r\nif((<any>value).value == \"text\"){\r\n    components.cbFieldFormat.visible = true;\r\n}else{\r\n    components.cbFieldFormat.visible = false;\r\n}",
                                                                                                                                                                                                                                                    "P": "value:object",
                                                                                                                                                                                                                                                    "HL": "TS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_151"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_125"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_142",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbFieldFormat",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "true",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Format'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "[{text = 'creditcard', value = 'creditcard'},\n{ text = 'email', value = 'email'},\n{ text = 'iban', value = 'iban'},\n{ text = 'ipaddress', value = 'ipaddress'},\n{ text = 'onlyAlphabetic', value = 'onlyAlphabetic'}]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_152"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_142"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_124"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_144",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_145",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtFieldLabelTR",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Label (tr-TR)'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_146"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_145"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_147",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtFieldLabelEN",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Label (en-US)'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_134"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_147"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_144"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "rowValidationRules",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_79",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VBtn",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_87",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "'primary'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "fab": {
                                                                                                                                                                                                                                                    "H": "true",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "click": {
                                                                                                                                                                                                                                                    "H": "let fieldRuleIndex = quick.store.get('fieldRuleIndex') ?? 0;\r\nfieldRuleIndex = fieldRuleIndex + 1\r\n\r\nquick.Quick.createComponent({\r\n    templateCompQID: \"ruleInputComponent\",\r\n    newCompQID: fieldRuleIndex,\r\n    placeQID: \"validationRulesContainer\",\r\n    place: <any>\"Default\"\r\n})\r\n\r\nquick.store.set('fieldRuleIndex', fieldRuleIndex)",
                                                                                                                                                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                                                                                                                                                    "HL": "TS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            "T": "VIcon",
                                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                                    "H": "EdtrComp_90",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "text": {
                                                                                                                                                                                                                                                                    "H": "'mdi-plus'",
                                                                                                                                                                                                                                                                    "T": "text"
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                                "eID": "EdtrComp_90"
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-plus theme--light"
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_87"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-btn v-btn--contained v-btn--fab v-btn--round theme--light v-size--default primary"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_79"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column col-1",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column",
                                                                                                                                                                                                                                            "c:col-1"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column col-1"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "validationRulesContainer",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "Ghost",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_105",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_105"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "child",
                                                                                                                                                                                                                                                "compDomClasses": ""
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_132"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column col-5",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column",
                                                                                                                                                                                                                                            "c:col-5"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column col-5"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_131"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "ruleInputComponent",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "Render": {
                                                                                                                                                                                                                    "H": "false",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_108",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbValidationRulesType",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "true",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Validation Rule'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "[{text = 'required', value = 'required'},\n{ text = 'minLength', value = 'minLength'},\n{ text = 'maxLength', value = 'maxLength'},\n{ text = 'email', value = 'email'},\n{ text = 'iban', value = 'iban'},\n{ text = 'tckn', value = 'tckn'},\n{ text = 'vkn', value = 'vkn'},\n{ text = 'regex', value = 'regex'}]",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "change": {
                                                                                                                                                                                                                                                    "H": "const selectedRule = (<any>value).value;\r\n\r\ndebugger;\r\n//TODO: Buarası artabilir ruleDict tutup kontrol et\r\n//TODO: DynamicCreate Comp hangi component trigger edildi bilinmiyor \r\nif (selectedRule == \"minLength\" && selectedRule == \"maxLength\") {\r\n    (<any>components)[\"txtValidationRuleValue_1\"].visible = true;\r\n} else {\r\n    (<any>components)[\"txtValidationRuleValue_1\"].visible = false;\r\n}",
                                                                                                                                                                                                                                                    "P": "value:object",
                                                                                                                                                                                                                                                    "HL": "TS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_86"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                                            "sp:mr-5"
                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                    "class": "mr-5"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtValidationRuleValue",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "'Value'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_85"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_108"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-row"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-row"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_106"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_136",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "'d-flex flex-row justify-end'",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_138",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "''",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VBtn",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_139",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "'primary'",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "outlined": {
                                                                                                                                                                                                                                                    "H": "false",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "click": {
                                                                                                                                                                                                                                                    "H": "interface IDynFieldSimple {\r\n    name: \"text\" | \"numeric\" | \"money\" | \"multiline\" | \"date\"\r\n}\r\n\r\ntype DynLocalizationGuid = string;\r\n\r\ninterface IDynFieldOption {\r\n    label: DynLocalizationGuid | string;\r\n    value: string;\r\n}\r\ninterface IDynFieldOptions {\r\n    name: \"combobox\" | \"multiselect\";\r\n    options: Array<IDynFieldOption>\r\n}\r\n\r\ninterface IDynamicField {\r\n    fieldName: string;\r\n    label: DynLocalizationGuid | string;\r\n    format?: string\r\n    type: IDynFieldOptions | IDynFieldSimple;\r\n}\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: DynLocalizationGuid | string;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<IDynamicField>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\n// interface IDynamicRuleRegex {\r\n//     type: \"regex\";\r\n//     regex: string;\r\n// }\r\n// interface IDynamicRuleLength {\r\n//     type: \"minlen\" | \"maxlen\";\r\n//     length: number;\r\n// }\r\n// interface IDynamicRuleMaxLength extends IDynamicRuleLength {\r\n//     type: \"maxlen\";\r\n//     preventKeys?: boolean;\r\n// }\r\n// interface IDynamicRuleValue {\r\n//     type: \"minval\" | \"maxval\";\r\n//     value: number | Date;\r\n// }\r\n// interface IDynamicRuleOptions {\r\n//     type: \"options\";\r\n//     options: Array<string>;\r\n// }\r\n\r\ninterface IDynamicRuleSimple {\r\n    type: string;\r\n    value: number | Date | string | undefined;\r\n}\r\n\r\ntype DynamicFieldType = \"text\" | \"numeric\" | \"money\" | \"multiline\" | \"date\" | \"combobox\" | \"multiselect\";\r\n\r\ninterface IDynamicValFields {\r\n    fieldName: string;\r\n    rules: Array<IDynamicRuleSimple> | undefined,\r\n    type: DynamicFieldType\r\n}\r\ninterface IDynamicValGroups {\r\n    groupName: string;\r\n    fields: Array<IDynamicValFields>\r\n}\r\n\r\ninterface IDynamicScreenModel {\r\n    uiFields: IDynamicUIFields;\r\n    serviceFields: Array<IDynamicValGroups>\r\n}\r\n\r\n\r\nconst LRPrefix = \"LR_\"\r\nconst defaultGroupName = \"defaultGroup\";\r\nconst dynamicModel: IDynamicScreenModel = quick.store.get('dynamicModel') ?? {\r\n    uiFields: { groups: [], localization: { \"tr-TR\": {}, \"en-US\": {} } },\r\n    serviceFields: []\r\n};\r\nconst selectedGroupName = (<any>components.comboGroupName).internalValue ? (<any>components.comboGroupName).internalValue.value : defaultGroupName;\r\nconst fieldName = (<any>components.txtFieldName).internalValue;\r\nconst fieldType = (<any>components.cbFieldType).internalValue?.value;\r\n\r\ncreateFields();\r\nresetFieldContainer();\r\n\r\nquick.store.set('dynamicModel', dynamicModel);\r\nquick.EM.trace(quick.store.get('dynamicModel'));\r\n\r\n\r\n\r\n\r\nfunction createFields() {\r\n    if (selectedGroupName == defaultGroupName) {\r\n        addDefaultGroup();\r\n    }\r\n\r\n    //Create UI Fields\r\n    const selectedUIGroup = dynamicModel.uiFields.groups.filter((grp) => grp.groupName == selectedGroupName)[0];\r\n    const fieldLRID = LRPrefix + selectedGroupName + '_' + fieldName;\r\n\r\n    selectedUIGroup.fields.push({\r\n        fieldName: fieldName,\r\n        label: fieldLRID,\r\n        type: fieldType,\r\n        format: (<any>components.cbFieldFormat).internalValue?.value\r\n    });\r\n\r\n    //LRID \r\n    //Şimdilik 2 dil desteği -  Daha sonra dynamic LRID girişi olacak.\r\n    if ((<any>components.txtFieldLabelTR).internalValue)\r\n        dynamicModel.uiFields.localization[\"tr-TR\"][fieldLRID] = (<any>components.txtFieldLabelTR).internalValue;\r\n    if ((<any>components.txtFieldLabelEN).internalValue)\r\n        dynamicModel.uiFields.localization[\"en-US\"][fieldLRID] = (<any>components.txtFieldLabelEN).internalValue;\r\n\r\n\r\n\r\n    //Create Service Fields\r\n    const serviceGroup = dynamicModel.serviceFields.filter((grp) => grp.groupName == selectedGroupName)[0]\r\n    serviceGroup.fields.push({\r\n        fieldName: fieldName,\r\n        type: fieldType,\r\n        rules: getFieldValidationRules()\r\n    });\r\n\r\n    components.dynamicFieldsDataTable.items = selectedUIGroup.fields;\r\n}\r\n\r\n\r\nfunction addDefaultGroup() {\r\n    if (dynamicModel.uiFields.groups.filter((grp) => grp.groupName == defaultGroupName).length > 0) {\r\n        return;\r\n    }\r\n\r\n    dynamicModel.uiFields.groups.push({ groupName: defaultGroupName, fields: [] });\r\n    dynamicModel.serviceFields.push({ groupName: defaultGroupName, fields: [] });\r\n    const groupListItems = dynamicModel.uiFields.groups.map((grp) => { return { \"text\": grp.groupName, \"value\": grp.groupName } });\r\n    components.cbTableGroupList.items = groupListItems;\r\n    components.comboGroupName.items = groupListItems;\r\n}\r\n\r\nfunction getFieldValidationRules() {\r\n    debugger;\r\n    const fieldRuleCount = quick.store.get('fieldRuleIndex');\r\n    const rules: Array<IDynamicRuleSimple> | undefined = [];\r\n    for (var i = 1; i <= fieldRuleCount; i++) {\r\n        const ruleTypeComponent = (<any>components)[\"cbValidationRulesType_\" + i];\r\n        const ruleValueComponent = (<any>components)[\"txtValidationRuleValue_\" + i];\r\n        if (!ruleTypeComponent || !ruleTypeComponent.internalValue) {\r\n            return;\r\n        }\r\n\r\n        const ruleType = ruleTypeComponent.internalValue.value;\r\n        const ruleValue = ruleValueComponent ? ruleValueComponent.internalValue : undefined;\r\n\r\n        let rule: IDynamicRuleSimple = { type: ruleType, value: ruleValue }\r\n        rules.push(rule);\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction resetFieldContainer() {\r\n    quick.Quick.reset('fieldContainer');\r\n    quick.store.set('fieldRuleIndex', 0);\r\n}\r\n\r\n",
                                                                                                                                                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                                                                                                                                                    "HL": "TS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            "T": "QLabel",
                                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                                    "H": "EdtrComp_140",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "text": {
                                                                                                                                                                                                                                                                    "H": "'Save Field'",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                                "eID": "EdtrComp_140"
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                                "cType": "child",
                                                                                                                                                                                                                                                                "compDomClasses": "q-label "
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_139"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_138"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-row col-12 justify-end",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-row",
                                                                                                                                                                                                                                            "c:col-12",
                                                                                                                                                                                                                                            "j:justify-end"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-row col-12 justify-end"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_136"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row justify-end"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                "eID": "EdtrComp_103"
                                                                                                                                                                                            },
                                                                                                                                                                                            "O": {
                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                "compDomClasses": "container"
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                "eID": "EdtrComp_100"
                                                                                                                                                                            },
                                                                                                                                                                            "O": {
                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                "compDomClasses": "v-card v-sheet theme--light"
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    ],
                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "_Editor": {
                                                                                                                                                                "eID": "EdtrComp_99"
                                                                                                                                                            },
                                                                                                                                                            "O": {
                                                                                                                                                                "cType": "slot",
                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                "layout": {
                                                                                                                                                                    "dOpt": {
                                                                                                                                                                        "xs": [
                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                        ]
                                                                                                                                                                    },
                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    "cType": "slot"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_98"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_49"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-content"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "slot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_46"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-expansion-panel"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_35"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-item-group theme--light v-expansion-panels"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_30"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-column"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-column"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_28"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_133",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "'d-flex flex-row'",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_135",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "''",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VCombobox",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "cbTableGroupList",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "attach": {
                                                                                                    "H": "true",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "label": {
                                                                                                    "H": "'Group Name'",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {
                                                                                                "change": {
                                                                                                    "H": "interface IDynFieldSimple {\r\n    name: \"text\" | \"numeric\" | \"money\" | \"multiline\" | \"date\"\r\n}\r\ntype DynLocalizationGuid = string;\r\n\r\ninterface IDynFieldOption {\r\n    label: DynLocalizationGuid | string;\r\n    value: string;\r\n}\r\ninterface IDynFieldOptions {\r\n    name: \"combobox\" | \"multiselect\";\r\n    options: Array<IDynFieldOption>\r\n}\r\n\r\ninterface IDynamicField {\r\n    fieldName: string;\r\n    label: DynLocalizationGuid | string;\r\n    format?: string\r\n    type: IDynFieldOptions | IDynFieldSimple;\r\n}\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: DynLocalizationGuid | string;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<IDynamicField>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\ndebugger;\r\nconst uiFields: IDynamicUIFields = quick.store.get('dynamicModel')?.uiFields;\r\nconst selectedGroupName = (<any>components.cbTableGroupList).internalValue?.value;\r\nconst selectedGroup = uiFields.groups.filter((grp) => grp.groupName == selectedGroupName);\r\n\r\nif (selectedGroup && selectedGroup[0].fields) {\r\n    components.dynamicFieldsDataTable.items = selectedGroup[0].fields;\r\n}",
                                                                                                    "P": "value:object",
                                                                                                    "HL": "TS"
                                                                                                }
                                                                                            },
                                                                                            "C": {},
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_23"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_135"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col col-3 d-flex flex-column",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "c:col-3",
                                                                                            "d:d-flex",
                                                                                            "fd:flex-column"
                                                                                        ]
                                                                                    },
                                                                                    "class": "col-3 d-flex flex-column"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_121",
                                                                                    "T": "prop"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VBtn",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "btnEditGroup",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "color": {
                                                                                                    "H": "'primary'",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "fab": {
                                                                                                    "H": "true",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_155",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-pencil'",
                                                                                                                    "T": "text"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_155"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-pencil theme--light"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_137"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "layout": {
                                                                                                    "dOpt": {
                                                                                                        "xs": [
                                                                                                            "sp:mr-2"
                                                                                                        ]
                                                                                                    },
                                                                                                    "class": "mr-2"
                                                                                                },
                                                                                                "compDomClasses": "v-btn v-btn--contained v-btn--fab v-btn--round theme--light v-size--default primary mr-2"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "T": "VBtn",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "btnDeleteGroup",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "color": {
                                                                                                    "H": "'primary'",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "fab": {
                                                                                                    "H": "true",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {
                                                                                                "click": {
                                                                                                    "H": "\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: any;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<any>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\ninterface IDynamicValGroups {\r\n    groupName?: string;\r\n    fields: Array<any>\r\n}\r\n\r\ninterface IDynamicScreenModel {\r\n    uiFields: IDynamicUIFields;\r\n    serviceFields: Array<IDynamicValGroups>\r\n}\r\n\r\n\r\nconst dynamicModel: IDynamicScreenModel = quick.store.get('dynamicModel');\r\nconst selectedGroupName = (<any>components.cbTableGroupList).internalValue?.value;\r\n\r\ndynamicModel?.uiFields.groups.forEach((grp, grpIndex) => {\r\n    if (grp.groupName == selectedGroupName) {\r\n        dynamicModel.uiFields.groups.splice(grpIndex,1);\r\n    }\r\n});\r\n\r\ndynamicModel?.serviceFields.forEach((grp, grpIndex) => {\r\n    if (grp.groupName == selectedGroupName) {\r\n        dynamicModel.serviceFields.splice(grpIndex,1);\r\n    }\r\n});\r\n\r\ndebugger;\r\ncomponents.cbTableGroupList.items = components.cbTableGroupList.items.filter((item:any)=>item.value !== selectedGroupName)\r\ncomponents.comboGroupName.items = components.cbTableGroupList.items.filter((item:any)=>item.value !== selectedGroupName)\r\nquick.Quick.reset('cbTableGroupList');\r\ncomponents.dynamicFieldsDataTable.items = [];\r\n\r\nquick.store.set('dynamicModel', dynamicModel);",
                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                    "HL": "TS"
                                                                                                }
                                                                                            },
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_156",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-delete'",
                                                                                                                    "T": "text"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_156"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-delete theme--light"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_149"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-btn v-btn--contained v-btn--fab v-btn--round theme--light v-size--default primary"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_121"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-row"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-row"
                                                                                },
                                                                                "compDomClasses": "col d-flex flex-row"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_133"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_6",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "'d-flex flex-row'",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_15",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "''",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VDataTable",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "dynamicFieldsDataTable",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "headers": {
                                                                                                    "H": "[{ text = 'Field Name', value= 'fieldName'},\n{ text = 'Label', value= 'label'},\n{ text = 'Type', value= 'type' },\n{ text = 'Format', value= 'format' },\n{ text = '', value= 'actions', align='center fixed', class='fixed' }]",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "items": {
                                                                                                    "H": "[]",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "item.actions": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "fieldEditButton",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-pencil'",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "large": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {
                                                                                                                "click": {
                                                                                                                    "H": "declare const item: any;\r\n\r\ninterface IDynamicField {\r\n    fieldName: string;\r\n    label: any;\r\n    format?: string\r\n    type: any;\r\n}\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: any;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<IDynamicField>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\ninterface IDynamicScreenModel {\r\n    uiFields: IDynamicUIFields;\r\n    serviceFields: Array<any>\r\n}\r\n\r\n\r\nconst dynamicModel: IDynamicScreenModel = quick.store.get('dynamicModel');\r\nconst selectedGroupName = (<any>components.cbTableGroupList).internalValue?.value;\r\n\r\ndynamicModel?.uiFields.groups.forEach((grp, grpIndex) => {\r\n    if (grp.groupName == selectedGroupName) {\r\n        grp.fields.forEach((field, fieldIndex) => {\r\n            debugger;\r\n            if (field.fieldName == item.fieldName) { \r\n                (<any>components.txtFieldName).internalValue = field.fieldName;\r\n                (<any>components.cbFieldType).internalValue = components.cbFieldType.items.filter((item:any) => item.value == field.type)[0];\r\n                (<any>components.cbFieldFormat).internalValue = components.cbFieldFormat.items.filter((item:any) => item.value == field.format)[0];\r\n                (<any>components.txtFieldLabelTR).internalValue = dynamicModel.uiFields.localization[\"tr-TR\"][field.label];\r\n                (<any>components.txtFieldLabelEN).internalValue = dynamicModel.uiFields.localization[\"en-US\"][field.label];\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nquick.store.set('dynamicModel', dynamicModel);\r\n(<any>components.expansionPanels).internalValue = 1\r\n\r\n",
                                                                                                                    "P": "mouseEvent:object",
                                                                                                                    "HL": "TS"
                                                                                                                }
                                                                                                            },
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_78"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate v-icon--link mdi mdi-pencil theme--light"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "fieldDeleteButton",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-delete'",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "large": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {
                                                                                                                "click": {
                                                                                                                    "H": "declare const item: any;\r\n\r\ninterface IDynamicField {\r\n    fieldName: string;\r\n    label: any;\r\n    format?: string\r\n    type: any;\r\n}\r\ninterface IDynamicGroup {\r\n    groupName: string;\r\n    label?: any;\r\n    boxWithCard?: boolean;\r\n    layout?: number;\r\n    fields: Array<IDynamicField>;\r\n}\r\ninterface IDynamicUIFields {\r\n    groups: Array<IDynamicGroup>;\r\n    localization: Record<string, Record<string, string>>;\r\n}\r\n\r\ninterface IDynamicScreenModel {\r\n    uiFields: IDynamicUIFields;\r\n    serviceFields: Array<any>\r\n}\r\n\r\n\r\nconst dynamicModel: IDynamicScreenModel = quick.store.get('dynamicModel');\r\nconst selectedGroupName = (<any>components.cbTableGroupList).internalValue?.value;\r\n\r\ndynamicModel?.uiFields.groups.forEach((grp, grpIndex) => {\r\n    if (grp.groupName == selectedGroupName) {\r\n        grp.fields.forEach((field, fieldIndex) => {\r\n            if (field.fieldName == item.fieldName) { \r\n                dynamicModel.uiFields.groups[grpIndex].fields.splice(fieldIndex,1);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nquick.store.set('dynamicModel', dynamicModel);\r\nquick.Quick.reset('fieldContainer');\r\n\r\n",
                                                                                                                    "P": "mouseEvent:object",
                                                                                                                    "HL": "TS"
                                                                                                                }
                                                                                                            },
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_77"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate v-icon--link mdi mdi-delete theme--light"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "scopedSlot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_18"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "scopedSlot",
                                                                                                "compDomClasses": "v-data-table v-data-table--has-bottom theme--light"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_15"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-column"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-column"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_6"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_55",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "'d-flex flex-row'",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_62",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "''",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VBtn",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_66",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "color": {
                                                                                                    "H": "'primary'",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {
                                                                                                "click": {
                                                                                                    "H": "interface SaveModelRequest {\r\n    mode: string,\r\n    raw: string,\r\n    modelKey: string\r\n}\r\n\r\n\r\nconst dynamicModel = quick.store.get('dynamicModel');\r\nconst modelKey = quick.store.get('modelKey') ?? \"customerInfoModelKey\";\r\nconst modelUrl = quick.store.get('modelUrl') ?? \"http://customer.tkb-int.dev.rally.softtech/api/dynamicscreen/\";\r\n\r\nconst requestParams: SaveModelRequest = {\r\n    mode : \"raw\",\r\n    raw: JSON.stringify(dynamicModel),\r\n    modelKey: modelKey\r\n}\r\n\r\nconst requestObj: any = {\r\n    url: modelUrl,\r\n    http: \"GET\",\r\n    responseField: 'firstResponse',\r\n    blockRender: true,\r\n    data: requestParams,\r\n    onSuccess: 'onSuccessSaveModel',\r\n    onFail: 'OnFailModelSave'\r\n}\r\n\r\nquick.Request.async(requestObj)",
                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                    "HL": "TS"
                                                                                                },
                                                                                                "onSuccessSaveModel": {
                                                                                                    "H": "quick.Quick.alert!({text: \"Model kaydedilmiştir\", category: <any>\"Success\"})",
                                                                                                    "C": true,
                                                                                                    "HL": "TS"
                                                                                                },
                                                                                                "OnFailModelSave": {
                                                                                                    "H": "quick.Quick.alert!({text: \"Model kaydedilememiştir.\", category: <any>\"Eror\" })",
                                                                                                    "C": true,
                                                                                                    "HL": "TS"
                                                                                                }
                                                                                            },
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "C": {},
                                                                                                            "E": {},
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_70",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'Save Model'",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_70"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label "
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_66"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_62"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex flex-row justify-end col-12",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-row",
                                                                                            "j:justify-end",
                                                                                            "c:col-12"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-row justify-end col-12"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_55"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_26"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "container"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_24"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-card v-sheet theme--light"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_21"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "v-dialog__container"
            }
        }
    ],
    "cJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_8",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "╬[]╠'authorizationKey'╩╠'serviceName'╩╠'serviceFilterKey'╩╠'model'╩╠'data'╩╩╩",
                    "T": "prop"
                }
            },
            "E": {
                "GetDynamicData": {
                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.EM.trace(\"GetDynamicData event triggered\");\r\nvar dynamicComponentData = quick.getFormData(\"DynamicFields\");\r\nvar serviceData = {};\r\nObject.keys(dynamicComponentData).forEach(function (key) {\r\n    var _a;\r\n    debugger;\r\n    var dataGroup = key.split('_')[1];\r\n    var dataField = key.split('_')[2];\r\n    var dataValue = dynamicComponentData[key];\r\n    dataValue = typeof dataValue === 'object' ? dataValue.value : dataValue;\r\n    serviceData[dataGroup] = (_a = serviceData[dataGroup]) !== null && _a !== void 0 ? _a : {};\r\n    serviceData[dataGroup][dataField] = dataValue;\r\n});\r\nquick.EM.trace('DynamicFieldsData result:');\r\nquick.EM.trace(serviceData);\r\nserviceData;\r\n",
                    "C": true,
                    "EV": true,
                    "HL": "JS"
                },
                "CreateFields": {
                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.EM.trace('DS LoadComponent running');\r\nquick.EM.trace(\"model\");\r\nquick.EM.trace(model);\r\nquick.EM.trace(\"data\");\r\nquick.EM.trace(data);\r\nquick.store.set('modelKey', modelKey);\r\nquick.store.set('modelUrl', modelUrl);\r\nLoadFromDataModel();\r\nfunction LoadFromDataModel() {\r\n    if (model) {\r\n        model.uiFields.groups.forEach(function (group) {\r\n            var _a;\r\n            group.layout = (_a = group.layout) !== null && _a !== void 0 ? _a : 1;\r\n            var containerPlaceQID = CreateContainer(group);\r\n            var rowCount = Math.ceil(group.fields.length / group.layout);\r\n            var gridColCount = 12 / group.layout;\r\n            var rowIndex = 0;\r\n            group.fields.forEach(function (field, fieldIndex) {\r\n                if (fieldIndex % group.layout == 0) {\r\n                    //Create Row\r\n                    rowIndex++;\r\n                    quick.Quick.createComponent({\r\n                        templateCompQID: \"VRow\",\r\n                        newCompQID: group.groupName + '_' + rowIndex,\r\n                        placeQID: containerPlaceQID,\r\n                        place: containerPlaceQID ? \"Default\" : undefined\r\n                    });\r\n                }\r\n                var templateComp;\r\n                switch (field.type.name) {\r\n                    case \"text\":\r\n                    case \"numeric\":\r\n                    case \"money\": {\r\n                        templateComp = \"VColTextField\";\r\n                        break;\r\n                    }\r\n                    case \"combobox\":\r\n                    case \"multiselect\": {\r\n                        templateComp = \"VColCombo\";\r\n                        break;\r\n                    }\r\n                    case \"date\": {\r\n                        templateComp = \"VColDatepicker\";\r\n                        break;\r\n                    }\r\n                    case \"multiline\": {\r\n                        templateComp = \"VColTextArea\";\r\n                        break;\r\n                    }\r\n                }\r\n                if (templateComp) {\r\n                    var colComp = quick.Quick.createComponent({\r\n                        templateCompQID: templateComp,\r\n                        newCompQID: group.groupName + '_' + field.fieldName,\r\n                        placeQID: \"VRow_\" + group.groupName + '_' + rowIndex,\r\n                        place: \"Default\"\r\n                    });\r\n                    var fieldComp = colComp.$children[0];\r\n                    fieldComp.label = GetLR(field.label);\r\n                    fieldComp.customCompClass = 'col-' + gridColCount;\r\n                    //Formats?? money, number, text (card,Iban,email), phone- QPhone comp??\r\n                    if (field.type.name == \"text\") {\r\n                        fieldComp.format = field.format;\r\n                    }\r\n                    if (field.type.name == \"combobox\" || field.type.name == \"multiselect\") {\r\n                        var comboItems_1 = [];\r\n                        field.type.options.forEach(function (item) {\r\n                            comboItems_1.push({ text: GetLR(item.label), value: item.value });\r\n                        });\r\n                        fieldComp.items = comboItems_1;\r\n                        fieldComp.multiple = field.type.name == \"multiselect\";\r\n                    }\r\n                    debugger;\r\n                    AddValidationRules(group, field, fieldComp);\r\n                    LoadData(group, field, fieldComp);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction CreateContainer(group) {\r\n    var containerPlaceQID = undefined;\r\n    if (group.boxWithCard) {\r\n        //Create Container\r\n        quick.Quick.createComponent({\r\n            templateCompQID: \"VContainerTemp\",\r\n            newCompQID: group.groupName + \"Box\",\r\n            placeQID: \"DynamicFields\",\r\n            place: \"Default\"\r\n        });\r\n        containerPlaceQID = \"VContainer_\" + group.groupName + \"Box\";\r\n        if (group.groupName !== \"defaultGroup\") {\r\n            var titleComponent = quick.getComponent(\"QLabel_\" + group.groupName + \"Box\");\r\n            titleComponent.text = group.label;\r\n        }\r\n    }\r\n    return containerPlaceQID !== null && containerPlaceQID !== void 0 ? containerPlaceQID : \"DynamicFields\";\r\n}\r\nfunction GetLR(key) {\r\n    var _a;\r\n    var lang = quick.Quick.getLanguage();\r\n    return (_a = model.uiFields.localization[lang][key]) !== null && _a !== void 0 ? _a : key;\r\n}\r\nfunction LoadData(group, field, fieldComp) {\r\n    if (data && data[group.groupName]) {\r\n        switch (field.type.name) {\r\n            case \"text\":\r\n            case \"numeric\":\r\n            case \"money\":\r\n            case \"multiline\":\r\n                fieldComp.internalValue = data[group.groupName][field.fieldName];\r\n                break;\r\n            case \"date\":\r\n                fieldComp.value = data[group.groupName][field.fieldName];\r\n                break;\r\n            case \"combobox\":\r\n                var fieldValue = fieldComp.items.filter(function (item) { return item.value == data[group.groupName][field.fieldName]; });\r\n                fieldComp.internalValue = fieldValue[0];\r\n                break;\r\n            case \"multiselect\":\r\n                break;\r\n        }\r\n    }\r\n}\r\nfunction AddValidationRules(group, field, fieldComp) {\r\n    var validationRules = [];\r\n    var currentGroup = model.serviceFields.filter(function (groupItem) { return groupItem.groupName == group.groupName; })[0];\r\n    var currentField = currentGroup === null || currentGroup === void 0 ? void 0 : currentGroup.fields.filter(function (fieldItem) { return fieldItem.fieldName == field.fieldName; })[0];\r\n    currentField === null || currentField === void 0 ? void 0 : currentField.rules.forEach(function (rule) {\r\n        switch (rule.type) {\r\n            case 'required':\r\n                validationRules.push(quick.Quick.validation.required());\r\n                break;\r\n            case 'maxlen':\r\n                validationRules.push(quick.Quick.validation.maxLength(rule.length));\r\n                break;\r\n            case 'minlen':\r\n                validationRules.push(quick.Quick.validation.minLength(rule.length));\r\n                break;\r\n            case 'regex':\r\n                validationRules.push(quick.Quick.validation.regex(new RegExp(rule.regex)));\r\n                break;\r\n        }\r\n    });\r\n    fieldComp.rules = validationRules;\r\n}\r\n//Validation Error response\r\nvar dynamicErrors = {\r\n    \"selfDemographics.name\": \"required\",\r\n    \"selfJobInfo.occupation\": \"combobox\",\r\n    \"favouriteCurrency\": \"options\",\r\n};\r\n//UI Validation constants\r\nvar errorConstants = {\r\n    required: \"{0} alanına bilgi girişi zorunludur.\",\r\n    combobox: \"{0} alanına birden fazla veri girilemez.\",\r\n    options: \"{0} alanına geçerli bir değer girmediniz.\"\r\n};\r\n",
                    "C": true,
                    "EV": true,
                    "HL": "JS"
                },
                "PreRender": {
                    "H": "╩",
                    "I": true
                },
                "EndRender": {
                    "H": "╬=╣.╣dynamicFieldEditBtn╩╠visible╩╩╠false╩╩╬=╣editAuthorization╩╠()╣.╣shell╩╠getResource╩╩╠.╣.╣parent╩╠props╩╩╠authorizationKey╩╩╩╩╬=╣editAuthorization╩╠true╩╩╬=╣.╣dynamicFieldEditBtn╩╠visible╩╩╠editAuthorization╩╩╩",
                    "HL": "QS"
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_8"
            },
            "O": {
                "cType": "child",
                "compDomClasses": ""
            }
        },
        {
            "T": "VContainer",
            "P": {
                "ID": {
                    "H": "DynamicFields",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VRow",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_1",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "╬'d-flex flex-row'╩╩",
                                    "T": "class"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VCol",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_3",
                                                    "T": "prop"
                                                },
                                                "class": {
                                                    "H": "╬''╩╩",
                                                    "T": "class"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VBtn",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "dynamicFieldEditBtn",
                                                                    "T": "prop"
                                                                },
                                                                "color": {
                                                                    "H": "╬'warning'╩╩",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬''╩╩",
                                                                    "T": "class"
                                                                },
                                                                "regular": {
                                                                    "H": "╬false╩╩",
                                                                    "T": "prop"
                                                                },
                                                                "icon": {
                                                                    "H": "╬false╩╩",
                                                                    "T": "prop"
                                                                },
                                                                "fab": {
                                                                    "H": "╬false╩╩",
                                                                    "T": "prop"
                                                                },
                                                                "visible": {
                                                                    "H": "╬true╩╩",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {
                                                                "click": {
                                                                    "H": "\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar uiFields = (_a = quick.store.get('dynamicModel')) === null || _a === void 0 ? void 0 : _a.uiFields;\r\nif (uiFields && uiFields.groups && uiFields.groups[0].fields) {\r\n    components.dynamicFieldsDataTable.items = uiFields.groups[0].fields;\r\n    components.cbTableGroupList.items = { text: uiFields.groups[0].groupName, value: uiFields.groups[0].groupName };\r\n}\r\ncomponents.dynamicFieldsDialog.value = true;\r\n",
                                                                    "P": "mouseEvent:unknown | undefined",
                                                                    "HL": "JS"
                                                                }
                                                            },
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "QLabel",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_9",
                                                                                    "T": "prop"
                                                                                },
                                                                                "text": {
                                                                                    "H": "╬'Dynamic Fields'╩╩",
                                                                                    "T": "prop"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {},
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_9"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "q-label "
                                                                            }
                                                                        },
                                                                        {
                                                                            "T": "VIcon",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_7",
                                                                                    "T": "prop"
                                                                                },
                                                                                "text": {
                                                                                    "H": "╬'mdi-pencil'╩╩",
                                                                                    "T": "text"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {},
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_7"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "v-icon notranslate mdi mdi-pencil theme--light"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_5"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default warning"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_3"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "col col-2 d-flex",
                                                "layout": {
                                                    "dOpt": {
                                                        "xs": [
                                                            "c:col-2",
                                                            "d:d-flex"
                                                        ]
                                                    },
                                                    "class": "col-2 d-flex"
                                                }
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_1"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "row d-flex flex-row"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_20"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "container"
            }
        },
        {
            "T": "VContainer",
            "P": {
                "ID": {
                    "H": "VContainerTemp",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VCard",
                            "P": {
                                "ID": {
                                    "H": "VCard",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VContainer",
                                            "P": {
                                                "ID": {
                                                    "H": "VContainer",
                                                    "T": "prop"
                                                },
                                                "Render": {
                                                    "H": "╬false╩╩",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "QLabel",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "QLabel",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬'v-card__title'╩╩",
                                                                    "T": "class"
                                                                },
                                                                "Render": {
                                                                    "H": "╬false╩╩",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {},
                                                            "_Editor": {
                                                                "eID": "EdtrComp_59"
                                                            },
                                                            "O": {
                                                                "cType": "child",
                                                                "compDomClasses": "q-label v-card__title newDropBorder"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_43"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "container newDropBorder"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_52"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-card v-sheet theme--light"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_50"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "container"
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColTextField",
                    "T": "prop"
                },
                "class": {
                    "H": "╬''╩╩",
                    "T": "class"
                },
                "Render": {
                    "H": "╬false╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VTextField",
                            "P": {
                                "ID": {
                                    "H": "VTextField",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "╬'Text field label'╩╩",
                                    "T": "prop"
                                },
                                "regular": {
                                    "H": "╬'true'╩╩",
                                    "T": "prop"
                                },
                                "Render": {
                                    "H": "╬false╩╩",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_11"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_44"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColTextArea",
                    "T": "prop"
                },
                "class": {
                    "H": "╬''╩╩",
                    "T": "class"
                },
                "Render": {
                    "H": "╬false╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VTextarea",
                            "P": {
                                "ID": {
                                    "H": "VTextArea",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_16"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input v-textarea theme--light v-text-field v-text-field--is-booted undefined newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_14"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColCombo",
                    "T": "prop"
                },
                "class": {
                    "H": "╬''╩╩",
                    "T": "class"
                },
                "Render": {
                    "H": "╬false╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VCombobox",
                            "P": {
                                "ID": {
                                    "H": "VCombobox",
                                    "T": "prop"
                                },
                                "attach": {
                                    "H": "╬true╩╩",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "╬'My Combobox'╩╩",
                                    "T": "prop"
                                },
                                "items": {
                                    "H": "╬[]╠{}╠=╣text╩╠'test1'╩╩╠=╣value╩╠1╩╩╩╠{}╠=╣text╩╠'test2'╩╩╠=╣value╩╠2╩╩╩╩╩",
                                    "T": "prop"
                                },
                                "Render": {
                                    "H": "╬false╩╩",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_12"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_39"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VCol",
            "P": {
                "ID": {
                    "H": "VColDatepicker",
                    "T": "prop"
                },
                "class": {
                    "H": "╬''╩╩",
                    "T": "class"
                },
                "Render": {
                    "H": "╬false╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VInlineDatepicker",
                            "P": {
                                "ID": {
                                    "H": "VDatepicker",
                                    "T": "prop"
                                },
                                "willAttach": {
                                    "H": "╬false╩╩",
                                    "T": "prop"
                                },
                                "label": {
                                    "H": "╬'Pick a date'╩╩",
                                    "T": "prop"
                                },
                                "locale": {
                                    "H": "╬'tr'╩╩",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_19"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_17"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-column newDropBorder",
                "layout": {
                    "dOpt": {
                        "xs": [
                            "d:d-flex",
                            "fd:flex-column"
                        ]
                    },
                    "class": "d-flex flex-column"
                }
            }
        },
        {
            "T": "VRow",
            "P": {
                "ID": {
                    "H": "VRow",
                    "T": "prop"
                },
                "class": {
                    "H": "╬'d-flex flex-row'╩╩",
                    "T": "class"
                },
                "Render": {
                    "H": "╬false╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "Ghost",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_61",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {},
                            "_Editor": {
                                "eID": "EdtrComp_61"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "editor-ghost-comp newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_60"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-row newDropBorder"
            }
        },
        {
            "T": "VRow",
            "P": {
                "ID": {
                    "H": "EdtrComp_31",
                    "T": "prop"
                },
                "class": {
                    "H": "╬'d-flex flex-row justify-space-around'╩╩",
                    "T": "class"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VBtn",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_10",
                                    "T": "prop"
                                },
                                "color": {
                                    "H": "╬'primary'╩╩",
                                    "T": "prop"
                                }
                            },
                            "E": {
                                "click": {
                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar serviceModel = {\r\n    uiFields: {\r\n        groups: [\r\n            {\r\n                groupName: \"selfDemographics\", label: \"Kişisel Bilgiler\", layout: 3, boxWithCard: true, fields: [\r\n                    { fieldName: \"identityNo\", type: { name: \"text\" }, label: \"LR_selfDemographics_tckn\" },\r\n                    { fieldName: \"name\", type: { name: \"text\" }, label: \"LR_selfDemographics_name\" },\r\n                    { fieldName: \"surname\", type: { name: \"text\" }, label: \"LR_selfDemographics_surname\" },\r\n                    { fieldName: \"dateOfBirth\", type: { name: \"date\" }, label: \"LR_selfDemographics_dateOfBirth\" },\r\n                    {\r\n                        fieldName: \"country\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"Almanya\", value: \"2\" },\r\n                                { label: \"Türkiye\", value: \"1\" }\r\n                            ]\r\n                        }, label: \"Ülke\"\r\n                    },\r\n                    { fieldName: \"phone\", type: { name: \"text\" }, label: \"Telefon\" },\r\n                    { fieldName: \"address\", type: { name: \"multiline\" }, label: \"Adres\" }\r\n                ]\r\n            },\r\n            {\r\n                groupName: \"selfJobInfo\", label: \"Çalışma Bilgileri\", layout: 1, boxWithCard: true, fields: [\r\n                    { fieldName: \"name\", type: { name: \"text\" }, label: \"LR_selfDemographics_occupation\" },\r\n                    {\r\n                        fieldName: \"occupation\", label: \"LR_selfDemographics_occupation\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200605\", value: \"1\" },\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200606\", value: \"2\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                groupName: \"defaultGroup\", label: \"Çalışma Bilgileri\", layout: 2, boxWithCard: true, fields: [\r\n                    { fieldName: \"name\", type: { name: \"text\" }, label: \"LR_selfDemographics_occupation\" },\r\n                    {\r\n                        fieldName: \"occupation\", label: \"LR_selfDemographics_occupation\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200605\", value: \"1\" },\r\n                                { label: \"B6F651E2-A822-4381-868E-4CE55D200606\", value: \"2\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                groupName: \"defaultGroup\", layout: 2, fields: [\r\n                    { fieldName: \"address\", type: { name: \"text\" }, label: \"Adres\" },\r\n                    { fieldName: \"phone\", type: { name: \"text\" }, label: \"Telefon\" },\r\n                    {\r\n                        fieldName: \"favouriteCurrency\", label: \"B6F651E2-A822-4381-868E-4CE55D200607\", type: {\r\n                            name: \"combobox\", options: [\r\n                                { label: \"TRY\", value: \"try\" }, { label: \"EUR\", value: \"eur\" }, { label: \"USD\", value: \"usd\" },\r\n                            ]\r\n                        },\r\n                    },\r\n                    { fieldName: \"address\", type: { name: \"text\" }, label: \"Adres\" },\r\n                    { fieldName: \"phone\", type: { name: \"text\" }, label: \"Telefon\" }\r\n                ]\r\n            }\r\n        ],\r\n        localization: {\r\n            \"tr-TR\": {\r\n                \"LR_selfDemographics_tckn\": \"TCKN\",\r\n                \"LR_selfDemographics_name\": \"Ad\",\r\n                \"LR_selfDemographics_surname\": \"Soyad\",\r\n                \"LR_selfDemographics_occupation\": \"Meslek\",\r\n                \"LR_selfDemographics_dateOfBirth\": \"Doğum Tarihi\",\r\n                \"B6F651E2-A822-4381-868E-4CE55D200605\": \"Çalışıyor\",\r\n                \"B6F651E2-A822-4381-868E-4CE55D200606\": \"Çalışmıyor\"\r\n            },\r\n            \"en-US\": {\r\n                \"LR_selfDemographics_tckn\": \"Identity No\",\r\n                \"LR_selfDemographics_name\": \"Name\",\r\n                \"LR_selfDemographics_surname\": \"Surname\",\r\n                \"LR_selfDemographics_occupation\": \"Occupation\",\r\n                \"LR_selfDemographics_dateOfBirth\": \"Date Of Birth\"\r\n            }\r\n        }\r\n    },\r\n    serviceFields: [\r\n        {\r\n            groupName: \"selfDemographics\",\r\n            fields: [\r\n                {\r\n                    fieldName: \"name\", type: \"text\", rules: [\r\n                        { type: \"required\" },\r\n                        { type: \"maxlen\", length: 30, preventKeys: true },\r\n                        { type: \"minlen\", length: 2 }\r\n                    ]\r\n                },\r\n                { fieldName: \"surname\", type: \"text\", rules: [{ type: \"required\" }] }\r\n            ]\r\n        },\r\n        {\r\n            groupName: \"selfJobInfo\",\r\n            fields: [\r\n                { fieldName: \"name\", type: \"text\", rules: [{ type: \"required\" }] },\r\n                { fieldName: \"occupation\", type: \"combobox\", rules: [{ type: \"options\", options: [\"1\", \"2\"] }] }\r\n            ]\r\n        },\r\n        {\r\n            groupName: \"defaultGroup\",\r\n            fields: [\r\n                {\r\n                    fieldName: \"favouriteCurrency\", type: \"multiselect\",\r\n                    rules: [{ type: \"required\" }, { type: \"options\", options: [\"try\", \"eur\", \"usd\"] }]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\nvar serviceData = { \"selfDemographics\": { \"name\": \"Nilay\", \"surname\": \"Akdoğan\", \"country\": \"1\", \"dateOfBirth\": \"19890104\", \"address\": \"Reisdere Mah. Çeşme / İzmir\" },\r\n    \"selfJobInfo\": { \"name\": \"Software Developer\", \"occupation\": \"1\" }, \"defaultGroup\": { \"favouriteCurrency\": [\"eur\", \"try\"] } };\r\nvar serviceModelKey = \"customerInfoModelKey\";\r\nvar serviceModelUrl = \"http://customer.tkb-int.dev.rally.softtech/api/SaveDynamicScreenModel/\";\r\nquick.MM.trigger('CreateFields', [{ model: serviceModel, data: serviceData, modelKey: serviceModelKey, modelUrl: serviceModelUrl }]);\r\n",
                                    "P": "mouseEvent:unknown | undefined",
                                    "HL": "JS"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "QLabel",
                                            "C": {},
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_13",
                                                    "T": "prop"
                                                },
                                                "text": {
                                                    "H": "╬'Create Fields'╩╩",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_13"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": "q-label "
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_10"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                            }
                        },
                        {
                            "T": "VBtn",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_33",
                                    "T": "prop"
                                },
                                "color": {
                                    "H": "╬'primary'╩╩",
                                    "T": "prop"
                                }
                            },
                            "E": {
                                "click": {
                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dynamicComponentData = quick.getFormData(\"DynamicFields\");\r\nvar serviceData = {};\r\nObject.keys(dynamicComponentData).forEach(function (key) {\r\n    var _a;\r\n    debugger;\r\n    var dataGroup = key.split('_')[1];\r\n    var dataField = key.split('_')[2];\r\n    var dataValue = dynamicComponentData[key];\r\n    dataValue = typeof dataValue === 'object' ? dataValue.value : dataValue;\r\n    serviceData[dataGroup] = (_a = serviceData[dataGroup]) !== null && _a !== void 0 ? _a : {};\r\n    serviceData[dataGroup][dataField] = dataValue;\r\n});\r\nquick.EM.trace('Dynamic Fields Get Data');\r\nquick.EM.trace(serviceData);\r\nserviceData;\r\n",
                                    "P": "mouseEvent:unknown | undefined",
                                    "HL": "JS"
                                }
                            },
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "QLabel",
                                            "C": {},
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_34",
                                                    "T": "prop"
                                                },
                                                "text": {
                                                    "H": "╬'Get Data'╩╩",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_34"
                                            },
                                            "O": {
                                                "cType": "child",
                                                "compDomClasses": "q-label "
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_33"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_31"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "d-flex flex-row justify-space-around"
            }
        },
        {
            "T": "VDialog",
            "P": {
                "ID": {
                    "H": "dynamicFieldsDialog",
                    "T": "prop"
                },
                "width": {
                    "H": "╬1500╩╩",
                    "T": "prop"
                },
                "eager": {
                    "H": "╬true╩╩",
                    "T": "prop"
                }
            },
            "E": {
                "click:outside": {
                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\ncomponents.dynamicFieldsDialog.value = false;\r\n",
                    "HL": "JS"
                }
            },
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VCard",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_24",
                                    "T": "prop"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VContainer",
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_26",
                                                    "T": "prop"
                                                }
                                            },
                                            "E": {},
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_56",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_71",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬''╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "QLabel",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_75",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "text": {
                                                                                                    "H": "╬'Dynamic Fields'╩╩",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "╬''╩╩",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {},
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_75"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "q-label  text-h4",
                                                                                                "layout": {
                                                                                                    "dOpt": {
                                                                                                        "xs": [
                                                                                                            "tt:text-h4"
                                                                                                        ]
                                                                                                    },
                                                                                                    "class": "text-h4"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_71"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex col-12 flex-row ml-2",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "c:col-12",
                                                                                            "fd:flex-row",
                                                                                            "sp:ml-2"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex col-12 flex-row ml-2"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_56"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_28",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_30",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬''╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VExpansionPanels",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "expansionPanels",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VExpansionPanel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_37",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {
                                                                                                                "default": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelHeader",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_40",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "expandIcon": {
                                                                                                                                    "H": "╬'mdi-plus'╩╩",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "class": {
                                                                                                                                    "H": "╬'warning'╩╩",
                                                                                                                                    "T": "class"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "QLabel",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "EdtrComp_53",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "text": {
                                                                                                                                                    "H": "╬'Group'╩╩",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {},
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_53"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "q-label  text-h5",
                                                                                                                                                "layout": {
                                                                                                                                                    "dOpt": {
                                                                                                                                                        "xs": [
                                                                                                                                                            "tt:text-h5"
                                                                                                                                                        ]
                                                                                                                                                    },
                                                                                                                                                    "class": "text-h5"
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_40"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-header warning"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelContent",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_42",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "eager": {
                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "VRow",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "groupContainer",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {
                                                                                                                                                "default": {
                                                                                                                                                    "c": [
                                                                                                                                                        {
                                                                                                                                                            "T": "VCol",
                                                                                                                                                            "P": {
                                                                                                                                                                "ID": {
                                                                                                                                                                    "H": "EdtrComp_67",
                                                                                                                                                                    "T": "prop"
                                                                                                                                                                },
                                                                                                                                                                "class": {
                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                    "T": "class"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "E": {},
                                                                                                                                                            "C": {
                                                                                                                                                                "default": {
                                                                                                                                                                    "c": [
                                                                                                                                                                        {
                                                                                                                                                                            "T": "VCard",
                                                                                                                                                                            "P": {
                                                                                                                                                                                "ID": {
                                                                                                                                                                                    "H": "EdtrComp_95",
                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "E": {},
                                                                                                                                                                            "C": {
                                                                                                                                                                                "default": {
                                                                                                                                                                                    "c": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "T": "VContainer",
                                                                                                                                                                                            "P": {
                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                    "H": "grpContainer",
                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "E": {},
                                                                                                                                                                                            "C": {
                                                                                                                                                                                                "default": {
                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_101",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_102",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtGroupName",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Group Name'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "rules": {
                                                                                                                                                                                                                                                    "H": "╬=╣camelCaseRegex╩╠()╣regex╩╠'[a-z]+((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?'╩╩╩╬[]╠()╣.╣.╣Quick╩╠validation╩╩╠required╩╩╩╠()╣.╣.╣Quick╩╠validation╩╩╠regex╩╩╠camelCaseRegex╩╠'GroupName must be a camelCase format'╩╩╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_115"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_102"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_91",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbLayout",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Layout'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "╬[]╠{}╠=╣text╩╠'Columun 1'╩╩╠=╣value╩╠1╩╩╩╠{}╠=╣text╩╠'Columun 2'╩╩╠=╣value╩╠2╩╩╩╠{}╠=╣text╩╠'Columun 3'╩╩╠=╣value╩╠3╩╩╩╠{}╠=╣text╩╠'Columun 4'╩╩╠=╣value╩╠4╩╩╩╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_96"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_91"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_129",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCheckbox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "chkAddCard",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Add group card'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "╬'primary'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_130"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-input--selection-controls v-input--checkbox"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_129"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_101"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_63",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_64",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtLabelTR",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Label (tr-TR)'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_72"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_64"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_69",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtLabelEN",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Label (en-US)'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_73"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_69"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_63"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_126",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row justify-end'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_127",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VBtn",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_82",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "╬'primary'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "outlined": {
                                                                                                                                                                                                                                                    "H": "╬false╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "click": {
                                                                                                                                                                                                                                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nCreateGroup();\r\nfunction CreateGroup() {\r\n    var _a, _b, _c;\r\n    debugger;\r\n    var LRPrefix = \"LR_\";\r\n    var dynamicModel = (_a = quick.store.get('dynamicModel')) !== null && _a !== void 0 ? _a : {\r\n        uiFields: { groups: [], localization: { \"tr-TR\": {}, \"en-US\": {} } },\r\n        serviceFields: []\r\n    };\r\n    var groupLRID = LRPrefix + components.txtGroupName.internalValue;\r\n    var groupName = (_b = components.txtGroupName.internalValue) !== null && _b !== void 0 ? _b : \"defaultGroup\";\r\n    dynamicModel.uiFields.groups.push({\r\n        \"groupName\": groupName,\r\n        \"label\": groupLRID,\r\n        \"layout\": (_c = components.cbLayout.internalValue) === null || _c === void 0 ? void 0 : _c.value,\r\n        \"boxWithCard\": components.chkAddCard.internalValue,\r\n        \"fields\": []\r\n    });\r\n    dynamicModel.serviceFields.push({\r\n        \"groupName\": groupName,\r\n        \"fields\": []\r\n    });\r\n    //LRID Business - Dil Dynamic Eklenecek mi? Önyüzde validation olacak mı? Hangi dili girerse onu modele setle?\r\n    if (components.txtLabelTR.internalValue)\r\n        dynamicModel.uiFields.localization[\"tr-TR\"][groupLRID] = components.txtLabelTR.internalValue;\r\n    if (components.txtLabelEN.internalValue)\r\n        dynamicModel.uiFields.localization[\"en-US\"][groupLRID] = components.txtLabelEN.internalValue;\r\n    quick.store.set('dynamicModel', dynamicModel);\r\n    var groupComboItems = dynamicModel.uiFields.groups.map(function (grp) { return { \"text\": grp.groupName, \"value\": grp.groupName }; });\r\n    components.comboGroupName.items = groupComboItems;\r\n    components.cbTableGroupList.items = groupComboItems;\r\n}\r\nquick.Quick.reset('groupContainer');\r\n",
                                                                                                                                                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                                                                                                                                                    "HL": "JS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            "T": "QLabel",
                                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                                    "H": "EdtrComp_88",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "text": {
                                                                                                                                                                                                                                                                    "H": "╬'Save Group'╩╩",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                                "eID": "EdtrComp_88"
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                                "cType": "child",
                                                                                                                                                                                                                                                                "compDomClasses": "q-label "
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_82"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_127"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex col-12 flex-row justify-end",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "c:col-12",
                                                                                                                                                                                                                                            "fd:flex-row",
                                                                                                                                                                                                                                            "j:justify-end"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex col-12 flex-row justify-end"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_126"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row justify-end"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                "eID": "EdtrComp_97"
                                                                                                                                                                                            },
                                                                                                                                                                                            "O": {
                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                "compDomClasses": "container"
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                "eID": "EdtrComp_95"
                                                                                                                                                                            },
                                                                                                                                                                            "O": {
                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                "compDomClasses": "v-card v-sheet theme--light"
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    ],
                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "_Editor": {
                                                                                                                                                                "eID": "EdtrComp_67"
                                                                                                                                                            },
                                                                                                                                                            "O": {
                                                                                                                                                                "cType": "slot",
                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                "layout": {
                                                                                                                                                                    "dOpt": {
                                                                                                                                                                        "xs": [
                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                        ]
                                                                                                                                                                    },
                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    "cType": "slot"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_58"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_42"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-content"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "slot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_37"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-expansion-panel"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VExpansionPanel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_46",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {
                                                                                                                "default": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelHeader",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_47",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "expandIcon": {
                                                                                                                                    "H": "╬'mdi-plus'╩╩",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "class": {
                                                                                                                                    "H": "╬'warning'╩╩",
                                                                                                                                    "T": "class"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "QLabel",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "EdtrComp_54",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "text": {
                                                                                                                                                    "H": "╬'Field'╩╩",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {},
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_54"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "q-label  text-h5",
                                                                                                                                                "layout": {
                                                                                                                                                    "dOpt": {
                                                                                                                                                        "xs": [
                                                                                                                                                            "tt:text-h5"
                                                                                                                                                        ]
                                                                                                                                                    },
                                                                                                                                                    "class": "text-h5"
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_47"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-header warning"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "T": "VExpansionPanelContent",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_49",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "eager": {
                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "VRow",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "fieldContainer",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {
                                                                                                                                                "default": {
                                                                                                                                                    "c": [
                                                                                                                                                        {
                                                                                                                                                            "T": "VCol",
                                                                                                                                                            "P": {
                                                                                                                                                                "ID": {
                                                                                                                                                                    "H": "EdtrComp_99",
                                                                                                                                                                    "T": "prop"
                                                                                                                                                                },
                                                                                                                                                                "class": {
                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                    "T": "class"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "E": {},
                                                                                                                                                            "C": {
                                                                                                                                                                "default": {
                                                                                                                                                                    "c": [
                                                                                                                                                                        {
                                                                                                                                                                            "T": "VCard",
                                                                                                                                                                            "P": {
                                                                                                                                                                                "ID": {
                                                                                                                                                                                    "H": "EdtrComp_100",
                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "E": {},
                                                                                                                                                                            "C": {
                                                                                                                                                                                "default": {
                                                                                                                                                                                    "c": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "T": "VContainer",
                                                                                                                                                                                            "P": {
                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                    "H": "EdtrComp_103",
                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "E": {},
                                                                                                                                                                                            "C": {
                                                                                                                                                                                                "default": {
                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_117",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_118",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "comboGroupName",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Group Name'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "╬[]╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_154"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_118"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_120",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtFieldName",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'FieldName'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "rules": {
                                                                                                                                                                                                                                                    "H": "╬=╣camelCaseRegex╩╠()╣regex╩╠'[a-z]+((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?'╩╩╩╬[]╠()╣.╣.╣Quick╩╠validation╩╩╠required╩╩╩╠()╣.╣.╣Quick╩╠validation╩╩╠regex╩╩╠camelCaseRegex╩╠'FieldName must be a camelCase format'╩╩╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_119"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_120"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_117"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_124",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_125",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbFieldType",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Type'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "╬[]╠{}╠=╣text╩╠'text'╩╩╠=╣value╩╠'text'╩╩╩╠{}╠=╣text╩╠'numeric'╩╩╠=╣value╩╠'numeric'╩╩╩╠{}╠=╣text╩╠'money'╩╩╠=╣value╩╠'money'╩╩╩╠{}╠=╣text╩╠'multiline'╩╩╠=╣value╩╠'multiline'╩╩╩╠{}╠=╣text╩╠'combo'╩╩╠=╣value╩╠'combo'╩╩╩╠{}╠=╣text╩╠'multiselect'╩╩╠=╣value╩╠'multiselect'╩╩╩╠{}╠=╣text╩╠'date'╩╩╠=╣value╩╠'date'╩╩╩╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "change": {
                                                                                                                                                                                                                                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nif (value.value == \"text\") {\r\n    components.cbFieldFormat.visible = true;\r\n}\r\nelse {\r\n    components.cbFieldFormat.visible = false;\r\n}\r\n",
                                                                                                                                                                                                                                                    "P": "value:object",
                                                                                                                                                                                                                                                    "HL": "JS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_151"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_125"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_142",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbFieldFormat",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Format'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "╬[]╠{}╠=╣text╩╠'creditcard'╩╩╠=╣value╩╠'creditcard'╩╩╩╠{}╠=╣text╩╠'email'╩╩╠=╣value╩╠'email'╩╩╩╠{}╠=╣text╩╠'iban'╩╩╠=╣value╩╠'iban'╩╩╩╠{}╠=╣text╩╠'ipaddress'╩╩╠=╣value╩╠'ipaddress'╩╩╩╠{}╠=╣text╩╠'onlyAlphabetic'╩╩╠=╣value╩╠'onlyAlphabetic'╩╩╩╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_152"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_142"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_124"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_144",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_145",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtFieldLabelTR",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Label (tr-TR)'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_146"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_145"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_147",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtFieldLabelEN",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Label (en-US)'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_134"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted undefined"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_147"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col col-6 d-flex flex-column",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "c:col-6",
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "col-6 d-flex flex-column"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_144"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "rowValidationRules",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_79",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VBtn",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_87",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "╬'primary'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "fab": {
                                                                                                                                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "click": {
                                                                                                                                                                                                                                                    "H": "\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar fieldRuleIndex = (_a = quick.store.get('fieldRuleIndex')) !== null && _a !== void 0 ? _a : 0;\r\nfieldRuleIndex = fieldRuleIndex + 1;\r\nquick.Quick.createComponent({\r\n    templateCompQID: \"ruleInputComponent\",\r\n    newCompQID: fieldRuleIndex,\r\n    placeQID: \"validationRulesContainer\",\r\n    place: \"Default\"\r\n});\r\nquick.store.set('fieldRuleIndex', fieldRuleIndex);\r\n",
                                                                                                                                                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                                                                                                                                                    "HL": "JS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            "T": "VIcon",
                                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                                    "H": "EdtrComp_90",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "text": {
                                                                                                                                                                                                                                                                    "H": "╬'mdi-plus'╩╩",
                                                                                                                                                                                                                                                                    "T": "text"
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                                "eID": "EdtrComp_90"
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-plus theme--light"
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_87"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-btn v-btn--contained v-btn--fab v-btn--round theme--light v-size--default primary"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_79"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column col-1",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column",
                                                                                                                                                                                                                                            "c:col-1"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column col-1"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "validationRulesContainer",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "Ghost",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_105",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_105"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "child",
                                                                                                                                                                                                                                                "compDomClasses": ""
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_132"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-column col-5",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-column",
                                                                                                                                                                                                                                            "c:col-5"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-column col-5"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_131"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "ruleInputComponent",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "Render": {
                                                                                                                                                                                                                    "H": "╬false╩╩",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_108",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VCombobox",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "cbValidationRulesType",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "attach": {
                                                                                                                                                                                                                                                    "H": "╬true╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Validation Rule'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "items": {
                                                                                                                                                                                                                                                    "H": "╬[]╠{}╠=╣text╩╠'required'╩╩╠=╣value╩╠'required'╩╩╩╠{}╠=╣text╩╠'minLength'╩╩╠=╣value╩╠'minLength'╩╩╩╠{}╠=╣text╩╠'maxLength'╩╩╠=╣value╩╠'maxLength'╩╩╩╠{}╠=╣text╩╠'email'╩╩╠=╣value╩╠'email'╩╩╩╠{}╠=╣text╩╠'iban'╩╩╠=╣value╩╠'iban'╩╩╩╠{}╠=╣text╩╠'tckn'╩╩╠=╣value╩╠'tckn'╩╩╩╠{}╠=╣text╩╠'vkn'╩╩╠=╣value╩╠'vkn'╩╩╩╠{}╠=╣text╩╠'regex'╩╩╠=╣value╩╠'regex'╩╩╩╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "change": {
                                                                                                                                                                                                                                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar selectedRule = value.value;\r\ndebugger;\r\n//TODO: Buarası artabilir ruleDict tutup kontrol et\r\n//TODO: DynamicCreate Comp hangi component trigger edildi bilinmiyor \r\nif (selectedRule == \"minLength\" && selectedRule == \"maxLength\") {\r\n    components[\"txtValidationRuleValue_1\"].visible = true;\r\n}\r\nelse {\r\n    components[\"txtValidationRuleValue_1\"].visible = false;\r\n}\r\n",
                                                                                                                                                                                                                                                    "P": "value:object",
                                                                                                                                                                                                                                                    "HL": "JS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_86"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                                            "sp:mr-5"
                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                    "class": "mr-5"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VTextField",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "txtValidationRuleValue",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "label": {
                                                                                                                                                                                                                                                    "H": "╬'Value'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_85"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_108"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-row"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-row"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_106"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            "T": "VRow",
                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                    "H": "EdtrComp_136",
                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                    "H": "╬'d-flex flex-row justify-end'╩╩",
                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            "T": "VCol",
                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                    "H": "EdtrComp_138",
                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "class": {
                                                                                                                                                                                                                                    "H": "╬''╩╩",
                                                                                                                                                                                                                                    "T": "class"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            "T": "VBtn",
                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                    "H": "EdtrComp_139",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "color": {
                                                                                                                                                                                                                                                    "H": "╬'primary'╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "outlined": {
                                                                                                                                                                                                                                                    "H": "╬false╩╩",
                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "E": {
                                                                                                                                                                                                                                                "click": {
                                                                                                                                                                                                                                                    "H": "\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LRPrefix = \"LR_\";\r\nvar defaultGroupName = \"defaultGroup\";\r\nvar dynamicModel = (_a = quick.store.get('dynamicModel')) !== null && _a !== void 0 ? _a : {\r\n    uiFields: { groups: [], localization: { \"tr-TR\": {}, \"en-US\": {} } },\r\n    serviceFields: []\r\n};\r\nvar selectedGroupName = components.comboGroupName.internalValue ? components.comboGroupName.internalValue.value : defaultGroupName;\r\nvar fieldName = components.txtFieldName.internalValue;\r\nvar fieldType = (_b = components.cbFieldType.internalValue) === null || _b === void 0 ? void 0 : _b.value;\r\ncreateFields();\r\nresetFieldContainer();\r\nquick.store.set('dynamicModel', dynamicModel);\r\nquick.EM.trace(quick.store.get('dynamicModel'));\r\nfunction createFields() {\r\n    var _a;\r\n    if (selectedGroupName == defaultGroupName) {\r\n        addDefaultGroup();\r\n    }\r\n    //Create UI Fields\r\n    var selectedUIGroup = dynamicModel.uiFields.groups.filter(function (grp) { return grp.groupName == selectedGroupName; })[0];\r\n    var fieldLRID = LRPrefix + selectedGroupName + '_' + fieldName;\r\n    selectedUIGroup.fields.push({\r\n        fieldName: fieldName,\r\n        label: fieldLRID,\r\n        type: fieldType,\r\n        format: (_a = components.cbFieldFormat.internalValue) === null || _a === void 0 ? void 0 : _a.value\r\n    });\r\n    //LRID \r\n    //Şimdilik 2 dil desteği -  Daha sonra dynamic LRID girişi olacak.\r\n    if (components.txtFieldLabelTR.internalValue)\r\n        dynamicModel.uiFields.localization[\"tr-TR\"][fieldLRID] = components.txtFieldLabelTR.internalValue;\r\n    if (components.txtFieldLabelEN.internalValue)\r\n        dynamicModel.uiFields.localization[\"en-US\"][fieldLRID] = components.txtFieldLabelEN.internalValue;\r\n    //Create Service Fields\r\n    var serviceGroup = dynamicModel.serviceFields.filter(function (grp) { return grp.groupName == selectedGroupName; })[0];\r\n    serviceGroup.fields.push({\r\n        fieldName: fieldName,\r\n        type: fieldType,\r\n        rules: getFieldValidationRules()\r\n    });\r\n    components.dynamicFieldsDataTable.items = selectedUIGroup.fields;\r\n}\r\nfunction addDefaultGroup() {\r\n    if (dynamicModel.uiFields.groups.filter(function (grp) { return grp.groupName == defaultGroupName; }).length > 0) {\r\n        return;\r\n    }\r\n    dynamicModel.uiFields.groups.push({ groupName: defaultGroupName, fields: [] });\r\n    dynamicModel.serviceFields.push({ groupName: defaultGroupName, fields: [] });\r\n    var groupListItems = dynamicModel.uiFields.groups.map(function (grp) { return { \"text\": grp.groupName, \"value\": grp.groupName }; });\r\n    components.cbTableGroupList.items = groupListItems;\r\n    components.comboGroupName.items = groupListItems;\r\n}\r\nfunction getFieldValidationRules() {\r\n    debugger;\r\n    var fieldRuleCount = quick.store.get('fieldRuleIndex');\r\n    var rules = [];\r\n    for (var i = 1; i <= fieldRuleCount; i++) {\r\n        var ruleTypeComponent = components[\"cbValidationRulesType_\" + i];\r\n        var ruleValueComponent = components[\"txtValidationRuleValue_\" + i];\r\n        if (!ruleTypeComponent || !ruleTypeComponent.internalValue) {\r\n            return;\r\n        }\r\n        var ruleType = ruleTypeComponent.internalValue.value;\r\n        var ruleValue = ruleValueComponent ? ruleValueComponent.internalValue : undefined;\r\n        var rule = { type: ruleType, value: ruleValue };\r\n        rules.push(rule);\r\n    }\r\n    return rules;\r\n}\r\nfunction resetFieldContainer() {\r\n    quick.Quick.reset('fieldContainer');\r\n    quick.store.set('fieldRuleIndex', 0);\r\n}\r\n",
                                                                                                                                                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                                                                                                                                                    "HL": "JS"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "C": {
                                                                                                                                                                                                                                                "default": {
                                                                                                                                                                                                                                                    "c": [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            "T": "QLabel",
                                                                                                                                                                                                                                                            "C": {},
                                                                                                                                                                                                                                                            "E": {},
                                                                                                                                                                                                                                                            "P": {
                                                                                                                                                                                                                                                                "ID": {
                                                                                                                                                                                                                                                                    "H": "EdtrComp_140",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "text": {
                                                                                                                                                                                                                                                                    "H": "╬'Save Field'╩╩",
                                                                                                                                                                                                                                                                    "T": "prop"
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                                "eID": "EdtrComp_140"
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                                "cType": "child",
                                                                                                                                                                                                                                                                "compDomClasses": "q-label "
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                                "eID": "EdtrComp_139"
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                                "eID": "EdtrComp_138"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                                "compDomClasses": "col d-flex flex-row col-12 justify-end",
                                                                                                                                                                                                                                "layout": {
                                                                                                                                                                                                                                    "dOpt": {
                                                                                                                                                                                                                                        "xs": [
                                                                                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                                                                                            "fd:flex-row",
                                                                                                                                                                                                                                            "c:col-12",
                                                                                                                                                                                                                                            "j:justify-end"
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    "class": "d-flex flex-row col-12 justify-end"
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                                "eID": "EdtrComp_136"
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "O": {
                                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                                "compDomClasses": "row d-flex flex-row justify-end"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                                "eID": "EdtrComp_103"
                                                                                                                                                                                            },
                                                                                                                                                                                            "O": {
                                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                                "compDomClasses": "container"
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "_Editor": {
                                                                                                                                                                                "eID": "EdtrComp_100"
                                                                                                                                                                            },
                                                                                                                                                                            "O": {
                                                                                                                                                                                "cType": "slot",
                                                                                                                                                                                "compDomClasses": "v-card v-sheet theme--light"
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    ],
                                                                                                                                                                    "cType": "slot"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "_Editor": {
                                                                                                                                                                "eID": "EdtrComp_99"
                                                                                                                                                            },
                                                                                                                                                            "O": {
                                                                                                                                                                "cType": "slot",
                                                                                                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                                                                                                "layout": {
                                                                                                                                                                    "dOpt": {
                                                                                                                                                                        "xs": [
                                                                                                                                                                            "d:d-flex",
                                                                                                                                                                            "fd:flex-column"
                                                                                                                                                                        ]
                                                                                                                                                                    },
                                                                                                                                                                    "class": "d-flex flex-column"
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    "cType": "slot"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_98"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "cType": "slot",
                                                                                                                                                "compDomClasses": "row d-flex flex-row"
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_49"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-expansion-panel-content"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "slot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_46"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-expansion-panel"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_35"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-item-group theme--light v-expansion-panels"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_30"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-column"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-column"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_28"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_133",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_135",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬''╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VCombobox",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "cbTableGroupList",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "attach": {
                                                                                                    "H": "╬true╩╩",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "label": {
                                                                                                    "H": "╬'Group Name'╩╩",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {
                                                                                                "change": {
                                                                                                    "H": "\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\ndebugger;\r\nvar uiFields = (_a = quick.store.get('dynamicModel')) === null || _a === void 0 ? void 0 : _a.uiFields;\r\nvar selectedGroupName = (_b = components.cbTableGroupList.internalValue) === null || _b === void 0 ? void 0 : _b.value;\r\nvar selectedGroup = uiFields.groups.filter(function (grp) { return grp.groupName == selectedGroupName; });\r\nif (selectedGroup && selectedGroup[0].fields) {\r\n    components.dynamicFieldsDataTable.items = selectedGroup[0].fields;\r\n}\r\n",
                                                                                                    "P": "value:object",
                                                                                                    "HL": "JS"
                                                                                                }
                                                                                            },
                                                                                            "C": {},
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_23"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-input theme--light v-text-field v-text-field--is-booted v-select v-autocomplete undefined"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_135"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col col-3 d-flex flex-column",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "c:col-3",
                                                                                            "d:d-flex",
                                                                                            "fd:flex-column"
                                                                                        ]
                                                                                    },
                                                                                    "class": "col-3 d-flex flex-column"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_121",
                                                                                    "T": "prop"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VBtn",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "btnEditGroup",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "color": {
                                                                                                    "H": "╬'primary'╩╩",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "fab": {
                                                                                                    "H": "╬true╩╩",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_155",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-pencil'╩╩",
                                                                                                                    "T": "text"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_155"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-pencil theme--light"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_137"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "layout": {
                                                                                                    "dOpt": {
                                                                                                        "xs": [
                                                                                                            "sp:mr-2"
                                                                                                        ]
                                                                                                    },
                                                                                                    "class": "mr-2"
                                                                                                },
                                                                                                "compDomClasses": "v-btn v-btn--contained v-btn--fab v-btn--round theme--light v-size--default primary mr-2"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "T": "VBtn",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "btnDeleteGroup",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "color": {
                                                                                                    "H": "╬'primary'╩╩",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "fab": {
                                                                                                    "H": "╬true╩╩",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {
                                                                                                "click": {
                                                                                                    "H": "\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dynamicModel = quick.store.get('dynamicModel');\r\nvar selectedGroupName = (_a = components.cbTableGroupList.internalValue) === null || _a === void 0 ? void 0 : _a.value;\r\ndynamicModel === null || dynamicModel === void 0 ? void 0 : dynamicModel.uiFields.groups.forEach(function (grp, grpIndex) {\r\n    if (grp.groupName == selectedGroupName) {\r\n        dynamicModel.uiFields.groups.splice(grpIndex, 1);\r\n    }\r\n});\r\ndynamicModel === null || dynamicModel === void 0 ? void 0 : dynamicModel.serviceFields.forEach(function (grp, grpIndex) {\r\n    if (grp.groupName == selectedGroupName) {\r\n        dynamicModel.serviceFields.splice(grpIndex, 1);\r\n    }\r\n});\r\ndebugger;\r\ncomponents.cbTableGroupList.items = components.cbTableGroupList.items.filter(function (item) { return item.value !== selectedGroupName; });\r\ncomponents.comboGroupName.items = components.cbTableGroupList.items.filter(function (item) { return item.value !== selectedGroupName; });\r\nquick.Quick.reset('cbTableGroupList');\r\ncomponents.dynamicFieldsDataTable.items = [];\r\nquick.store.set('dynamicModel', dynamicModel);\r\n",
                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                    "HL": "JS"
                                                                                                }
                                                                                            },
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_156",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-delete'╩╩",
                                                                                                                    "T": "text"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_156"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-delete theme--light"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_149"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-btn v-btn--contained v-btn--fab v-btn--round theme--light v-size--default primary"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_121"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-row"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-row"
                                                                                },
                                                                                "compDomClasses": "col d-flex flex-row"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_133"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_6",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_15",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬''╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VDataTable",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "dynamicFieldsDataTable",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "headers": {
                                                                                                    "H": "╬[]╠{}╠=╣text╩╠'Field Name'╩╩╠=╣value╩╠'fieldName'╩╩╩╠{}╠=╣text╩╠'Label'╩╩╠=╣value╩╠'label'╩╩╩╠{}╠=╣text╩╠'Type'╩╩╠=╣value╩╠'type'╩╩╩╠{}╠=╣text╩╠'Format'╩╩╠=╣value╩╠'format'╩╩╩╠{}╠=╣text╩╠''╩╩╠=╣value╩╠'actions'╩╩╠=╣align╩╠'center fixed'╩╩╠=╣class╩╠'fixed'╩╩╩╩╩",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "items": {
                                                                                                    "H": "╬[]╩╩",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "item.actions": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "fieldEditButton",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-pencil'╩╩",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "large": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {
                                                                                                                "click": {
                                                                                                                    "H": "\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dynamicModel = quick.store.get('dynamicModel');\r\nvar selectedGroupName = (_a = components.cbTableGroupList.internalValue) === null || _a === void 0 ? void 0 : _a.value;\r\ndynamicModel === null || dynamicModel === void 0 ? void 0 : dynamicModel.uiFields.groups.forEach(function (grp, grpIndex) {\r\n    if (grp.groupName == selectedGroupName) {\r\n        grp.fields.forEach(function (field, fieldIndex) {\r\n            debugger;\r\n            if (field.fieldName == item.fieldName) {\r\n                components.txtFieldName.internalValue = field.fieldName;\r\n                components.cbFieldType.internalValue = components.cbFieldType.items.filter(function (item) { return item.value == field.type; })[0];\r\n                components.cbFieldFormat.internalValue = components.cbFieldFormat.items.filter(function (item) { return item.value == field.format; })[0];\r\n                components.txtFieldLabelTR.internalValue = dynamicModel.uiFields.localization[\"tr-TR\"][field.label];\r\n                components.txtFieldLabelEN.internalValue = dynamicModel.uiFields.localization[\"en-US\"][field.label];\r\n            }\r\n        });\r\n    }\r\n});\r\nquick.store.set('dynamicModel', dynamicModel);\r\ncomponents.expansionPanels.internalValue = 1;\r\n",
                                                                                                                    "P": "mouseEvent:object",
                                                                                                                    "HL": "JS"
                                                                                                                }
                                                                                                            },
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_78"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate v-icon--link mdi mdi-pencil theme--light"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "fieldDeleteButton",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-delete'╩╩",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "large": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {
                                                                                                                "click": {
                                                                                                                    "H": "\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dynamicModel = quick.store.get('dynamicModel');\r\nvar selectedGroupName = (_a = components.cbTableGroupList.internalValue) === null || _a === void 0 ? void 0 : _a.value;\r\ndynamicModel === null || dynamicModel === void 0 ? void 0 : dynamicModel.uiFields.groups.forEach(function (grp, grpIndex) {\r\n    if (grp.groupName == selectedGroupName) {\r\n        grp.fields.forEach(function (field, fieldIndex) {\r\n            if (field.fieldName == item.fieldName) {\r\n                dynamicModel.uiFields.groups[grpIndex].fields.splice(fieldIndex, 1);\r\n            }\r\n        });\r\n    }\r\n});\r\nquick.store.set('dynamicModel', dynamicModel);\r\nquick.Quick.reset('fieldContainer');\r\n",
                                                                                                                    "P": "mouseEvent:object",
                                                                                                                    "HL": "JS"
                                                                                                                }
                                                                                                            },
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_77"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-icon notranslate v-icon--link mdi mdi-delete theme--light"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "scopedSlot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_18"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "scopedSlot",
                                                                                                "compDomClasses": "v-data-table v-data-table--has-bottom theme--light"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_15"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex flex-column",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-column"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-column"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_6"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        },
                                                        {
                                                            "T": "VRow",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_55",
                                                                    "T": "prop"
                                                                },
                                                                "class": {
                                                                    "H": "╬'d-flex flex-row'╩╩",
                                                                    "T": "class"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VCol",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_62",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬''╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VBtn",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_66",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "color": {
                                                                                                    "H": "╬'primary'╩╩",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "E": {
                                                                                                "click": {
                                                                                                    "H": "\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dynamicModel = quick.store.get('dynamicModel');\r\nvar modelKey = (_a = quick.store.get('modelKey')) !== null && _a !== void 0 ? _a : \"customerInfoModelKey\";\r\nvar modelUrl = (_b = quick.store.get('modelUrl')) !== null && _b !== void 0 ? _b : \"http://customer.tkb-int.dev.rally.softtech/api/dynamicscreen/\";\r\nvar requestParams = {\r\n    mode: \"raw\",\r\n    raw: JSON.stringify(dynamicModel),\r\n    modelKey: modelKey\r\n};\r\nvar requestObj = {\r\n    url: modelUrl,\r\n    http: \"GET\",\r\n    responseField: 'firstResponse',\r\n    blockRender: true,\r\n    data: requestParams,\r\n    onSuccess: 'onSuccessSaveModel',\r\n    onFail: 'OnFailModelSave'\r\n};\r\nquick.Request.async(requestObj);\r\n",
                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                    "HL": "JS"
                                                                                                },
                                                                                                "onSuccessSaveModel": {
                                                                                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.Quick.alert({ text: \"Model kaydedilmiştir\", category: \"Success\" });\r\n",
                                                                                                    "C": true,
                                                                                                    "HL": "JS"
                                                                                                },
                                                                                                "OnFailModelSave": {
                                                                                                    "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.Quick.alert({ text: \"Model kaydedilememiştir.\", category: \"Eror\" });\r\n",
                                                                                                    "C": true,
                                                                                                    "HL": "JS"
                                                                                                }
                                                                                            },
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "C": {},
                                                                                                            "E": {},
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_70",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'Save Model'╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_70"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label "
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_66"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default primary"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_62"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "col d-flex flex-row justify-end col-12",
                                                                                "layout": {
                                                                                    "dOpt": {
                                                                                        "xs": [
                                                                                            "d:d-flex",
                                                                                            "fd:flex-row",
                                                                                            "j:justify-end",
                                                                                            "c:col-12"
                                                                                        ]
                                                                                    },
                                                                                    "class": "d-flex flex-row justify-end col-12"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_55"
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "row d-flex flex-row"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_26"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "container"
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_24"
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "v-card v-sheet theme--light"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_21"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "v-dialog__container"
            }
        }
    ],
    "lrids": {},
    "clrids": {},
    "namedViews": {
        "designMode": {
            "pJson": [
                {
                    "T": "Messaging",
                    "P": {
                        "ID": {
                            "H": "EdtrComp_2",
                            "T": "prop"
                        },
                        "externalProps": {
                            "H": "['serviceName', 'serviceFilterKey', 'model', 'data']",
                            "T": "prop"
                        }
                    },
                    "E": {
                        "GetDynamicData": {
                            "H": "quick.EM.trace(\"DF-GetDynamicData design mode\")",
                            "C": true,
                            "EV": true,
                            "HL": "TS"
                        },
                        "CreateFields": {
                            "H": "quick.EM.trace('DF-CreateFields design mode')",
                            "C": true,
                            "EV": true,
                            "HL": "TS"
                        }
                    },
                    "C": {},
                    "_Editor": {
                        "eID": "EdtrComp_2"
                    },
                    "O": {
                        "compDomClasses": ""
                    }
                },
                {
                    "T": "QLabel",
                    "P": {
                        "ID": {
                            "H": "EdtrComp_1",
                            "T": "prop"
                        },
                        "text": {
                            "H": "'Dynamic Fileds Component'",
                            "T": "prop"
                        }
                    },
                    "E": {},
                    "C": {},
                    "_Editor": {
                        "eID": "EdtrComp_1"
                    },
                    "O": {
                        "cType": "slot",
                        "compDomClasses": "q-label "
                    }
                }
            ],
            "cJson": [
                {
                    "T": "Messaging",
                    "P": {
                        "ID": {
                            "H": "EdtrComp_2",
                            "T": "prop"
                        },
                        "externalProps": {
                            "H": "╬[]╠'serviceName'╩╠'serviceFilterKey'╩╠'model'╩╠'data'╩╩╩",
                            "T": "prop"
                        }
                    },
                    "E": {
                        "GetDynamicData": {
                            "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.EM.trace(\"DF-GetDynamicData design mode\");\r\n",
                            "C": true,
                            "EV": true,
                            "HL": "JS"
                        },
                        "CreateFields": {
                            "H": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.EM.trace('DF-CreateFields design mode');\r\n",
                            "C": true,
                            "EV": true,
                            "HL": "JS"
                        }
                    },
                    "C": {},
                    "_Editor": {
                        "eID": "EdtrComp_2"
                    },
                    "O": {
                        "cType": "child",
                        "compDomClasses": ""
                    }
                },
                {
                    "T": "QLabel",
                    "P": {
                        "ID": {
                            "H": "EdtrComp_1",
                            "T": "prop"
                        },
                        "text": {
                            "H": "╬'Dynamic Fileds Component'╩╩",
                            "T": "prop"
                        }
                    },
                    "E": {},
                    "C": {},
                    "_Editor": {
                        "eID": "EdtrComp_1"
                    },
                    "O": {
                        "cType": "slot",
                        "compDomClasses": "q-label "
                    }
                }
            ]
        }
    }
};
exports.default = pjson;


/***/ }),

/***/ "../../common/qshell/src/customComponents/QLegend.ts":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/customComponents/QLegend.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pjson = {
    "pJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_62",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "['referenceCompId','showUnchanged']",
                    "T": "prop"
                }
            },
            "E": {
                "setVisibleListButton": {
                    "H": "//visible parameter sets the list button component's visible prop\r\ncomponents.showListButton.visible = true ",
                    "C": true,
                    "EV": true,
                    "HL": "TS"
                },
                "PreRender": {
                    "H": "const editor = quick.Quick.getEditor();\r\nif (editor) {\r\n    editor.dmEnabled = true;\r\n}",
                    "I": true,
                    "HL": "TS"
                },
                "showList": {
                    "H": "quick.EM.trace('getValueContextList')\r\nquick.EM.trace(quick.parent.props.referenceCompId)\r\nlet valueList = (<any>quick.Quick.dm).getValueContextList(quick.parent.props.referenceCompId)\r\nquick.EM.trace(valueList)\r\ncomponents.detailTable.items = valueList",
                    "C": true,
                    "EV": true,
                    "HL": "TS"
                },
                "EndRender": {
                    "H": "components.rowDetail.visible = false;\r\n\r\nif (quick.parent.props?.showUnchanged) {\r\n    components.iconUnchanged.visible = true;\r\n    components.labelUnchanged.visible = true;\r\n}",
                    "HL": "TS"
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_62"
            },
            "O": {
                "compDomClasses": "newDropBorder",
                "cType": "child"
            }
        },
        {
            "T": "VContainer",
            "P": {
                "ID": {
                    "H": "EdtrComp_52",
                    "T": "prop"
                },
                "eager": {
                    "H": "true",
                    "T": "prop"
                },
                "visible": {
                    "H": "true",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VRow",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_117",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "'no-gutters'",
                                    "T": "class"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VCol",
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VCard",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_134",
                                                                    "T": "prop"
                                                                },
                                                                "color": {
                                                                    "H": "'white'",
                                                                    "T": "prop"
                                                                },
                                                                "visible": {
                                                                    "H": "true",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VRow",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_5",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "'no-gutters align-center flex-nowrap'",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_26",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "''",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_21",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "LR('status')",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_21"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label text-h5 font-weight-bold newDropBorder"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_26"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col col-2 newDropBorder"
                                                                                            },
                                                                                            "S": {
                                                                                                "xs-xl": {
                                                                                                    "col": "3"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_44",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "''",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_10",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-circle'",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "'light-green lighten-3'",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_10"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light light-green--text text--lighten-3 newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_9s",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "LR('saved')",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_9"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label text-h6 ml-2 newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_6",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-circle'",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "'light-blue lighten-3'",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_6"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light light-blue--text text--lighten-3 ml-4 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginLeft": "12px"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_8",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "LR('updated')",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_8"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label text-h6 ml-2 newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_15s",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-circle'",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "'red lighten-3'",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_15"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light red--text text--lighten-3 ml-4 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginLeft": "12px"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_17",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "LR('deleted')",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_17"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label text-h6 ml-2 newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "iconUnchanged",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "'mdi-circle'",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "'blue-grey lighten-4'",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "visible": {
                                                                                                                    "H": "false",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_69"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light red--text text--lighten-3 ml-4 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginLeft": "12px"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "labelUnchanged",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "LR('none')",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "visible": {
                                                                                                                    "H": "false",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_112"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label text-h6 ml-2 newDropBorder"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_44"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col col-5 newDropBorder"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_24",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "''",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VBtn",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "showListButton",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "regular": {
                                                                                                                    "H": "true",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {
                                                                                                                "click": {
                                                                                                                    "H": "components.rowDetail.visible = !components.rowDetail.visible\r\ncomponents.lblShowList.text = quick.LR('showList')\r\n\r\nif (components.rowDetail.visible) {\r\n    quick.MM.trigger('showList')\r\n    components.lblShowList.text = quick.LR('hideList')\r\n}",
                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                    "HL": "TS"
                                                                                                                }
                                                                                                            },
                                                                                                            "C": {
                                                                                                                "default": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "QLabel",
                                                                                                                            "C": {},
                                                                                                                            "E": {},
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "lblShowList",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "text": {
                                                                                                                                    "H": "LR('showList')",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_23"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "child",
                                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                                            },
                                                                                                                            "S": {
                                                                                                                                "fontColor": "#ffffff"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "slot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_22"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default info newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "backgroundColor": "#1976d2"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_24"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col d-flex justify-end newDropBorder"
                                                                                            },
                                                                                            "S": {
                                                                                                "xs-xl": {
                                                                                                    "justifyContent": "flex-end",
                                                                                                    "col": "3"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_5"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "row no-gutters align-center flex-nowrap newDropBorder"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_134"
                                                            },
                                                            "S": {
                                                                "xs-xl": {
                                                                    "marginLeft": "",
                                                                    "marginRight": "",
                                                                    "marginBottom": "",
                                                                    "marginTop": "",
                                                                    "paddingTop": "12px",
                                                                    "paddingBottom": "12px",
                                                                    "paddingLeft": "12px",
                                                                    "paddingRight": "12px",
                                                                    "width": "",
                                                                    "height": "",
                                                                    "unlink": "false"
                                                                },
                                                                "backgroundColor": "#ffffff",
                                                                "boxShadow": "",
                                                                "boxSizing": "",
                                                                "borderTopStyle": "",
                                                                "borderRightStyle": "",
                                                                "borderBottomStyle": "",
                                                                "borderLeftStyle": "",
                                                                "borderTopLeftRadius": "",
                                                                "borderTopRightRadius": "",
                                                                "borderBottomLeftRadius": "",
                                                                "borderBottomRightRadius": "",
                                                                "borderTopWidth": "",
                                                                "borderRightWidth": "",
                                                                "borderBottomWidth": "",
                                                                "borderLeftWidth": "",
                                                                "defaultBorderColor": "",
                                                                "sides": ""
                                                            },
                                                            "O": {
                                                                "cType": "slot"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_132",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_132"
                                            },
                                            "O": {
                                                "cType": "slot"
                                            },
                                            "S": {
                                                "xs-xl": {
                                                    "col": "",
                                                    "flexDirection": "column",
                                                    "alignItems": "",
                                                    "justifyContent": "",
                                                    "marginLeft": "",
                                                    "marginRight": "",
                                                    "marginBottom": "",
                                                    "marginTop": "",
                                                    "paddingTop": "px",
                                                    "paddingBottom": "px",
                                                    "paddingLeft": "px",
                                                    "paddingRight": "px"
                                                },
                                                "backgroundColor": "",
                                                "boxShadow": "",
                                                "boxSizing": "",
                                                "borderTopStyle": "",
                                                "borderRightStyle": "",
                                                "borderBottomStyle": "",
                                                "borderLeftStyle": "",
                                                "borderTopLeftRadius": "",
                                                "borderTopRightRadius": "",
                                                "borderBottomLeftRadius": "",
                                                "borderBottomRightRadius": "",
                                                "borderTopWidth": "",
                                                "borderRightWidth": "",
                                                "borderBottomWidth": "",
                                                "borderLeftWidth": "",
                                                "defaultBorderColor": "",
                                                "sides": ""
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_117"
                            },
                            "S": {
                                "xs-xl": {
                                    "marginLeft": "",
                                    "marginRight": "",
                                    "marginBottom": "",
                                    "marginTop": "",
                                    "paddingTop": "",
                                    "paddingBottom": "",
                                    "paddingLeft": "",
                                    "paddingRight": "",
                                    "width": "",
                                    "height": "",
                                    "unlink": "false"
                                },
                                "backgroundColor": "",
                                "boxShadow": "",
                                "boxSizing": "",
                                "borderTopStyle": "",
                                "borderRightStyle": "",
                                "borderBottomStyle": "",
                                "borderLeftStyle": "",
                                "borderTopLeftRadius": "",
                                "borderTopRightRadius": "",
                                "borderBottomLeftRadius": "",
                                "borderBottomRightRadius": "",
                                "borderTopWidth": "",
                                "borderRightWidth": "",
                                "borderBottomWidth": "",
                                "borderLeftWidth": "",
                                "defaultBorderColor": "",
                                "sides": ""
                            },
                            "O": {
                                "cType": "slot"
                            }
                        },
                        {
                            "T": "VRow",
                            "P": {
                                "ID": {
                                    "H": "rowDetail",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "'no-gutters'",
                                    "T": "class"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VCol",
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VCard",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_152",
                                                                    "T": "prop"
                                                                },
                                                                "color": {
                                                                    "H": "'white'",
                                                                    "T": "prop"
                                                                },
                                                                "visible": {
                                                                    "H": "true",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VRow",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_95",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "'no-gutters'",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_7",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "LR('updatedRecords')",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "''",
                                                                                                                    "T": "class"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_7"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label pl-8 text-h6 font-weight-bold newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VDataTable",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "detailTable",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "headers": {
                                                                                                                    "H": "[{ text = LR('dataType'), value = 'label'},\n{ text = LR('currentData'), value = 'value' },\n{ text = LR('oldData'), value = 'compareValue' }]",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "footerProps": {
                                                                                                                    "H": "{showFirstLastPage = true,\nfirstIcon = 'mdi-arrow-collapse-left',\nlastIcon = 'mdi-arrow-collapse-right',\nprevIcon = 'mdi-minus',\nnextIcon = 'mdi-plus',\nitemsPerPageText = LR('itemsPerPage')}",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "itemsPerPage": {
                                                                                                                    "H": "5",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "noDataText": {
                                                                                                                    "H": "LR('noData')",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "noResultText": {
                                                                                                                    "H": "LR('noResult')",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {
                                                                                                                "item.value": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "VChip",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_12",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "color": {
                                                                                                                                    "H": "if (item.statu == 'saved') {\r\n    'light-green lighten-3'\r\n} else if (item.statu == 'updated') {\r\n    'light-blue lighten-3'\r\n} else if (item.statu == 'removed') {\r\n    'red lighten-3'\r\n} else {\r\n    ''\r\n}",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "QLabel",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "EdtrComp_16",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "text": {
                                                                                                                                                    "H": "if (item.value == undefined || item.value == null) {\r\n    '-'\r\n} else {\r\n    item.value\r\n}",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "'black--text'",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {},
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_16"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "compDomClasses": "q-label ",
                                                                                                                                                "cType": "child"
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_12"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-chip theme--light v-size--default red lighten-3"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "scopedSlot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_4"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-data-table v-data-table--has-bottom theme--light pt-5 pl-5 pr-5 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginTop": "16px"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_106",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_106"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot"
                                                                                            },
                                                                                            "S": {
                                                                                                "xs-xl": {
                                                                                                    "paddingTop": "px",
                                                                                                    "paddingLeft": "px",
                                                                                                    "paddingBottom": "px",
                                                                                                    "paddingRight": "px"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_95"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_152"
                                                            },
                                                            "S": {
                                                                "xs-xl": {
                                                                    "marginLeft": "",
                                                                    "marginRight": "",
                                                                    "marginBottom": "",
                                                                    "marginTop": "",
                                                                    "paddingTop": "12px",
                                                                    "paddingBottom": "12px",
                                                                    "paddingLeft": "12px",
                                                                    "paddingRight": "12px",
                                                                    "width": "",
                                                                    "height": "",
                                                                    "unlink": "false"
                                                                },
                                                                "backgroundColor": "#ffffff",
                                                                "boxShadow": "",
                                                                "boxSizing": "",
                                                                "borderTopStyle": "",
                                                                "borderRightStyle": "",
                                                                "borderBottomStyle": "",
                                                                "borderLeftStyle": "",
                                                                "borderTopLeftRadius": "",
                                                                "borderTopRightRadius": "",
                                                                "borderBottomLeftRadius": "",
                                                                "borderBottomRightRadius": "",
                                                                "borderTopWidth": "",
                                                                "borderRightWidth": "",
                                                                "borderBottomWidth": "",
                                                                "borderLeftWidth": "",
                                                                "defaultBorderColor": "",
                                                                "sides": ""
                                                            },
                                                            "O": {
                                                                "cType": "slot"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_151",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_151"
                                            },
                                            "O": {
                                                "cType": "slot"
                                            },
                                            "S": {
                                                "xs-xl": {
                                                    "col": "",
                                                    "flexDirection": "column",
                                                    "alignItems": "",
                                                    "justifyContent": "",
                                                    "marginLeft": "",
                                                    "marginRight": "",
                                                    "marginBottom": "",
                                                    "marginTop": "",
                                                    "paddingTop": "",
                                                    "paddingBottom": "",
                                                    "paddingLeft": "",
                                                    "paddingRight": ""
                                                },
                                                "backgroundColor": "",
                                                "boxShadow": "",
                                                "boxSizing": "",
                                                "borderTopStyle": "",
                                                "borderRightStyle": "",
                                                "borderBottomStyle": "",
                                                "borderLeftStyle": "",
                                                "borderTopLeftRadius": "",
                                                "borderTopRightRadius": "",
                                                "borderBottomLeftRadius": "",
                                                "borderBottomRightRadius": "",
                                                "borderTopWidth": "",
                                                "borderRightWidth": "",
                                                "borderBottomWidth": "",
                                                "borderLeftWidth": "",
                                                "defaultBorderColor": "",
                                                "sides": ""
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_150"
                            },
                            "S": {
                                "xs-xl": {
                                    "marginLeft": "",
                                    "marginRight": "",
                                    "marginBottom": "",
                                    "marginTop": "36px",
                                    "paddingTop": "",
                                    "paddingBottom": "",
                                    "paddingLeft": "",
                                    "paddingRight": "",
                                    "width": "",
                                    "height": "",
                                    "unlink": "false"
                                },
                                "backgroundColor": "",
                                "boxShadow": "",
                                "boxSizing": "",
                                "borderTopStyle": "",
                                "borderRightStyle": "",
                                "borderBottomStyle": "",
                                "borderLeftStyle": "",
                                "borderTopLeftRadius": "",
                                "borderTopRightRadius": "",
                                "borderBottomLeftRadius": "",
                                "borderBottomRightRadius": "",
                                "borderTopWidth": "",
                                "borderRightWidth": "",
                                "borderBottomWidth": "",
                                "borderLeftWidth": "",
                                "defaultBorderColor": "",
                                "sides": ""
                            },
                            "O": {
                                "cType": "slot"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_52"
            },
            "S": {
                "xs-xl": {
                    "marginLeft": "",
                    "marginRight": "",
                    "marginBottom": "",
                    "marginTop": "",
                    "paddingTop": "",
                    "paddingBottom": "",
                    "paddingLeft": "",
                    "paddingRight": "",
                    "width": "",
                    "height": "",
                    "unlink": "false"
                },
                "backgroundColor": "",
                "boxShadow": "",
                "boxSizing": "",
                "borderTopStyle": "",
                "borderRightStyle": "",
                "borderBottomStyle": "",
                "borderLeftStyle": "",
                "borderTopLeftRadius": "",
                "borderTopRightRadius": "",
                "borderBottomLeftRadius": "",
                "borderBottomRightRadius": "",
                "borderTopWidth": "",
                "borderRightWidth": "",
                "borderBottomWidth": "",
                "borderLeftWidth": "",
                "defaultBorderColor": "",
                "sides": ""
            },
            "O": {
                "cType": "slot"
            }
        }
    ],
    "cJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_62",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "╬[]╠'referenceCompId'╩╠'showUnchanged'╩╩╩",
                    "T": "prop"
                }
            },
            "E": {
                "setVisibleListButton": {
                    "H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\n//visible parameter sets the list button component's visible prop\r\ncomponents.showListButton.visible = true;\r\n",
                    "C": true,
                    "EV": true,
                    "HL": "JS"
                },
                "PreRender": {
                    "H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar editor = quick.Quick.getEditor();\r\nif (editor) {\r\n    editor.dmEnabled = true;\r\n}\r\n",
                    "I": true,
                    "HL": "JS"
                },
                "showList": {
                    "H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.EM.trace('getValueContextList');\r\nquick.EM.trace(quick.parent.props.referenceCompId);\r\nvar valueList = quick.Quick.dm.getValueContextList(quick.parent.props.referenceCompId);\r\nquick.EM.trace(valueList);\r\ncomponents.detailTable.items = valueList;\r\n",
                    "C": true,
                    "EV": true,
                    "HL": "JS"
                },
                "EndRender": {
                    "H": "var _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\ncomponents.rowDetail.visible = false;\r\nif ((_a = quick.parent.props) === null || _a === void 0 ? void 0 : _a.showUnchanged) {\r\n    components.iconUnchanged.visible = true;\r\n    components.labelUnchanged.visible = true;\r\n}\r\n",
                    "HL": "JS"
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_62"
            },
            "O": {
                "compDomClasses": "newDropBorder",
                "cType": "child"
            }
        },
        {
            "T": "VContainer",
            "P": {
                "ID": {
                    "H": "EdtrComp_52",
                    "T": "prop"
                },
                "eager": {
                    "H": "╬true╩╩",
                    "T": "prop"
                },
                "visible": {
                    "H": "╬true╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {
                "default": {
                    "c": [
                        {
                            "T": "VRow",
                            "P": {
                                "ID": {
                                    "H": "EdtrComp_117",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "╬'no-gutters'╩╩",
                                    "T": "class"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VCol",
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VCard",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_134",
                                                                    "T": "prop"
                                                                },
                                                                "color": {
                                                                    "H": "╬'white'╩╩",
                                                                    "T": "prop"
                                                                },
                                                                "visible": {
                                                                    "H": "╬true╩╩",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VRow",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_5",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬'no-gutters align-center flex-nowrap'╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_26",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "╬''╩╩",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_21",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬()╣LR╩╠'status'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_21"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_26"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col newDropBorder"
                                                                                            },
                                                                                            "S": {
                                                                                                "xs-xl": {
                                                                                                    "col": "3"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_44",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "╬''╩╩",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_10",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-circle'╩╩",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "╬'light-green lighten-3'╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_10"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light light-green--text text--lighten-3 newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_9s",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬()╣LR╩╠'saved'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_9"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_6",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-circle'╩╩",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "╬'light-blue lighten-3'╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_6"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light light-blue--text text--lighten-3 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginLeft": "12px"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_8",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬()╣LR╩╠'updated'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_8"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_15s",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-circle'╩╩",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "╬'red lighten-3'╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_15"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light red--text text--lighten-3 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginLeft": "12px"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_17",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬()╣LR╩╠'deleted'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_17"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VIcon",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "iconUnchanged",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬'mdi-circle'╩╩",
                                                                                                                    "T": "text"
                                                                                                                },
                                                                                                                "small": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "color": {
                                                                                                                    "H": "╬'blue-grey lighten-4'╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "visible": {
                                                                                                                    "H": "╬false╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_69"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-icon notranslate mdi mdi-circle theme--light blue-grey--text text--lighten-4 newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginLeft": "12px"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "labelUnchanged",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬()╣LR╩╠'none'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "visible": {
                                                                                                                    "H": "╬false╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_112"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_44"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col newDropBorder"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_24",
                                                                                                    "T": "prop"
                                                                                                },
                                                                                                "class": {
                                                                                                    "H": "╬''╩╩",
                                                                                                    "T": "class"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "VBtn",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "showListButton",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "regular": {
                                                                                                                    "H": "╬true╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {
                                                                                                                "click": {
                                                                                                                    "H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\ncomponents.rowDetail.visible = !components.rowDetail.visible;\r\ncomponents.lblShowList.text = quick.LR('showList');\r\nif (components.rowDetail.visible) {\r\n    quick.MM.trigger('showList');\r\n    components.lblShowList.text = quick.LR('hideList');\r\n}\r\n",
                                                                                                                    "P": "mouseEvent:unknown | undefined",
                                                                                                                    "HL": "JS"
                                                                                                                }
                                                                                                            },
                                                                                                            "C": {
                                                                                                                "default": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "QLabel",
                                                                                                                            "C": {},
                                                                                                                            "E": {},
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "lblShowList",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "text": {
                                                                                                                                    "H": "╬()╣LR╩╠'showList'╩╩╩",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_23"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "child",
                                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                                            },
                                                                                                                            "S": {
                                                                                                                                "fontColor": "#ffffff"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "slot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_22"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "slot",
                                                                                                                "compDomClasses": "v-btn v-btn--contained theme--light v-size--default newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "backgroundColor": "#1976d2"
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_24"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col newDropBorder"
                                                                                            },
                                                                                            "S": {
                                                                                                "xs-xl": {
                                                                                                    "justifyContent": "flex-end",
                                                                                                    "col": "3"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_5"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "row no-gutters align-center flex-nowrap newDropBorder"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_134"
                                                            },
                                                            "S": {
                                                                "xs-xl": {
                                                                    "marginLeft": "",
                                                                    "marginRight": "",
                                                                    "marginBottom": "",
                                                                    "marginTop": "",
                                                                    "paddingTop": "12px",
                                                                    "paddingBottom": "12px",
                                                                    "paddingLeft": "12px",
                                                                    "paddingRight": "12px",
                                                                    "width": "",
                                                                    "height": "",
                                                                    "unlink": "false"
                                                                },
                                                                "backgroundColor": "#ffffff",
                                                                "boxShadow": "",
                                                                "boxSizing": "",
                                                                "borderTopStyle": "",
                                                                "borderRightStyle": "",
                                                                "borderBottomStyle": "",
                                                                "borderLeftStyle": "",
                                                                "borderTopLeftRadius": "",
                                                                "borderTopRightRadius": "",
                                                                "borderBottomLeftRadius": "",
                                                                "borderBottomRightRadius": "",
                                                                "borderTopWidth": "",
                                                                "borderRightWidth": "",
                                                                "borderBottomWidth": "",
                                                                "borderLeftWidth": "",
                                                                "defaultBorderColor": "",
                                                                "sides": ""
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "v-card v-sheet theme--light white newDropBorder"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_132",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_132"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "col newDropBorder"
                                            },
                                            "S": {
                                                "xs-xl": {
                                                    "col": "",
                                                    "flexDirection": "column",
                                                    "alignItems": "",
                                                    "justifyContent": "",
                                                    "marginLeft": "",
                                                    "marginRight": "",
                                                    "marginBottom": "",
                                                    "marginTop": "",
                                                    "paddingTop": "px",
                                                    "paddingBottom": "px",
                                                    "paddingLeft": "px",
                                                    "paddingRight": "px"
                                                },
                                                "backgroundColor": "",
                                                "boxShadow": "",
                                                "boxSizing": "",
                                                "borderTopStyle": "",
                                                "borderRightStyle": "",
                                                "borderBottomStyle": "",
                                                "borderLeftStyle": "",
                                                "borderTopLeftRadius": "",
                                                "borderTopRightRadius": "",
                                                "borderBottomLeftRadius": "",
                                                "borderBottomRightRadius": "",
                                                "borderTopWidth": "",
                                                "borderRightWidth": "",
                                                "borderBottomWidth": "",
                                                "borderLeftWidth": "",
                                                "defaultBorderColor": "",
                                                "sides": ""
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_117"
                            },
                            "S": {
                                "xs-xl": {
                                    "marginLeft": "",
                                    "marginRight": "",
                                    "marginBottom": "",
                                    "marginTop": "",
                                    "paddingTop": "",
                                    "paddingBottom": "",
                                    "paddingLeft": "",
                                    "paddingRight": "",
                                    "width": "",
                                    "height": "",
                                    "unlink": "false"
                                },
                                "backgroundColor": "",
                                "boxShadow": "",
                                "boxSizing": "",
                                "borderTopStyle": "",
                                "borderRightStyle": "",
                                "borderBottomStyle": "",
                                "borderLeftStyle": "",
                                "borderTopLeftRadius": "",
                                "borderTopRightRadius": "",
                                "borderBottomLeftRadius": "",
                                "borderBottomRightRadius": "",
                                "borderTopWidth": "",
                                "borderRightWidth": "",
                                "borderBottomWidth": "",
                                "borderLeftWidth": "",
                                "defaultBorderColor": "",
                                "sides": ""
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "row no-gutters newDropBorder"
                            }
                        },
                        {
                            "T": "VRow",
                            "P": {
                                "ID": {
                                    "H": "rowDetail",
                                    "T": "prop"
                                },
                                "class": {
                                    "H": "╬'no-gutters'╩╩",
                                    "T": "class"
                                }
                            },
                            "E": {},
                            "C": {
                                "default": {
                                    "c": [
                                        {
                                            "T": "VCol",
                                            "C": {
                                                "default": {
                                                    "c": [
                                                        {
                                                            "T": "VCard",
                                                            "P": {
                                                                "ID": {
                                                                    "H": "EdtrComp_152",
                                                                    "T": "prop"
                                                                },
                                                                "color": {
                                                                    "H": "╬'white'╩╩",
                                                                    "T": "prop"
                                                                },
                                                                "visible": {
                                                                    "H": "╬true╩╩",
                                                                    "T": "prop"
                                                                }
                                                            },
                                                            "E": {},
                                                            "C": {
                                                                "default": {
                                                                    "c": [
                                                                        {
                                                                            "T": "VRow",
                                                                            "P": {
                                                                                "ID": {
                                                                                    "H": "EdtrComp_95",
                                                                                    "T": "prop"
                                                                                },
                                                                                "class": {
                                                                                    "H": "╬'no-gutters'╩╩",
                                                                                    "T": "class"
                                                                                }
                                                                            },
                                                                            "E": {},
                                                                            "C": {
                                                                                "default": {
                                                                                    "c": [
                                                                                        {
                                                                                            "T": "VCol",
                                                                                            "C": {
                                                                                                "default": {
                                                                                                    "c": [
                                                                                                        {
                                                                                                            "T": "QLabel",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "EdtrComp_7",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "text": {
                                                                                                                    "H": "╬()╣LR╩╠'updatedRecords'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "class": {
                                                                                                                    "H": "╬''╩╩",
                                                                                                                    "T": "class"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {},
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_7"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "q-label newDropBorder"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "T": "VDataTable",
                                                                                                            "P": {
                                                                                                                "ID": {
                                                                                                                    "H": "detailTable",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "headers": {
                                                                                                                    "H": "╬[]╠{}╠=╣text╩╠()╣LR╩╠'dataType'╩╩╩╠=╣value╩╠'label'╩╩╩╠{}╠=╣text╩╠()╣LR╩╠'currentData'╩╩╩╠=╣value╩╠'value'╩╩╩╠{}╠=╣text╩╠()╣LR╩╠'oldData'╩╩╩╠=╣value╩╠'compareValue'╩╩╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "footerProps": {
                                                                                                                    "H": "╬{}╠=╣showFirstLastPage╩╠true╩╩╠=╣firstIcon╩╠'mdi-arrow-collapse-left'╩╩╠=╣lastIcon╩╠'mdi-arrow-collapse-right'╩╩╠=╣prevIcon╩╠'mdi-minus'╩╩╠=╣nextIcon╩╠'mdi-plus'╩╩╠=╣itemsPerPageText╩╠()╣LR╩╠'itemsPerPage'╩╩╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "itemsPerPage": {
                                                                                                                    "H": "╬5╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "noDataText": {
                                                                                                                    "H": "╬()╣LR╩╠'noData'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                },
                                                                                                                "noResultText": {
                                                                                                                    "H": "╬()╣LR╩╠'noResult'╩╩╩",
                                                                                                                    "T": "prop"
                                                                                                                }
                                                                                                            },
                                                                                                            "E": {},
                                                                                                            "C": {
                                                                                                                "item.value": {
                                                                                                                    "c": [
                                                                                                                        {
                                                                                                                            "T": "VChip",
                                                                                                                            "P": {
                                                                                                                                "ID": {
                                                                                                                                    "H": "EdtrComp_12",
                                                                                                                                    "T": "prop"
                                                                                                                                },
                                                                                                                                "color": {
                                                                                                                                    "H": "╬if╣==╣.╣item╩╠statu╩╩╠'saved'╩╩╠╬'light-green lighten-3'╩╩╠╬if╣==╣.╣item╩╠statu╩╩╠'updated'╩╩╠╬'light-blue lighten-3'╩╩╠╬if╣==╣.╣item╩╠statu╩╩╠'removed'╩╩╠╬'red lighten-3'╩╩╠╬''╩╩╩╩╩╩╩╩",
                                                                                                                                    "T": "prop"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "E": {},
                                                                                                                            "C": {
                                                                                                                                "default": {
                                                                                                                                    "c": [
                                                                                                                                        {
                                                                                                                                            "T": "QLabel",
                                                                                                                                            "P": {
                                                                                                                                                "ID": {
                                                                                                                                                    "H": "EdtrComp_16",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "text": {
                                                                                                                                                    "H": "╬if╣||╣==╣.╣item╩╠value╩╩╠undefined╩╩╠==╣.╣item╩╠value╩╩╠null╩╩╩╠╬'-'╩╩╠╬.╣item╩╠value╩╩╩╩╩",
                                                                                                                                                    "T": "prop"
                                                                                                                                                },
                                                                                                                                                "class": {
                                                                                                                                                    "H": "╬'black--text'╩╩",
                                                                                                                                                    "T": "class"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "E": {},
                                                                                                                                            "C": {},
                                                                                                                                            "_Editor": {
                                                                                                                                                "eID": "EdtrComp_16"
                                                                                                                                            },
                                                                                                                                            "O": {
                                                                                                                                                "compDomClasses": "q-label ",
                                                                                                                                                "cType": "child"
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "cType": "slot"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "_Editor": {
                                                                                                                                "eID": "EdtrComp_12"
                                                                                                                            },
                                                                                                                            "O": {
                                                                                                                                "cType": "slot",
                                                                                                                                "compDomClasses": "v-chip theme--light v-size--default red lighten-3"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "cType": "scopedSlot"
                                                                                                                }
                                                                                                            },
                                                                                                            "_Editor": {
                                                                                                                "eID": "EdtrComp_4"
                                                                                                            },
                                                                                                            "O": {
                                                                                                                "cType": "child",
                                                                                                                "compDomClasses": "v-data-table v-data-table--has-bottom theme--light newDropBorder"
                                                                                                            },
                                                                                                            "S": {
                                                                                                                "xs-xl": {
                                                                                                                    "marginTop": "16px"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "cType": "slot"
                                                                                                }
                                                                                            },
                                                                                            "E": {},
                                                                                            "P": {
                                                                                                "ID": {
                                                                                                    "H": "EdtrComp_106",
                                                                                                    "T": "prop"
                                                                                                }
                                                                                            },
                                                                                            "_Editor": {
                                                                                                "eID": "EdtrComp_106"
                                                                                            },
                                                                                            "O": {
                                                                                                "cType": "slot",
                                                                                                "compDomClasses": "col newDropBorder"
                                                                                            },
                                                                                            "S": {
                                                                                                "xs-xl": {
                                                                                                    "paddingTop": "px",
                                                                                                    "paddingLeft": "px",
                                                                                                    "paddingBottom": "px",
                                                                                                    "paddingRight": "px"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "cType": "slot"
                                                                                }
                                                                            },
                                                                            "_Editor": {
                                                                                "eID": "EdtrComp_95"
                                                                            },
                                                                            "O": {
                                                                                "cType": "slot",
                                                                                "compDomClasses": "row no-gutters newDropBorder"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "cType": "slot"
                                                                }
                                                            },
                                                            "_Editor": {
                                                                "eID": "EdtrComp_152"
                                                            },
                                                            "S": {
                                                                "xs-xl": {
                                                                    "marginLeft": "",
                                                                    "marginRight": "",
                                                                    "marginBottom": "",
                                                                    "marginTop": "",
                                                                    "paddingTop": "12px",
                                                                    "paddingBottom": "12px",
                                                                    "paddingLeft": "12px",
                                                                    "paddingRight": "12px",
                                                                    "width": "",
                                                                    "height": "",
                                                                    "unlink": "false"
                                                                },
                                                                "backgroundColor": "#ffffff",
                                                                "boxShadow": "",
                                                                "boxSizing": "",
                                                                "borderTopStyle": "",
                                                                "borderRightStyle": "",
                                                                "borderBottomStyle": "",
                                                                "borderLeftStyle": "",
                                                                "borderTopLeftRadius": "",
                                                                "borderTopRightRadius": "",
                                                                "borderBottomLeftRadius": "",
                                                                "borderBottomRightRadius": "",
                                                                "borderTopWidth": "",
                                                                "borderRightWidth": "",
                                                                "borderBottomWidth": "",
                                                                "borderLeftWidth": "",
                                                                "defaultBorderColor": "",
                                                                "sides": ""
                                                            },
                                                            "O": {
                                                                "cType": "slot",
                                                                "compDomClasses": "v-card v-sheet theme--light white newDropBorder"
                                                            }
                                                        }
                                                    ],
                                                    "cType": "slot"
                                                }
                                            },
                                            "E": {},
                                            "P": {
                                                "ID": {
                                                    "H": "EdtrComp_151",
                                                    "T": "prop"
                                                }
                                            },
                                            "_Editor": {
                                                "eID": "EdtrComp_151"
                                            },
                                            "O": {
                                                "cType": "slot",
                                                "compDomClasses": "col newDropBorder"
                                            },
                                            "S": {
                                                "xs-xl": {
                                                    "col": "",
                                                    "flexDirection": "column",
                                                    "alignItems": "",
                                                    "justifyContent": "",
                                                    "marginLeft": "",
                                                    "marginRight": "",
                                                    "marginBottom": "",
                                                    "marginTop": "",
                                                    "paddingTop": "",
                                                    "paddingBottom": "",
                                                    "paddingLeft": "",
                                                    "paddingRight": ""
                                                },
                                                "backgroundColor": "",
                                                "boxShadow": "",
                                                "boxSizing": "",
                                                "borderTopStyle": "",
                                                "borderRightStyle": "",
                                                "borderBottomStyle": "",
                                                "borderLeftStyle": "",
                                                "borderTopLeftRadius": "",
                                                "borderTopRightRadius": "",
                                                "borderBottomLeftRadius": "",
                                                "borderBottomRightRadius": "",
                                                "borderTopWidth": "",
                                                "borderRightWidth": "",
                                                "borderBottomWidth": "",
                                                "borderLeftWidth": "",
                                                "defaultBorderColor": "",
                                                "sides": ""
                                            }
                                        }
                                    ],
                                    "cType": "slot"
                                }
                            },
                            "_Editor": {
                                "eID": "EdtrComp_150"
                            },
                            "S": {
                                "xs-xl": {
                                    "marginLeft": "",
                                    "marginRight": "",
                                    "marginBottom": "",
                                    "marginTop": "36px",
                                    "paddingTop": "",
                                    "paddingBottom": "",
                                    "paddingLeft": "",
                                    "paddingRight": "",
                                    "width": "",
                                    "height": "",
                                    "unlink": "false"
                                },
                                "backgroundColor": "",
                                "boxShadow": "",
                                "boxSizing": "",
                                "borderTopStyle": "",
                                "borderRightStyle": "",
                                "borderBottomStyle": "",
                                "borderLeftStyle": "",
                                "borderTopLeftRadius": "",
                                "borderTopRightRadius": "",
                                "borderBottomLeftRadius": "",
                                "borderBottomRightRadius": "",
                                "borderTopWidth": "",
                                "borderRightWidth": "",
                                "borderBottomWidth": "",
                                "borderLeftWidth": "",
                                "defaultBorderColor": "",
                                "sides": ""
                            },
                            "O": {
                                "cType": "slot",
                                "compDomClasses": "row no-gutters newDropBorder"
                            }
                        }
                    ],
                    "cType": "slot"
                }
            },
            "_Editor": {
                "eID": "EdtrComp_52"
            },
            "S": {
                "xs-xl": {
                    "marginLeft": "",
                    "marginRight": "",
                    "marginBottom": "",
                    "marginTop": "",
                    "paddingTop": "",
                    "paddingBottom": "",
                    "paddingLeft": "",
                    "paddingRight": "",
                    "width": "",
                    "height": "",
                    "unlink": "false"
                },
                "backgroundColor": "",
                "boxShadow": "",
                "boxSizing": "",
                "borderTopStyle": "",
                "borderRightStyle": "",
                "borderBottomStyle": "",
                "borderLeftStyle": "",
                "borderTopLeftRadius": "",
                "borderTopRightRadius": "",
                "borderBottomLeftRadius": "",
                "borderBottomRightRadius": "",
                "borderTopWidth": "",
                "borderRightWidth": "",
                "borderBottomWidth": "",
                "borderLeftWidth": "",
                "defaultBorderColor": "",
                "sides": ""
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "container newDropBorder"
            }
        }
    ],
    "lrids": {
        "tr-TR": {
            "saved": "'Kaydedildi'",
            "updated": "'Güncellendi'",
            "deleted": "'Silindi'",
            "showList": "'Listeyi Gör'",
            "status": "'İşlem Statüleri:'",
            "dataType": "'Veri Tipi'",
            "currentData": "'Güncel Veri'",
            "oldData": "'Eski Veri'",
            "updatedRecords": "'Güncellenen Veriler'",
            "hideList": "'Listeyi Gizle'",
            "noData": "'Veri Bulunamadı'",
            "noResult": "'Sonuç bulunamadı'",
            "itemsPerPage": "'Sayfa Satır Sayısı'",
            "none": "'Değişmedi'"
        },
        "en-US": {
            "saved": "'Saved'",
            "updated": "'Updated'",
            "deleted": "'Deleted'",
            "showList": "'Show List'",
            "status": "'Process Status:'",
            "dataType": "'Data Type'",
            "currentData": "'Current Data'",
            "oldData": "'Old Data'",
            "updatedRecords": "'Updated Records'",
            "hideList": "'Hide List'",
            "noData": "'No Data Available'",
            "noResult": "'No result available'",
            "itemsPerPage": "'Rows Per Page'",
            "none": "'Unchanged'"
        }
    },
    "clrids": {
        "tr-TR": {
            "saved": "╬'Kaydedildi'╩╩",
            "updated": "╬'Güncellendi'╩╩",
            "deleted": "╬'Silindi'╩╩",
            "showList": "╬'Listeyi Gör'╩╩",
            "status": "╬'İşlem Statüleri:'╩╩",
            "dataType": "╬'Veri Tipi'╩╩",
            "currentData": "╬'Güncel Veri'╩╩",
            "oldData": "╬'Eski Veri'╩╩",
            "updatedRecords": "╬'Güncellenen Veriler'╩╩",
            "hideList": "╬'Listeyi Gizle'╩╩",
            "noData": "╬'Veri Bulunamadı'╩╩",
            "noResult": "╬'Sonuç bulunamadı'╩╩",
            "itemsPerPage": "╬'Sayfa Satır Sayısı'╩╩",
            "none": "╬'Değişmedi'╩╩"
        },
        "en-US": {
            "saved": "╬'Saved'╩╩",
            "updated": "╬'Updated'╩╩",
            "deleted": "╬'Deleted'╩╩",
            "showList": "╬'Show List'╩╩",
            "status": "╬'Process Status:'╩╩",
            "dataType": "╬'Data Type'╩╩",
            "currentData": "╬'Current Data'╩╩",
            "oldData": "╬'Old Data'╩╩",
            "updatedRecords": "╬'Updated Records'╩╩",
            "hideList": "╬'Hide List'╩╩",
            "noData": "╬'No Data Available'╩╩",
            "noResult": "╬'No result available'╩╩",
            "itemsPerPage": "╬'Rows Per Page'╩╩",
            "none": "╬'Unchanged'╩╩"
        }
    },
    "opt": {
        "V": 1.1
    }
};
exports.default = pjson;


/***/ }),

/***/ "../../common/qshell/src/customComponents/QQRCode.ts":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/customComponents/QQRCode.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pjson = {
    "pJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_1",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "['size', 'content', 'level']",
                    "T": "prop"
                }
            },
            "E": {
                "PostRender": {
                    "H": "let imagesize=quick.parent.props?.size ? Number(quick.parent.props?.size) : 0;\r\nlet qrString=quick.parent.props?.content ? String(quick.parent.props?.content) : '';\r\n\r\nnamespace qrcodegen {\r\n\t\r\n\ttype bit  = number;\r\n\ttype byte = number;\r\n\ttype int  = number;\r\n\r\n\t export class QrCode {\r\n\r\n\t\tpublic static encodeText(text: string, ecl: QrCode.Ecc): QrCode {\r\n\t\t\tconst segs: Array<QrSegment> = qrcodegen.QrSegment.makeSegments(text);\r\n\t\t\treturn QrCode.encodeSegments(segs, ecl);\r\n\t\t}\r\n\r\n\t\tpublic static encodeBinary(data: Readonly<Array<byte>>, ecl: QrCode.Ecc): QrCode {\r\n\t\t\tconst seg: QrSegment = qrcodegen.QrSegment.makeBytes(data);\r\n\t\t\treturn QrCode.encodeSegments([seg], ecl);\r\n\t\t}\r\n\r\n\t\tpublic static encodeSegments(segs: Readonly<Array<QrSegment>>, ecl: QrCode.Ecc,\r\n\t\t\t\tminVersion: int = 1, maxVersion: int = 40,\r\n\t\t\t\tmask: int = -1, boostEcl: boolean = true): QrCode {\r\n\t\t\t\r\n\t\t\tif (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION)\r\n\t\t\t\t\t|| mask < -1 || mask > 7)\r\n\t\t\t\tthrow \"Invalid value\";\r\n\t\t\t\r\n\t\t\t// Find the minimal version number to use\r\n\t\t\tlet version: int;\r\n\t\t\tlet dataUsedBits: int;\r\n\t\t\tfor (version = minVersion; ; version++) {\r\n\t\t\t\tconst dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8;  // Number of data bits available\r\n\t\t\t\tconst usedBits: number = QrSegment.getTotalBits(segs, version);\r\n\t\t\t\tif (usedBits <= dataCapacityBits) {\r\n\t\t\t\t\tdataUsedBits = usedBits;\r\n\t\t\t\t\tbreak;  // This version number is found to be suitable\r\n\t\t\t\t}\r\n\t\t\t\tif (version >= maxVersion)  // All versions in the range could not fit the given data\r\n\t\t\t\t\tthrow \"Data too long\";\r\n\t\t\t}\r\n\r\n\t\t\t// Increase the error correction level while the data still fits in the current version number\r\n\t\t\tfor (const newEcl of [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]) {  // From low to high\r\n\t\t\t\tif (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8)\r\n\t\t\t\t\tecl = newEcl;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Concatenate all segments to create the data bit string\r\n\t\t\tlet bb: Array<bit> = []\r\n\t\t\tfor (const seg of segs) {\r\n\t\t\t\tappendBits(seg.mode.modeBits, 4, bb);\r\n\t\t\t\tappendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\r\n\t\t\t\tfor (const b of seg.getData())\r\n\t\t\t\t\tbb.push(b);\r\n\t\t\t}\r\n\t\t\tassert(bb.length == dataUsedBits);\r\n\t\t\t\r\n\t\t\t// Add terminator and pad up to a byte if applicable\r\n\t\t\tconst dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8;\r\n\t\t\tassert(bb.length <= dataCapacityBits);\r\n\t\t\tappendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\r\n\t\t\tappendBits(0, (8 - bb.length % 8) % 8, bb);\r\n\t\t\tassert(bb.length % 8 == 0);\r\n\t\t\t\r\n\t\t\t// Pad with alternating bytes until data capacity is reached\r\n\t\t\tfor (let padByte = 0xEC; bb.length < dataCapacityBits; padByte ^= 0xEC ^ 0x11)\r\n\t\t\t\tappendBits(padByte, 8, bb);\r\n\t\t\t\r\n\t\t\t// Pack bits into bytes in big endian\r\n\t\t\tlet dataCodewords: Array<byte> = [];\r\n\t\t\twhile (dataCodewords.length * 8 < bb.length)\r\n\t\t\t\tdataCodewords.push(0);\r\n\t\t\tbb.forEach((b: bit, i: int) =>\r\n\t\t\t\tdataCodewords[i >>> 3] |= b << (7 - (i & 7)));\r\n\t\t\t\r\n\t\t\t// Create the QR Code object\r\n\t\t\treturn new QrCode(version, ecl, dataCodewords, mask);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/*-- Fields --*/\r\n\t\t\r\n\t\t// The width and height of this QR Code, measured in modules, between\r\n\t\t// 21 and 177 (inclusive). This is equal to version * 4 + 17.\r\n\t\tpublic readonly size: int;\r\n\t\t\r\n\t\t// The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\r\n\t\t// Even if a QR Code is created with automatic masking requested (mask = -1),\r\n\t\t// the resulting object still has a mask value between 0 and 7.\r\n\t\tpublic readonly mask: int;\r\n\t\t\r\n\t\t// The modules of this QR Code (false = light, true = dark).\r\n\t\t// Immutable after constructor finishes. Accessed through getModule().\r\n\t\tprivate readonly modules   : Array<Array<boolean>> = [];\r\n\t\t\r\n\t\t// Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\r\n\t\tprivate readonly isFunction: Array<Array<boolean>> = [];\r\n\t\t\r\n\t\t\r\n\t\t/*-- Constructor (low level) and fields --*/\r\n\t\t\r\n\t\t// Creates a new QR Code with the given version number,\r\n\t\t// error correction level, data codeword bytes, and mask number.\r\n\t\t// This is a low-level API that most users should not use directly.\r\n\t\t// A mid-level API is the encodeSegments() function.\r\n\t\tpublic constructor(\r\n\t\t\t\t// The version number of this QR Code, which is between 1 and 40 (inclusive).\r\n\t\t\t\t// This determines the size of this barcode.\r\n\t\t\t\tpublic readonly version: int,\r\n\t\t\t\t\r\n\t\t\t\t// The error correction level used in this QR Code.\r\n\t\t\t\tpublic readonly errorCorrectionLevel: QrCode.Ecc,\r\n\t\t\t\t\r\n\t\t\t\tdataCodewords: Readonly<Array<byte>>,\r\n\t\t\t\t\r\n\t\t\t\tmsk: int) {\r\n\t\t\t\r\n\t\t\t// Check scalar arguments\r\n\t\t\tif (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION)\r\n\t\t\t\tthrow \"Version value out of range\";\r\n\t\t\tif (msk < -1 || msk > 7)\r\n\t\t\t\tthrow \"Mask value out of range\";\r\n\t\t\tthis.size = version * 4 + 17;\r\n\t\t\t\r\n\t\t\t// Initialize both grids to be size*size arrays of Boolean false\r\n\t\t\tlet row: Array<boolean> = [];\r\n\t\t\tfor (let i = 0; i < this.size; i++)\r\n\t\t\t\trow.push(false);\r\n\t\t\tfor (let i = 0; i < this.size; i++) {\r\n\t\t\t\tthis.modules   .push(row.slice());  // Initially all light\r\n\t\t\t\tthis.isFunction.push(row.slice());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Compute ECC, draw modules\r\n\t\t\tthis.drawFunctionPatterns();\r\n\t\t\tconst allCodewords: Array<byte> = this.addEccAndInterleave(dataCodewords);\r\n\t\t\tthis.drawCodewords(allCodewords);\r\n\t\t\t\r\n\t\t\t// Do masking\r\n\t\t\tif (msk == -1) {  // Automatically choose best mask\r\n\t\t\t\tlet minPenalty: int = 1000000000;\r\n\t\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\t\tthis.applyMask(i);\r\n\t\t\t\t\tthis.drawFormatBits(i);\r\n\t\t\t\t\tconst penalty: int = this.getPenaltyScore();\r\n\t\t\t\t\tif (penalty < minPenalty) {\r\n\t\t\t\t\t\tmsk = i;\r\n\t\t\t\t\t\tminPenalty = penalty;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.applyMask(i);  // Undoes the mask due to XOR\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tassert(0 <= msk && msk <= 7);\r\n\t\t\tthis.mask = msk;\r\n\t\t\tthis.applyMask(msk);  // Apply the final choice of mask\r\n\t\t\tthis.drawFormatBits(msk);  // Overwrite old format bits\r\n\t\t\t\r\n\t\t\tthis.isFunction = [];\r\n\t\t}\r\n\r\n\t\tpublic getModule(x: int, y: int): boolean {\r\n\t\t\treturn 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\r\n\t\t}\r\n\r\n\t\tprivate drawFunctionPatterns(): void {\r\n\t\t\t// Draw horizontal and vertical timing patterns\r\n\t\t\tfor (let i = 0; i < this.size; i++) {\r\n\t\t\t\tthis.setFunctionModule(6, i, i % 2 == 0);\r\n\t\t\t\tthis.setFunctionModule(i, 6, i % 2 == 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\r\n\t\t\tthis.drawFinderPattern(3, 3);\r\n\t\t\tthis.drawFinderPattern(this.size - 4, 3);\r\n\t\t\tthis.drawFinderPattern(3, this.size - 4);\r\n\t\t\t\r\n\t\t\t// Draw numerous alignment patterns\r\n\t\t\tconst alignPatPos: Array<int> = this.getAlignmentPatternPositions();\r\n\t\t\tconst numAlign: int = alignPatPos.length;\r\n\t\t\tfor (let i = 0; i < numAlign; i++) {\r\n\t\t\t\tfor (let j = 0; j < numAlign; j++) {\r\n\t\t\t\t\t// Don't draw on the three finder corners\r\n\t\t\t\t\tif (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\r\n\t\t\t\t\t\tthis.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Draw configuration data\r\n\t\t\tthis.drawFormatBits(0);  // Dummy mask value; overwritten later in the constructor\r\n\t\t\tthis.drawVersion();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Draws two copies of the format bits (with its own error correction code)\r\n\t\t// based on the given mask and this object's error correction level field.\r\n\t\tprivate drawFormatBits(mask: int): void {\r\n\t\t\t// Calculate error correction code and pack bits\r\n\t\t\tconst data: int = this.errorCorrectionLevel.formatBits << 3 | mask;  // errCorrLvl is uint2, mask is uint3\r\n\t\t\tlet rem: int = data;\r\n\t\t\tfor (let i = 0; i < 10; i++)\r\n\t\t\t\trem = (rem << 1) ^ ((rem >>> 9) * 0x537);\r\n\t\t\tconst bits = (data << 10 | rem) ^ 0x5412;  // uint15\r\n\t\t\tassert(bits >>> 15 == 0);\r\n\t\t\t\r\n\t\t\t// Draw first copy\r\n\t\t\tfor (let i = 0; i <= 5; i++)\r\n\t\t\t\tthis.setFunctionModule(8, i, getBit(bits, i));\r\n\t\t\tthis.setFunctionModule(8, 7, getBit(bits, 6));\r\n\t\t\tthis.setFunctionModule(8, 8, getBit(bits, 7));\r\n\t\t\tthis.setFunctionModule(7, 8, getBit(bits, 8));\r\n\t\t\tfor (let i = 9; i < 15; i++)\r\n\t\t\t\tthis.setFunctionModule(14 - i, 8, getBit(bits, i));\r\n\t\t\t\r\n\t\t\t// Draw second copy\r\n\t\t\tfor (let i = 0; i < 8; i++)\r\n\t\t\t\tthis.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\r\n\t\t\tfor (let i = 8; i < 15; i++)\r\n\t\t\t\tthis.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\r\n\t\t\tthis.setFunctionModule(8, this.size - 8, true);  // Always dark\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Draws two copies of the version bits (with its own error correction code),\r\n\t\t// based on this object's version field, iff 7 <= version <= 40.\r\n\t\tprivate drawVersion(): void {\r\n\t\t\tif (this.version < 7)\r\n\t\t\t\treturn;\r\n\t\t\t\r\n\t\t\t// Calculate error correction code and pack bits\r\n\t\t\tlet rem: int = this.version;  // version is uint6, in the range [7, 40]\r\n\t\t\tfor (let i = 0; i < 12; i++)\r\n\t\t\t\trem = (rem << 1) ^ ((rem >>> 11) * 0x1F25);\r\n\t\t\tconst bits: int = this.version << 12 | rem;  // uint18\r\n\t\t\tassert(bits >>> 18 == 0);\r\n\t\t\t\r\n\t\t\t// Draw two copies\r\n\t\t\tfor (let i = 0; i < 18; i++) {\r\n\t\t\t\tconst color: boolean = getBit(bits, i);\r\n\t\t\t\tconst a: int = this.size - 11 + i % 3;\r\n\t\t\t\tconst b: int = Math.floor(i / 3);\r\n\t\t\t\tthis.setFunctionModule(a, b, color);\r\n\t\t\t\tthis.setFunctionModule(b, a, color);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Draws a 9*9 finder pattern including the border separator,\r\n\t\t// with the center module at (x, y). Modules can be out of bounds.\r\n\t\tprivate drawFinderPattern(x: int, y: int): void {\r\n\t\t\tfor (let dy = -4; dy <= 4; dy++) {\r\n\t\t\t\tfor (let dx = -4; dx <= 4; dx++) {\r\n\t\t\t\t\tconst dist: int = Math.max(Math.abs(dx), Math.abs(dy));  // Chebyshev/infinity norm\r\n\t\t\t\t\tconst xx: int = x + dx;\r\n\t\t\t\t\tconst yy: int = y + dy;\r\n\t\t\t\t\tif (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\r\n\t\t\t\t\t\tthis.setFunctionModule(xx, yy, dist != 2 && dist != 4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Draws a 5*5 alignment pattern, with the center module\r\n\t\t// at (x, y). All modules must be in bounds.\r\n\t\tprivate drawAlignmentPattern(x: int, y: int): void {\r\n\t\t\tfor (let dy = -2; dy <= 2; dy++) {\r\n\t\t\t\tfor (let dx = -2; dx <= 2; dx++)\r\n\t\t\t\t\tthis.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Sets the color of a module and marks it as a function module.\r\n\t\t// Only used by the constructor. Coordinates must be in bounds.\r\n\t\tprivate setFunctionModule(x: int, y: int, isDark: boolean): void {\r\n\t\t\tthis.modules[y][x] = isDark;\r\n\t\t\tthis.isFunction[y][x] = true;\r\n\t\t}\r\n\r\n\t\tprivate addEccAndInterleave(data: Readonly<Array<byte>>): Array<byte> {\r\n\t\t\tconst ver: int = this.version;\r\n\t\t\tconst ecl: QrCode.Ecc = this.errorCorrectionLevel;\r\n\t\t\tif (data.length != QrCode.getNumDataCodewords(ver, ecl))\r\n\t\t\t\tthrow \"Invalid argument\";\r\n\t\t\t\r\n\t\t\t// Calculate parameter numbers\r\n\t\t\tconst numBlocks: int = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n\t\t\tconst blockEccLen: int = QrCode.ECC_CODEWORDS_PER_BLOCK  [ecl.ordinal][ver];\r\n\t\t\tconst rawCodewords: int = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\r\n\t\t\tconst numShortBlocks: int = numBlocks - rawCodewords % numBlocks;\r\n\t\t\tconst shortBlockLen: int = Math.floor(rawCodewords / numBlocks);\r\n\t\t\t\r\n\t\t\t// Split data into blocks and append ECC to each block\r\n\t\t\tlet blocks: Array<Array<byte>> = [];\r\n\t\t\tconst rsDiv: Array<byte> = QrCode.reedSolomonComputeDivisor(blockEccLen);\r\n\t\t\tfor (let i = 0, k = 0; i < numBlocks; i++) {\r\n\t\t\t\tlet dat: Array<byte> = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\r\n\t\t\t\tk += dat.length;\r\n\t\t\t\tconst ecc: Array<byte> = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\r\n\t\t\t\tif (i < numShortBlocks)\r\n\t\t\t\t\tdat.push(0);\r\n\t\t\t\tblocks.push(dat.concat(ecc));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Interleave (not concatenate) the bytes from every block into a single sequence\r\n\t\t\tlet result: Array<byte> = [];\r\n\t\t\tfor (let i = 0; i < blocks[0].length; i++) {\r\n\t\t\t\tblocks.forEach((block, j) => {\r\n\t\t\t\t\t// Skip the padding byte in short blocks\r\n\t\t\t\t\tif (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\r\n\t\t\t\t\t\tresult.push(block[i]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tassert(result.length == rawCodewords);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\r\n\t\t// data area of this QR Code. Function modules need to be marked off before this is called.\r\n\t\tprivate drawCodewords(data: Readonly<Array<byte>>): void {\r\n\t\t\tif (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8))\r\n\t\t\t\tthrow \"Invalid argument\";\r\n\t\t\tlet i: int = 0;  // Bit index into the data\r\n\t\t\t// Do the funny zigzag scan\r\n\t\t\tfor (let right = this.size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair\r\n\t\t\t\tif (right == 6)\r\n\t\t\t\t\tright = 5;\r\n\t\t\t\tfor (let vert = 0; vert < this.size; vert++) {  // Vertical counter\r\n\t\t\t\t\tfor (let j = 0; j < 2; j++) {\r\n\t\t\t\t\t\tconst x: int = right - j;  // Actual x coordinate\r\n\t\t\t\t\t\tconst upward: boolean = ((right + 1) & 2) == 0;\r\n\t\t\t\t\t\tconst y: int = upward ? this.size - 1 - vert : vert;  // Actual y coordinate\r\n\t\t\t\t\t\tif (!this.isFunction[y][x] && i < data.length * 8) {\r\n\t\t\t\t\t\t\tthis.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// If this QR Code has any remainder bits (0 to 7), they were assigned as\r\n\t\t\t\t\t\t// 0/false/light by the constructor and are left unchanged by this method\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tassert(i == data.length * 8);\r\n\t\t}\r\n\r\n\t\tprivate applyMask(mask: int): void {\r\n\t\t\tif (mask < 0 || mask > 7)\r\n\t\t\t\tthrow \"Mask value out of range\";\r\n\t\t\tfor (let y = 0; y < this.size; y++) {\r\n\t\t\t\tfor (let x = 0; x < this.size; x++) {\r\n\t\t\t\t\tlet invert: boolean;\r\n\t\t\t\t\tswitch (mask) {\r\n\t\t\t\t\t\tcase 0:  invert = (x + y) % 2 == 0;                                  break;\r\n\t\t\t\t\t\tcase 1:  invert = y % 2 == 0;                                        break;\r\n\t\t\t\t\t\tcase 2:  invert = x % 3 == 0;                                        break;\r\n\t\t\t\t\t\tcase 3:  invert = (x + y) % 3 == 0;                                  break;\r\n\t\t\t\t\t\tcase 4:  invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;  break;\r\n\t\t\t\t\t\tcase 5:  invert = x * y % 2 + x * y % 3 == 0;                        break;\r\n\t\t\t\t\t\tcase 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;                  break;\r\n\t\t\t\t\t\tcase 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;                break;\r\n\t\t\t\t\t\tdefault:  throw \"Unreachable\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!this.isFunction[y][x] && invert)\r\n\t\t\t\t\t\tthis.modules[y][x] = !this.modules[y][x];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Calculates and returns the penalty score based on state of this QR Code's current modules.\r\n\t\t// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\r\n\t\tprivate getPenaltyScore(): int {\r\n\t\t\tlet result: int = 0;\r\n\t\t\t\r\n\t\t\t// Adjacent modules in row having same color, and finder-like patterns\r\n\t\t\tfor (let y = 0; y < this.size; y++) {\r\n\t\t\t\tlet runColor = false;\r\n\t\t\t\tlet runX = 0;\r\n\t\t\t\tlet runHistory = [0,0,0,0,0,0,0];\r\n\t\t\t\tfor (let x = 0; x < this.size; x++) {\r\n\t\t\t\t\tif (this.modules[y][x] == runColor) {\r\n\t\t\t\t\t\trunX++;\r\n\t\t\t\t\t\tif (runX == 5)\r\n\t\t\t\t\t\t\tresult += QrCode.PENALTY_N1;\r\n\t\t\t\t\t\telse if (runX > 5)\r\n\t\t\t\t\t\t\tresult++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.finderPenaltyAddHistory(runX, runHistory);\r\n\t\t\t\t\t\tif (!runColor)\r\n\t\t\t\t\t\t\tresult += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\r\n\t\t\t\t\t\trunColor = this.modules[y][x];\r\n\t\t\t\t\t\trunX = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\r\n\t\t\t}\r\n\t\t\t// Adjacent modules in column having same color, and finder-like patterns\r\n\t\t\tfor (let x = 0; x < this.size; x++) {\r\n\t\t\t\tlet runColor = false;\r\n\t\t\t\tlet runY = 0;\r\n\t\t\t\tlet runHistory = [0,0,0,0,0,0,0];\r\n\t\t\t\tfor (let y = 0; y < this.size; y++) {\r\n\t\t\t\t\tif (this.modules[y][x] == runColor) {\r\n\t\t\t\t\t\trunY++;\r\n\t\t\t\t\t\tif (runY == 5)\r\n\t\t\t\t\t\t\tresult += QrCode.PENALTY_N1;\r\n\t\t\t\t\t\telse if (runY > 5)\r\n\t\t\t\t\t\t\tresult++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.finderPenaltyAddHistory(runY, runHistory);\r\n\t\t\t\t\t\tif (!runColor)\r\n\t\t\t\t\t\t\tresult += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\r\n\t\t\t\t\t\trunColor = this.modules[y][x];\r\n\t\t\t\t\t\trunY = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 2*2 blocks of modules having same color\r\n\t\t\tfor (let y = 0; y < this.size - 1; y++) {\r\n\t\t\t\tfor (let x = 0; x < this.size - 1; x++) {\r\n\t\t\t\t\tconst color: boolean = this.modules[y][x];\r\n\t\t\t\t\tif (  color == this.modules[y][x + 1] &&\r\n\t\t\t\t\t      color == this.modules[y + 1][x] &&\r\n\t\t\t\t\t      color == this.modules[y + 1][x + 1])\r\n\t\t\t\t\t\tresult += QrCode.PENALTY_N2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Balance of dark and light modules\r\n\t\t\tlet dark: int = 0;\r\n\t\t\tfor (const row of this.modules)\r\n\t\t\t\tdark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\r\n\t\t\tconst total: int = this.size * this.size;  // Note that size is odd, so dark/total != 1/2\r\n\t\t\t// Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\r\n\t\t\tconst k: int = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\r\n\t\t\tassert(0 <= k && k <= 9);\r\n\t\t\tresult += k * QrCode.PENALTY_N4;\r\n\t\t\tassert(0 <= result && result <= 2568888);  // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tprivate getAlignmentPatternPositions(): Array<int> {\r\n\t\t\tif (this.version == 1)\r\n\t\t\t\treturn [];\r\n\t\t\telse {\r\n\t\t\t\tconst numAlign: int = Math.floor(this.version / 7) + 2;\r\n\t\t\t\tconst step: int = (this.version == 32) ? 26 :\r\n\t\t\t\t\tMath.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\r\n\t\t\t\tlet result: Array<int> = [6];\r\n\t\t\t\tfor (let pos = this.size - 7; result.length < numAlign; pos -= step)\r\n\t\t\t\t\tresult.splice(1, 0, pos);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static getNumRawDataModules(ver: int): int {\r\n\t\t\tif (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION)\r\n\t\t\t\tthrow \"Version number out of range\";\r\n\t\t\tlet result: int = (16 * ver + 128) * ver + 64;\r\n\t\t\tif (ver >= 2) {\r\n\t\t\t\tconst numAlign: int = Math.floor(ver / 7) + 2;\r\n\t\t\t\tresult -= (25 * numAlign - 10) * numAlign - 55;\r\n\t\t\t\tif (ver >= 7)\r\n\t\t\t\t\tresult -= 36;\r\n\t\t\t}\r\n\t\t\tassert(208 <= result && result <= 29648);\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tprivate static getNumDataCodewords(ver: int, ecl: QrCode.Ecc): int {\r\n\t\t\treturn Math.floor(QrCode.getNumRawDataModules(ver) / 8) -\r\n\t\t\t\tQrCode.ECC_CODEWORDS_PER_BLOCK    [ecl.ordinal][ver] *\r\n\t\t\t\tQrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\r\n\t\t// implemented as a lookup table over all possible parameter values, instead of as an algorithm.\r\n\t\tprivate static reedSolomonComputeDivisor(degree: int): Array<byte> {\r\n\t\t\tif (degree < 1 || degree > 255)\r\n\t\t\t\tthrow \"Degree out of range\";\r\n\t\t\t// Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\r\n\t\t\t// For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\r\n\t\t\tlet result: Array<byte> = [];\r\n\t\t\tfor (let i = 0; i < degree - 1; i++)\r\n\t\t\t\tresult.push(0);\r\n\t\t\tresult.push(1);  // Start off with the monomial x^0\r\n\r\n\t\t\tlet root = 1;\r\n\t\t\tfor (let i = 0; i < degree; i++) {\r\n\t\t\t\t// Multiply the current product by (x - r^i)\r\n\t\t\t\tfor (let j = 0; j < result.length; j++) {\r\n\t\t\t\t\tresult[j] = QrCode.reedSolomonMultiply(result[j], root);\r\n\t\t\t\t\tif (j + 1 < result.length)\r\n\t\t\t\t\t\tresult[j] ^= result[j + 1];\r\n\t\t\t\t}\r\n\t\t\t\troot = QrCode.reedSolomonMultiply(root, 0x02);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\r\n\t\tprivate static reedSolomonComputeRemainder(data: Readonly<Array<byte>>, divisor: Readonly<Array<byte>>): Array<byte> {\r\n\t\t\tlet result: Array<byte> = divisor.map(_ => 0);\r\n\t\t\tfor (const b of data) {  // Polynomial division\r\n\t\t\t\tconst factor: byte = b ^ (result.shift() as byte);\r\n\t\t\t\tresult.push(0);\r\n\t\t\t\tdivisor.forEach((coef, i) =>\r\n\t\t\t\t\tresult[i] ^= QrCode.reedSolomonMultiply(coef, factor));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tprivate static reedSolomonMultiply(x: byte, y: byte): byte {\r\n\t\t\tif (x >>> 8 != 0 || y >>> 8 != 0)\r\n\t\t\t\tthrow \"Byte out of range\";\r\n\t\t\t// Russian peasant multiplication\r\n\t\t\tlet z: int = 0;\r\n\t\t\tfor (let i = 7; i >= 0; i--) {\r\n\t\t\t\tz = (z << 1) ^ ((z >>> 7) * 0x11D);\r\n\t\t\t\tz ^= ((y >>> i) & 1) * x;\r\n\t\t\t}\r\n\t\t\tassert(z >>> 8 == 0);\r\n\t\t\treturn z as byte;\r\n\t\t}\r\n\r\n\t\tprivate finderPenaltyCountPatterns(runHistory: Readonly<Array<int>>): int {\r\n\t\t\tconst n: int = runHistory[1];\r\n\t\t\tassert(n <= this.size * 3);\r\n\t\t\tconst core: boolean = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\r\n\t\t\treturn (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0)\r\n\t\t\t     + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\r\n\t\tprivate finderPenaltyTerminateAndCount(currentRunColor: boolean, currentRunLength: int, runHistory: Array<int>): int {\r\n\t\t\tif (currentRunColor) {  // Terminate dark run\r\n\t\t\t\tthis.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n\t\t\t\tcurrentRunLength = 0;\r\n\t\t\t}\r\n\t\t\tcurrentRunLength += this.size;  // Add light border to final run\r\n\t\t\tthis.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n\t\t\treturn this.finderPenaltyCountPatterns(runHistory);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\r\n\t\tprivate finderPenaltyAddHistory(currentRunLength: int, runHistory: Array<int>): void {\r\n\t\t\tif (runHistory[0] == 0)\r\n\t\t\t\tcurrentRunLength += this.size;  // Add light border to initial run\r\n\t\t\trunHistory.pop();\r\n\t\t\trunHistory.unshift(currentRunLength);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/*-- Constants and tables --*/\r\n\t\t\r\n\t\t// The minimum version number supported in the QR Code Model 2 standard.\r\n\t\tpublic static readonly MIN_VERSION: int =  1;\r\n\t\t// The maximum version number supported in the QR Code Model 2 standard.\r\n\t\tpublic static readonly MAX_VERSION: int = 40;\r\n\t\t\r\n\t\t// For use in getPenaltyScore(), when evaluating which mask is best.\r\n\t\tprivate static readonly PENALTY_N1: int =  3;\r\n\t\tprivate static readonly PENALTY_N2: int =  3;\r\n\t\tprivate static readonly PENALTY_N3: int = 40;\r\n\t\tprivate static readonly PENALTY_N4: int = 10;\r\n\t\t\r\n\t\tprivate static readonly ECC_CODEWORDS_PER_BLOCK: Array<Array<int>> = [\r\n\t\t\t// Version: (note that index 0 is for padding, and is set to an illegal value)\r\n\t\t\t//0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n\t\t\t[-1,  7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],  // Low\r\n\t\t\t[-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],  // Medium\r\n\t\t\t[-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],  // Quartile\r\n\t\t\t[-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],  // High\r\n\t\t];\r\n\t\t\r\n\t\tprivate static readonly NUM_ERROR_CORRECTION_BLOCKS: Array<Array<int>> = [\r\n\t\t\t// Version: (note that index 0 is for padding, and is set to an illegal value)\r\n\t\t\t//0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n\t\t\t[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4,  4,  4,  4,  4,  6,  6,  6,  6,  7,  8,  8,  9,  9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],  // Low\r\n\t\t\t[-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5,  5,  8,  9,  9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],  // Medium\r\n\t\t\t[-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8,  8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],  // Quartile\r\n\t\t\t[-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81],  // High\r\n\t\t];\r\n\t\t\r\n\t}\r\n\r\n\tfunction appendBits(val: int, len: int, bb: Array<bit>): void {\r\n\t\tif (len < 0 || len > 31 || val >>> len != 0)\r\n\t\t\tthrow \"Value out of range\";\r\n\t\tfor (let i = len - 1; i >= 0; i--)  // Append bit by bit\r\n\t\t\tbb.push((val >>> i) & 1);\r\n\t}\r\n\t\r\n\t\r\n\t// Returns true iff the i'th bit of x is set to 1.\r\n\tfunction getBit(x: int, i: int): boolean {\r\n\t\treturn ((x >>> i) & 1) != 0;\r\n\t}\r\n\t\r\n\t\r\n\t// Throws an exception if the given condition is false.\r\n\tfunction assert(cond: boolean): void {\r\n\t\tif (!cond)\r\n\t\t\tthrow \"Assertion error\";\r\n\t}\r\n\r\n\texport class QrSegment {\r\n\r\n\t\tpublic static makeBytes(data: Readonly<Array<byte>>): QrSegment {\r\n\t\t\tlet bb: Array<bit> = []\r\n\t\t\tfor (const b of data)\r\n\t\t\t\tappendBits(b, 8, bb);\r\n\t\t\treturn new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Returns a segment representing the given string of decimal digits encoded in numeric mode.\r\n\t\tpublic static makeNumeric(digits: string): QrSegment {\r\n\t\t\tif (!QrSegment.isNumeric(digits))\r\n\t\t\t\tthrow \"String contains non-numeric characters\";\r\n\t\t\tlet bb: Array<bit> = []\r\n\t\t\tfor (let i = 0; i < digits.length; ) {  // Consume up to 3 digits per iteration\r\n\t\t\t\tconst n: int = Math.min(digits.length - i, 3);\r\n\t\t\t\tappendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\r\n\t\t\t\ti += n;\r\n\t\t\t}\r\n\t\t\treturn new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\r\n\t\t}\r\n\r\n\t\tpublic static makeAlphanumeric(text: string): QrSegment {\r\n\t\t\tif (!QrSegment.isAlphanumeric(text))\r\n\t\t\t\tthrow \"String contains unencodable characters in alphanumeric mode\";\r\n\t\t\tlet bb: Array<bit> = []\r\n\t\t\tlet i: int;\r\n\t\t\tfor (i = 0; i + 2 <= text.length; i += 2) {  // Process groups of 2\r\n\t\t\t\tlet temp: int = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\r\n\t\t\t\ttemp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\r\n\t\t\t\tappendBits(temp, 11, bb);\r\n\t\t\t}\r\n\t\t\tif (i < text.length)  // 1 character remaining\r\n\t\t\t\tappendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\r\n\t\t\treturn new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Returns a new mutable list of zero or more segments to represent the given Unicode text string.\r\n\t\t// The result may use various segment modes and switch modes to optimize the length of the bit stream.\r\n\t\tpublic static makeSegments(text: string): Array<QrSegment> {\r\n\t\t\t// Select the most efficient segment encoding automatically\r\n\t\t\tif (text == \"\")\r\n\t\t\t\treturn [];\r\n\t\t\telse if (QrSegment.isNumeric(text))\r\n\t\t\t\treturn [QrSegment.makeNumeric(text)];\r\n\t\t\telse if (QrSegment.isAlphanumeric(text))\r\n\t\t\t\treturn [QrSegment.makeAlphanumeric(text)];\r\n\t\t\telse\r\n\t\t\t\treturn [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Returns a segment representing an Extended Channel Interpretation\r\n\t\t// (ECI) designator with the given assignment value.\r\n\t\tpublic static makeEci(assignVal: int): QrSegment {\r\n\t\t\tlet bb: Array<bit> = []\r\n\t\t\tif (assignVal < 0)\r\n\t\t\t\tthrow \"ECI assignment value out of range\";\r\n\t\t\telse if (assignVal < (1 << 7))\r\n\t\t\t\tappendBits(assignVal, 8, bb);\r\n\t\t\telse if (assignVal < (1 << 14)) {\r\n\t\t\t\tappendBits(0b10, 2, bb);\r\n\t\t\t\tappendBits(assignVal, 14, bb);\r\n\t\t\t} else if (assignVal < 1000000) {\r\n\t\t\t\tappendBits(0b110, 3, bb);\r\n\t\t\t\tappendBits(assignVal, 21, bb);\r\n\t\t\t} else\r\n\t\t\t\tthrow \"ECI assignment value out of range\";\r\n\t\t\treturn new QrSegment(QrSegment.Mode.ECI, 0, bb);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Tests whether the given string can be encoded as a segment in numeric mode.\r\n\t\t// A string is encodable iff each character is in the range 0 to 9.\r\n\t\tpublic static isNumeric(text: string): boolean {\r\n\t\t\treturn QrSegment.NUMERIC_REGEX.test(text);\r\n\t\t}\r\n\r\n\t\tpublic static isAlphanumeric(text: string): boolean {\r\n\t\t\treturn QrSegment.ALPHANUMERIC_REGEX.test(text);\r\n\t\t}\r\n\r\n\t\tpublic constructor(\r\n\t\t\t\t// The mode indicator of this segment.\r\n\t\t\t\tpublic readonly mode: QrSegment.Mode,\r\n\r\n\t\t\t\tpublic readonly numChars: int,\r\n\t\t\t\t\r\n\t\t\t\t// The data bits of this segment. Accessed through getData().\r\n\t\t\t\tprivate readonly bitData: Array<bit>) {\r\n\t\t\t\r\n\t\t\tif (numChars < 0)\r\n\t\t\t\tthrow \"Invalid argument\";\r\n\t\t\tthis.bitData = bitData.slice();  // Make defensive copy\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/*-- Methods --*/\r\n\t\t\r\n\t\t// Returns a new copy of the data bits of this segment.\r\n\t\tpublic getData(): Array<bit> {\r\n\t\t\treturn this.bitData.slice();  // Make defensive copy\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// (Package-private) Calculates and returns the number of bits needed to encode the given segments at\r\n\t\t// the given version. The result is infinity if a segment has too many characters to fit its length field.\r\n\t\tpublic static getTotalBits(segs: Readonly<Array<QrSegment>>, version: int): number {\r\n\t\t\tlet result: number = 0;\r\n\t\t\tfor (const seg of segs) {\r\n\t\t\t\tconst ccbits: int = seg.mode.numCharCountBits(version);\r\n\t\t\t\tif (seg.numChars >= (1 << ccbits))\r\n\t\t\t\t\treturn Infinity;  // The segment's length doesn't fit the field's bit width\r\n\t\t\t\tresult += 4 + ccbits + seg.bitData.length;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Returns a new array of bytes representing the given string encoded in UTF-8.\r\n\t\tprivate static toUtf8ByteArray(str: string): Array<byte> {\r\n\t\t\tstr = encodeURI(str);\r\n\t\t\tlet result: Array<byte> = [];\r\n\t\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\t\tif (str.charAt(i) != \"%\")\r\n\t\t\t\t\tresult.push(str.charCodeAt(i));\r\n\t\t\t\telse {\r\n\t\t\t\t\tresult.push(parseInt(str.substr(i + 1, 2), 16));\r\n\t\t\t\t\ti += 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/*-- Constants --*/\r\n\t\t\r\n\t\t// Describes precisely all strings that are encodable in numeric mode.\r\n\t\tprivate static readonly NUMERIC_REGEX: RegExp = /^[0-9]*$/;\r\n\t\t\r\n\t\t// Describes precisely all strings that are encodable in alphanumeric mode.\r\n\t\tprivate static readonly ALPHANUMERIC_REGEX: RegExp = /^[A-Z0-9 $%*+.\\/:-]*$/;\r\n\t\t\r\n\t\t// The set of all legal characters in alphanumeric mode,\r\n\t\t// where each character value maps to the index in the string.\r\n\t\tprivate static readonly ALPHANUMERIC_CHARSET: string = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nnamespace qrcodegen.QrCode {\r\n\t\r\n\ttype int = number;\r\n\r\n\texport class Ecc {\r\n\r\n\t\tpublic static readonly LOW      = new Ecc(0, 1);  // The QR Code can tolerate about  7% erroneous codewords\r\n\t\tpublic static readonly MEDIUM   = new Ecc(1, 0);  // The QR Code can tolerate about 15% erroneous codewords\r\n\t\tpublic static readonly QUARTILE = new Ecc(2, 3);  // The QR Code can tolerate about 25% erroneous codewords\r\n\t\tpublic static readonly HIGH     = new Ecc(3, 2);  // The QR Code can tolerate about 30% erroneous codewords\r\n\r\n\t\tprivate constructor(\r\n\t\t\t// In the range 0 to 3 (unsigned 2-bit integer).\r\n\t\t\tpublic readonly ordinal: int,\r\n\t\t\t// (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\r\n\t\t\tpublic readonly formatBits: int) {}\r\n\t\t\r\n\t}\r\n}\r\n\r\nnamespace qrcodegen.QrSegment {\r\n\t\r\n\ttype int = number;\r\n\r\n\texport class Mode {\r\n\r\n\t\tpublic static readonly NUMERIC      = new Mode(0x1, [10, 12, 14]);\r\n\t\tpublic static readonly ALPHANUMERIC = new Mode(0x2, [ 9, 11, 13]);\r\n\t\tpublic static readonly BYTE         = new Mode(0x4, [ 8, 16, 16]);\r\n\t\tpublic static readonly KANJI        = new Mode(0x8, [ 8, 10, 12]);\r\n\t\tpublic static readonly ECI          = new Mode(0x7, [ 0,  0,  0]);\r\n\r\n\t\tprivate constructor(\r\n\t\t\t// The mode indicator bits, which is a uint4 value (range 0 to 15).\r\n\t\t\tpublic readonly modeBits: int,\r\n\t\t\t// Number of character count bits for three different version ranges.\r\n\t\t\tprivate readonly numBitsCharCount: [int,int,int]) {}\r\n\t\t\r\n\r\n\t\tpublic numCharCountBits(ver: int): int {\r\n\t\t\treturn this.numBitsCharCount[Math.floor((ver + 7) / 17)];\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\nfunction write(buffer, offs,a1=undefined,a2=undefined,a3=undefined,a4=undefined,a5=undefined) {\r\n\t\tlet args=[];\r\n        args.push(buffer);\r\n        args.push(offs);\r\n        if(a1)\r\n            args.push(a1);\r\n        if(a2)\r\n            args.push(a2);\r\n        if(a3)\r\n            args.push(a3);\r\n        if(a4)\r\n            args.push(a4);\r\n        if(a5)\r\n            args.push(a5);\r\n        for (var i = 2; i < args.length; i++) {\r\n\t\t\tfor (var j = 0; j < args[i].length; j++) {\r\n\t\t\t\tbuffer[offs++] = args[i].charAt(j);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction byte2(w) {\r\n\t\treturn String.fromCharCode((w >> 8) & 255, w & 255);\r\n\t}\r\n\r\n\tfunction byte4(w) {\r\n\t\treturn String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\r\n\t}\r\n\r\n\tfunction byte2lsb(w) {\r\n\t\treturn String.fromCharCode(w & 255, (w >> 8) & 255);\r\n\t}\r\n\r\n\tlet PNGlib = function(width,height,depth) {\r\n\r\n\t\tthis.width   = width;\r\n\t\tthis.height  = height;\r\n\t\tthis.depth   = depth;\r\n\r\n\t\t// pixel data and row filter identifier size\r\n\t\tthis.pix_size = height * (width + 1);\r\n\r\n\t\t// deflate header, pix_size, block headers, adler32 checksum\r\n\t\tthis.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\r\n\r\n\t\t// offsets and sizes of Png chunks\r\n\t\tthis.ihdr_offs = 0;\t\t\t\t\t\t\t\t\t// IHDR offset and size\r\n\t\tthis.ihdr_size = 4 + 4 + 13 + 4;\r\n\t\tthis.plte_offs = this.ihdr_offs + this.ihdr_size;\t// PLTE offset and size\r\n\t\tthis.plte_size = 4 + 4 + 3 * depth + 4;\r\n\t\tthis.trns_offs = this.plte_offs + this.plte_size;\t// tRNS offset and size\r\n\t\tthis.trns_size = 4 + 4 + depth + 4;\r\n\t\tthis.idat_offs = this.trns_offs + this.trns_size;\t// IDAT offset and size\r\n\t\tthis.idat_size = 4 + 4 + this.data_size + 4;\r\n\t\tthis.iend_offs = this.idat_offs + this.idat_size;\t// IEND offset and size\r\n\t\tthis.iend_size = 4 + 4 + 4;\r\n\t\tthis.buffer_size  = this.iend_offs + this.iend_size;\t// total PNG size\r\n\r\n\t\tthis.buffer  = new Array();\r\n\t\tthis.palette = new Object();\r\n\t\tthis.pindex  = 0;\r\n\r\n\t\tvar _crc32 = new Array();\r\n\r\n\t\t// initialize buffer with zero bytes\r\n\t\tfor (var i = 0; i < this.buffer_size; i++) {\r\n\t\t\tthis.buffer[i] = \"\\x00\";\r\n\t\t}\r\n\r\n\t\t// initialize non-zero elements\r\n\t\twrite(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\r\n\t\twrite(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\r\n\t\twrite(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\r\n\t\twrite(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\r\n\t\twrite(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\r\n\r\n\t\t// initialize deflate header\r\n\t\tvar header = ((8 + (7 << 4)) << 8) | (3 << 6);\r\n\t\theader+= 31 - (header % 31);\r\n\r\n\t\twrite(this.buffer, this.idat_offs + 8, byte2(header));\r\n\r\n\t\t// initialize deflate block headers\r\n\t\tfor (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\r\n\t\t\tvar size, bits;\r\n\t\t\tif (i + 0xffff < this.pix_size) {\r\n\t\t\t\tsize = 0xffff;\r\n\t\t\t\tbits = \"\\x00\";\r\n\t\t\t} else {\r\n\t\t\t\tsize = this.pix_size - (i << 16) - i;\r\n\t\t\t\tbits = \"\\x01\";\r\n\t\t\t}\r\n\t\t\twrite(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\r\n\t\t}\r\n\r\n\t\t/* Create crc32 lookup table */\r\n\t\tfor (var i = 0; i < 256; i++) {\r\n\t\t\tvar c = i;\r\n\t\t\tfor (var j = 0; j < 8; j++) {\r\n\t\t\t\tif (c & 1) {\r\n\t\t\t\t\tc = -306674912 ^ ((c >> 1) & 0x7fffffff);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tc = (c >> 1) & 0x7fffffff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t_crc32[i] = c;\r\n\t\t}\r\n\r\n\t\t// compute the index into a png for a given pixel\r\n\t\tthis.index = function(x,y) {\r\n\t\t\tvar i = y * (this.width + 1) + x + 1;\r\n\t\t\tvar j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\r\n\t\t\treturn j;\r\n\t\t}\r\n\r\n\t\t// convert a color and build up the palette\r\n\t\tthis.color = function(red, green, blue, alpha) {\r\n\r\n\t\t\talpha = alpha >= 0 ? alpha : 255;\r\n\t\t\tvar color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\r\n\r\n\t\t\tif (typeof this.palette[color] == \"undefined\") {\r\n\t\t\t\tif (this.pindex == this.depth) return \"\\x00\";\r\n\r\n\t\t\t\tvar ndx = this.plte_offs + 8 + 3 * this.pindex;\r\n\r\n\t\t\t\tthis.buffer[ndx + 0] = String.fromCharCode(red);\r\n\t\t\t\tthis.buffer[ndx + 1] = String.fromCharCode(green);\r\n\t\t\t\tthis.buffer[ndx + 2] = String.fromCharCode(blue);\r\n\t\t\t\tthis.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\r\n\r\n\t\t\t\tthis.palette[color] = String.fromCharCode(this.pindex++);\r\n\t\t\t}\r\n\t\t\treturn this.palette[color];\r\n\t\t}\r\n\r\n\t\t// output a PNG string, Base64 encoded\r\n\t\tthis.getBase64 = function() {\r\n\r\n\t\t\tvar s = this.getDump();\r\n\r\n\t\t\tvar ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\r\n\t\t\tvar l = s.length;\r\n\t\t\tvar i = 0;\r\n\t\t\tvar r = \"\";\r\n\r\n\t\t\tdo {\r\n\t\t\t\tc1 = s.charCodeAt(i);\r\n\t\t\t\te1 = c1 >> 2;\r\n\t\t\t\tc2 = s.charCodeAt(i+1);\r\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\r\n\t\t\t\tc3 = s.charCodeAt(i+2);\r\n\t\t\t\tif (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\r\n\t\t\t\tif (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\r\n\t\t\t\tr+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\r\n\t\t\t} while ((i+= 3) < l);\r\n\t\t\treturn r;\r\n\t\t}\r\n\r\n\t\t// output a PNG string\r\n\t\tthis.getDump = function() {\r\n\r\n\t\t\t// compute adler32 of output pixels + row filter bytes\r\n\t\t\tvar BASE = 65521; /* largest prime smaller than 65536 */\r\n\t\t\tvar NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\r\n\t\t\tvar s1 = 1;\r\n\t\t\tvar s2 = 0;\r\n\t\t\tvar n = NMAX;\r\n\r\n\t\t\tfor (var y = 0; y < this.height; y++) {\r\n\t\t\t\tfor (var x = -1; x < this.width; x++) {\r\n\t\t\t\t\ts1+= this.buffer[this.index(x, y)].charCodeAt(0);\r\n\t\t\t\t\ts2+= s1;\r\n\t\t\t\t\tif ((n-= 1) == 0) {\r\n\t\t\t\t\t\ts1%= BASE;\r\n\t\t\t\t\t\ts2%= BASE;\r\n\t\t\t\t\t\tn = NMAX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ts1%= BASE;\r\n\t\t\ts2%= BASE;\r\n\t\t\twrite(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\r\n\r\n\t\t\t// compute crc32 of the PNG chunks\r\n\t\t\tfunction crc32(png, offs, size) {\r\n\t\t\t\tvar crc = -1;\r\n\t\t\t\tfor (var i = 4; i < size-4; i += 1) {\r\n\t\t\t\t\tcrc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\r\n\t\t\t\t}\r\n\t\t\t\twrite(png, offs+size-4, byte4(crc ^ -1));\r\n\t\t\t}\r\n\r\n\t\t\tcrc32(this.buffer, this.ihdr_offs, this.ihdr_size);\r\n\t\t\tcrc32(this.buffer, this.plte_offs, this.plte_size);\r\n\t\t\tcrc32(this.buffer, this.trns_offs, this.trns_size);\r\n\t\t\tcrc32(this.buffer, this.idat_offs, this.idat_size);\r\n\t\t\tcrc32(this.buffer, this.iend_offs, this.iend_size);\r\n\r\n\t\t\t// convert PNG to string\r\n\t\t\treturn \"\\211PNG\\r\\n\\032\\n\"+this.buffer.join('');\r\n\t\t}\r\n\t}\r\nconst ecl = quick.parent.props?.level ?  qrcodegen.QrCode.Ecc[quick.parent.props.level] : qrcodegen.QrCode.Ecc.LOW;\r\nconst text: string = qrString;\r\n\t\tconst segs: Array<qrcodegen.QrSegment> = qrcodegen.QrSegment.makeSegments(text);\r\n\r\n\t\tconst qr: qrcodegen.QrCode = qrcodegen.QrCode.encodeSegments(segs, ecl);\r\n\t\t\r\ncomponents.EdtrComp_2.width=qr.size*imagesize;\r\ncomponents.EdtrComp_2.height=qr.size*imagesize;\r\nvar p = new PNGlib(qr.size*imagesize, qr.size*imagesize, 256); \r\nfor(var x=0;x<qr.size*imagesize;x++){\r\n\tfor(var y=0;y<qr.size*imagesize;y++){\r\n\t\tp.buffer[p.index(Math.floor(x), Math.floor(y))]\t\t=\tqr.getModule(Math.floor(x/imagesize), Math.floor(y/imagesize))?p.color(0xff,0xff,0xff,0xff):p.color(0,0,0,0xff);\r\n\t}\r\n}\r\ncomponents.EdtrComp_2.src=\"data:image/png;base64,\"+p.getBase64()+\"\";",
                    "TO": 1,
                    "HL": "TS"
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_1"
            },
            "O": {
                "cType": "child"
            }
        },
        {
            "T": "VImg",
            "P": {
                "ID": {
                    "H": "EdtrComp_2",
                    "T": "prop"
                },
                "eager": {
                    "H": "true",
                    "T": "prop"
                },
                "height": {
                    "H": "'200'",
                    "T": "prop"
                },
                "width": {
                    "H": "'200'",
                    "T": "prop"
                },
                "visible": {
                    "H": "true",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_2"
            },
            "O": {
                "cType": "slot"
            }
        }
    ],
    "cJson": [
        {
            "T": "Messaging",
            "P": {
                "ID": {
                    "H": "EdtrComp_1",
                    "T": "prop"
                },
                "externalProps": {
                    "H": "╬[]╠'size'╩╠'content'╩╠'level'╩╩╩",
                    "T": "prop"
                }
            },
            "E": {
                "PostRender": {
                    "H": "var _a, _b, _c, _d, _e;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar imagesize = ((_a = quick.parent.props) === null || _a === void 0 ? void 0 : _a.size) ? Number((_b = quick.parent.props) === null || _b === void 0 ? void 0 : _b.size) : 0;\r\nvar qrString = ((_c = quick.parent.props) === null || _c === void 0 ? void 0 : _c.content) ? String((_d = quick.parent.props) === null || _d === void 0 ? void 0 : _d.content) : '';\r\nvar qrcodegen;\r\n(function (qrcodegen) {\r\n    var QrCode = /** @class */ (function () {\r\n        /*-- Constructor (low level) and fields --*/\r\n        // Creates a new QR Code with the given version number,\r\n        // error correction level, data codeword bytes, and mask number.\r\n        // This is a low-level API that most users should not use directly.\r\n        // A mid-level API is the encodeSegments() function.\r\n        function QrCode(\r\n        // The version number of this QR Code, which is between 1 and 40 (inclusive).\r\n        // This determines the size of this barcode.\r\n        version, \r\n        // The error correction level used in this QR Code.\r\n        errorCorrectionLevel, dataCodewords, msk) {\r\n            this.version = version;\r\n            this.errorCorrectionLevel = errorCorrectionLevel;\r\n            // The modules of this QR Code (false = light, true = dark).\r\n            // Immutable after constructor finishes. Accessed through getModule().\r\n            this.modules = [];\r\n            // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\r\n            this.isFunction = [];\r\n            // Check scalar arguments\r\n            if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION)\r\n                throw \"Version value out of range\";\r\n            if (msk < -1 || msk > 7)\r\n                throw \"Mask value out of range\";\r\n            this.size = version * 4 + 17;\r\n            // Initialize both grids to be size*size arrays of Boolean false\r\n            var row = [];\r\n            for (var i = 0; i < this.size; i++)\r\n                row.push(false);\r\n            for (var i = 0; i < this.size; i++) {\r\n                this.modules.push(row.slice()); // Initially all light\r\n                this.isFunction.push(row.slice());\r\n            }\r\n            // Compute ECC, draw modules\r\n            this.drawFunctionPatterns();\r\n            var allCodewords = this.addEccAndInterleave(dataCodewords);\r\n            this.drawCodewords(allCodewords);\r\n            // Do masking\r\n            if (msk == -1) { // Automatically choose best mask\r\n                var minPenalty = 1000000000;\r\n                for (var i = 0; i < 8; i++) {\r\n                    this.applyMask(i);\r\n                    this.drawFormatBits(i);\r\n                    var penalty = this.getPenaltyScore();\r\n                    if (penalty < minPenalty) {\r\n                        msk = i;\r\n                        minPenalty = penalty;\r\n                    }\r\n                    this.applyMask(i); // Undoes the mask due to XOR\r\n                }\r\n            }\r\n            assert(0 <= msk && msk <= 7);\r\n            this.mask = msk;\r\n            this.applyMask(msk); // Apply the final choice of mask\r\n            this.drawFormatBits(msk); // Overwrite old format bits\r\n            this.isFunction = [];\r\n        }\r\n        QrCode.encodeText = function (text, ecl) {\r\n            var segs = qrcodegen.QrSegment.makeSegments(text);\r\n            return QrCode.encodeSegments(segs, ecl);\r\n        };\r\n        QrCode.encodeBinary = function (data, ecl) {\r\n            var seg = qrcodegen.QrSegment.makeBytes(data);\r\n            return QrCode.encodeSegments([seg], ecl);\r\n        };\r\n        QrCode.encodeSegments = function (segs, ecl, minVersion, maxVersion, mask, boostEcl) {\r\n            if (minVersion === void 0) { minVersion = 1; }\r\n            if (maxVersion === void 0) { maxVersion = 40; }\r\n            if (mask === void 0) { mask = -1; }\r\n            if (boostEcl === void 0) { boostEcl = true; }\r\n            if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION)\r\n                || mask < -1 || mask > 7)\r\n                throw \"Invalid value\";\r\n            // Find the minimal version number to use\r\n            var version;\r\n            var dataUsedBits;\r\n            for (version = minVersion;; version++) {\r\n                var dataCapacityBits_1 = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\r\n                var usedBits = QrSegment.getTotalBits(segs, version);\r\n                if (usedBits <= dataCapacityBits_1) {\r\n                    dataUsedBits = usedBits;\r\n                    break; // This version number is found to be suitable\r\n                }\r\n                if (version >= maxVersion) // All versions in the range could not fit the given data\r\n                    throw \"Data too long\";\r\n            }\r\n            // Increase the error correction level while the data still fits in the current version number\r\n            for (var _i = 0, _a = [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]; _i < _a.length; _i++) { // From low to high\r\n                var newEcl = _a[_i];\r\n                if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8)\r\n                    ecl = newEcl;\r\n            }\r\n            // Concatenate all segments to create the data bit string\r\n            var bb = [];\r\n            for (var _b = 0, segs_1 = segs; _b < segs_1.length; _b++) {\r\n                var seg = segs_1[_b];\r\n                appendBits(seg.mode.modeBits, 4, bb);\r\n                appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\r\n                for (var _c = 0, _d = seg.getData(); _c < _d.length; _c++) {\r\n                    var b = _d[_c];\r\n                    bb.push(b);\r\n                }\r\n            }\r\n            assert(bb.length == dataUsedBits);\r\n            // Add terminator and pad up to a byte if applicable\r\n            var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\r\n            assert(bb.length <= dataCapacityBits);\r\n            appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\r\n            appendBits(0, (8 - bb.length % 8) % 8, bb);\r\n            assert(bb.length % 8 == 0);\r\n            // Pad with alternating bytes until data capacity is reached\r\n            for (var padByte = 0xEC; bb.length < dataCapacityBits; padByte ^= 0xEC ^ 0x11)\r\n                appendBits(padByte, 8, bb);\r\n            // Pack bits into bytes in big endian\r\n            var dataCodewords = [];\r\n            while (dataCodewords.length * 8 < bb.length)\r\n                dataCodewords.push(0);\r\n            bb.forEach(function (b, i) {\r\n                return dataCodewords[i >>> 3] |= b << (7 - (i & 7));\r\n            });\r\n            // Create the QR Code object\r\n            return new QrCode(version, ecl, dataCodewords, mask);\r\n        };\r\n        QrCode.prototype.getModule = function (x, y) {\r\n            return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\r\n        };\r\n        QrCode.prototype.drawFunctionPatterns = function () {\r\n            // Draw horizontal and vertical timing patterns\r\n            for (var i = 0; i < this.size; i++) {\r\n                this.setFunctionModule(6, i, i % 2 == 0);\r\n                this.setFunctionModule(i, 6, i % 2 == 0);\r\n            }\r\n            // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\r\n            this.drawFinderPattern(3, 3);\r\n            this.drawFinderPattern(this.size - 4, 3);\r\n            this.drawFinderPattern(3, this.size - 4);\r\n            // Draw numerous alignment patterns\r\n            var alignPatPos = this.getAlignmentPatternPositions();\r\n            var numAlign = alignPatPos.length;\r\n            for (var i = 0; i < numAlign; i++) {\r\n                for (var j = 0; j < numAlign; j++) {\r\n                    // Don't draw on the three finder corners\r\n                    if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\r\n                        this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\r\n                }\r\n            }\r\n            // Draw configuration data\r\n            this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\r\n            this.drawVersion();\r\n        };\r\n        // Draws two copies of the format bits (with its own error correction code)\r\n        // based on the given mask and this object's error correction level field.\r\n        QrCode.prototype.drawFormatBits = function (mask) {\r\n            // Calculate error correction code and pack bits\r\n            var data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\r\n            var rem = data;\r\n            for (var i = 0; i < 10; i++)\r\n                rem = (rem << 1) ^ ((rem >>> 9) * 0x537);\r\n            var bits = (data << 10 | rem) ^ 0x5412; // uint15\r\n            assert(bits >>> 15 == 0);\r\n            // Draw first copy\r\n            for (var i = 0; i <= 5; i++)\r\n                this.setFunctionModule(8, i, getBit(bits, i));\r\n            this.setFunctionModule(8, 7, getBit(bits, 6));\r\n            this.setFunctionModule(8, 8, getBit(bits, 7));\r\n            this.setFunctionModule(7, 8, getBit(bits, 8));\r\n            for (var i = 9; i < 15; i++)\r\n                this.setFunctionModule(14 - i, 8, getBit(bits, i));\r\n            // Draw second copy\r\n            for (var i = 0; i < 8; i++)\r\n                this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\r\n            for (var i = 8; i < 15; i++)\r\n                this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\r\n            this.setFunctionModule(8, this.size - 8, true); // Always dark\r\n        };\r\n        // Draws two copies of the version bits (with its own error correction code),\r\n        // based on this object's version field, iff 7 <= version <= 40.\r\n        QrCode.prototype.drawVersion = function () {\r\n            if (this.version < 7)\r\n                return;\r\n            // Calculate error correction code and pack bits\r\n            var rem = this.version; // version is uint6, in the range [7, 40]\r\n            for (var i = 0; i < 12; i++)\r\n                rem = (rem << 1) ^ ((rem >>> 11) * 0x1F25);\r\n            var bits = this.version << 12 | rem; // uint18\r\n            assert(bits >>> 18 == 0);\r\n            // Draw two copies\r\n            for (var i = 0; i < 18; i++) {\r\n                var color = getBit(bits, i);\r\n                var a = this.size - 11 + i % 3;\r\n                var b = Math.floor(i / 3);\r\n                this.setFunctionModule(a, b, color);\r\n                this.setFunctionModule(b, a, color);\r\n            }\r\n        };\r\n        // Draws a 9*9 finder pattern including the border separator,\r\n        // with the center module at (x, y). Modules can be out of bounds.\r\n        QrCode.prototype.drawFinderPattern = function (x, y) {\r\n            for (var dy = -4; dy <= 4; dy++) {\r\n                for (var dx = -4; dx <= 4; dx++) {\r\n                    var dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\r\n                    var xx = x + dx;\r\n                    var yy = y + dy;\r\n                    if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\r\n                        this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\r\n                }\r\n            }\r\n        };\r\n        // Draws a 5*5 alignment pattern, with the center module\r\n        // at (x, y). All modules must be in bounds.\r\n        QrCode.prototype.drawAlignmentPattern = function (x, y) {\r\n            for (var dy = -2; dy <= 2; dy++) {\r\n                for (var dx = -2; dx <= 2; dx++)\r\n                    this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\r\n            }\r\n        };\r\n        // Sets the color of a module and marks it as a function module.\r\n        // Only used by the constructor. Coordinates must be in bounds.\r\n        QrCode.prototype.setFunctionModule = function (x, y, isDark) {\r\n            this.modules[y][x] = isDark;\r\n            this.isFunction[y][x] = true;\r\n        };\r\n        QrCode.prototype.addEccAndInterleave = function (data) {\r\n            var ver = this.version;\r\n            var ecl = this.errorCorrectionLevel;\r\n            if (data.length != QrCode.getNumDataCodewords(ver, ecl))\r\n                throw \"Invalid argument\";\r\n            // Calculate parameter numbers\r\n            var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n            var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\r\n            var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\r\n            var numShortBlocks = numBlocks - rawCodewords % numBlocks;\r\n            var shortBlockLen = Math.floor(rawCodewords / numBlocks);\r\n            // Split data into blocks and append ECC to each block\r\n            var blocks = [];\r\n            var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\r\n            for (var i = 0, k = 0; i < numBlocks; i++) {\r\n                var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\r\n                k += dat.length;\r\n                var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\r\n                if (i < numShortBlocks)\r\n                    dat.push(0);\r\n                blocks.push(dat.concat(ecc));\r\n            }\r\n            // Interleave (not concatenate) the bytes from every block into a single sequence\r\n            var result = [];\r\n            var _loop_1 = function (i) {\r\n                blocks.forEach(function (block, j) {\r\n                    // Skip the padding byte in short blocks\r\n                    if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\r\n                        result.push(block[i]);\r\n                });\r\n            };\r\n            for (var i = 0; i < blocks[0].length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            assert(result.length == rawCodewords);\r\n            return result;\r\n        };\r\n        // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\r\n        // data area of this QR Code. Function modules need to be marked off before this is called.\r\n        QrCode.prototype.drawCodewords = function (data) {\r\n            if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8))\r\n                throw \"Invalid argument\";\r\n            var i = 0; // Bit index into the data\r\n            // Do the funny zigzag scan\r\n            for (var right = this.size - 1; right >= 1; right -= 2) { // Index of right column in each column pair\r\n                if (right == 6)\r\n                    right = 5;\r\n                for (var vert = 0; vert < this.size; vert++) { // Vertical counter\r\n                    for (var j = 0; j < 2; j++) {\r\n                        var x_1 = right - j; // Actual x coordinate\r\n                        var upward = ((right + 1) & 2) == 0;\r\n                        var y_1 = upward ? this.size - 1 - vert : vert; // Actual y coordinate\r\n                        if (!this.isFunction[y_1][x_1] && i < data.length * 8) {\r\n                            this.modules[y_1][x_1] = getBit(data[i >>> 3], 7 - (i & 7));\r\n                            i++;\r\n                        }\r\n                        // If this QR Code has any remainder bits (0 to 7), they were assigned as\r\n                        // 0/false/light by the constructor and are left unchanged by this method\r\n                    }\r\n                }\r\n            }\r\n            assert(i == data.length * 8);\r\n        };\r\n        QrCode.prototype.applyMask = function (mask) {\r\n            if (mask < 0 || mask > 7)\r\n                throw \"Mask value out of range\";\r\n            for (var y_2 = 0; y_2 < this.size; y_2++) {\r\n                for (var x_2 = 0; x_2 < this.size; x_2++) {\r\n                    var invert = void 0;\r\n                    switch (mask) {\r\n                        case 0:\r\n                            invert = (x_2 + y_2) % 2 == 0;\r\n                            break;\r\n                        case 1:\r\n                            invert = y_2 % 2 == 0;\r\n                            break;\r\n                        case 2:\r\n                            invert = x_2 % 3 == 0;\r\n                            break;\r\n                        case 3:\r\n                            invert = (x_2 + y_2) % 3 == 0;\r\n                            break;\r\n                        case 4:\r\n                            invert = (Math.floor(x_2 / 3) + Math.floor(y_2 / 2)) % 2 == 0;\r\n                            break;\r\n                        case 5:\r\n                            invert = x_2 * y_2 % 2 + x_2 * y_2 % 3 == 0;\r\n                            break;\r\n                        case 6:\r\n                            invert = (x_2 * y_2 % 2 + x_2 * y_2 % 3) % 2 == 0;\r\n                            break;\r\n                        case 7:\r\n                            invert = ((x_2 + y_2) % 2 + x_2 * y_2 % 3) % 2 == 0;\r\n                            break;\r\n                        default: throw \"Unreachable\";\r\n                    }\r\n                    if (!this.isFunction[y_2][x_2] && invert)\r\n                        this.modules[y_2][x_2] = !this.modules[y_2][x_2];\r\n                }\r\n            }\r\n        };\r\n        // Calculates and returns the penalty score based on state of this QR Code's current modules.\r\n        // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\r\n        QrCode.prototype.getPenaltyScore = function () {\r\n            var result = 0;\r\n            // Adjacent modules in row having same color, and finder-like patterns\r\n            for (var y_3 = 0; y_3 < this.size; y_3++) {\r\n                var runColor = false;\r\n                var runX = 0;\r\n                var runHistory = [0, 0, 0, 0, 0, 0, 0];\r\n                for (var x_3 = 0; x_3 < this.size; x_3++) {\r\n                    if (this.modules[y_3][x_3] == runColor) {\r\n                        runX++;\r\n                        if (runX == 5)\r\n                            result += QrCode.PENALTY_N1;\r\n                        else if (runX > 5)\r\n                            result++;\r\n                    }\r\n                    else {\r\n                        this.finderPenaltyAddHistory(runX, runHistory);\r\n                        if (!runColor)\r\n                            result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\r\n                        runColor = this.modules[y_3][x_3];\r\n                        runX = 1;\r\n                    }\r\n                }\r\n                result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\r\n            }\r\n            // Adjacent modules in column having same color, and finder-like patterns\r\n            for (var x_4 = 0; x_4 < this.size; x_4++) {\r\n                var runColor = false;\r\n                var runY = 0;\r\n                var runHistory = [0, 0, 0, 0, 0, 0, 0];\r\n                for (var y_4 = 0; y_4 < this.size; y_4++) {\r\n                    if (this.modules[y_4][x_4] == runColor) {\r\n                        runY++;\r\n                        if (runY == 5)\r\n                            result += QrCode.PENALTY_N1;\r\n                        else if (runY > 5)\r\n                            result++;\r\n                    }\r\n                    else {\r\n                        this.finderPenaltyAddHistory(runY, runHistory);\r\n                        if (!runColor)\r\n                            result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\r\n                        runColor = this.modules[y_4][x_4];\r\n                        runY = 1;\r\n                    }\r\n                }\r\n                result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\r\n            }\r\n            // 2*2 blocks of modules having same color\r\n            for (var y_5 = 0; y_5 < this.size - 1; y_5++) {\r\n                for (var x_5 = 0; x_5 < this.size - 1; x_5++) {\r\n                    var color = this.modules[y_5][x_5];\r\n                    if (color == this.modules[y_5][x_5 + 1] &&\r\n                        color == this.modules[y_5 + 1][x_5] &&\r\n                        color == this.modules[y_5 + 1][x_5 + 1])\r\n                        result += QrCode.PENALTY_N2;\r\n                }\r\n            }\r\n            // Balance of dark and light modules\r\n            var dark = 0;\r\n            for (var _i = 0, _a = this.modules; _i < _a.length; _i++) {\r\n                var row = _a[_i];\r\n                dark = row.reduce(function (sum, color) { return sum + (color ? 1 : 0); }, dark);\r\n            }\r\n            var total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\r\n            // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\r\n            var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\r\n            assert(0 <= k && k <= 9);\r\n            result += k * QrCode.PENALTY_N4;\r\n            assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\r\n            return result;\r\n        };\r\n        QrCode.prototype.getAlignmentPatternPositions = function () {\r\n            if (this.version == 1)\r\n                return [];\r\n            else {\r\n                var numAlign = Math.floor(this.version / 7) + 2;\r\n                var step = (this.version == 32) ? 26 :\r\n                    Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\r\n                var result = [6];\r\n                for (var pos = this.size - 7; result.length < numAlign; pos -= step)\r\n                    result.splice(1, 0, pos);\r\n                return result;\r\n            }\r\n        };\r\n        QrCode.getNumRawDataModules = function (ver) {\r\n            if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION)\r\n                throw \"Version number out of range\";\r\n            var result = (16 * ver + 128) * ver + 64;\r\n            if (ver >= 2) {\r\n                var numAlign = Math.floor(ver / 7) + 2;\r\n                result -= (25 * numAlign - 10) * numAlign - 55;\r\n                if (ver >= 7)\r\n                    result -= 36;\r\n            }\r\n            assert(208 <= result && result <= 29648);\r\n            return result;\r\n        };\r\n        QrCode.getNumDataCodewords = function (ver, ecl) {\r\n            return Math.floor(QrCode.getNumRawDataModules(ver) / 8) -\r\n                QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] *\r\n                    QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n        };\r\n        // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\r\n        // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\r\n        QrCode.reedSolomonComputeDivisor = function (degree) {\r\n            if (degree < 1 || degree > 255)\r\n                throw \"Degree out of range\";\r\n            // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\r\n            // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\r\n            var result = [];\r\n            for (var i = 0; i < degree - 1; i++)\r\n                result.push(0);\r\n            result.push(1); // Start off with the monomial x^0\r\n            var root = 1;\r\n            for (var i = 0; i < degree; i++) {\r\n                // Multiply the current product by (x - r^i)\r\n                for (var j = 0; j < result.length; j++) {\r\n                    result[j] = QrCode.reedSolomonMultiply(result[j], root);\r\n                    if (j + 1 < result.length)\r\n                        result[j] ^= result[j + 1];\r\n                }\r\n                root = QrCode.reedSolomonMultiply(root, 0x02);\r\n            }\r\n            return result;\r\n        };\r\n        // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\r\n        QrCode.reedSolomonComputeRemainder = function (data, divisor) {\r\n            var result = divisor.map(function (_) { return 0; });\r\n            var _loop_2 = function (b) {\r\n                var factor = b ^ result.shift();\r\n                result.push(0);\r\n                divisor.forEach(function (coef, i) {\r\n                    return result[i] ^= QrCode.reedSolomonMultiply(coef, factor);\r\n                });\r\n            };\r\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n                var b = data_1[_i];\r\n                _loop_2(b);\r\n            }\r\n            return result;\r\n        };\r\n        QrCode.reedSolomonMultiply = function (x, y) {\r\n            if (x >>> 8 != 0 || y >>> 8 != 0)\r\n                throw \"Byte out of range\";\r\n            // Russian peasant multiplication\r\n            var z = 0;\r\n            for (var i = 7; i >= 0; i--) {\r\n                z = (z << 1) ^ ((z >>> 7) * 0x11D);\r\n                z ^= ((y >>> i) & 1) * x;\r\n            }\r\n            assert(z >>> 8 == 0);\r\n            return z;\r\n        };\r\n        QrCode.prototype.finderPenaltyCountPatterns = function (runHistory) {\r\n            var n = runHistory[1];\r\n            assert(n <= this.size * 3);\r\n            var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\r\n            return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0)\r\n                + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\r\n        };\r\n        // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\r\n        QrCode.prototype.finderPenaltyTerminateAndCount = function (currentRunColor, currentRunLength, runHistory) {\r\n            if (currentRunColor) { // Terminate dark run\r\n                this.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n                currentRunLength = 0;\r\n            }\r\n            currentRunLength += this.size; // Add light border to final run\r\n            this.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n            return this.finderPenaltyCountPatterns(runHistory);\r\n        };\r\n        // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\r\n        QrCode.prototype.finderPenaltyAddHistory = function (currentRunLength, runHistory) {\r\n            if (runHistory[0] == 0)\r\n                currentRunLength += this.size; // Add light border to initial run\r\n            runHistory.pop();\r\n            runHistory.unshift(currentRunLength);\r\n        };\r\n        /*-- Constants and tables --*/\r\n        // The minimum version number supported in the QR Code Model 2 standard.\r\n        QrCode.MIN_VERSION = 1;\r\n        // The maximum version number supported in the QR Code Model 2 standard.\r\n        QrCode.MAX_VERSION = 40;\r\n        // For use in getPenaltyScore(), when evaluating which mask is best.\r\n        QrCode.PENALTY_N1 = 3;\r\n        QrCode.PENALTY_N2 = 3;\r\n        QrCode.PENALTY_N3 = 40;\r\n        QrCode.PENALTY_N4 = 10;\r\n        QrCode.ECC_CODEWORDS_PER_BLOCK = [\r\n            // Version: (note that index 0 is for padding, and is set to an illegal value)\r\n            //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n            [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\r\n            [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\r\n            [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\r\n            [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\r\n        ];\r\n        QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\r\n            // Version: (note that index 0 is for padding, and is set to an illegal value)\r\n            //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n            [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\r\n            [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\r\n            [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\r\n            [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81],\r\n        ];\r\n        return QrCode;\r\n    }());\r\n    qrcodegen.QrCode = QrCode;\r\n    function appendBits(val, len, bb) {\r\n        if (len < 0 || len > 31 || val >>> len != 0)\r\n            throw \"Value out of range\";\r\n        for (var i = len - 1; i >= 0; i--) // Append bit by bit\r\n            bb.push((val >>> i) & 1);\r\n    }\r\n    // Returns true iff the i'th bit of x is set to 1.\r\n    function getBit(x, i) {\r\n        return ((x >>> i) & 1) != 0;\r\n    }\r\n    // Throws an exception if the given condition is false.\r\n    function assert(cond) {\r\n        if (!cond)\r\n            throw \"Assertion error\";\r\n    }\r\n    var QrSegment = /** @class */ (function () {\r\n        function QrSegment(\r\n        // The mode indicator of this segment.\r\n        mode, numChars, \r\n        // The data bits of this segment. Accessed through getData().\r\n        bitData) {\r\n            this.mode = mode;\r\n            this.numChars = numChars;\r\n            this.bitData = bitData;\r\n            if (numChars < 0)\r\n                throw \"Invalid argument\";\r\n            this.bitData = bitData.slice(); // Make defensive copy\r\n        }\r\n        QrSegment.makeBytes = function (data) {\r\n            var bb = [];\r\n            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {\r\n                var b = data_2[_i];\r\n                appendBits(b, 8, bb);\r\n            }\r\n            return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\r\n        };\r\n        // Returns a segment representing the given string of decimal digits encoded in numeric mode.\r\n        QrSegment.makeNumeric = function (digits) {\r\n            if (!QrSegment.isNumeric(digits))\r\n                throw \"String contains non-numeric characters\";\r\n            var bb = [];\r\n            for (var i = 0; i < digits.length;) { // Consume up to 3 digits per iteration\r\n                var n = Math.min(digits.length - i, 3);\r\n                appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\r\n                i += n;\r\n            }\r\n            return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\r\n        };\r\n        QrSegment.makeAlphanumeric = function (text) {\r\n            if (!QrSegment.isAlphanumeric(text))\r\n                throw \"String contains unencodable characters in alphanumeric mode\";\r\n            var bb = [];\r\n            var i;\r\n            for (i = 0; i + 2 <= text.length; i += 2) { // Process groups of 2\r\n                var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\r\n                temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\r\n                appendBits(temp, 11, bb);\r\n            }\r\n            if (i < text.length) // 1 character remaining\r\n                appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\r\n            return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\r\n        };\r\n        // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\r\n        // The result may use various segment modes and switch modes to optimize the length of the bit stream.\r\n        QrSegment.makeSegments = function (text) {\r\n            // Select the most efficient segment encoding automatically\r\n            if (text == \"\")\r\n                return [];\r\n            else if (QrSegment.isNumeric(text))\r\n                return [QrSegment.makeNumeric(text)];\r\n            else if (QrSegment.isAlphanumeric(text))\r\n                return [QrSegment.makeAlphanumeric(text)];\r\n            else\r\n                return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\r\n        };\r\n        // Returns a segment representing an Extended Channel Interpretation\r\n        // (ECI) designator with the given assignment value.\r\n        QrSegment.makeEci = function (assignVal) {\r\n            var bb = [];\r\n            if (assignVal < 0)\r\n                throw \"ECI assignment value out of range\";\r\n            else if (assignVal < (1 << 7))\r\n                appendBits(assignVal, 8, bb);\r\n            else if (assignVal < (1 << 14)) {\r\n                appendBits(2, 2, bb);\r\n                appendBits(assignVal, 14, bb);\r\n            }\r\n            else if (assignVal < 1000000) {\r\n                appendBits(6, 3, bb);\r\n                appendBits(assignVal, 21, bb);\r\n            }\r\n            else\r\n                throw \"ECI assignment value out of range\";\r\n            return new QrSegment(QrSegment.Mode.ECI, 0, bb);\r\n        };\r\n        // Tests whether the given string can be encoded as a segment in numeric mode.\r\n        // A string is encodable iff each character is in the range 0 to 9.\r\n        QrSegment.isNumeric = function (text) {\r\n            return QrSegment.NUMERIC_REGEX.test(text);\r\n        };\r\n        QrSegment.isAlphanumeric = function (text) {\r\n            return QrSegment.ALPHANUMERIC_REGEX.test(text);\r\n        };\r\n        /*-- Methods --*/\r\n        // Returns a new copy of the data bits of this segment.\r\n        QrSegment.prototype.getData = function () {\r\n            return this.bitData.slice(); // Make defensive copy\r\n        };\r\n        // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\r\n        // the given version. The result is infinity if a segment has too many characters to fit its length field.\r\n        QrSegment.getTotalBits = function (segs, version) {\r\n            var result = 0;\r\n            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\r\n                var seg = segs_2[_i];\r\n                var ccbits = seg.mode.numCharCountBits(version);\r\n                if (seg.numChars >= (1 << ccbits))\r\n                    return Infinity; // The segment's length doesn't fit the field's bit width\r\n                result += 4 + ccbits + seg.bitData.length;\r\n            }\r\n            return result;\r\n        };\r\n        // Returns a new array of bytes representing the given string encoded in UTF-8.\r\n        QrSegment.toUtf8ByteArray = function (str) {\r\n            str = encodeURI(str);\r\n            var result = [];\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (str.charAt(i) != \"%\")\r\n                    result.push(str.charCodeAt(i));\r\n                else {\r\n                    result.push(parseInt(str.substr(i + 1, 2), 16));\r\n                    i += 2;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        /*-- Constants --*/\r\n        // Describes precisely all strings that are encodable in numeric mode.\r\n        QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\r\n        // Describes precisely all strings that are encodable in alphanumeric mode.\r\n        QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\r\n        // The set of all legal characters in alphanumeric mode,\r\n        // where each character value maps to the index in the string.\r\n        QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\r\n        return QrSegment;\r\n    }());\r\n    qrcodegen.QrSegment = QrSegment;\r\n})(qrcodegen || (qrcodegen = {}));\r\n(function (qrcodegen) {\r\n    var QrCode;\r\n    (function (QrCode) {\r\n        var Ecc = /** @class */ (function () {\r\n            function Ecc(\r\n            // In the range 0 to 3 (unsigned 2-bit integer).\r\n            ordinal, \r\n            // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\r\n            formatBits) {\r\n                this.ordinal = ordinal;\r\n                this.formatBits = formatBits;\r\n            }\r\n            Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\r\n            Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\r\n            Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\r\n            Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\r\n            return Ecc;\r\n        }());\r\n        QrCode.Ecc = Ecc;\r\n    })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\r\n})(qrcodegen || (qrcodegen = {}));\r\n(function (qrcodegen) {\r\n    var QrSegment;\r\n    (function (QrSegment) {\r\n        var Mode = /** @class */ (function () {\r\n            function Mode(\r\n            // The mode indicator bits, which is a uint4 value (range 0 to 15).\r\n            modeBits, \r\n            // Number of character count bits for three different version ranges.\r\n            numBitsCharCount) {\r\n                this.modeBits = modeBits;\r\n                this.numBitsCharCount = numBitsCharCount;\r\n            }\r\n            Mode.prototype.numCharCountBits = function (ver) {\r\n                return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\r\n            };\r\n            Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\r\n            Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\r\n            Mode.BYTE = new Mode(0x4, [8, 16, 16]);\r\n            Mode.KANJI = new Mode(0x8, [8, 10, 12]);\r\n            Mode.ECI = new Mode(0x7, [0, 0, 0]);\r\n            return Mode;\r\n        }());\r\n        QrSegment.Mode = Mode;\r\n    })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\r\n})(qrcodegen || (qrcodegen = {}));\r\nfunction write(buffer, offs, a1, a2, a3, a4, a5) {\r\n    if (a1 === void 0) { a1 = undefined; }\r\n    if (a2 === void 0) { a2 = undefined; }\r\n    if (a3 === void 0) { a3 = undefined; }\r\n    if (a4 === void 0) { a4 = undefined; }\r\n    if (a5 === void 0) { a5 = undefined; }\r\n    var args = [];\r\n    args.push(buffer);\r\n    args.push(offs);\r\n    if (a1)\r\n        args.push(a1);\r\n    if (a2)\r\n        args.push(a2);\r\n    if (a3)\r\n        args.push(a3);\r\n    if (a4)\r\n        args.push(a4);\r\n    if (a5)\r\n        args.push(a5);\r\n    for (var i = 2; i < args.length; i++) {\r\n        for (var j = 0; j < args[i].length; j++) {\r\n            buffer[offs++] = args[i].charAt(j);\r\n        }\r\n    }\r\n}\r\nfunction byte2(w) {\r\n    return String.fromCharCode((w >> 8) & 255, w & 255);\r\n}\r\nfunction byte4(w) {\r\n    return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\r\n}\r\nfunction byte2lsb(w) {\r\n    return String.fromCharCode(w & 255, (w >> 8) & 255);\r\n}\r\nvar PNGlib = function (width, height, depth) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.depth = depth;\r\n    // pixel data and row filter identifier size\r\n    this.pix_size = height * (width + 1);\r\n    // deflate header, pix_size, block headers, adler32 checksum\r\n    this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\r\n    // offsets and sizes of Png chunks\r\n    this.ihdr_offs = 0; // IHDR offset and size\r\n    this.ihdr_size = 4 + 4 + 13 + 4;\r\n    this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\r\n    this.plte_size = 4 + 4 + 3 * depth + 4;\r\n    this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\r\n    this.trns_size = 4 + 4 + depth + 4;\r\n    this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\r\n    this.idat_size = 4 + 4 + this.data_size + 4;\r\n    this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\r\n    this.iend_size = 4 + 4 + 4;\r\n    this.buffer_size = this.iend_offs + this.iend_size; // total PNG size\r\n    this.buffer = new Array();\r\n    this.palette = new Object();\r\n    this.pindex = 0;\r\n    var _crc32 = new Array();\r\n    // initialize buffer with zero bytes\r\n    for (var i = 0; i < this.buffer_size; i++) {\r\n        this.buffer[i] = \"\\x00\";\r\n    }\r\n    // initialize non-zero elements\r\n    write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\r\n    write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\r\n    write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\r\n    write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\r\n    write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\r\n    // initialize deflate header\r\n    var header = ((8 + (7 << 4)) << 8) | (3 << 6);\r\n    header += 31 - (header % 31);\r\n    write(this.buffer, this.idat_offs + 8, byte2(header));\r\n    // initialize deflate block headers\r\n    for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\r\n        var size, bits;\r\n        if (i + 0xffff < this.pix_size) {\r\n            size = 0xffff;\r\n            bits = \"\\x00\";\r\n        }\r\n        else {\r\n            size = this.pix_size - (i << 16) - i;\r\n            bits = \"\\x01\";\r\n        }\r\n        write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\r\n    }\r\n    /* Create crc32 lookup table */\r\n    for (var i = 0; i < 256; i++) {\r\n        var c = i;\r\n        for (var j = 0; j < 8; j++) {\r\n            if (c & 1) {\r\n                c = -306674912 ^ ((c >> 1) & 0x7fffffff);\r\n            }\r\n            else {\r\n                c = (c >> 1) & 0x7fffffff;\r\n            }\r\n        }\r\n        _crc32[i] = c;\r\n    }\r\n    // compute the index into a png for a given pixel\r\n    this.index = function (x, y) {\r\n        var i = y * (this.width + 1) + x + 1;\r\n        var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\r\n        return j;\r\n    };\r\n    // convert a color and build up the palette\r\n    this.color = function (red, green, blue, alpha) {\r\n        alpha = alpha >= 0 ? alpha : 255;\r\n        var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\r\n        if (typeof this.palette[color] == \"undefined\") {\r\n            if (this.pindex == this.depth)\r\n                return \"\\x00\";\r\n            var ndx = this.plte_offs + 8 + 3 * this.pindex;\r\n            this.buffer[ndx + 0] = String.fromCharCode(red);\r\n            this.buffer[ndx + 1] = String.fromCharCode(green);\r\n            this.buffer[ndx + 2] = String.fromCharCode(blue);\r\n            this.buffer[this.trns_offs + 8 + this.pindex] = String.fromCharCode(alpha);\r\n            this.palette[color] = String.fromCharCode(this.pindex++);\r\n        }\r\n        return this.palette[color];\r\n    };\r\n    // output a PNG string, Base64 encoded\r\n    this.getBase64 = function () {\r\n        var s = this.getDump();\r\n        var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n        var c1, c2, c3, e1, e2, e3, e4;\r\n        var l = s.length;\r\n        var i = 0;\r\n        var r = \"\";\r\n        do {\r\n            c1 = s.charCodeAt(i);\r\n            e1 = c1 >> 2;\r\n            c2 = s.charCodeAt(i + 1);\r\n            e2 = ((c1 & 3) << 4) | (c2 >> 4);\r\n            c3 = s.charCodeAt(i + 2);\r\n            if (l < i + 2) {\r\n                e3 = 64;\r\n            }\r\n            else {\r\n                e3 = ((c2 & 0xf) << 2) | (c3 >> 6);\r\n            }\r\n            if (l < i + 3) {\r\n                e4 = 64;\r\n            }\r\n            else {\r\n                e4 = c3 & 0x3f;\r\n            }\r\n            r += ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\r\n        } while ((i += 3) < l);\r\n        return r;\r\n    };\r\n    // output a PNG string\r\n    this.getDump = function () {\r\n        // compute adler32 of output pixels + row filter bytes\r\n        var BASE = 65521; /* largest prime smaller than 65536 */\r\n        var NMAX = 5552; /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\r\n        var s1 = 1;\r\n        var s2 = 0;\r\n        var n = NMAX;\r\n        for (var y = 0; y < this.height; y++) {\r\n            for (var x = -1; x < this.width; x++) {\r\n                s1 += this.buffer[this.index(x, y)].charCodeAt(0);\r\n                s2 += s1;\r\n                if ((n -= 1) == 0) {\r\n                    s1 %= BASE;\r\n                    s2 %= BASE;\r\n                    n = NMAX;\r\n                }\r\n            }\r\n        }\r\n        s1 %= BASE;\r\n        s2 %= BASE;\r\n        write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\r\n        // compute crc32 of the PNG chunks\r\n        function crc32(png, offs, size) {\r\n            var crc = -1;\r\n            for (var i = 4; i < size - 4; i += 1) {\r\n                crc = _crc32[(crc ^ png[offs + i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\r\n            }\r\n            write(png, offs + size - 4, byte4(crc ^ -1));\r\n        }\r\n        crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\r\n        crc32(this.buffer, this.plte_offs, this.plte_size);\r\n        crc32(this.buffer, this.trns_offs, this.trns_size);\r\n        crc32(this.buffer, this.idat_offs, this.idat_size);\r\n        crc32(this.buffer, this.iend_offs, this.iend_size);\r\n        // convert PNG to string\r\n        return \"\\211PNG\\r\\n\\032\\n\" + this.buffer.join('');\r\n    };\r\n};\r\nvar ecl = ((_e = quick.parent.props) === null || _e === void 0 ? void 0 : _e.level) ? qrcodegen.QrCode.Ecc[quick.parent.props.level] : qrcodegen.QrCode.Ecc.LOW;\r\nvar text = qrString;\r\nvar segs = qrcodegen.QrSegment.makeSegments(text);\r\nvar qr = qrcodegen.QrCode.encodeSegments(segs, ecl);\r\ncomponents.EdtrComp_2.width = qr.size * imagesize;\r\ncomponents.EdtrComp_2.height = qr.size * imagesize;\r\nvar p = new PNGlib(qr.size * imagesize, qr.size * imagesize, 256);\r\nfor (var x = 0; x < qr.size * imagesize; x++) {\r\n    for (var y = 0; y < qr.size * imagesize; y++) {\r\n        p.buffer[p.index(Math.floor(x), Math.floor(y))] = qr.getModule(Math.floor(x / imagesize), Math.floor(y / imagesize)) ? p.color(0xff, 0xff, 0xff, 0xff) : p.color(0, 0, 0, 0xff);\r\n    }\r\n}\r\ncomponents.EdtrComp_2.src = \"data:image/png;base64,\" + p.getBase64() + \"\";\r\n//# ",
                    "TO": 1,
                    "HL": "JS"
                }
            },
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_1"
            },
            "O": {
                "cType": "child",
                "compDomClasses": "newDropBorder"
            }
        },
        {
            "T": "VImg",
            "P": {
                "ID": {
                    "H": "EdtrComp_2",
                    "T": "prop"
                },
                "eager": {
                    "H": "╬true╩╩",
                    "T": "prop"
                },
                "height": {
                    "H": "╬'200'╩╩",
                    "T": "prop"
                },
                "width": {
                    "H": "╬'200'╩╩",
                    "T": "prop"
                },
                "visible": {
                    "H": "╬true╩╩",
                    "T": "prop"
                }
            },
            "E": {},
            "C": {},
            "_Editor": {
                "eID": "EdtrComp_2"
            },
            "O": {
                "cType": "slot",
                "compDomClasses": "v-image v-responsive theme--light newDropBorder"
            }
        }
    ],
    "lrids": {},
    "clrids": {}
};
exports.default = pjson;


/***/ }),

/***/ "../../common/qshell/src/customComponents/index.ts":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/customComponents/index.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QQRCode = exports.QLegend = exports.QDynamicFields = exports.QCaptcha = void 0;
var QCaptcha_1 = __importDefault(__webpack_require__(/*! ./QCaptcha */ "../../common/qshell/src/customComponents/QCaptcha.ts"));
exports.QCaptcha = QCaptcha_1.default;
var QDynamicFields_1 = __importDefault(__webpack_require__(/*! ./QDynamicFields */ "../../common/qshell/src/customComponents/QDynamicFields.ts"));
exports.QDynamicFields = QDynamicFields_1.default;
var QLegend_1 = __importDefault(__webpack_require__(/*! ./QLegend */ "../../common/qshell/src/customComponents/QLegend.ts"));
exports.QLegend = QLegend_1.default;
var QQRCode_1 = __importDefault(__webpack_require__(/*! ./QQRCode */ "../../common/qshell/src/customComponents/QQRCode.ts"));
exports.QQRCode = QQRCode_1.default;


/***/ }),

/***/ "../../common/qshell/src/helpers/DoryHelper.ts":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/helpers/DoryHelper.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryHelper = void 0;
var dory_1 = __webpack_require__(/*! ../../../dory */ "../../common/dory/index.ts");
var IExternalLocalizationFunc_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/IExternalLocalizationFunc */ "../../common/shrimp/interfaces/quick/IExternalLocalizationFunc.ts");
var IRoleBaseAuthorizationFunc_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/IRoleBaseAuthorizationFunc */ "../../common/shrimp/interfaces/quick/IRoleBaseAuthorizationFunc.ts");
var IUXManager_1 = __webpack_require__(/*! ../../../shrimp/interfaces/quick/IUXManager */ "../../common/shrimp/interfaces/quick/IUXManager.ts");
var CompInstanceTracker_1 = __webpack_require__(/*! ../interfaces/construction/CompInstanceTracker */ "../../common/qshell/src/interfaces/construction/CompInstanceTracker.ts");
var IComponentManager_1 = __webpack_require__(/*! ../interfaces/construction/IComponentManager */ "../../common/qshell/src/interfaces/construction/IComponentManager.ts");
var ICookieManager_1 = __webpack_require__(/*! ../interfaces/construction/ICookieManager */ "../../common/qshell/src/interfaces/construction/ICookieManager.ts");
var ICryptographyManager_1 = __webpack_require__(/*! ../interfaces/construction/ICryptographyManager */ "../../common/qshell/src/interfaces/construction/ICryptographyManager.ts");
var IGlobalMethods_1 = __webpack_require__(/*! ../interfaces/construction/IGlobalMethods */ "../../common/qshell/src/interfaces/construction/IGlobalMethods.ts");
var IHostTriggerer_1 = __webpack_require__(/*! ../interfaces/construction/IHostTriggerer */ "../../common/qshell/src/interfaces/construction/IHostTriggerer.ts");
var IIntegrationsManager_1 = __webpack_require__(/*! ../interfaces/construction/IIntegrationsManager */ "../../common/qshell/src/interfaces/construction/IIntegrationsManager.ts");
var ILanguageExtensions_1 = __webpack_require__(/*! ../interfaces/construction/ILanguageExtensions */ "../../common/qshell/src/interfaces/construction/ILanguageExtensions.ts");
var INavigationManager_1 = __webpack_require__(/*! ../interfaces/construction/INavigationManager */ "../../common/qshell/src/interfaces/construction/INavigationManager.ts");
var INetworkManager_1 = __webpack_require__(/*! ../interfaces/construction/INetworkManager */ "../../common/qshell/src/interfaces/construction/INetworkManager.ts");
var IPlatformManager_1 = __webpack_require__(/*! ../interfaces/construction/IPlatformManager */ "../../common/qshell/src/interfaces/construction/IPlatformManager.ts");
var IProcessManager_1 = __webpack_require__(/*! ../interfaces/construction/IProcessManager */ "../../common/qshell/src/interfaces/construction/IProcessManager.ts");
// import { IQJsonRetriever, QJsonRetrieverContextName } from "../interfaces/construction/IQJsonRetriever";
var IRegionalManager_1 = __webpack_require__(/*! ../interfaces/construction/IRegionalManager */ "../../common/qshell/src/interfaces/construction/IRegionalManager.ts");
var IStoreManager_1 = __webpack_require__(/*! ../interfaces/construction/IStoreManager */ "../../common/qshell/src/interfaces/construction/IStoreManager.ts");
var shellManager_1 = __webpack_require__(/*! ../managers/shellManager */ "../../common/qshell/src/managers/shellManager.ts");
var QJsonPool_1 = __webpack_require__(/*! ./QJsonHelpers/QJsonPool */ "../../common/qshell/src/helpers/QJsonHelpers/QJsonPool.ts");
var DoryHelper = /** @class */ (function () {
    function DoryHelper(_a) {
        var doryInstName = _a.doryInstName, context = _a.context, renderer = _a.renderer, operatorCollection = _a.operatorCollection;
        this.store = null;
        this.cookie = null;
        this.isEditor = false;
        this.contextManager = context;
        var langImpl = (this.contextManager.GetItemSingle(ILanguageExtensions_1.LanguageExtensionsContextName));
        this.shellManager = new shellManager_1.ShellManager(langImpl);
        this.Dory = this.createDoryInstance(operatorCollection, doryInstName, renderer);
    }
    DoryHelper.prototype.createDoryInstance = function (operatorCollection, doryInstName, renderer) {
        var _this = this;
        var _a;
        var self = this;
        var globalMethods = this.contextManager.GetItemSingle(IGlobalMethods_1.GlobalMethodsContextName);
        var componentManager = this.contextManager.GetItemSingle(IComponentManager_1.ComponentManagerContextName);
        var navigationManager = this.contextManager.GetItemSingle(INavigationManager_1.NavigationManagerContextName);
        var integrationsManager = this.contextManager.GetItemSingle(IIntegrationsManager_1.IntegrationsManagerContextName);
        // let qjsonRetriever: IQJsonRetriever | undefined = this.contextManager.GetItemSingle<IQJsonRetriever>(QJsonRetrieverContextName);
        var compInstTracker = this.contextManager.GetItemSingle(CompInstanceTracker_1.CompInstanceTrackerContextName);
        var externalLocalizationFunc = this.contextManager.GetItemSingle(IExternalLocalizationFunc_1.ExternalLocalizationFuncContextName);
        var roleBaseAuthFunc = this.contextManager.GetItemSingle(IRoleBaseAuthorizationFunc_1.RoleBaseAuthorizationFuncContextName);
        var storeManager = this.contextManager.GetItemSingle(IStoreManager_1.StoreManagerContextName);
        var cookieManager = this.contextManager.GetItemSingle(ICookieManager_1.CookieManagerContextName);
        var uxManager = this.contextManager.GetItemSingle(IUXManager_1.UXManagerContextName);
        var regionalManager = this.contextManager.GetItemSingle(IRegionalManager_1.RegionalManagerContextName);
        var processManager = this.contextManager.GetItemSingle(IProcessManager_1.ProcessManagerContextName);
        var networkManager = self.contextManager.GetItemSingle(INetworkManager_1.NetworkManagerContextName);
        var cryptoManager = self.contextManager.GetItemSingle(ICryptographyManager_1.CryptographyContextName);
        var hostTriggererImpl = this.contextManager.GetItemSingle(IHostTriggerer_1.HostTriggererContextName);
        var platformManager = this.contextManager.GetItemSingle(IPlatformManager_1.PlatformManagerContextName);
        var createComponent = function (options) {
            var retVal = componentManager.createComponent(options);
            retVal.lockedFields = {};
            retVal.lockedFields["visible"] = _this.initRoleBaseAuthFunc(options);
            return retVal;
        };
        var componentHasProp = function (_a) {
            var componentName = _a.componentName, propName = _a.propName;
            return componentManager.componentHasProp(componentName, propName);
        };
        var createContainerView = function (compUID) {
            var _a;
            var retVal = (_a = componentManager.createContainerView) === null || _a === void 0 ? void 0 : _a.call(componentManager, compUID);
            return retVal;
        };
        var updateContainerView = function (options) {
            var _a;
            (_a = componentManager.updateContainerView) === null || _a === void 0 ? void 0 : _a.call(componentManager, options);
        };
        var dory = (0, dory_1.InitDory)({ doryInstName: doryInstName });
        var retrieveCjson = function (_a) {
            var qjsonPath = _a.qjsonPath;
            return __awaiter(_this, void 0, void 0, function () {
                var qjsonPool, qjson;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            qjsonPool = self.contextManager.GetItemSingle(QJsonPool_1.QJsonPool.contextName);
                            qjson = qjsonPool === null || qjsonPool === void 0 ? void 0 : qjsonPool.getCJson(qjsonPath);
                            if (qjson) {
                                return [2 /*return*/, qjson];
                            }
                            return [4 /*yield*/, (qjsonPool === null || qjsonPool === void 0 ? void 0 : qjsonPool.retrieveAndFillQjsonAsync({ qjson: { type: "path", path: qjsonPath }, dory: dory, }))];
                        case 1:
                            qjson = _b.sent();
                            return [2 /*return*/, qjson];
                    }
                });
            });
        };
        dory.SetOperatorCollection(operatorCollection);
        dory.SetShellGlobalConfiguration({
            coreComponentOverrider: componentManager.coreComponentOverrider, componentInstanceTracker: compInstTracker, historyBasedConf: { componentHasProp: componentHasProp, createComponent: createComponent, isEditor: this.isEditor, retrieveCjson: retrieveCjson, createContainerView: createContainerView, updateContainerView: updateContainerView, },
            go: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(this, void 0, void 0, function () {
                    var goArgs, navigationParams;
                    return __generator(this, function (_a) {
                        if (args == undefined) {
                            return [2 /*return*/];
                        }
                        goArgs = __assign({}, args);
                        if (args.length == 1) {
                            navigationParams = { url: goArgs[0] };
                        }
                        else {
                            navigationParams = { url: goArgs };
                        }
                        (navigationManager === null || navigationManager === void 0 ? void 0 : navigationManager.go) && args.length > 1 ? navigationManager.go(navigationParams) : renderer === null || renderer === void 0 ? void 0 : renderer.Render({ pjsonPath: goArgs[0] });
                        return [2 /*return*/];
                    });
                });
            },
            go2: function (qjsonPath, options) {
                if (dory.platformType !== "Web") {
                    return renderer === null || renderer === void 0 ? void 0 : renderer.Render({ pjsonPath: qjsonPath, options: options });
                }
                if (!(options === null || options === void 0 ? void 0 : options.newTab)) {
                    return renderer === null || renderer === void 0 ? void 0 : renderer.Render({ pjsonPath: qjsonPath, options: options });
                }
                navigationManager.go2(qjsonPath, options, function () {
                    return renderer === null || renderer === void 0 ? void 0 : renderer.Render({ pjsonPath: qjsonPath });
                });
            },
            integrationsEventTrigger: function (name, params) {
                if (dory.platformType !== "Web") {
                    throw new Error("Integration Custom Event trigger not supported in UI Editor");
                }
                integrationsManager.customIntegrationEventTrigger(name, params);
            },
            hostTrigger: function (functionName, params, pageNameArray) {
                var _a;
                return (_a = hostTriggererImpl === null || hostTriggererImpl === void 0 ? void 0 : hostTriggererImpl.hostTrigger) === null || _a === void 0 ? void 0 : _a.call(hostTriggererImpl, functionName, params, pageNameArray);
            },
            processManager: processManager,
            triggerPreviousPage: navigationManager === null || navigationManager === void 0 ? void 0 : navigationManager.backOverride,
            storeAccess: storeManager,
            cookieAccess: cookieManager,
            lridHelper: externalLocalizationFunc ? function (label) {
                var returnVal;
                try {
                    returnVal = externalLocalizationFunc(label);
                }
                catch (error) {
                    returnVal = "";
                }
                return returnVal;
            } : undefined,
            roleBaseViewHelper: function (key) {
                try {
                    return roleBaseAuthFunc(key);
                }
                catch (error) {
                    return true;
                }
            },
            resetTimeTextField: function (component) {
                component.$refs.input.value = null;
            },
            platform: platformManager,
            setTheme: function (themeName) {
                return uxManager.setTheme(themeName);
            },
            getThemeList: function () {
                var themeList = uxManager.getThemeList();
                if (!themeList) {
                    return [];
                }
                //if (!(themeList instanceof Array)) { return themeList;}
                else {
                    return themeList;
                }
            },
            addTheme: function (themeName) {
                return uxManager.addTheme(themeName);
            },
            removeTheme: function (themeName) {
                return uxManager.removeTheme(themeName);
            },
            getRegionList: function () {
                var regionList = regionalManager.getRegionList();
                if (!regionList) {
                    return [];
                }
                else {
                    return regionList;
                }
            },
            getCurrentRegion: function () {
                var region = regionalManager.getRegion();
                // return regionalManager.getRegion;
                // const region = regionalManager.getRegion;
                if (!region) {
                    return "";
                }
                else {
                    return region;
                }
            },
            getFormattingDefinitionByCurrentRegion: regionalManager.getFormattingDefinitionByCurrentRegion.bind(regionalManager),
            redirect: function (_a) {
                var url = _a.url, options = _a.options;
                navigationManager.redirect({ url: url, options: options });
            },
            setRegion: function (regionName) {
                return regionalManager.setRegion(regionName);
            },
            // getThemeList: function () {
            //     const themeList = uxManager.getThemeList();
            //     if (!themeList) { return undefined; }
            //     if (!(themeList instanceof Array)) { return themeList;}
            //     return { default: themeList };
            // },
            network: networkManager,
            shellGlobalMethods: globalMethods,
            osGlobalObjects: this.shellManager.PollyFill(),
            compPropsAutoLrid: true,
            formatConfiguration: {
                dateFormat: function () {
                    return "YYYY/MM/DD";
                },
                moneyFormat: function () {
                    return "tr-TR";
                },
            },
            redirectTo: function (_a) {
                var url = _a.url;
                if (navigationManager.redirectFunc)
                    navigationManager.redirectFunc({ url: url });
            },
            getUrl: function (options) {
                if (navigationManager.getUrl) {
                    return navigationManager.getUrl(options);
                }
                return;
            },
            performance: globalMethods.performance,
            dynamicCompHandler: !this.isEditor ? globalMethods.dynamicCompHandler : undefined,
            deleteComponent: !this.isEditor ? globalMethods.deleteComponent : undefined,
            exportToXlsxHandler: globalMethods.exportToXlsxHandler,
            setComponentClass: globalMethods.setComponentClass,
            setComponentsProperty: globalMethods.setComponentsProperty,
            setVisibility: componentManager.setVisibility,
            getComponentValue: componentManager.getComponentValue,
            setComponentValue: componentManager.setComponentValue,
            getComponentStyle: componentManager.getComponentStyle,
            setComponentStyle: componentManager.setComponentStyle,
            onComponentDestroy: componentManager.onComponentDestroy,
            createComponentQValue: componentManager.createComponentQValue,
            onLRChange: regionalManager.onLRChange,
            setDarkTheme: uxManager.setDarkTheme,
            clearPageClose: globalMethods.clearPageClose,
            setPageClose: globalMethods.setPageClose,
            scrollIntoView: globalMethods.scrollIntoView,
            YOffset: globalMethods.YOffset,
            XOffset: globalMethods.XOffset,
            toTop: globalMethods.toTop,
            getEnvironmentVariable: globalMethods.getEnvironmentVariable,
            getYamlLogType: globalMethods.getYamlLogType,
            getPageTitle: globalMethods.getPageTitle,
            setPageTitle: globalMethods.setPageTitle,
            copyToClipboard: globalMethods.copyToClipboard,
            getCurrentPosition: globalMethods.getCurrentPosition,
            getFavicon: globalMethods.getFavicon,
            cryptoGenerateKeyPair: cryptoManager.cryptoGenerateKeyPair,
            cryptoSha512: cryptoManager.cryptoSha512,
            cryptoSign: cryptoManager.cryptoSign,
            cryptoStore: cryptoManager.cryptoStore,
            getMinEngineLogType: globalMethods.getMinEngineLogType,
            downloadHandler: globalMethods.downloadHandler,
            getComponent: globalMethods.getComponent,
            getNetworkConnection: globalMethods.getNetworkConnection
        });
        dory.SetTSComponentWrapper((_a = componentManager.tsComponentWrapper) === null || _a === void 0 ? void 0 : _a.call(componentManager));
        return dory;
    };
    //TODO Tipini yaz nulable
    DoryHelper.prototype.initRoleBaseAuthFunc = function (options) {
        var roleBaseAuthFunc = this.contextManager.GetItemSingle(IRoleBaseAuthorizationFunc_1.RoleBaseAuthorizationFuncContextName);
        if (options.props && options.props["useRoleBaseAuthorization"] && roleBaseAuthFunc) {
            return true;
        }
        return false;
    };
    DoryHelper.prototype.delayTillPostDisplay = function (cb) {
        (this.doryJr || this.Dory).delayTillPostDisplay(cb);
    };
    return DoryHelper;
}());
exports.DoryHelper = DoryHelper;


/***/ }),

/***/ "../../common/qshell/src/helpers/QJsonHelpers/QJsonCollector.ts":
/*!*********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/helpers/QJsonHelpers/QJsonCollector.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonCollector = void 0;
var LangCalc_1 = __webpack_require__(/*! ../../../../shrimp/interfaces/Scripting/LangCalc */ "../../common/shrimp/interfaces/Scripting/LangCalc.ts");
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var compPromise = "component promise";
var QJsonCollector = /** @class */ (function () {
    function QJsonCollector(_a) {
        var moduleManager = _a.moduleManager;
        this.moduleManager = moduleManager;
    }
    QJsonCollector.prototype.collectQJson = function (cJson, dory, qjsonRetrieve, qLang) {
        var promiseList = null;
        var self = this;
        var traverseJson = function (childCJson) {
            var _this = this;
            if (!childCJson) {
                return;
            }
            childCJson.forEach(function (comp) { return __awaiter(_this, void 0, void 0, function () {
                var qJsonPaths, compProm;
                var _a;
                return __generator(this, function (_b) {
                    if (!comp) {
                        return [2 /*return*/];
                    }
                    qJsonPaths = [];
                    if (comp.T == "CustomComponent" || comp.T == "RenderingComponent") {
                        qJsonPaths.push(dory.Evaluate({ script: (_a = comp.P.QJsonPath) === null || _a === void 0 ? void 0 : _a.H, response: null, lang: LangCalc_1.LangCalc.getLang({ ctrl: comp, qLang: qLang }) }));
                    }
                    else {
                        compProm = self.moduleManager.CheckComponent(comp.T, comp.CP);
                        if (compProm) {
                            promiseList = promiseList || [];
                            promiseList === null || promiseList === void 0 ? void 0 : promiseList.push({ prom: compProm, qJsonPath: compPromise, result: -1 });
                        }
                    }
                    if (qJsonPaths) {
                        qJsonPaths.forEach(function (qJsonPath) {
                            if (!qJsonPath) {
                                return;
                            }
                            var qjsonProm = qjsonRetrieve(qJsonPath);
                            promiseList = promiseList || [];
                            promiseList.push({ prom: qjsonProm, qJsonPath: qJsonPath, result: -1 });
                        });
                    }
                    if (comp.C) {
                        Object.keys(comp.C).forEach(function (childKey) { return traverseJson(comp.C[childKey].c); });
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        traverseJson(cJson);
        var subPromiseList = [];
        var retrieveCounter = 0;
        return new Promise(function (resolve, reject) {
            if (!promiseList) {
                resolve(promiseList);
                return;
            }
            promiseList.forEach(function (promiseItem) {
                promiseItem.prom.then(function (justQJson) {
                    promiseItem.result++;
                    if (promiseItem.qJsonPath == compPromise) {
                        return;
                    }
                    var subProm = self.collectQJson(justQJson.cJson, dory, qjsonRetrieve, qLang);
                    subPromiseList.push(subProm);
                    subProm.then(function (resolved) {
                        if (resolved) {
                            promiseItem.subPromiseList = promiseItem.subPromiseList || [];
                            promiseItem.subPromiseList.push(resolved);
                        }
                    });
                }).catch(function (err) {
                    logger_1.Logger.Log({ logMessage: "Error on collectQJson can't find qjson: " + promiseItem.qJsonPath + "." });
                }).finally(function () {
                    if (++retrieveCounter == promiseList.length) {
                        Promise.all(subPromiseList).then(function () { return resolve(promiseList); });
                    }
                });
            });
        });
    };
    return QJsonCollector;
}());
exports.QJsonCollector = QJsonCollector;


/***/ }),

/***/ "../../common/qshell/src/helpers/QJsonHelpers/QJsonPool.ts":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/helpers/QJsonHelpers/QJsonPool.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonPool = void 0;
var logger_1 = __webpack_require__(/*! ../../../../shrimp/helpers/logger */ "../../common/shrimp/helpers/logger.ts");
var QJsonExtractHelper_1 = __webpack_require__(/*! ../../../../shrimp/helpers/qjsonParser/QJsonExtractHelper */ "../../common/shrimp/helpers/qjsonParser/QJsonExtractHelper.ts");
var QJsonCollector_1 = __webpack_require__(/*! ./QJsonCollector */ "../../common/qshell/src/helpers/QJsonHelpers/QJsonCollector.ts");
function importer(name) {
    var _this = this;
    return function (pool) { return __awaiter(_this, void 0, void 0, function () {
        var comps;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(__webpack_require__(/*! ../../customComponents/index */ "../../common/qshell/src/customComponents/index.ts")); })];
                case 1:
                    comps = _a.sent();
                    Object.keys(comps).forEach(function (key) { return pool[key] = comps[key]; });
                    return [2 /*return*/, comps[name]];
            }
        });
    }); };
}
var QJsonPool = /** @class */ (function () {
    function QJsonPool(_a) {
        var qjsonRetriever = _a.qjsonRetriever, moduleManager = _a.moduleManager, context = _a.context;
        this.contextName = QJsonPool.contextName;
        this.qJsonPool = {};
        this.qjsonRetriever = qjsonRetriever;
        this.moduleManager = moduleManager;
        this.qjsonCollector = new QJsonCollector_1.QJsonCollector({ moduleManager: moduleManager });
        this.context = context;
        this.ResetPool();
    }
    Object.defineProperty(QJsonPool.prototype, "Dory", {
        get: function () {
            return this._Dory;
        },
        set: function (v) {
            this._Dory = v;
        },
        enumerable: false,
        configurable: true
    });
    QJsonPool.prototype.ResetPool = function () {
        var self = this;
        this.qJsonPool = {
            get "qjson://QLegend"() {
                return importer("QLegend")(self.qJsonPool);
            },
            get "qjson://QCaptcha"() {
                return importer("QCaptcha")(self.qJsonPool);
            },
            get "qjson://QDynamicFields"() {
                return importer("QDynamicFields")(self.qJsonPool);
            },
            get "qjson://QQRCode"() {
                return importer("QQRCode")(self.qJsonPool);
            },
        };
    };
    Object.defineProperty(QJsonPool.prototype, "ModuleManager", {
        get: function () {
            return this.moduleManager;
        },
        enumerable: false,
        configurable: true
    });
    QJsonPool.prototype.retrieveAndFillQjsonAsync = function (_a) {
        var _b, _c;
        var qjson = _a.qjson, dory = _a.dory;
        return __awaiter(this, void 0, void 0, function () {
            var self, qjsonData, qshellContext, shellConfigs, extractQjson, qjsonRetrieveFunc, qjsonContent, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        self = this;
                        qjsonData = qjson;
                        qshellContext = this.context.GetItemSingle("QShell");
                        shellConfigs = ((_b = qshellContext) === null || _b === void 0 ? void 0 : _b.getRender()).DoryInst.GetShellConfiguration();
                        extractQjson = function (qjsonStringProm) {
                            return __awaiter(this, void 0, void 0, function () {
                                var qjsonString, qjson, _a, _b;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0: return [4 /*yield*/, qjsonStringProm];
                                        case 1:
                                            qjsonString = _c.sent();
                                            _b = (_a = QJsonExtractHelper_1.QJsonExtractHelper).qJsonExtractor;
                                            return [4 /*yield*/, qjsonStringProm];
                                        case 2:
                                            qjson = _b.apply(_a, [_c.sent()]);
                                            return [2 /*return*/, qjson];
                                    }
                                });
                            });
                        };
                        qjsonRetrieveFunc = function (qjsonPath, fixSyncResolve) {
                            var _a;
                            return __awaiter(this, void 0, void 0, function () {
                                var qjson, qjsonStringProm, disablePagePool, qjsonProm, ex_1;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            qjson = self.qJsonPool[qjsonPath];
                                            if (!qjson) return [3 /*break*/, 5];
                                            if (!(typeof qjson == "function")) return [3 /*break*/, 1];
                                            return [2 /*return*/, qjson(self.qJsonPool)];
                                        case 1:
                                            if (!(qjson instanceof Promise)) return [3 /*break*/, 3];
                                            return [4 /*yield*/, qjson];
                                        case 2: return [2 /*return*/, _b.sent()];
                                        case 3: return [2 /*return*/, qjson];
                                        case 4: return [3 /*break*/, 10];
                                        case 5:
                                            qjsonStringProm = self.qjsonRetriever.retrieveQJsonAsync(qjsonPath, qjsonData.options);
                                            disablePagePool = self.qjsonRetriever.disablePagePool;
                                            _b.label = 6;
                                        case 6:
                                            _b.trys.push([6, 8, , 9]);
                                            qjsonProm = extractQjson(qjsonStringProm);
                                            // consolelog("ccccccc qjsonRetrieveFunc 1");
                                            if (!self.Dory.GetEditor() && !disablePagePool) {
                                                self.qJsonPool[qjsonPath] = qjsonProm;
                                            }
                                            return [4 /*yield*/, qjsonProm];
                                        case 7:
                                            qjson = _b.sent();
                                            // consolelog("ccccccc qjsonRetrieveFunc 2");
                                            if (!self.Dory.GetEditor() && !disablePagePool) {
                                                self.qJsonPool[qjsonPath] = qjson;
                                            }
                                            return [3 /*break*/, 9];
                                        case 8:
                                            ex_1 = _b.sent();
                                            logger_1.Logger.Log({ logMessage: "qjson error: " + qjsonPath + " has error", logType: logger_1.LogType.Trace, additional: ex_1, minEngineLogLevel: (_a = shellConfigs.getMinEngineLogType) === null || _a === void 0 ? void 0 : _a.call(shellConfigs) });
                                            throw ex_1;
                                        case 9: return [2 /*return*/, qjson];
                                        case 10: return [2 /*return*/];
                                    }
                                });
                            });
                        };
                        if (!(qjson.type == "content")) return [3 /*break*/, 1];
                        _d = qjson.content;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, qjsonRetrieveFunc(qjson.path, true)];
                    case 2:
                        _d = _e.sent();
                        _e.label = 3;
                    case 3:
                        qjsonContent = _d;
                        return [4 /*yield*/, this.qjsonCollector.collectQJson(qjsonContent.cJson, dory, qjsonRetrieveFunc, (_c = qjsonContent.opt) === null || _c === void 0 ? void 0 : _c.QL)];
                    case 4:
                        _e.sent();
                        return [2 /*return*/, qjsonContent];
                }
            });
        });
    };
    QJsonPool.prototype.getCJson = function (qjsonPath) {
        return this.qJsonPool[qjsonPath];
    };
    QJsonPool.contextName = "QJsonPool";
    return QJsonPool;
}());
exports.QJsonPool = QJsonPool;


/***/ }),

/***/ "../../common/qshell/src/helpers/Renderer.ts":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/helpers/Renderer.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryRenderer = exports.Renderer = void 0;
var hook_1 = __webpack_require__(/*! ../../../shrimp/helpers/hook */ "../../common/shrimp/helpers/hook.ts");
var IRegionalManager_1 = __webpack_require__(/*! ../interfaces/construction/IRegionalManager */ "../../common/qshell/src/interfaces/construction/IRegionalManager.ts");
var DoryHelper_1 = __webpack_require__(/*! ./DoryHelper */ "../../common/qshell/src/helpers/DoryHelper.ts");
var QJsonPool_1 = __webpack_require__(/*! ./QJsonHelpers/QJsonPool */ "../../common/qshell/src/helpers/QJsonHelpers/QJsonPool.ts");
var RendererChild_1 = __webpack_require__(/*! ./RendererChild */ "../../common/qshell/src/helpers/RendererChild.ts");
var Renderer = /** @class */ (function () {
    function Renderer(_a) {
        var context = _a.context, doryInstanceName = _a.doryInstanceName, operatorCollection = _a.operatorCollection;
        this.BeforeRenderStartHook = new hook_1.Hook("BeforeRenderStartHook");
        this.context = context;
        this.Dory = new DoryHelper_1.DoryHelper({ context: this.context, doryInstName: doryInstanceName, renderer: this, operatorCollection: operatorCollection }).Dory;
        this.settingsQJsons = this.Dory.SettingsQJsonContext;
    }
    Object.defineProperty(Renderer.prototype, "PageCompletedHook", {
        get: function () {
            return this.Dory.PageCompletedHook;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "PageRenderStartedHook", {
        get: function () {
            return this.Dory.PageRenderStartedHook;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "DisplayHook", {
        get: function () {
            return this.Dory.DisplayHook;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.Render = function (_a) {
        var pjsonPath = _a.pjsonPath, compParentInst = _a.compParentInst, storeItems = _a.storeItems, pageId = _a.pageId, pageName = _a.pageName, pjsonContent = _a.pjsonContent, options = _a.options;
        return __awaiter(this, void 0, void 0, function () {
            var qjsonPool, qjsonData, qJSon;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.BeforeRenderStartHook.triggerer();
                        qjsonPool = this.context.GetItemSingle(QJsonPool_1.QJsonPool.contextName);
                        if (!pjsonContent && !pjsonPath) {
                            return [2 /*return*/];
                        }
                        qjsonData = pjsonContent ? { type: "content", content: pjsonContent } : { type: "path", path: pjsonPath };
                        qjsonData.options = { mobileAnimation: options === null || options === void 0 ? void 0 : options.mobileAnimation };
                        return [4 /*yield*/, (qjsonPool === null || qjsonPool === void 0 ? void 0 : qjsonPool.retrieveAndFillQjsonAsync({ qjson: qjsonData, dory: this.Dory }))];
                    case 1:
                        qJSon = _b.sent();
                        if (!qJSon) {
                            return [2 /*return*/];
                        }
                        // consolelog("ccccccc Renderer.Render 1");
                        pageName = pageName !== null && pageName !== void 0 ? pageName : (pjsonPath ? this.getPageName(pjsonPath) : Math.random().toString());
                        this.Dory.Render({ qjson: qJSon, compParentInst: compParentInst, storeItems: storeItems, pageId: pageId, pageName: pageName });
                        return [2 /*return*/];
                }
            });
        });
    };
    Renderer.prototype.CreateChildRenderer = function (compUIDPrefix) {
        return new RendererChild_1.DoryRendererChild(this, compUIDPrefix);
    };
    Renderer.prototype.SetLRType = function (LRType) {
        var _a;
        this.Dory.SetLRType(LRType);
        var region = this.context.GetItemSingle(IRegionalManager_1.RegionalManagerContextName);
        (_a = region === null || region === void 0 ? void 0 : region.onLRChange) === null || _a === void 0 ? void 0 : _a.call(region, LRType === null || LRType === void 0 ? void 0 : LRType.substring(0, 2));
    };
    Renderer.prototype.GetLRType = function () {
        return this.Dory.GetLRType();
    };
    Renderer.prototype.SetConfigValues = function (configValues) {
        this.Dory.SetConfigValues(configValues);
    };
    Renderer.prototype.SetGlobalLRDict = function (GlobalLRDict) {
        this.Dory.SetGlobalLRDict(GlobalLRDict);
    };
    Renderer.prototype.SetSiteSettings = function (siteSettings) {
        this.Dory.SetSiteSettings(siteSettings);
    };
    Renderer.prototype.SetPlatformType = function (platformType) {
        this.Dory.SetPlatformType(platformType);
    };
    Renderer.prototype.SetDisplayCallBack = function (callBackFunc) {
        this.Dory.SetDisplayCallBack({ callBackFunc: callBackFunc });
    };
    ;
    Renderer.prototype.SetPartialDisplayCallBack = function (callBackFunc) {
        this.Dory.SetPartialDisplayCallBack({ callBackFunc: callBackFunc });
    };
    ;
    Renderer.prototype.GetNavigationDemand = function (pageId) {
        return this.Dory.hasHistory(pageId);
    };
    Renderer.prototype.GoHistory = function (navigationDemand) {
        this.Dory.goHistory({ navigationDemand: navigationDemand });
    };
    Renderer.prototype.GetCurrentHistoryItem = function () {
        return this.Dory.GetCurrentHistoryItem();
    };
    Renderer.prototype.Back = function () {
        // window.history.back();
        this.Dory.goHistoryBack();
    };
    Renderer.prototype.Forward = function () {
        // window.history.forward();
        this.Dory.goHistoryForward();
    };
    Renderer.prototype.Clear = function () {
        this.Dory.Clear();
    };
    Renderer.prototype.Hibernate = function () {
        this.Dory.CallHibernate();
    };
    Renderer.prototype.CheckComponent = function (_a) {
        var compName = _a.compName;
        var qjsonPool = this.context.GetItemSingle(QJsonPool_1.QJsonPool.contextName);
        return qjsonPool === null || qjsonPool === void 0 ? void 0 : qjsonPool.ModuleManager.CheckComponent(compName, undefined);
    };
    Renderer.prototype.GetComponentCollection = function () {
        return this.Dory.GetComponentCollection();
    };
    Renderer.prototype.getPageName = function (pjsonPath) {
        var qjsonIndex = pjsonPath.indexOf(".qjson");
        if (qjsonIndex < 0) {
            return pjsonPath;
        }
        return pjsonPath.substring(0, qjsonIndex);
    };
    Renderer.prototype.Trigger = function (eventName, parameters) {
        return this.Dory.Trigger(eventName, parameters);
    };
    Renderer.prototype.SetEditMode = function (state) {
        this.Dory.SetEditMode(state);
    };
    Renderer.prototype.SetThemeName = function (theme) {
        this.Dory.SetThemeName(theme);
    };
    Renderer.prototype.SetThemes = function (themes) {
        this.Dory.SetThemes(themes);
    };
    return Renderer;
}());
exports.Renderer = Renderer;
var DoryRenderer = /** @class */ (function (_super) {
    __extends(DoryRenderer, _super);
    function DoryRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DoryRenderer.prototype, "DoryInst", {
        get: function () {
            return this.Dory;
        },
        enumerable: false,
        configurable: true
    });
    return DoryRenderer;
}(Renderer));
exports.DoryRenderer = DoryRenderer;


/***/ }),

/***/ "../../common/qshell/src/helpers/RendererChild.ts":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/helpers/RendererChild.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryRendererChild = exports.RendererChild = void 0;
var QJsonPool_1 = __webpack_require__(/*! ./QJsonHelpers/QJsonPool */ "../../common/qshell/src/helpers/QJsonHelpers/QJsonPool.ts");
var RendererChild = /** @class */ (function () {
    function RendererChild(renderer, compUIDPrefix) {
        this.doryRenderer = renderer;
        this.doryJr = this.doryRenderer.DoryInst.CreateDoryJr({ compUIDPrefix: compUIDPrefix });
    }
    RendererChild.prototype.SetCallbackDisplay = function (callBackFunc) {
        this.doryJr.setCallbackDisplay(callBackFunc);
    };
    RendererChild.prototype.Render = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var qjsonPool, qjsonData, dory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        qjsonPool = this.doryRenderer.context.GetItemSingle(QJsonPool_1.QJsonPool.contextName);
                        qjsonData = { type: "content", content: options.qjson };
                        dory = this.doryRenderer.DoryInst;
                        return [4 /*yield*/, (qjsonPool === null || qjsonPool === void 0 ? void 0 : qjsonPool.retrieveAndFillQjsonAsync({ qjson: qjsonData, dory: dory }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.doryJr.Render(options)];
                }
            });
        });
    };
    return RendererChild;
}());
exports.RendererChild = RendererChild;
var DoryRendererChild = /** @class */ (function (_super) {
    __extends(DoryRendererChild, _super);
    function DoryRendererChild() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DoryRendererChild.prototype, "DoryJrInst", {
        get: function () {
            return this.doryJr;
        },
        enumerable: false,
        configurable: true
    });
    return DoryRendererChild;
}(RendererChild));
exports.DoryRendererChild = DoryRendererChild;


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/CompInstanceTracker.ts":
/*!*****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/CompInstanceTracker.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CompInstanceTrackerContextName = void 0;
exports.CompInstanceTrackerContextName = "ComponentInstanceTracker";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IComponentManager.ts":
/*!***************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IComponentManager.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentManagerContextName = void 0;
exports.ComponentManagerContextName = "ComponentManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/ICookieManager.ts":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/ICookieManager.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CookieManagerContextName = void 0;
exports.CookieManagerContextName = "CookieManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/ICryptographyManager.ts":
/*!******************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/ICryptographyManager.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptographyContextName = void 0;
exports.CryptographyContextName = "Cryptography";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IGlobalMethods.ts":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IGlobalMethods.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalMethodsContextName = void 0;
exports.GlobalMethodsContextName = "GlobalMethods";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IHostTriggerer.ts":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IHostTriggerer.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HostTriggererContextName = void 0;
exports.HostTriggererContextName = "HostTriggerer";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IIntegrationsManager.ts":
/*!******************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IIntegrationsManager.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationsManagerContextName = void 0;
exports.IntegrationsManagerContextName = "IntegrationsManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/ILanguageExtensions.ts":
/*!*****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/ILanguageExtensions.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageExtensionsContextName = void 0;
exports.LanguageExtensionsContextName = "LanguageExtensions";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/INavigationManager.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/INavigationManager.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationManagerContextName = void 0;
exports.NavigationManagerContextName = "NavigationManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/INetworkManager.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/INetworkManager.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkManagerContextName = void 0;
exports.NetworkManagerContextName = "NetworkManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IPlatformManager.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IPlatformManager.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformManagerContextName = void 0;
exports.PlatformManagerContextName = "PlatformManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IProcessManager.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IProcessManager.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessManagerContextName = void 0;
exports.ProcessManagerContextName = "ProcessManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IQJsonRetriever.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IQJsonRetriever.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonRetrieverContextName = void 0;
exports.QJsonRetrieverContextName = "QJsonRetriever";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IRegionalManager.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IRegionalManager.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RegionalManagerContextName = void 0;
exports.RegionalManagerContextName = "RegionalManager";


/***/ }),

/***/ "../../common/qshell/src/interfaces/construction/IStoreManager.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/interfaces/construction/IStoreManager.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreManagerContextName = void 0;
exports.StoreManagerContextName = "StoreManager";


/***/ }),

/***/ "../../common/qshell/src/managers/shellManager.ts":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/qshell/src/managers/shellManager.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ShellManager = void 0;
var shellHelper_1 = __webpack_require__(/*! ../../../shrimp/helpers/shellHelper */ "../../common/shrimp/helpers/shellHelper.ts");
var ShellManager = /** @class */ (function () {
    function ShellManager(langImpl) {
        var _a;
        this.shell = {};
        this.langImpl = langImpl;
        this.osGlobals = ((_a = this.langImpl) === null || _a === void 0 ? void 0 : _a.createOsGlobalObjects()) || {};
        this.shell = this.osGlobals.shell = this.osGlobals.shell || {};
        (0, shellHelper_1.fixShell)(this.shell);
    }
    Object.defineProperty(ShellManager.prototype, "UserContext", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.shell).getUserContext) === null || _b === void 0 ? void 0 : _b.call(_a);
        },
        set: function (user) {
            var _a, _b;
            if (!user) {
                return;
            }
            (_b = (_a = this.shell).setUserContext) === null || _b === void 0 ? void 0 : _b.call(_a, user);
        },
        enumerable: false,
        configurable: true
    });
    ShellManager.prototype.PollyFill = function () {
        return this.osGlobals;
    };
    return ShellManager;
}());
exports.ShellManager = ShellManager;


/***/ }),

/***/ "../../common/shrimp/context.ts":
/*!*************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/context.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextManager = void 0;
var contextManager_1 = __webpack_require__(/*! ./src/context/contextManager */ "../../common/shrimp/src/context/contextManager.ts");
Object.defineProperty(exports, "ContextManager", { enumerable: true, get: function () { return contextManager_1.ContextManager; } });


/***/ }),

/***/ "../../common/shrimp/helpers/AIServiceHelper/QJsonManagerForAIService.ts":
/*!******************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/AIServiceHelper/QJsonManagerForAIService.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonManagerForAIService = void 0;
var QJsonManagerForAIService = /** @class */ (function () {
    function QJsonManagerForAIService() {
        this.Columns = {
            exist: false,
            parentalLevel: 0
        };
        this.rootLevelObjects = {
            model: {}, minifiedModel: {}, minifiedModelForLayouts: {}, layoutModels: []
        };
    }
    QJsonManagerForAIService.prototype.setModelChild = function (compID, key, qJsonManagerForAIService) {
        var _a = this.getModels({ compID: compID }), model = _a.model, minifiedModel = _a.minifiedModel, minifiedModelForLayouts = _a.minifiedModelForLayouts;
        model.C[key] = qJsonManagerForAIService.rootLevelObjects.model;
        minifiedModel.C[key] = qJsonManagerForAIService.rootLevelObjects.minifiedModel;
        minifiedModelForLayouts.C[key] = qJsonManagerForAIService.rootLevelObjects.minifiedModelForLayouts;
        var prevLayoutModels = qJsonManagerForAIService.rootLevelObjects.layoutModels;
        this.rootLevelObjects.layoutModels = this.rootLevelObjects.layoutModels.concat(prevLayoutModels);
        if (qJsonManagerForAIService.Columns.exist == true) {
            if (qJsonManagerForAIService.Columns.parentalLevel < 2) {
                this.Columns.parentalLevel = qJsonManagerForAIService.Columns.parentalLevel + 1;
                this.Columns.exist = qJsonManagerForAIService.Columns.exist;
            }
        }
    };
    QJsonManagerForAIService.prototype.setModels = function (ctrl) {
        var _this = this;
        var _a = this.getModels({ ctrl: ctrl }), model = _a.model, minifiedModel = _a.minifiedModel, minifiedModelForLayouts = _a.minifiedModelForLayouts;
        Object.keys(ctrl).forEach(function (item) {
            switch (item) {
                case "C": { //children
                    break;
                }
                case "T": { //types
                    model[item] = ctrl[item];
                    minifiedModel[item] = ctrl[item];
                    minifiedModelForLayouts[item] = ctrl[item];
                    break;
                }
                case "P": { //properties
                    model[item] = ctrl[item];
                    break;
                }
                case "E": { // events
                    model[item] = ctrl[item];
                    break;
                }
                case "_Editor": { //editorJson
                    model["eID"] = ctrl[item].eID;
                    minifiedModel["eID"] = ctrl[item].eID;
                    minifiedModelForLayouts["eID"] = ctrl[item].eID;
                    break;
                }
                case "D": { //directives
                    break;
                }
                case "O": { //mustafa anlamsız dedi.
                    break;
                }
                case "S": {
                    var minifiedS = _this.minifyS(ctrl[item]);
                    if (!minifiedS) {
                        break;
                    }
                    model[item] = ctrl[item];
                    minifiedModel[item] = minifiedS;
                    minifiedModelForLayouts[item] = minifiedS;
                    break;
                }
                default: {
                    model[item] = ctrl[item];
                    minifiedModel[item] = ctrl[item];
                    minifiedModelForLayouts[item] = ctrl[item];
                    break;
                }
            }
        });
        this.seperateLayouts(ctrl);
    };
    QJsonManagerForAIService.prototype.seperateLayouts = function (ctrl) {
        var _a;
        if (ctrl.T == "VCol") {
            this.Columns.exist = true;
        }
        if (this.Columns.parentalLevel == 2) {
            var minifiedContainer = this.rootLevelObjects.minifiedModelForLayouts[ctrl.P.ID.H];
            this.rootLevelObjects.layoutModels.push((_a = {}, _a[ctrl.P.ID.H] = JSON.parse(JSON.stringify(minifiedContainer)), _a));
            minifiedContainer.C = {};
        }
    };
    QJsonManagerForAIService.prototype.getModels = function (_a) {
        var ctrl = _a.ctrl, compID = _a.compID;
        var retVal = {};
        if (compID) { //if it is the deepest component it is coming with compID
            retVal.model = this.rootLevelObjects.model[compID] = this.rootLevelObjects.model[compID] || { C: {} };
            retVal.minifiedModel = this.rootLevelObjects.minifiedModel[compID] = this.rootLevelObjects.minifiedModel[compID] || { C: {} };
            retVal.minifiedModelForLayouts = this.rootLevelObjects.minifiedModelForLayouts[compID] = this.rootLevelObjects.minifiedModelForLayouts[compID] || { C: {} };
        }
        else if (ctrl) { // otherwise ctrl
            retVal.model = this.rootLevelObjects.model[ctrl.P.ID.H] = this.rootLevelObjects.model[ctrl.P.ID.H] || { C: {} };
            retVal.minifiedModel = this.rootLevelObjects.minifiedModel[ctrl.P.ID.H] = this.rootLevelObjects.minifiedModel[ctrl.P.ID.H] || { C: {} };
            retVal.minifiedModelForLayouts = this.rootLevelObjects.minifiedModelForLayouts[ctrl.P.ID.H] = this.rootLevelObjects.minifiedModelForLayouts[ctrl.P.ID.H] || { C: {} };
        }
        return retVal;
    };
    QJsonManagerForAIService.prototype.minifyP = function (properiesJson) {
        var minifiedProperties = {};
        Object.keys(properiesJson).forEach(function (prop) {
            if (prop != ("Render" || false)) {
                minifiedProperties[prop] = properiesJson[prop].H.replaceAll("╬", "").replace("╩╩", "");
            }
        });
        return minifiedProperties;
    };
    QJsonManagerForAIService.prototype.minifyS = function (styleJson) {
        var map = ["col", "flexDirection", "alignItems", "justifyContent", "width", "height", "unlink"];
        var retVal = {};
        if (!styleJson) {
            return;
        }
        Object.keys(styleJson).forEach(function (style) {
            if (typeof (styleJson[style]) == "object") {
                var innerStyleObj_1 = {};
                Object.keys(styleJson[style]).forEach(function (innerStyle) {
                    if (map.includes(innerStyle)) {
                        innerStyleObj_1[innerStyle] = styleJson[style][innerStyle];
                    }
                });
                retVal[style] = innerStyleObj_1;
            }
            else {
                if (map.includes(style)) {
                    retVal[style] = styleJson[style];
                }
            }
        });
        return retVal;
    };
    QJsonManagerForAIService.prototype.minifySLayout = function (styleJson) {
        var map = {
            "marginLeft": "ML", "marginRight": "MR", "marginBottom": "MB", "marginTop": "MT", "paddingTop": "PT", "paddingBottom": "PB", "paddingLeft": "PL", "paddingRight": "PR",
            "flexDirection": "FD", "alignItems": "AI", "justifyContent": "JC", "break-point": "BP", "width": "W", "height": "H", "unlink": "UL"
        };
        var retVal = {};
        Object.keys(styleJson).forEach(function (style) {
            if (typeof (styleJson[style]) == "object") {
                var innerStyleObj_2 = {};
                Object.keys(styleJson[style]).forEach(function (innerStyle) {
                    if (map[innerStyle] && styleJson[style][innerStyle] != "") {
                        innerStyleObj_2[map[innerStyle]] = styleJson[style][innerStyle];
                    }
                });
                retVal[style] = innerStyleObj_2;
            }
            else {
                if (map[style] && styleJson[style] != "") {
                    retVal[map[style]] = styleJson[style];
                }
            }
        });
        return retVal;
    };
    return QJsonManagerForAIService;
}());
exports.QJsonManagerForAIService = QJsonManagerForAIService;


/***/ }),

/***/ "../../common/shrimp/helpers/CompJsonMigrator.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/CompJsonMigrator.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompJsonMigrator = void 0;
var layoutBarHelper_1 = __webpack_require__(/*! ../helpers/layoutBarHelper */ "../../common/shrimp/helpers/layoutBarHelper.ts");
var ICompJson_1 = __webpack_require__(/*! ../interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
;
var CompJsonMigrator = /** @class */ (function () {
    function CompJsonMigrator() {
    }
    CompJsonMigrator.fixCtrlOldStyle = function (ctrl, options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        var notifies = {};
        ctrl.O = ctrl.O || { cType: ICompJson_1.CType.child };
        ctrl.O.cType = ctrl.O.cType || ICompJson_1.CType.child;
        Object.keys(ctrl.C).forEach(function (childKey) {
            var curChild = ctrl.C[childKey];
            //fix old C type. before IChildJson
            if (Array.isArray(curChild)) {
                ctrl.C[childKey] = { cType: ctrl.O.cType == ICompJson_1.CType.slot ? ICompJson_1.CType.slot : ICompJson_1.CType.child, c: curChild }; // defaulting comp child type to each child itself
            }
        });
        //each P used to be string. fix that
        Object.keys(ctrl.P).forEach(function (propKey) {
            var propValue = ctrl.P[propKey];
            if (typeof (propValue) === "string") {
                ctrl.P[propKey] = { H: propValue, T: ICompJson_1.PType.prop };
            }
        });
        //move old text & class on O to P with type
        var o = ctrl.O;
        if (o.text) {
            ctrl.P.text = { H: o.text, T: ICompJson_1.PType.text };
            delete o.text;
        }
        if (o.class) {
            ctrl.P.class = { H: o.class, T: ICompJson_1.PType.class };
            delete o.class;
        }
        //move old class to layout.class
        if (options.mode && options.mode == "designtime" && ctrl.P[ICompJson_1.PType.class]) {
            var oldClass = (_a = ctrl.P[ICompJson_1.PType.class]) === null || _a === void 0 ? void 0 : _a.H;
            if (oldClass !== "" && (oldClass === null || oldClass === void 0 ? void 0 : oldClass.startsWith("'")) && (oldClass === null || oldClass === void 0 ? void 0 : oldClass.endsWith("'"))) {
                ctrl.O = ctrl.O || {};
                var propClass_1 = [];
                var prepareClass_1 = false;
                var layout_1 = ((_b = ctrl.O) === null || _b === void 0 ? void 0 : _b.layout) || {};
                layout_1.dOpt = layout_1.dOpt || {};
                oldClass === null || oldClass === void 0 ? void 0 : oldClass.substr(1, oldClass.length - 2).split(" ").forEach(function (old) {
                    if (old !== "") {
                        var isFound = false;
                        for (var compType in layoutBarHelper_1.layoutBarComponentClassList) {
                            isFound = false;
                            if (!(compType === "All" || compType === ctrl.T)) {
                                continue;
                            }
                            var componentClassList = layoutBarHelper_1.layoutBarComponentClassList[compType];
                            var _loop_1 = function (layoutKey) {
                                var option = old;
                                var breakpoint = "xs";
                                var dOpt = [];
                                if (layoutKey == layoutBarHelper_1.LayoutOption.column || layoutKey == layoutBarHelper_1.LayoutOption.spacing || layoutKey == layoutBarHelper_1.LayoutOption.display) {
                                    var classParts_1 = old.split("-");
                                    if (classParts_1.length > 2) {
                                        breakpoint = classParts_1[1];
                                        option = classParts_1[0] + "-" + classParts_1[2];
                                    }
                                    var result = componentClassList[layoutKey].find(function (opt) { return option.startsWith(opt); });
                                    if (result !== undefined) {
                                        if (classParts_1[0] === layoutBarHelper_1.LayoutOption.paddingAll || classParts_1[0] === layoutBarHelper_1.LayoutOption.marginAll) {
                                            var spacingOptions = layoutBarHelper_1.spacingOptionsPrefix.filter(function (sp) { return sp.startsWith(classParts_1[0][0]) && !sp.startsWith(layoutBarHelper_1.LayoutOption.marginAll) && !sp.startsWith(layoutBarHelper_1.LayoutOption.paddingAll); });
                                            dOpt = layout_1.dOpt[breakpoint];
                                            if (dOpt === undefined) {
                                                dOpt = [];
                                            }
                                            for (var index = 0; index < spacingOptions.length; index++) {
                                                var element = spacingOptions[index];
                                                if (index === 0) {
                                                    option = "" + element + classParts_1[classParts_1.length - 1];
                                                }
                                                else {
                                                    dOpt.push(layoutKey + ":" + element + classParts_1[classParts_1.length - 1]);
                                                }
                                            }
                                            layout_1.dOpt[breakpoint] = dOpt;
                                        }
                                        isFound = true;
                                    }
                                }
                                else {
                                    var index = componentClassList[layoutKey].findIndex(function (f) { return f == old; });
                                    if (index > -1) {
                                        option = old;
                                        isFound = true;
                                    }
                                }
                                if (isFound) {
                                    prepareClass_1 = true;
                                    dOpt = layout_1.dOpt[breakpoint];
                                    if (dOpt === undefined) {
                                        dOpt = [];
                                    }
                                    //if col-x exists don't add
                                    if (layoutKey === layoutBarHelper_1.LayoutOption.column && dOpt.findIndex(function (opt) { return opt.startsWith(layoutBarHelper_1.LayoutOption.column + ":"); }) > -1) {
                                        return "break";
                                    }
                                    dOpt.push(layoutKey + ":" + option);
                                    layout_1.dOpt[breakpoint] = dOpt;
                                    return "break";
                                }
                            };
                            for (var layoutKey in componentClassList) {
                                var state_1 = _loop_1(layoutKey);
                                if (state_1 === "break")
                                    break;
                            }
                            if (isFound) {
                                break;
                            }
                        }
                        if (!isFound) {
                            propClass_1.push(old);
                        }
                    }
                });
                if (prepareClass_1) {
                    ctrl.O.layout = layout_1;
                    ctrl.O.layout.class = (0, layoutBarHelper_1.getOptionsClass)(layout_1.dOpt);
                    notifies["classMigrator"] = { type: "warn", message: "The page migrated the new grid-flex structure. Please check the page layout before the save!" };
                }
                ctrl.P.class = { H: "'" + propClass_1.join(" ") + "'", T: ICompJson_1.PType.class };
            }
        }
        return notifies;
    };
    CompJsonMigrator.convertDesignTimeToStyleBP = function (designOptions) {
        var retVal = {};
        for (var i = 0; i < designOptions.length; i++) {
            var replacedValue = "";
            var _a = __read(designOptions[i].split(':'), 2), key = _a[0], value = _a[1];
            switch (key) {
                case 'a':
                    replacedValue = value.replace("align-", "");
                    replacedValue = replacedValue == "start" || replacedValue == "end" ? "flex-" + replacedValue : replacedValue;
                    retVal.alignItems = replacedValue;
                    break;
                case "j":
                    replacedValue = value.replace("justify-", "");
                    replacedValue = replacedValue == "start" || replacedValue == "end" ? "flex-" + replacedValue : replacedValue;
                    retVal.justifyContent = replacedValue;
                    break;
                case "c":
                    replacedValue = value.replace("col-", "").replace("d-", "");
                    if (replacedValue == "none") {
                        retVal.display = replacedValue;
                    }
                    else {
                        retVal.col = replacedValue == "auto" ? "0" : replacedValue;
                    }
                    break;
                case "fd":
                    retVal.flexDirection = value.replace("flex-", "");
                    break;
                case "sp":
                    var _b = __read(value.split('-'), 2), spKey = _b[0], spValue = _b[1];
                    spValue = (Number(spValue) * 4) + "px";
                    switch (spKey) {
                        case "pl":
                            retVal.paddingLeft = spValue;
                            break;
                        case "pr":
                            retVal.paddingRight = spValue;
                            break;
                        case "pt":
                            retVal.paddingTop = spValue;
                            break;
                        case "pb":
                            retVal.paddingBottom = spValue;
                            break;
                        case "ml":
                            retVal.marginLeft = spValue;
                            break;
                        case "mr":
                            retVal.marginRight = spValue;
                            break;
                        case "mt":
                            retVal.marginTop = spValue;
                            break;
                        case "mb":
                            retVal.marginBottom = spValue;
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
        }
        return retVal;
    };
    return CompJsonMigrator;
}());
exports.CompJsonMigrator = CompJsonMigrator;


/***/ }),

/***/ "../../common/shrimp/helpers/QJsonHelper.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/QJsonHelper.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonHelper = exports.CompSearchKey = void 0;
var typeHelper_1 = __webpack_require__(/*! ./typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var CompSearchKey;
(function (CompSearchKey) {
    CompSearchKey[CompSearchKey["PID"] = 0] = "PID";
    CompSearchKey[CompSearchKey["EditorID"] = 1] = "EditorID";
    CompSearchKey[CompSearchKey["Render"] = 2] = "Render";
})(CompSearchKey = exports.CompSearchKey || (exports.CompSearchKey = {}));
var QJsonHelper = /** @class */ (function () {
    function QJsonHelper() {
    }
    /**
     * Make the calculation with given pageJson
     * @param pageJson Given pageJson
     * @param callBack Function to be handled. Return false to STOP traversing.
     * @returns boolean
     */
    QJsonHelper.ForEachComp = function (pageJson, callBack, compiledJson) {
        var traverse = function (_a) {
            var curJson = _a.curJson, path = _a.path, parentCompJson = _a.parentCompJson, compiledJson = _a.compiledJson;
            for (var i = 0; i < curJson.length; i++) {
                var compJson = curJson[i];
                var cJson = compiledJson === null || compiledJson === void 0 ? void 0 : compiledJson[i];
                if (!compJson) {
                    continue;
                }
                path.push(i);
                if (callBack(compJson, path.map(function (item) { return item; }), { compName: compJson.T, eID: compJson._Editor.eID, parentCompJson: parentCompJson, compiledJson: cJson }) === false) {
                    return false;
                }
                if (compJson.C) {
                    for (var childNamed in compJson.C) {
                        path.push(childNamed);
                        if (traverse({ curJson: compJson.C[childNamed].c, path: path, parentCompJson: compJson, compiledJson: cJson === null || cJson === void 0 ? void 0 : cJson.C[childNamed].c }) === false) {
                            return false;
                        }
                        path.pop();
                    }
                }
                path.pop();
            }
        };
        traverse({ curJson: pageJson, path: [], compiledJson: compiledJson });
    };
    /**
     * @deprecated Please use QJsonHelper.FindParentArrayPath
     */
    QJsonHelper.prototype.findParentArrayPath = function (path, pageJson) {
        return QJsonHelper.FindParentArrayPath(path, pageJson);
    };
    /**
     * Find json and path with given path in the given pageJson
     * @param path Sample path: [3,default,2]
     * @param pageJson Given pageJson
     * @returns ICompParentLocation
     */
    QJsonHelper.FindParentArrayPath = function (path, pageJson) {
        var e_1, _a;
        var parent = null;
        var selfIndex = path.pop();
        if (path.length == 0) {
            return { selfIndex: selfIndex, parentArray: pageJson, parent: null };
        }
        var target = pageJson;
        try {
            //Sample path: [3,default,2] --> [ {},{},{},{C:{default: [{}, {}, {BURADASIN}]}}  ]
            for (var path_1 = __values(path), path_1_1 = path_1.next(); !path_1_1.done; path_1_1 = path_1.next()) {
                var curPath = path_1_1.value;
                if (new typeHelper_1.TypeHelper().isObject(target)) {
                    parent = target;
                    target = parent.C[curPath].c;
                }
                else { //array
                    target = target[curPath];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (path_1_1 && !path_1_1.done && (_a = path_1.return)) _a.call(path_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { selfIndex: selfIndex, parentArray: target, parent: parent };
    };
    /**
     * @deprecated please use QJsonHelper.FindCompBySearchField
     */
    QJsonHelper.prototype.findCompBySearchField = function (pageJson, value, componentPropertySearchKey) {
        if (componentPropertySearchKey === void 0) { componentPropertySearchKey = CompSearchKey.EditorID; }
        return QJsonHelper.FindCompBySearchField(pageJson, value, componentPropertySearchKey);
    };
    /**
     * Search the given pageJson with key and value parameters
     * @param pageJson Given pageJson
     * @param value To be searched value
     * @param componentPropertySearchKey Search key
     * @returns ICompLocation or null
     */
    QJsonHelper.FindCompBySearchField = function (pageJson, value, componentPropertySearchKey) {
        if (componentPropertySearchKey === void 0) { componentPropertySearchKey = CompSearchKey.EditorID; }
        var retVal = null;
        QJsonHelper.ForEachComp(pageJson, function (compJson, curPath) {
            var _a;
            switch (componentPropertySearchKey) {
                case CompSearchKey.PID:
                    if (compJson.P.ID.H == value) {
                        retVal = { compJson: compJson, curPath: curPath };
                        return false;
                    }
                    break;
                case CompSearchKey.Render:
                    if (((_a = compJson.P["Render"]) === null || _a === void 0 ? void 0 : _a.H) == value) {
                        retVal = { compJson: compJson, curPath: curPath };
                        return false;
                    }
                    break;
                case CompSearchKey.EditorID:
                default:
                    if (compJson._Editor.eID == value) {
                        retVal = { compJson: compJson, curPath: curPath };
                        return false;
                    }
                    break;
            }
            return true;
        });
        return retVal;
    };
    /**
     * Parse event parameters
     * @param eventParameters event parameters QS: x, y, z | TS: x: string, y: {a:number}, z: number
     */
    QJsonHelper.ParseParameters = function (eventParameters, handlerLang) {
        if (eventParameters) {
            var paramConverter = handlerLang == "TS" || handlerLang == "JS" ? (function (item) { return ({ name: item.split(":")[0], type: item.split(":")[1] }); }) : (function (item) { return ({ name: item }); });
            return eventParameters.split(",").map(paramConverter);
        }
        return undefined;
    };
    /**
     * Find component json path by EID
     * @returns path Sample path: [3,default,2]
     */
    QJsonHelper.FindCompPathByEID = function (qjson, compEID) {
        var path;
        QJsonHelper.ForEachComp(qjson, function (comp, curPath) { if (comp._Editor.eID == compEID) {
            path = curPath;
            return false;
        } return true; });
        return path;
    };
    return QJsonHelper;
}());
exports.QJsonHelper = QJsonHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/StyleHelper.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/StyleHelper.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StyleHelper = void 0;
var StyleHelper = /** @class */ (function () {
    function StyleHelper() {
    }
    StyleHelper.styleDictHelper = function (compDefinition, cb) {
        var dict = {};
        Object.keys(compDefinition).forEach(function (iterator) {
            var bpName = "";
            compDefinition[iterator].forEach(function (currInline) {
                currInline.groupContent.forEach(function (content) {
                    var _a;
                    bpName = content.type == "break-point-picker" ? content.styleKey[0].value : bpName;
                    (_a = content.styleKey) === null || _a === void 0 ? void 0 : _a.forEach(function (styleItem) {
                        if (styleItem.param != "break-point") {
                            dict[styleItem.param] = styleItem.value;
                            cb({ currInline: currInline, styleKey: styleItem, breakPoint: bpName });
                        }
                    });
                });
            });
        });
    };
    StyleHelper.matchSizeValue = function (sizeString) {
        var width = 0;
        switch (sizeString) {
            case "xs":
                width = 0;
                break;
            case "sm":
                width = 600;
                break;
            case "md":
                width = 960;
                break;
            case "lg":
                width = 1264;
                break;
            case "xl":
                width = 9999999;
                break;
        }
        return width;
    };
    ;
    StyleHelper.additionalPropsFromStyle = {
        VAlert: {
            dense: ["dense"]
        },
        VAppBar: {
            dense: ["dense"]
        },
        VBtnToggle: {
            dense: ["dense"]
        },
        VCheckbox: {
            dense: ["dense"]
        },
        VCombobox: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VDataTable: {
            dense: ["dense"]
        },
        VIcon: {
            dense: ["dense"]
        },
        VInlineDatepicker: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VInlineTimePicker: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VList: {
            dense: ["dense"]
        },
        VListItem: {
            dense: ["dense"]
        },
        VTextField: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VTimeline: {
            dense: ["dense"]
        },
        VFileInput: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VAutocomplete: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VRadioGroup: {
            dense: ["dense"]
        },
        VSelect: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        VSlider: {
            dense: ["dense"]
        },
        VSwitch: {
            dense: ["dense"]
        },
        VTextarea: {
            outlined: ["outlined"],
            dense: ["dense"]
        },
        QPhoneInput: {
            outlined: ["outlined"]
        },
    };
    return StyleHelper;
}());
exports.StyleHelper = StyleHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/arrayHelper.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/arrayHelper.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayHelper = void 0;
var ArrayHelper = /** @class */ (function () {
    function ArrayHelper() {
    }
    ArrayHelper.findAndRet = function (array, predicate) {
        var len = array.length;
        for (var i = 0; i < len; i++) {
            var retVal = predicate(array[i], i, array);
            if (retVal !== undefined) {
                return retVal;
            }
        }
        return undefined;
    };
    ArrayHelper.InitArray = function (size) {
        var arr = [];
        for (var i = 0; i < size; i++) {
            arr.push(i);
        }
        return arr;
    };
    ArrayHelper.InitEmptyArray = function (size) {
        return Array.from(new Array(size));
    };
    /**
     * Fast way to find last object in a given array
     * @param array to be search in
     * @param key to be last searched  object key
     */
    ArrayHelper.lastIndexOf = function (array, key, value) {
        for (var i = array.length - 1; i >= 0; i--) {
            if (array[i][key] === (value ? value : key))
                return i;
        }
        return -1;
    };
    ;
    /**
     * Change object of index
     * First index can move to the end of the array
     * Last index can move to first index
     * @param array Array to be moved
     * @param oldIndex Old index of object
     * @param newIndex New index of object
     */
    ArrayHelper.arrayMove = function (array, oldIndex, newIndex) {
        if (newIndex < 0) {
            array.splice(array.length - 1, 0, array.splice(oldIndex, 1)[0]);
        }
        else if (newIndex == array.length) {
            array.splice(0, 0, array.splice(oldIndex, 1)[0]);
        }
        else {
            array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);
        }
    };
    ;
    return ArrayHelper;
}());
exports.ArrayHelper = ArrayHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/bulkManager.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/bulkManager.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkManager = void 0;
var BulkManager = /** @class */ (function () {
    function BulkManager() {
    }
    /**
     * Vomit the bulk messages into callback function of the shell
     * @param message Log message that to be added
     */
    BulkManager.prototype.writeMessage = function (message) {
        var _a;
        (_a = this.logHandler) === null || _a === void 0 ? void 0 : _a.call(this, message);
    };
    return BulkManager;
}());
exports.BulkManager = BulkManager;


/***/ }),

/***/ "../../common/shrimp/helpers/catcher.ts":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/catcher.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.catcher = void 0;
var logger_1 = __webpack_require__(/*! ./logger */ "../../common/shrimp/helpers/logger.ts");
var catcher = /** @class */ (function () {
    function catcher() {
    }
    catcher.tryLog = function (_a) {
        var cb = _a.cb, catchLog = _a.catchLog;
        try {
            cb();
        }
        catch (error) {
            var logMessage = catchLog ? catchLog(error) : "tryLog error happened";
            logger_1.Logger.Log({ logMessage: logMessage, error: error, logType: logger_1.LogType.Error });
        }
    };
    return catcher;
}());
exports.catcher = catcher;


/***/ }),

/***/ "../../common/shrimp/helpers/clonable.ts":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/clonable.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Clonable = void 0;
var typeHelper_1 = __webpack_require__(/*! ./typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var Clonable = /** @class */ (function () {
    function Clonable() {
    }
    Clonable.DeepClone = function (obj) {
        var clone = obj.CreateSelf();
        var th = new typeHelper_1.TypeHelper();
        Object.keys(obj).forEach(function (key) { return clone[key] = th.cloneObject(obj[key]); });
        return clone;
    };
    return Clonable;
}());
exports.Clonable = Clonable;


/***/ }),

/***/ "../../common/shrimp/helpers/compDiffHelper.ts":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/compDiffHelper.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.compDiffHelper = exports.ComparisonEnum = exports.ValueStatus = exports.ValueTypeClasses = void 0;
var ICompJson_1 = __webpack_require__(/*! ../interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
var typeHelper_1 = __webpack_require__(/*! ./typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
var ValueTypeClasses;
(function (ValueTypeClasses) {
    ValueTypeClasses["saved"] = "sftt-value-saved";
    ValueTypeClasses["updated"] = "sftt-value-updated";
    ValueTypeClasses["removed"] = "sftt-value-removed";
    ValueTypeClasses["none"] = "sftt-value-none";
})(ValueTypeClasses = exports.ValueTypeClasses || (exports.ValueTypeClasses = {}));
var ValueStatus;
(function (ValueStatus) {
    ValueStatus["saved"] = "saved";
    ValueStatus["updated"] = "updated";
    ValueStatus["removed"] = "removed";
    ValueStatus["none"] = "none";
})(ValueStatus = exports.ValueStatus || (exports.ValueStatus = {}));
var ComparisonEnum;
(function (ComparisonEnum) {
    ComparisonEnum["labelField"] = "label";
    ComparisonEnum["valueField"] = "internalValue";
    ComparisonEnum["compareValueField"] = "compareValue";
    ComparisonEnum["compareTextValue"] = "compareText";
    ComparisonEnum["compareTableValue"] = "compareTableValue";
    ComparisonEnum["tooltipCompType"] = "Tooltip";
})(ComparisonEnum = exports.ComparisonEnum || (exports.ComparisonEnum = {}));
var compDiffHelper = /** @class */ (function () {
    function compDiffHelper() {
    }
    /**
     * Compares component with the given old and new value.
     * Returns:
     * "saved" when there is no old value and new value is not empty,
     * "updated" when there is an old value different than the new value
     * "removed" when there is an old value and no new value     *
     * @param props Props of the component will be compared with the given list
     * @param valueList Value list of the component includes the old and new value
     */
    compDiffHelper.valueCompare = function (_a) {
        var value = _a.value, compareValue = _a.compareValue, compareDataField = _a.compareDataField;
        var typeHelper = new typeHelper_1.TypeHelper();
        if (value === compareValue || (compareValue === undefined && !compareDataField)) {
            return ValueStatus.none;
        }
        if ((value === undefined || value === null || value === "") && compareValue) {
            return ValueStatus.removed;
        }
        else if (value && (compareValue === undefined || compareValue === null || compareValue === "")) {
            return ValueStatus.saved;
        }
        else if (value != compareValue) {
            if (typeHelper.isObject(value) && typeHelper.isObject(compareValue) && JSON.stringify(value) == JSON.stringify(compareValue)) {
                return ValueStatus.none;
            }
            return ValueStatus.updated;
        }
        return ValueStatus.none;
    };
    compDiffHelper.multipleValueCompare = function (value, compareValue) {
        var _a, _b;
        var statu = ValueStatus.none;
        if (!compareValue) {
            return statu;
        }
        var valueList = value ? value.reduce(function (prev, cur) {
            prev[cur.value] = cur.value;
            return prev;
        }, {}) : {};
        var compareValueList = compareValue ? compareValue.reduce(function (prev, cur) {
            prev[cur.value] = cur.value;
            return prev;
        }, {}) : {};
        var valueDiffResult = (_a = value) === null || _a === void 0 ? void 0 : _a.filter(function (item) {
            return !compareValueList[item.value];
        });
        var compareValueDiffResult = (_b = compareValue) === null || _b === void 0 ? void 0 : _b.filter(function (item) {
            return !valueList[item.value];
        });
        if (Object.keys(valueList).length <= 0 && Object.keys(compareValueList).length > 0) {
            statu = ValueStatus.removed;
        }
        else if (Object.keys(valueList).length > 0 && Object.keys(compareValueList).length <= 0) {
            statu = ValueStatus.saved;
        }
        else if ((valueDiffResult && valueDiffResult.length > 0) || (compareValueDiffResult && compareValueDiffResult.length > 0)) {
            statu = ValueStatus.updated;
        }
        return statu;
    };
    compDiffHelper.getValueCompareClass = function (_a) {
        var value = _a.value, compareValue = _a.compareValue, compareDataField = _a.compareDataField;
        var statu = ValueStatus.none;
        if (!compareDataField && (Array.isArray(value) || Array.isArray(compareValue))) {
            statu = this.multipleValueCompare(value, compareValue);
        }
        else {
            statu = this.valueCompare({ value: value, compareValue: compareValue, compareDataField: compareDataField });
        }
        return ValueTypeClasses[statu];
    };
    compDiffHelper.decideTooltipContent = function (_a) {
        var componentInstance = _a.componentInstance, toolTipValue = _a.toolTipValue;
        if (Array.isArray(toolTipValue) && toolTipValue.length >= 0) {
            return toolTipValue.reduce(function (prev, cur) {
                prev += " | " + cur.text;
                return prev;
            }, "").slice(3);
        }
        return componentInstance[ComparisonEnum.compareTextValue] ? componentInstance[ComparisonEnum.compareTextValue] || toolTipValue : toolTipValue;
    };
    compDiffHelper.propValueListener = function (_a) {
        var _this = this;
        var compCollection = _a.compCollection, propKey = _a.propKey, props = _a.props;
        compCollection.WatchCreatedFields(function (updatedComp) {
            var componentInstance = updatedComp.instance;
            var componentCollection = compCollection;
            if (!componentInstance) {
                return;
            }
            // let compObj = { compareValue: componentInstance[propKey] }
            var valueProp = Object.getOwnPropertyDescriptor(componentInstance.constructor.prototype, propKey);
            if (valueProp) {
                var set_1 = valueProp.set, get_1 = valueProp.get;
                Object.defineProperty(componentInstance, propKey, {
                    get: function () {
                        return get_1 === null || get_1 === void 0 ? void 0 : get_1.call(componentInstance);
                    },
                    set: function (v) {
                        set_1 === null || set_1 === void 0 ? void 0 : set_1.call(componentInstance, v);
                    }
                });
            }
            else if (Object.getOwnPropertyDescriptor(componentInstance, propKey)) {
                throw "There is no implementation on converted component instance from component collection";
            }
            else {
                var val_1, textValue_1 = undefined, tableValue_1 = undefined, valueStatus_1 = ValueTypeClasses.none;
                if (!Object.getOwnPropertyDescriptor(componentInstance, ComparisonEnum.compareTextValue)) {
                    Object.defineProperty(componentInstance, ComparisonEnum.compareTextValue, {
                        get: function () { return textValue_1; },
                        set: function (v) {
                            var _a, _b;
                            textValue_1 = v;
                            _this.displayTooltip({ compCollection: compCollection, toolTipValue: v, valueStatus: valueStatus_1 });
                            (_b = (_a = componentInstance.$el) === null || _a === void 0 ? void 0 : _a.setAttribute) === null || _b === void 0 ? void 0 : _b.call(_a, "class", componentInstance.$el.className);
                        }
                    });
                }
                if (!Object.getOwnPropertyDescriptor(componentInstance, ComparisonEnum.compareTableValue)) {
                    Object.defineProperty(componentInstance, ComparisonEnum.compareTableValue, {
                        get: function () { return tableValue_1; },
                        set: function (v) {
                            var _a, _b;
                            tableValue_1 = v;
                            (_b = (_a = componentInstance.$el) === null || _a === void 0 ? void 0 : _a.setAttribute) === null || _b === void 0 ? void 0 : _b.call(_a, "class", componentInstance.$el.className);
                        }
                    });
                }
                Object.defineProperty(componentInstance, propKey, {
                    get: function () {
                        return val_1;
                    },
                    set: function (newValue) {
                        var _a, _b;
                        val_1 = newValue;
                        if (!props.CompareDataField && !compDiffHelper.componentValueList[componentCollection.compType].classCompare) {
                            var calculatedClasses = compDiffHelper.calcComparisonClass(compCollection);
                            valueStatus_1 = calculatedClasses.valueCompare;
                            compCollection.class = componentCollection.compDomClass = calculatedClasses.class;
                            _this.displayTooltip({ compCollection: compCollection, toolTipValue: newValue, valueStatus: valueStatus_1 });
                            (_b = (_a = componentInstance.$el) === null || _a === void 0 ? void 0 : _a.setAttribute) === null || _b === void 0 ? void 0 : _b.call(_a, "class", componentInstance.$el.className);
                        }
                    }
                });
            }
        });
    };
    compDiffHelper.displayTooltip = function (_a) {
        var compCollection = _a.compCollection, toolTipValue = _a.toolTipValue, valueStatus = _a.valueStatus;
        var compareComponent = compDiffHelper.componentValueList[compCollection.compType];
        var componentInstance = compCollection.component;
        if (compareComponent && valueStatus != ValueTypeClasses.none) {
            toolTipValue = compDiffHelper.decideTooltipContent({ componentInstance: componentInstance, toolTipValue: toolTipValue });
            compCollection.parentCompCollection.component["disabled"] = false;
            compCollection.parentCompCollection.component["toolTipContent"] = toolTipValue;
        }
        else if (compareComponent) {
            compCollection.parentCompCollection.component["disabled"] = true;
            compCollection.parentCompCollection.component["toolTipContent"] = undefined;
        }
    };
    compDiffHelper.calcComparisonClass = function (compCollection) {
        var classValue = compDiffHelper.removeValueClass(compCollection.class);
        var compareComponent = compDiffHelper.componentValueList[compCollection.compType];
        var valueCompare = compDiffHelper.getValueCompareClass({ value: compCollection.component[compareComponent.valueField], compareValue: compCollection.component[ComparisonEnum.compareValueField] });
        return { class: classValue + " ", valueCompare: valueCompare };
    };
    compDiffHelper.removeValueClass = function (componentClass) {
        var finalClass = componentClass !== null && componentClass !== void 0 ? componentClass : "";
        if (componentClass) {
            finalClass = componentClass.split("sftt-value-").join("");
        }
        return finalClass.trim();
    };
    compDiffHelper.includeNoneValueClass = function (componentClass) {
        if (componentClass && componentClass.indexOf(ValueTypeClasses[ValueStatus.none]) > -1) {
            return true;
        }
        return false;
    };
    /**
     * Compare given parameters and set the Tooltip, Chip and Label fields
     * @param compJson Reference component json
     * @param valueField Setted for the current value
     * @param compareValue Compare value
     * @param compareDataField Field that will be compared on
     * @param headerValue Whenever each column is setted, set the fields based on this param
     */
    compDiffHelper.compareAndSetFields = function (_a) {
        var compJson = _a.compJson, valueField = _a.valueField, compareValue = _a.compareValue, compareDataField = _a.compareDataField, headerValue = _a.headerValue;
        //Find the compare object from the given compareValue based on the current valueField array
        var comparableObj = compareValue.find(function (compObj) { return compObj[compareDataField] === valueField[compareDataField]; });
        if (comparableObj && compJson.c[0].P["toolTipContent"]) {
            compJson.c[0].P["toolTipContent"].H = comparableObj[headerValue];
            var comparedClass = compDiffHelper.getValueCompareClass({ value: valueField[headerValue], compareValue: comparableObj[headerValue], compareDataField: true });
            compJson.c[0].C["default"].c[0].P["color"].H = comparedClass;
            if (valueField[headerValue] !== undefined) {
                compJson.c[0].C["default"].c[0].C["default"].c[0].P["text"].H = valueField[headerValue];
            }
        }
    };
    /**
     * Create Tooltip within the VChip component if the slot is empty
     * @param compJson Current compJson
     * @param props Check slot fields on the headers prop
     */
    compDiffHelper.createChipComponentOnNonSlotChilds = function (compJson, props) {
        for (var index = 0, arrLength = props["headers"].length; index < arrLength; index++) {
            var header = props["headers"][index];
            if (!compJson.C["item." + header.value]) {
                compJson.C["item." + header.value] = { c: [compDiffHelper.createChipComponent(compJson)], cType: ICompJson_1.CType.scopedSlot };
            }
        }
    };
    /**
     * Create tooltip and chip component
     * @param compJson Reference component json
     */
    compDiffHelper.createChipComponent = function (compJson) {
        var chipChildComponent = { c: [{ T: "QLabel", P: { ID: { H: compJson.P.ID.H + "_compareLabel", T: ICompJson_1.PType.prop }, "text": { H: " ", T: ICompJson_1.PType.prop, DE: true } }, C: {}, E: {}, _Editor: { eID: compJson.P.ID.H + "_compareLabel" } }], cType: ICompJson_1.CType.slot };
        var chipComponent = { T: "VChip", P: { ID: { H: compJson.P.ID.H + "_compareChip", T: ICompJson_1.PType.prop }, "color": { H: " ", T: ICompJson_1.PType.prop, DE: true } }, E: {}, C: { "default": chipChildComponent }, _Editor: { eID: compJson.P.ID.H + "_compareChip" } };
        var tooltipComponent = { T: "Tooltip", P: { ID: { H: compJson.P.ID.H + "_compareTooltip", T: ICompJson_1.PType.prop }, "toolTipContent": { H: " ", T: ICompJson_1.PType.prop, DE: true }, "position": { H: "╬'top'╩╩", T: ICompJson_1.PType.prop, DE: true } }, E: {}, C: { "default": { c: [chipComponent], cType: ICompJson_1.CType.slot } }, _Editor: { eID: compJson.P.ID.H + "_compareTooltip" } };
        return tooltipComponent;
    };
    compDiffHelper.replaceTooltipComponent = function (parentComp, childComp) {
        var childKey, childIndex;
        for (var key in parentComp.C) {
            if (Object.prototype.hasOwnProperty.call(parentComp.C, key)) {
                var children = parentComp.C[key];
                childIndex = children.c.findIndex(function (compJson) { return compJson.T == childComp.T; });
                if (childIndex != -1) {
                    childKey = key;
                    break;
                }
            }
        }
        parentComp.C[childKey].c[childIndex] = compDiffHelper.createTooltipJson(childComp);
    };
    /**
     * Creates a new tooltip json based on referenced child comp. ChildComp parameter will be placed into the new tooltip
     * @param childComp replaced component and will be referenced by new tooltip comp
     * @returns Tooltip json: ICompJson
     */
    compDiffHelper.createTooltipJson = function (childComp) {
        var tooltipJson = {
            T: ComparisonEnum.tooltipCompType,
            P: { ID: { H: childComp.P.ID.H + "_tooltip", T: ICompJson_1.PType.prop }, "disabled": { H: "╬true╩╩", T: ICompJson_1.PType.prop }, "position": { H: "╬'top'╩╩", T: ICompJson_1.PType.prop } },
            E: {},
            C: { "default": { c: [childComp], cType: ICompJson_1.CType.slot } },
            _Editor: { eID: childComp._Editor.eID + "_tooltip" },
            O: {
                layout: {
                    class: "sftt-compare-value-tooltip",
                    dOpt: {}
                }
            }
        };
        return tooltipJson;
    };
    compDiffHelper.componentValueList = {
        VTextField: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
        VSelect: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
        VAutocomplete: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
        VCombobox: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
        VRadioGroup: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
        VCheckbox: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
        VInlineDatepicker: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField, applyClassName: "textFieldClass" },
        VDataTable: { labelField: ComparisonEnum.labelField, valueField: "items", classCompare: true },
        VInlineTimePicker: { labelField: ComparisonEnum.labelField, valueField: "value", applyClassName: "textFieldClass" },
        VTextarea: { labelField: ComparisonEnum.labelField, valueField: ComparisonEnum.valueField },
    };
    compDiffHelper.comparisonComponent = "QLegend";
    return compDiffHelper;
}());
exports.compDiffHelper = compDiffHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/compUIDHelper.ts":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/compUIDHelper.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CompUIDHelper = void 0;
var CompUIDHelper = /** @class */ (function () {
    function CompUIDHelper() {
    }
    /**
     * Gets First compID from compUID.
     * @example "CustComp.MainComp.topBtn" -> {root: "CustComp", sub: "MainComp.topBtn"}
     * @example "topBtn" -> {root: "topBtn"}
     */
    CompUIDHelper.GetRootCompId = function (compUID) {
        var dotIndex = compUID.indexOf(".");
        if (dotIndex == -1) {
            return { rootCompId: compUID };
        }
        var rootCompId = compUID.substring(0, dotIndex);
        var subCompUID = compUID.substring(dotIndex + 1, compUID.length);
        return { rootCompId: rootCompId, subCompUID: subCompUID };
    };
    CompUIDHelper.CompIDConcat = function (compUIDPrefix, compId) {
        if (!compUIDPrefix) {
            return compId;
        } // carefull  "", and undefined
        return compUIDPrefix + "." + compId;
    };
    return CompUIDHelper;
}());
exports.CompUIDHelper = CompUIDHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/customCompHelper.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/customCompHelper.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.customCompHelper = void 0;
var customCompHelper = /** @class */ (function () {
    function customCompHelper() {
        this.onDeleteCompList = ["QLegend", "QCaptcha", "QDynamicFields", "QQRCode"];
        this.customCompList = ["QLegend", "QCaptcha", "QDynamicFields", "QQRCode"];
    }
    return customCompHelper;
}());
exports.customCompHelper = customCompHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/download.ts":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/download.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// download.js v4.21, by dandavis; 2008-2018. [MIT] see http://danml.com/download.html for tests/usage
// v1 landed a FF+Chrome compatible way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
// v4 adds AMD/UMD, commonJS, and plain browser support
// v4.1 adds url download capability via solo URL argument (same domain/CORS only)
// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
// https://github.com/rndme/download
Object.defineProperty(exports, "__esModule", { value: true });
exports.Download = void 0;
var Download = /** @class */ (function () {
    function Download() {
    }
    Download.prototype.downloadInner = function (data, strFileName, strMimeType) {
        var _self = this;
        var Blob = window.Blob;
        var XMLHttpRequest = window.XMLHttpRequest;
        var self = window; // this script is only for browsers anyway...
        var defaultMime = 'application/octet-stream'; // this default mime also triggers iframe downloads
        var mimeType = strMimeType || defaultMime;
        var payload = data;
        var url = !strFileName && !strMimeType && payload;
        var anchor = document.createElement('a');
        var toString = function (a) {
            return String(a);
        };
        var MyBlob = self.Blob || self.MozBlob || self.WebKitBlob || toString;
        var fileName = strFileName || 'download';
        var blob;
        var reader;
        MyBlob = MyBlob.call ? MyBlob.bind(self) : Blob;
        if (String(this) === 'true') {
            // reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
            payload = [payload, mimeType];
            mimeType = payload[0];
            payload = payload[1];
        }
        if (url && url.length < 2048) {
            // if no filename and no mime, assume a url was passed as the only argument
            fileName = url
                .split('/')
                .pop()
                .split('?')[0];
            anchor.href = url; // assign href prop to temp anchor
            if (anchor.href.indexOf(url) !== -1) {
                // if the browser determines that it's a potentially valid url path:
                var ajax = new XMLHttpRequest();
                ajax.open('GET', url, true);
                ajax.responseType = 'blob';
                ajax.onload = function (e) {
                    _self.downloadInner(e.target.response, fileName, defaultMime);
                };
                setTimeout(function () {
                    ajax.send();
                }, 0); // allows setting custom ajax headers using the return:
                return ajax;
            } // end if valid url?
        } // end if url?
        // go ahead and download dataURLs right away
        if (/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(payload)) {
            if (payload.length > 1024 * 1024 * 1.999 && MyBlob !== toString) {
                payload = dataUrlToBlob(payload);
                mimeType = payload.type || defaultMime;
            }
            else {
                return navigator.msSaveBlob // IE10 can't do a[download], only Blobs:
                    ? navigator.msSaveBlob(dataUrlToBlob(payload), fileName)
                    : saver(payload, null); // everyone else can save dataURLs un-processed
            }
        }
        else {
            // not data url, is it a string with special needs?
            if (/([\x80-\xff])/.test(payload)) {
                var i = 0;
                var tempUiArr = new Uint8Array(payload.length);
                var mx = tempUiArr.length;
                for (i; i < mx; ++i)
                    tempUiArr[i] = payload.charCodeAt(i);
                payload = new MyBlob([tempUiArr], { type: mimeType });
            }
        }
        blob = payload instanceof MyBlob ? payload : new MyBlob([payload], { type: mimeType });
        function dataUrlToBlob(strUrl) {
            var parts = strUrl.split(/[:;,]/);
            var type = parts[1];
            var indexDecoder = strUrl.indexOf('charset') > 0 ? 3 : 2;
            var decoder = parts[indexDecoder] === 'base64' ? window.atob : decodeURIComponent;
            var binData = decoder(parts.pop());
            var mx = binData.length;
            var i = 0;
            var uiArr = new Uint8Array(mx);
            for (i; i < mx; ++i)
                uiArr[i] = binData.charCodeAt(i);
            return new MyBlob([uiArr], { type: type });
        }
        function saver(url, winMode) {
            if ('download' in anchor) {
                // html5 A[download]
                anchor.href = url;
                anchor.setAttribute('download', fileName);
                anchor.className = 'download-js-link';
                anchor.innerHTML = 'downloading...';
                anchor.style.display = 'none';
                var listener = anchor.addEventListener('click', function (e) {
                    e.stopPropagation();
                    this.removeEventListener('click', listener);
                });
                document.body.appendChild(anchor);
                setTimeout(function () {
                    anchor.click();
                    document.body.removeChild(anchor);
                    if (winMode === true) {
                        setTimeout(function () {
                            self.URL.revokeObjectURL(anchor.href);
                        }, 250);
                    }
                }, 66);
                return true;
            }
            // handle non-a[download] safari as best we can:
            if (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
                if (/^data:/.test(url))
                    url = 'data:' + url.replace(/^data:([\w/\-+]+)/, defaultMime);
                if (!window.open(url)) {
                    // popup blocked, offer direct download:
                    if (window.confirm('Displaying New Document\n\nUse Save As... to download, then click back to return to this page.')) {
                        window.location.href = url;
                    }
                }
                return true;
            }
            // do iframe dataURL download (old ch+FF):
            var f = document.createElement('iframe');
            document.body.appendChild(f);
            if (!winMode && /^data:/.test(url)) {
                // force a mime that will download:
                url = 'data:' + url.replace(/^data:([\w/\-+]+)/, defaultMime);
            }
            f.src = url;
            setTimeout(function () {
                document.body.removeChild(f);
            }, 333);
        } // end saver
        if (navigator.msSaveBlob) {
            // IE10+ : (has Blob, but not a[download] or URL)
            return navigator.msSaveBlob(blob, fileName);
        }
        if (self.URL) {
            // simple fast and modern way using Blob and URL:
            saver(self.URL.createObjectURL(blob), true);
        }
        else {
            // handle non-Blob()+non-URL browsers:
            if (typeof blob === 'string' || blob.constructor === toString) {
                try {
                    return saver('data:' + mimeType + ';base64,' + self.btoa(blob), null);
                }
                catch (y) {
                    return saver('data:' + mimeType + ',' + encodeURIComponent(blob), null);
                }
            }
            // Blob but not URL support:
            reader = new window.FileReader();
            reader.onload = function (e) {
                saver(this.result, null);
            };
            reader.readAsDataURL(blob);
        }
        return true;
    }; /* end download() */
    return Download;
}());
exports.Download = Download;


/***/ }),

/***/ "../../common/shrimp/helpers/duplicateHelper.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/duplicateHelper.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DuplicateHelper = void 0;
var DuplicateHelper = /** @class */ (function () {
    function DuplicateHelper() {
    }
    DuplicateHelper.RemoveDuplicates = function (items) {
        var map = new WeakMap();
        return items.filter(function (item) {
            if (map.has(item)) {
                return false;
            }
            map.set(item, true);
            return true;
        });
    };
    return DuplicateHelper;
}());
exports.DuplicateHelper = DuplicateHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/hook.ts":
/*!******************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/hook.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Hook = void 0;
var catcher_1 = __webpack_require__(/*! ./catcher */ "../../common/shrimp/helpers/catcher.ts");
var stringHelper_1 = __webpack_require__(/*! ./stringHelper */ "../../common/shrimp/helpers/stringHelper.ts");
var Hook = /** @class */ (function () {
    function Hook(hookName, options) {
        if (options === void 0) { options = {}; }
        this.subscribers = [];
        this.hookStateListeners = [];
        this.hookName = hookName;
        this.triggerPostSubscribersWithCb = options.triggerPostSubscribersWithCb || false;
        options.manageState = options.manageState || false;
        this.hookState = { triggered: false, triggerArgs: [], active: options.manageState };
    }
    Object.defineProperty(Hook.prototype, "TriggerPostSubscribersWithCb", {
        get: function () {
            return this.triggerPostSubscribersWithCb;
        },
        set: function (v) {
            this.triggerPostSubscribersWithCb = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hook.prototype, "subscriberCount", {
        get: function () {
            return this.subscribers.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hook.prototype, "hasSubscribers", {
        get: function () {
            return this.subscriberCount > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hook.prototype, "hasPostSubscribers", {
        get: function () {
            var _a, _b;
            return (((_a = this.postSubscribers) === null || _a === void 0 ? void 0 : _a.hasPostSubscribers) || ((_b = this.postSubscribers) === null || _b === void 0 ? void 0 : _b.hasSubscribers)) === true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hook.prototype, "triggerer", {
        get: function () {
            return this.trigger;
        },
        enumerable: false,
        configurable: true
    });
    Hook.prototype.trigger = function () {
        var _this = this;
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.hookState.active) {
            this.hookState.triggered = true;
            this.hookState.triggerArgs = args;
        }
        this.subscribers.forEach(function (sub) { return _this.tryTriggerSubscriber(sub, args); });
        if (!this.triggerPostSubscribersWithCb)
            (_a = this.postSubscribers) === null || _a === void 0 ? void 0 : _a.triggerer.apply(this.postSubscribers, args);
    };
    Hook.prototype.tryTriggerSubscriber = function (sub, args) {
        var _this = this;
        catcher_1.catcher.tryLog({ cb: function () { return sub.apply(null, args); }, catchLog: function () { return _this.getHookName() + " subscriber failed"; } });
    };
    Hook.prototype.getHookName = function () {
        var retVal = this.hookName;
        if (!stringHelper_1.StringHelper.endsWith(retVal.toLowerCase(), "hook")) {
            retVal += " hook";
        }
        return retVal;
    };
    Hook.prototype.ResetAndStartState = function () {
        this.hookState.triggerArgs = [];
        this.hookState.active = true;
        this.hookState.triggered = false;
        this.hookStateListeners.forEach(function (cb) { return cb.apply(null); });
    };
    Hook.prototype.DisableState = function () {
        this.hookState.triggerArgs = [];
        this.hookState.active = false;
        this.hookState.triggered = false;
    };
    Hook.prototype.IsTriggered = function () {
        if (!this.hookState.active) {
            throw new Error("IsTriggered can not be checked on a non manageState Hook: " + this.hookName);
        }
        return this.hookState.triggered;
    };
    Hook.prototype.triggerPostSubscribers = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.postSubscribers) === null || _a === void 0 ? void 0 : _a.triggerer.apply(this.postSubscribers, args);
    };
    //#region subscribers
    Hook.prototype.subscribe = function (cb) {
        this.subscribers.push(cb);
        this.hookState.active && this.hookState.triggered && this.tryTriggerSubscriber(cb, this.hookState.triggerArgs);
    };
    Hook.prototype.unsubscribe = function (cb) {
        this.subscribers = this.subscribers.filter(function (sub) { return sub != cb; }); // splice is fastest but this is safest, because of immutability, because of forEach traversals
    };
    Hook.prototype.clearSubscribers = function () {
        this.subscribers = [];
    };
    //#endregion
    //#region postSubscribers
    Hook.prototype.postSubscribe = function (cb) {
        if (!this.postSubscribers) {
            this.postSubscribers = new Hook(this.hookName + "_Post", { manageState: this.hookState.active });
            this.postSubscribers.hookState = this.hookState;
        }
        this.postSubscribers.subscribe(cb);
    };
    Hook.prototype.postUnsubscribe = function (cb) {
        var _a;
        (_a = this.postSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(cb);
    };
    Hook.prototype.clearPostSubscribers = function (forced) {
        var _a;
        if (forced === void 0) { forced = false; }
        (_a = this.postSubscribers) === null || _a === void 0 ? void 0 : _a.clearSubscribers();
        if (forced || !this.hasPostSubscribers) {
            this.postSubscribers = undefined;
        }
    };
    //#endregion
    Hook.prototype.listenHookState = function (cb) {
        this.hookStateListeners.push(cb);
    };
    Hook.prototype.forceClearAllSubscibers = function () {
        this.clearPostSubscribers(true);
        this.clearSubscribers();
    };
    return Hook;
}());
exports.Hook = Hook;


/***/ }),

/***/ "../../common/shrimp/helpers/httpHeaderHelper.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/httpHeaderHelper.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTPHeader = void 0;
var HTTPHeader = /** @class */ (function () {
    function HTTPHeader() {
    }
    HTTPHeader.createDefaultHeaders = function (dory, request) {
        request.headers = request.headers || {};
        request.headers["Content-Language"] = request.headers["Content-Language"] || dory.GetLRType();
    };
    return HTTPHeader;
}());
exports.HTTPHeader = HTTPHeader;


/***/ }),

/***/ "../../common/shrimp/helpers/layoutBarHelper.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/layoutBarHelper.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.layoutBarComponentClassList = exports.spacingOptionsPrefix = exports.spacingPrefix = exports.getOptionsClass = exports.textEmphasisOptions = exports.textColorOptions = exports.typographyOptions = exports.wrapOptions = exports.alignOptions = exports.justifyOptions = exports.directionOptions = exports.columnOptions = exports.LayoutOption = void 0;
var LayoutOption;
(function (LayoutOption) {
    LayoutOption["display"] = "d";
    LayoutOption["column"] = "c";
    LayoutOption["flexDirection"] = "fd";
    LayoutOption["align"] = "a";
    LayoutOption["justify"] = "j";
    LayoutOption["wrap"] = "w";
    LayoutOption["spacing"] = "sp";
    LayoutOption["textTypography"] = "tt";
    LayoutOption["textColor"] = "tc";
    LayoutOption["textEmphasis"] = "te";
    LayoutOption["marginTop"] = "mt";
    LayoutOption["marginRight"] = "mr";
    LayoutOption["marginBottom"] = "mb";
    LayoutOption["marginLeft"] = "ml";
    LayoutOption["marginAll"] = "ma";
    LayoutOption["paddingTop"] = "pt";
    LayoutOption["paddingRight"] = "pr";
    LayoutOption["paddingBottom"] = "pb";
    LayoutOption["paddingLeft"] = "pl";
    LayoutOption["paddingAll"] = "pa";
    LayoutOption["italic"] = "fi";
})(LayoutOption = exports.LayoutOption || (exports.LayoutOption = {}));
var spacingPrefix = "sp";
exports.spacingPrefix = spacingPrefix;
var colPrefix = "col-";
var displayOptions = [{ text: "", key: "d-flex" }];
var columnOptions = [{ text: "0", key: "d-none" }, { text: "1", key: "col-1" }, { text: "2", key: "col-2" }, { text: "3", key: "col-3" }, { text: "4", key: "col-4" }, { text: "5", key: "col-5" }, { text: "6", key: "col-6" }, { text: "7", key: "col-7" }, { text: "8", key: "col-8" }, { text: "9", key: "col-9" }, { text: "10", key: "col-10" }, { text: "11", key: "col-11" }, { text: "12", key: "col-12" }, { text: "auto", key: "col-auto" }];
exports.columnOptions = columnOptions;
var directionOptions = [{ text: "Horizontal", key: "flex-row", iconClass: "mdi mdi20 mdi-chevron-triple-right" }, { text: "Vertical", key: "flex-column", iconClass: "mdi mdi20 mdi-chevron-triple-down" }];
exports.directionOptions = directionOptions;
var justifyOptions = [{ text: "Start", key: "justify-start", iconClass: "icon icon-justify-horizontal-start" }, { text: "End", key: "justify-end", iconClass: "icon icon-justify-horizontal-end" }, { text: "Center", key: "justify-center", iconClass: "icon icon-justify-horizontal-center" }, { text: "Space Between", key: "justify-space-between", iconClass: "icon icon-horizontal-space-between" }, { text: "Space Arround", key: "justify-space-around", iconClass: "icon icon-horizontal-space-around" }];
exports.justifyOptions = justifyOptions;
var alignOptions = [{ text: "Start", key: "align-start", iconClass: "icon icon-align-vertical-top" }, { text: "End", key: "align-end", iconClass: "icon icon-align-vertical-bottom" }, { text: "Center", key: "align-center", iconClass: "icon icon-align-vertical-center" }, { text: "Stretch", key: "align-stretch", iconClass: "icon icon-stretch-vertical" }, { text: "Baseline", key: "align-baseline", iconClass: "icon icon-baseline-top" }];
exports.alignOptions = alignOptions;
var wrapOptions = [{ text: "No Wrap", key: "flex-nowrap" }, { text: "Wrap", key: "flex-wrap" }];
exports.wrapOptions = wrapOptions;
var typographyOptions = [{ text: "", key: "" }, { text: "Heading 1", key: "text-h1" }, { text: "Heading 2", key: "text-h2" }, { text: "Heading 3", key: "text-h3" }, { text: "Heading 4", key: "text-h4" }, { text: "Heading 5", key: "text-h5" }, { text: "Heading 6", key: "text-h6" }, { text: "Subtitle 1", key: "text-subtitle-1" }, { text: "Subtitle 2", key: "text-subtitle-2" }, { text: "Body 1", key: "text-body-1" }, { text: "Body 2", key: "text-body-2" }, { text: "Button", key: "text-button" }, { text: "Caption", key: "text-caption" }, { text: "Overline", key: "text-overline" }];
exports.typographyOptions = typographyOptions;
var textColorOptions = [{ text: "", key: "" }, { text: "primary", key: "primary--text" }, { text: "Secondary", key: "secondary--text" }, { text: "Accent", key: "accent--text" }, { text: "Success", key: "success--text" }, { text: "Error", key: "error--text" }, { text: "Info", key: "info--text" }, { text: "Warning", key: "warning--text" }];
exports.textColorOptions = textColorOptions;
var textEmphasisOptions = [{ text: "Black", key: "font-weight-black" }, { text: "Bold", key: "font-weight-bold" }, { text: "Medium", key: "font-weight-medium" }, { text: "Regular", key: "font-weight-regular" }, { text: "Light", key: "font-weight-light" }, { text: "Thin", key: "font-weight-thin" }];
exports.textEmphasisOptions = textEmphasisOptions;
var spacingOptionsPrefix = ["mt-", "mr-", "mb-", "ml-", "ma-", "pt-", "pr-", "pb-", "pl-", "pa-"];
exports.spacingOptionsPrefix = spacingOptionsPrefix;
var allComponentClassList = {};
allComponentClassList[spacingPrefix] = spacingOptionsPrefix;
var qlabelClassList = {};
qlabelClassList[LayoutOption.textTypography] = typographyOptions.map(function (opt) { return opt.key; });
qlabelClassList[LayoutOption.textColor] = textColorOptions.map(function (opt) { return opt.key; });
qlabelClassList[LayoutOption.textEmphasis] = textEmphasisOptions.map(function (opt) { return opt.key; });
var vColClassList = {};
vColClassList[LayoutOption.display] = displayOptions.map(function (opt) { return opt.key; });
vColClassList[LayoutOption.column] = columnOptions.map(function (opt) { return opt.key; });
vColClassList[LayoutOption.flexDirection] = directionOptions.map(function (opt) { return opt.key; });
vColClassList[LayoutOption.justify] = justifyOptions.map(function (opt) { return opt.key; });
vColClassList[LayoutOption.align] = alignOptions.map(function (opt) { return opt.key; });
var layoutBarComponentClassList = {};
exports.layoutBarComponentClassList = layoutBarComponentClassList;
layoutBarComponentClassList["All"] = allComponentClassList;
layoutBarComponentClassList["QLabel"] = qlabelClassList;
layoutBarComponentClassList["VCol"] = vColClassList;
function getOptionsClass(dOpt) {
    var tempOpt = [];
    Object.keys(dOpt).forEach(function (key) {
        var options = [];
        dOpt[key].forEach(function (opt) {
            //from 'fd:flex-row' to 'flex-row' and "te:font-bold,fontblack" to [font-bold, font-black] 
            var splitOpt = opt.split(":");
            splitOpt[1].split(",").forEach(function (sOpt) {
                options.push(sOpt);
            });
        });
        if (key === "xs") {
            tempOpt = tempOpt.concat(options);
        }
        else {
            options.forEach(function (opt) {
                //from 'flex-row' to flex-{breakpoint}-row
                var splitOpt = opt.split("-");
                splitOpt.splice(1, 0, key);
                tempOpt.push(splitOpt.join("-"));
            });
        }
    });
    return tempOpt.join(" ");
}
exports.getOptionsClass = getOptionsClass;


/***/ }),

/***/ "../../common/shrimp/helpers/logger.ts":
/*!********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/logger.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogType = void 0;
var ILogger_1 = __webpack_require__(/*! ../interfaces/ComponentInterfaces/ILogger */ "../../common/shrimp/interfaces/ComponentInterfaces/ILogger.ts");
Object.defineProperty(exports, "LogType", { enumerable: true, get: function () { return ILogger_1.LogType; } });
var bulkManager_1 = __webpack_require__(/*! ./bulkManager */ "../../common/shrimp/helpers/bulkManager.ts");
var windowHelper_1 = __webpack_require__(/*! ./windowHelper */ "../../common/shrimp/helpers/windowHelper.ts");
var Singularizer = /** @class */ (function () {
    function Singularizer() {
    }
    Singularizer.trySingularize = function (name, instance) {
        if (!this.singularized(name)) {
            windowHelper_1.WindowHelper.Instance.Window[name] = instance;
            return true;
        }
        return false;
    };
    Singularizer.singularized = function (name) {
        return windowHelper_1.WindowHelper.Instance.Window[name];
    };
    Singularizer.getFreeName = function (name) {
        var _a;
        var win = (_a = windowHelper_1.WindowHelper === null || windowHelper_1.WindowHelper === void 0 ? void 0 : windowHelper_1.WindowHelper.Instance.Window) !== null && _a !== void 0 ? _a : {};
        var counter = 0;
        while (win[name + "_" + ++counter])
            ;
        return name + "_" + counter;
    };
    return Singularizer;
}());
var Logger = /** @class */ (function () {
    function Logger() {
        // i know this functions are static but in rallyshell we have shrimp not quick_shrimp.
        // and the first caller of the functions are throws 'not implemented exception' because of lazy load.
        return { Log: this.Log };
    }
    Object.defineProperty(Logger, "LogBulkManager", {
        get: function () {
            if (!Logger.logBulkManager) {
                Logger.logBulkManager = Singularizer.singularized(Logger.windowName);
            }
            return Logger.logBulkManager;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Whenever the shell initiates its callback, this handling also will be initiated as well
     * ? Static may change? Will see
     * @param timer Seconds of writing down the messages
     * @param callBack Function that handles the messages, comes from shell.
     */
    Logger.Init = function (_a) {
        var callBack = _a.callBack, clear = _a.clear;
        this.logBulkManager = new bulkManager_1.BulkManager();
        this.logBulkManager.logHandler = callBack;
        Singularizer.trySingularize(this.windowName, this.logBulkManager);
    };
    /**
     * Console log function
     * @param logMessage Message that to be written to the console
     * @param logType console type(Debug, Trace, Warning, Error)
     * @param backgroundColor message background color
     * @param color message text color
     * @param additional additional info for logging
     * @param yamlLogType
     * @returns void
     */
    Logger.Log = function (_a) {
        var logMessage = _a.logMessage, _b = _a.logType, logType = _b === void 0 ? ILogger_1.LogType.Trace : _b, error = _a.error, _c = _a.backgroundColor, backgroundColor = _c === void 0 ? null : _c, _d = _a.textColor, textColor = _d === void 0 ? null : _d, _e = _a.additional, additional = _e === void 0 ? null : _e, source = _a.source, _f = _a.isClientLog, isClientLog = _f === void 0 ? false : _f, yamlLogType = _a.yamlLogType, minEngineLogLevel = _a.minEngineLogLevel;
        var colorOptions = backgroundColor || textColor ? "background: " + backgroundColor + "; color: " + textColor : null;
        var targetLog;
        switch (true) {
            case logType == ILogger_1.LogType.MobilDebug && this.logLevel.indexOf(ILogger_1.LogType.MobilDebug) > -1:
                targetLog = console.log;
                break;
            case (logType == ILogger_1.LogType.Debug && this.logLevel.indexOf(ILogger_1.LogType.Debug) > -1):
            case (logType == ILogger_1.LogType.Trace && this.logLevel.indexOf(ILogger_1.LogType.Trace) > -1):
                targetLog = console.log;
                break;
            case (logType == ILogger_1.LogType.Error && this.logLevel.indexOf(ILogger_1.LogType.Error) > -1):
                targetLog = console.error;
                break;
            case (logType == ILogger_1.LogType.Warning && this.logLevel.indexOf(ILogger_1.LogType.Warning) > -1):
                targetLog = console.warn;
                break;
            case true:
                break;
        }
        var params = [logMessage];
        if (colorOptions && typeof logMessage === "string") {
            params[0] = '%c' + logMessage;
            params.push(colorOptions);
        }
        if (error) {
            params.push(error);
        }
        if (additional) {
            params.push(additional);
        }
        if (source) { // MUST BE LAST!!!! (used in mobile sim. -> editor logging)
            params.push({ source: source });
        }
        targetLog === null || targetLog === void 0 ? void 0 : targetLog.apply(console, params);
        if (isClientLog || (isClientLog && yamlLogType && yamlLogType <= logType) || minEngineLogLevel && minEngineLogLevel <= logType) {
            this.prepareClientLog(logMessage, logType);
        }
    };
    /**
     * Log messages are controlled by their size and add them to the bulk array with type, date and caller function name
     * @param logMessage Message that will be written to the server
     * @param logType Type of log message
     */
    Logger.prepareClientLog = function (logMessage, logType) {
        var _a;
        var currentDateFormat = new Date(Date.now());
        var clientDate = currentDateFormat.getFullYear() + "." + ("0" + (currentDateFormat.getMonth() + 1)).slice(-2) + "." + ("0" + currentDateFormat.getDate()).slice(-2) + " " +
            currentDateFormat.getHours() + ':' + ("0" + currentDateFormat.getMinutes()).slice(-2) + ':' + ("0" + currentDateFormat.getSeconds()).slice(-2) + ':' + currentDateFormat.getMilliseconds();
        ;
        var message;
        var whoCallMe = this.getCalleFunctionName();
        if (typeof logMessage !== "string" && logType > 0) {
            try {
                message = this.shorten(JSON.stringify(logMessage), logType);
            }
            catch (error) {
                message = "Can not stringfy the given log. Type of log data is: " + Object.prototype.toString.call(logMessage);
            }
        }
        else {
            message = this.shorten(logMessage, logType);
        }
        (_a = Logger.LogBulkManager) === null || _a === void 0 ? void 0 : _a.writeMessage({ message: message, type: ILogger_1.LogType[logType], time: clientDate, caller: whoCallMe });
    };
    /**
     * Can't call Log.calle.caller beacuse of the TypeScript classes are on "strict mode"
     * JS doesn't allow to arguments.callee.caller on strict mode
     * So just throw an simple Error and get the latest function name
     * returns String
     */
    Logger.getCalleFunctionName = function () {
        // try {
        //     throw new Error();
        // }
        // catch (e) {
        //     try {
        //         return e.stack.split('at ')[4].split(' ')[0];
        //     } catch (e) {
        //         return '';
        //     }
        // }
        return '';
    };
    /**
     * Clears the bulk of messages
     */
    Logger.clearLogs = function () {
        var _a, _b;
        (_b = (_a = Logger.LogBulkManager) === null || _a === void 0 ? void 0 : _a.clear) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    /**
     * Trim the message with size of the log type
     * @param logMessage log message
     * @param logType Log type that will be controlled
     */
    Logger.shorten = function (logMessage, logType) {
        if (logType > logMessage.length) {
            return logMessage;
        }
        else {
            return "Non trimmed message size is: " + logMessage.length;
        }
    };
    ;
    /**
     * @deprecated do not use. Use Logger.Log(...)
     */
    Logger.prototype.Log = function (options) {
        return Logger.Log(options);
    };
    Logger.windowName = Singularizer.getFreeName("shrimp_shelldorynemo_pulsar_lbm");
    Logger.logLevel = [ILogger_1.LogType.MobilDebug, ILogger_1.LogType.Trace, ILogger_1.LogType.Debug, ILogger_1.LogType.Warning, ILogger_1.LogType.Error];
    return Logger;
}());
exports.Logger = Logger;


/***/ }),

/***/ "../../common/shrimp/helpers/objectStore.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/objectStore.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetObjectStore = void 0;
var appWideStore;
/**
 * project wide object store helper
 */
function GetObjectStore() {
    return appWideStore || (appWideStore = new ObjectStore());
}
exports.GetObjectStore = GetObjectStore;
var ObjectData = /** @class */ (function () {
    function ObjectData(value) {
        this.watches = [];
        this.value = value;
    }
    ObjectData.prototype.getValue = function () {
        return this.value;
    };
    ObjectData.prototype.addWatch = function (cb) {
        this.watches.push(cb);
    };
    ObjectData.prototype.setValue = function (value) {
        var _this = this;
        var oldValue = this.value;
        this.value = value;
        this.watches.forEach(function (cb) { return cb(_this.value, oldValue); });
    };
    return ObjectData;
}());
var ObjectStore = /** @class */ (function () {
    function ObjectStore() {
        this.data = {};
    }
    ObjectStore.prototype.getObject = function (name, create) {
        if (create === void 0) { create = true; }
        var object = this.data[name];
        if (!object && create) {
            object = new ObjectData(null);
            this.data[name] = object;
        }
        return object;
    };
    ObjectStore.prototype.retrieveObject = function (name) {
        var object = this.getObject(name, false);
        return object && object.getValue();
    };
    ObjectStore.prototype.storeObject = function (name, value) {
        var object = this.getObject(name);
        object.setValue(value);
        return object;
    };
    ObjectStore.prototype.watch = function (name, cb) {
        var object = this.getObject(name);
        object.addWatch(cb);
        return object;
    };
    return ObjectStore;
}());


/***/ }),

/***/ "../../common/shrimp/helpers/qjsonParser/QJsonContentParser.ts":
/*!********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/qjsonParser/QJsonContentParser.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonContentParser = void 0;
var QJsonContentParser = /** @class */ (function () {
    function QJsonContentParser() {
    }
    QJsonContentParser.ParseQJsonContent = function (jsonString) {
        var json = jsonString;
        if (jsonString.indexOf("let pjson =") > -1) {
            var jsonSplitted = jsonString.split("let pjson =");
            jsonSplitted = jsonSplitted[1].split(';\nexport')[0].split(';\r\nexport');
            json = jsonSplitted[0];
        }
        else if (json.indexOf("rally_microUI") > -1) {
            var registerIndex = json.indexOf("registerQJson");
            var jsonStartIndex = json.indexOf(",", registerIndex) + 1;
            json = json.substring(jsonStartIndex, json.length - 2);
        }
        return JSON.parse(json);
    };
    return QJsonContentParser;
}());
exports.QJsonContentParser = QJsonContentParser;


/***/ }),

/***/ "../../common/shrimp/helpers/qjsonParser/QJsonExtractHelper.ts":
/*!********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/qjsonParser/QJsonExtractHelper.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QJsonExtractHelper = void 0;
var QJsonParserV2_1 = __webpack_require__(/*! ./QJsonParserV2 */ "../../common/shrimp/helpers/qjsonParser/QJsonParserV2.ts");
var QJsonContentParser_1 = __webpack_require__(/*! ./QJsonContentParser */ "../../common/shrimp/helpers/qjsonParser/QJsonContentParser.ts");
var QJsonExtractHelper = /** @class */ (function () {
    function QJsonExtractHelper() {
    }
    QJsonExtractHelper.qJsonExtractor = function (qjsonData) {
        var jsonString = QJsonExtractHelper.qJsonMediumDecider(qjsonData);
        if (jsonString.startsWith("qjson-")) {
            var version = (0, QJsonParserV2_1.removeCR)(jsonString.substring("qjson-".length, jsonString.indexOf("\n")));
            return parsers[version].Parse(jsonString);
        }
        return QJsonExtractHelper.ParseQJsonContent(jsonString);
    };
    QJsonExtractHelper.qJsonMediumDecider = function (qjsonData) {
        if (typeof qjsonData == "string") { //rally | symphony
            return qjsonData.startsWith('{"qjson":"') ? JSON.parse(qjsonData).qjson : qjsonData; // symphony : other
        }
        else {
            var qjsonString = JSON.stringify(qjsonData);
            return qjsonData.qjson || qjsonString; //symphony & websdk.axios
        }
    };
    QJsonExtractHelper.ParseQJsonContent = function (jsonString) {
        return QJsonContentParser_1.QJsonContentParser.ParseQJsonContent(jsonString);
    };
    return QJsonExtractHelper;
}());
exports.QJsonExtractHelper = QJsonExtractHelper;
var parsers = { v2: new QJsonParserV2_1.QJsonParserV2() };


/***/ }),

/***/ "../../common/shrimp/helpers/qjsonParser/QJsonParserV2.ts":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/qjsonParser/QJsonParserV2.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//////////////////////////////////SAMPLE V2 QJSON\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/**
 * @see \test\qjsonV2Tests.spec.ts
 */
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\SAMPLE V2 QJSON//////////////////////////////////
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeCR = exports.QJsonParserV2 = void 0;
var QJsonContentParser_1 = __webpack_require__(/*! ./QJsonContentParser */ "../../common/shrimp/helpers/qjsonParser/QJsonContentParser.ts");
var QJsonParserV2 = /** @class */ (function () {
    function QJsonParserV2() {
    }
    QJsonParserV2.QJsonBodyToString = function (qjson, unformatQjson) {
        return "let pjson = " +
            (unformatQjson == true ? JSON.stringify(qjson) : JSON.stringify(qjson, null, '\t')) +
            ";\r\n" +
            "export default pjson";
    };
    QJsonParserV2.prototype.Serialize = function (qjson) {
        var bodundary = QJsonParserV2.boundary + "\r\n";
        var header = QJsonParserV2.headerPrefix + "v2\r\nboundary: " + bodundary + "\r\n" + bodundary;
        var serializeFile = function (fileName, type, fileBody) { return "name: " + fileName + "\r\ntype: " + type + "\r\n\r\n" + fileBody; };
        var files = qjson.files;
        var cFiles = qjson.cFiles;
        var qjsonFile;
        try {
            qjson.files = undefined;
            qjson.cFiles = undefined;
            qjsonFile = serializeFile("qjson", "qjson", QJsonParserV2.QJsonBodyToString(qjson));
        }
        finally {
            qjson.files = files;
            qjson.cFiles = cFiles;
        } // atomic
        var fileItems = files ? bodundary + Object.keys(files).map(function (fileName) { return serializeFile(fileName, "source", files[fileName]); }).join(bodundary) : "";
        var cFileItems = cFiles ? bodundary + Object.keys(cFiles).map(function (fileName) { return serializeFile(fileName, "compiled", cFiles[fileName]); }).join(bodundary) : "";
        return header + qjsonFile + fileItems + cFileItems;
    };
    QJsonParserV2.prototype.Parse = function (jsonString) {
        var curLine = this.nextLine(jsonString, 0);
        var fileHeaders = this.extractHeaders(jsonString, curLine.lastIndex);
        var boundary = fileHeaders.headers.boundary;
        var lastIndex = fileHeaders.lastIndex;
        var files = {};
        var cFiles = {};
        do {
            var section = this.getSection(jsonString, boundary, lastIndex);
            var targetFiles = section.headers.type == "compiled" ? cFiles : files;
            targetFiles[section.headers.name] = { headers: section.headers, content: section.section };
            lastIndex = section.lastIndex;
        } while (lastIndex != -1);
        var qjson = QJsonContentParser_1.QJsonContentParser.ParseQJsonContent(files["qjson"].content);
        delete files.qjson;
        var qjsonFiles = qjson.files = {};
        var qjsonCFiles = qjson.cFiles = {};
        Object.keys(files).forEach(function (fileName) { return qjsonFiles[fileName] = files[fileName].content; });
        Object.keys(cFiles).forEach(function (fileName) { return qjsonCFiles[fileName] = cFiles[fileName].content; });
        return qjson;
    };
    QJsonParserV2.prototype.getSection = function (str, boundary, lastIndex) {
        var headers = this.extractHeaders(str, lastIndex);
        var section = this.getTillBoundary(str, boundary, headers.lastIndex);
        return { headers: headers.headers, section: section.section, lastIndex: section.lastIndex };
    };
    QJsonParserV2.prototype.getTillBoundary = function (str, boundary, lastIndex) {
        var nextBoundaryIndex = str.indexOf(boundary, lastIndex);
        if (nextBoundaryIndex == -1) {
            return { section: str.substring(lastIndex), lastIndex: -1 };
        }
        return { section: str.substring(lastIndex, nextBoundaryIndex), lastIndex: nextBoundaryIndex + boundary.length + 1 };
    };
    QJsonParserV2.prototype.extractHeaders = function (str, lastIndex) {
        var headersBucket = {};
        var curLine = { line: "", lastIndex: lastIndex };
        do {
            curLine = this.nextLine(str, curLine.lastIndex);
            if (!curLine.line) {
                break;
            } // headers section end
            var lineData = this.parseLine(curLine.line);
            if (!lineData) {
                continue;
            } // line is not parsable skip
            headersBucket[lineData.key] = lineData.value;
        } while (curLine.lastIndex != -1);
        return { headers: headersBucket, lastIndex: curLine.lastIndex };
    };
    QJsonParserV2.prototype.parseLine = function (line) {
        var commaIndex = line.indexOf(":");
        if (commaIndex == -1) {
            return undefined;
        }
        return { key: line.substring(0, commaIndex).trim(), value: line.substring(commaIndex + 1).trim() };
    };
    QJsonParserV2.prototype.nextLine = function (str, lastIndex) {
        var lineEnd = str.indexOf("\n", lastIndex);
        var line = removeCR(str.substring(lastIndex, lineEnd == -1 ? undefined : lineEnd));
        return { line: line, lastIndex: lineEnd + 1 || -1 };
    };
    QJsonParserV2.boundary = "-------------------" + "QJSONFileBoundary" + "-----------------------------";
    QJsonParserV2.headerPrefix = "qjson-";
    return QJsonParserV2;
}());
exports.QJsonParserV2 = QJsonParserV2;
function removeCR(str) {
    return str.endsWith("\r") ? str.substring(0, str.length - 1) : str;
}
exports.removeCR = removeCR;


/***/ }),

/***/ "../../common/shrimp/helpers/qjsonVersionHelper.ts":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/qjsonVersionHelper.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.qjsonVersionHelper = void 0;
var qjsonVersionHelper = /** @class */ (function () {
    function qjsonVersionHelper() {
    }
    qjsonVersionHelper.traversePageVersions = function (url, pageVersions) {
        var pageName = url.substring(url.lastIndexOf("/") + 1);
        var retVal = new Date();
        for (var page in pageVersions) {
            if (typeof pageVersions[page] === "object" && pageVersions[page] != null) {
                retVal = qjsonVersionHelper.traversePageVersions(url, pageVersions[page]);
            }
            if (page === pageName) {
                retVal = pageVersions[pageName];
            }
        }
        return retVal;
    };
    return qjsonVersionHelper;
}());
exports.qjsonVersionHelper = qjsonVersionHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/scripting/PageScripting.ts":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/scripting/PageScripting.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PageScripting = void 0;
var PageScripting = /** @class */ (function () {
    function PageScripting(cFiles) {
        this.cFiles = cFiles;
    }
    PageScripting.prototype.GetPageClass = function () {
        if (this.pageClassGenerated) {
            return this.pageClass;
        }
        this.pageClass = this.createPageClass();
        this.pageClassGenerated = true;
        return this.pageClass;
    };
    PageScripting.prototype.GetPageInstance = function () {
        if (this.pageInst) {
            return this.pageInst;
        }
        return this.pageInst = this.createPageInstance();
    };
    PageScripting.prototype.createPageInstance = function () {
        var pageClass = this.GetPageClass();
        if (!pageClass) {
            return undefined;
        }
        var pageInst = new pageClass();
        return pageInst;
    };
    PageScripting.prototype.createPageClass = function () {
        if (!this.cFiles) {
            return undefined;
        }
        var cFiles = this.cFiles;
        var script = Object.keys(cFiles).map(function (fileName) { return cFiles[fileName]; }).join("\r\n");
        var pageGenerator = new Function("exports", script);
        var exports = {};
        pageGenerator(exports);
        if (!exports.Page) {
            return undefined;
        }
        return exports.Page;
    };
    return PageScripting;
}());
exports.PageScripting = PageScripting;


/***/ }),

/***/ "../../common/shrimp/helpers/shellHelper.ts":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/shellHelper.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.fixShell = void 0;
function fixShell(shell) {
    if (!shell.getUserContext) {
        var userContext_1 = { userId: "" };
        shell.getUserContext = function () { return userContext_1; };
        shell.setUserContext = function (user) { userContext_1 = user; };
    }
}
exports.fixShell = fixShell;


/***/ }),

/***/ "../../common/shrimp/helpers/singularizer.ts":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/singularizer.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Singularizer = void 0;
var Singularizer = /** @class */ (function () {
    function Singularizer() {
    }
    Singularizer.trySingularize = function (name, targetObject, instance) {
        var retVal = targetObject[name];
        if (!retVal) {
            retVal = targetObject[name] = instance;
        }
        return retVal;
    };
    return Singularizer;
}());
exports.Singularizer = Singularizer;


/***/ }),

/***/ "../../common/shrimp/helpers/stringHelper.ts":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/stringHelper.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StringHelper = void 0;
var arrayHelper_1 = __webpack_require__(/*! ./arrayHelper */ "../../common/shrimp/helpers/arrayHelper.ts");
var StringHelper = /** @class */ (function () {
    function StringHelper() {
    }
    /** Function that count occurrences of a substring in a string;
     * @author Vitim.us https://gist.github.com/victornpb/7736865
     * @see http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string/7924240#7924240
     */
    StringHelper.OccurenceCount = function (value, searchString, allowOverlapping) {
        value += "";
        searchString += "";
        if (searchString.length <= 0)
            return (value.length + 1);
        var n = 0, pos = 0, step = allowOverlapping ? 1 : searchString.length;
        while (true) {
            pos = value.indexOf(searchString, pos);
            if (pos >= 0) {
                ++n;
                pos += step;
            }
            else
                break;
        }
        return n;
    };
    StringHelper.RepeatString = function (value, repeatCount) {
        return arrayHelper_1.ArrayHelper.InitEmptyArray(repeatCount + 1).join(value);
    };
    StringHelper.TrimStart = function (str, removeString) {
        if (!str || !removeString) {
            return str;
        }
        while (true) {
            var index = str.indexOf(removeString);
            if (index != 0) {
                return str;
            }
            str = str.substring(removeString.length);
        }
    };
    StringHelper.endsWith = function (self, search, this_len) {
        if (this_len === undefined || this_len > self.length) {
            this_len = self.length;
        }
        return self.substring(this_len - search.length, this_len) === search;
    };
    /**
     * Returns a random string
     * @param length Length of generated random string
     */
    StringHelper.randomStringGenerator = function (length) {
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for (var i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    };
    StringHelper.capitalizeString = function (input) {
        ///<summary>Capitialize first letter of a string</summary>
        return input.charAt(0).toUpperCase() + input.slice(1);
    };
    ;
    /**
     * Change char in string
     * @param str String that to be changed
     * @param index Index of string
     * @param chr Char
     */
    StringHelper.setCharAt = function (str, index, chr) {
        if (index < 0) {
            return str;
        }
        if (index > str.length) {
            index = str.length - 1;
        }
        return str.substr(0, index) + chr + str.substr(index + 1);
    };
    return StringHelper;
}());
exports.StringHelper = StringHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/typeHelper.ts":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/typeHelper.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeHelper = void 0;
var TypeHelper = /** @class */ (function () {
    function TypeHelper() {
    }
    TypeHelper.prototype.isJsonString = function (param) {
        try {
            JSON.parse(param);
        }
        catch (e) {
            return false;
        }
        return true;
    };
    TypeHelper.prototype.GetObjectType = function (param) {
        return Object.prototype.toString.call(param);
    };
    ;
    /** @deprecated use instanceof for typescript type distinction intellisense. ex: if (variable instanceof Array)*/
    TypeHelper.prototype.isArray = function (param) {
        return this.GetObjectType(param) == "[object Array]";
    };
    ;
    TypeHelper.prototype.isString = function (param) {
        return this.GetObjectType(param) === "[object String]";
    };
    ;
    TypeHelper.prototype.isNumber = function (param) {
        return this.GetObjectType(param) === "[object Number]";
    };
    ;
    TypeHelper.prototype.isNull = function (param) {
        return param === null || param === undefined;
    };
    ;
    TypeHelper.prototype.isFunction = function (param) {
        return this.GetObjectType(param) === "[object Function]";
    };
    ;
    TypeHelper.prototype.isObject = function (param) {
        return this.GetObjectType(param) === "[object Object]";
    };
    ;
    TypeHelper.prototype.isBool = function (param) {
        return this.GetObjectType(param) === "[object Boolean]";
    };
    ;
    TypeHelper.prototype.isBooleanConstructor = function (param) {
        return (param === null || param === void 0 ? void 0 : param.toString()) == "function Boolean() { [native code] }";
    };
    TypeHelper.prototype.isStringConstructor = function (param) {
        return (param === null || param === void 0 ? void 0 : param.toString()) == "function String() { [native code] }";
    };
    TypeHelper.prototype.isArrayConstructor = function (param) {
        return (param === null || param === void 0 ? void 0 : param.toString()) == "function Array() { [native code] }";
    };
    TypeHelper.prototype.isObjectConstructor = function (param) {
        return (param === null || param === void 0 ? void 0 : param.toString()) == "function Object() { [native code] }";
    };
    TypeHelper.prototype.isNumberConstructor = function (param) {
        return (param === null || param === void 0 ? void 0 : param.toString()) == "function Number() { [native code] }";
    };
    TypeHelper.prototype.isDateString = function (param) {
        if (!this.isString(param)) {
            return false;
        }
        return !isNaN(Date.parse(param));
    };
    ;
    TypeHelper.prototype.isDate = function (param) {
        return this.GetObjectType(param) === "[object Date]";
    };
    TypeHelper.prototype.isFile = function (param) {
        return this.GetObjectType(param) === "[object File]";
    };
    TypeHelper.prototype.isBlob = function (param) {
        var MyBlob = new Blob([param]);
        return MyBlob instanceof Blob; // true
    };
    TypeHelper.prototype.cloneObject = function (obj) {
        var copy;
        // Handle the 3 simple types, and null or undefined
        if (null == obj || "object" != typeof obj) {
            return obj;
        }
        // Handle Date
        if (obj instanceof Date) {
            copy = new Date();
            copy.setTime(obj.getTime());
            return copy;
        }
        // Handle Array
        if (Array.isArray(obj)) {
            copy = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                copy[i] = this.cloneObject(obj[i]);
            }
            return copy;
        }
        // Handle Object
        if (typeof obj === "object") {
            copy = obj.constructor && obj.constructor.length < 1 ? new obj.constructor() : {};
            for (var attr in obj) {
                if (obj.hasOwnProperty(attr)) {
                    copy[attr] = this.cloneObject(obj[attr]);
                }
            }
            return copy;
        }
        throw new Error("Unable to copy obj! Its type isn't supported.");
    };
    ;
    return TypeHelper;
}());
exports.TypeHelper = TypeHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/validationHelper.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/validationHelper.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationHelper = void 0;
var ValidationHelper = /** @class */ (function () {
    function ValidationHelper() {
    }
    ValidationHelper.prototype.checkVKN = function (kno) {
        var v1 = 0;
        var v2 = 0;
        var v3 = 0;
        var v4 = 0;
        var v5 = 0;
        var v6 = 0;
        var v7 = 0;
        var v8 = 0;
        var v9 = 0;
        var v11 = 0;
        var v22 = 0;
        var v33 = 0;
        var v44 = 0;
        var v55 = 0;
        var v66 = 0;
        var v77 = 0;
        var v88 = 0;
        var v99 = 0;
        var v_last_digit = 0;
        var toplam = 0;
        /* desen isimli düzenli ifade cümleciği kodun bu versiyonunda, ileriki satırlarda kullanılmamaktadır. Ancak; kullanıcı tarafından sisteme belirtilen değerin, sayısal bir değer olup olmadığını kontrol etmek için, basamak işlemlerinden hemen önce desen.test(kno.charAt(basamaksayisi)) şeklinde kullanabilirsiniz. Uyarı için desenz 'e teşekkürler. */
        var desen = /[0-9]{10}/;
        if (kno) {
            //kno = (<string>kno).padStart(10, '0');
            if (kno.length == 10) {
                v1 = (Number(kno.charAt(0)) + 9) % 10;
                v2 = (Number(kno.charAt(1)) + 8) % 10;
                v3 = (Number(kno.charAt(2)) + 7) % 10;
                v4 = (Number(kno.charAt(3)) + 6) % 10;
                v5 = (Number(kno.charAt(4)) + 5) % 10;
                v6 = (Number(kno.charAt(5)) + 4) % 10;
                v7 = (Number(kno.charAt(6)) + 3) % 10;
                v8 = (Number(kno.charAt(7)) + 2) % 10;
                v9 = (Number(kno.charAt(8)) + 1) % 10;
                v_last_digit = Number(kno.charAt(9));
                v11 = (v1 * 512) % 9;
                v22 = (v2 * 256) % 9;
                v33 = (v3 * 128) % 9;
                v44 = (v4 * 64) % 9;
                v55 = (v5 * 32) % 9;
                v66 = (v6 * 16) % 9;
                v77 = (v7 * 8) % 9;
                v88 = (v8 * 4) % 9;
                v99 = (v9 * 2) % 9;
                if (v1 != 0 && v11 == 0)
                    v11 = 9;
                if (v2 != 0 && v22 == 0)
                    v22 = 9;
                if (v3 != 0 && v33 == 0)
                    v33 = 9;
                if (v4 != 0 && v44 == 0)
                    v44 = 9;
                if (v5 != 0 && v55 == 0)
                    v55 = 9;
                if (v6 != 0 && v66 == 0)
                    v66 = 9;
                if (v7 != 0 && v77 == 0)
                    v77 = 9;
                if (v8 != 0 && v88 == 0)
                    v88 = 9;
                if (v9 != 0 && v99 == 0)
                    v99 = 9;
                toplam = v11 + v22 + v33 + v44 + v55 + v66 + v77 + v88 + v99;
                if (toplam % 10 == 0)
                    toplam = 0;
                else
                    toplam = (10 - (toplam % 10));
                return toplam == v_last_digit;
            }
            else
                return false;
        }
    };
    ValidationHelper.prototype.checkTCKN = function (value) {
        value = value === null || value === void 0 ? void 0 : value.toString();
        if (value) {
            var isEleven = /^[0-9]{11}$/.test(value);
            var totalX = 0;
            for (var i = 0; i < 10; i++) {
                totalX += Number(value.substr(i, 1));
            }
            var isRuleX = totalX % 10 == value.substr(10, 1);
            var totalY1 = 0;
            var totalY2 = 0;
            for (var i = 0; i < 10; i += 2) {
                totalY1 += Number(value.substr(i, 1));
            }
            for (var i = 1; i < 10; i += 2) {
                totalY2 += Number(value.substr(i, 1));
            }
            var isRuleY = ((totalY1 * 7) - totalY2) % 10 == value.substr(9, 0);
            return isEleven && isRuleX && isRuleY;
        }
    };
    return ValidationHelper;
}());
exports.ValidationHelper = ValidationHelper;


/***/ }),

/***/ "../../common/shrimp/helpers/windowHelper.ts":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/helpers/windowHelper.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowHelper = void 0;
var logger_1 = __webpack_require__(/*! ./logger */ "../../common/shrimp/helpers/logger.ts");
var singularizer_1 = __webpack_require__(/*! ./singularizer */ "../../common/shrimp/helpers/singularizer.ts");
var undefinedType = "undefined";
var WindowHelper = /** @class */ (function () {
    function WindowHelper() {
        this.doc = typeof (document) !== undefinedType ? document : {
            addEventListener: function (type, listener, options) {
                //might simulate this in future...
                logger_1.Logger.Log({ logMessage: "Enviroment does not support document. Triggering document.addEventListener now, type is: " + type, logType: logger_1.LogType.Warning });
                listener({ target: { readyState: this.readyState } });
            },
            createElement: function (tagName, options) {
                return { tagName: tagName, options: options };
            },
            readyState: "complete"
        };
        this.hist = typeof (history) !== undefinedType ? history : {
            pushState: function (data, title, url) {
                //might log data and url with additional data in logging
                logger_1.Logger.Log({ logMessage: "history.pushState not supported on Node. title: " + title, logType: logger_1.LogType.Debug });
            }
        };
        this.win = typeof (window) !== undefinedType ? window : {
            setInterval: setInterval,
            clearInterval: clearInterval,
            setTimeout: setTimeout,
            clearTimeout: clearTimeout,
            atob: atob,
            btoa: btoa
        };
        this.helperWorker = {
            worker: function (scriptURL, options) {
                return typeof (Worker) !== undefinedType ? new Worker(scriptURL, options) : undefined;
            }
        };
        // this.eventListeners = this.wrapEventListeners();
    }
    Object.defineProperty(WindowHelper.prototype, "onPopState", {
        set: function (value) {
            if (typeof (window) !== undefinedType) {
                window.onpopstate = value;
            }
            else {
                logger_1.Logger.Log({ logMessage: "onPopState not supported on Node.", logType: logger_1.LogType.Debug });
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WindowHelper.prototype, "document", {
        get: function () {
            return this.doc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WindowHelper.prototype, "history", {
        get: function () {
            return this.hist;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WindowHelper.prototype, "Window", {
        get: function () {
            return this.win;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WindowHelper.prototype, "Worker", {
        get: function () {
            return this.helperWorker;
        },
        enumerable: false,
        configurable: true
    });
    WindowHelper.Instance = singularizer_1.Singularizer.trySingularize("theOneWindow", new WindowHelper().Window, new WindowHelper());
    return WindowHelper;
}());
exports.WindowHelper = WindowHelper;


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/ElementLocation.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/ElementLocation.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementLocation = void 0;
var ElementLocation;
(function (ElementLocation) {
    ElementLocation["Before"] = "Before";
    ElementLocation["After"] = "After";
    ElementLocation["Default"] = "Default";
})(ElementLocation = exports.ElementLocation || (exports.ElementLocation = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/IAlert.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/IAlert.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertButtonType = exports.AlertType = exports.ErrorSource = void 0;
var ErrorSource;
(function (ErrorSource) {
    ErrorSource["Page"] = "Page";
    ErrorSource["Network"] = "Network";
    ErrorSource["Validation"] = "Validation";
})(ErrorSource = exports.ErrorSource || (exports.ErrorSource = {}));
var AlertType;
(function (AlertType) {
    AlertType["Warning"] = "Warning";
    AlertType["Info"] = "Info";
    AlertType["Success"] = "Success";
    AlertType["Error"] = "Error";
})(AlertType = exports.AlertType || (exports.AlertType = {}));
var AlertButtonType;
(function (AlertButtonType) {
    AlertButtonType["Confirm"] = "Confirm";
    AlertButtonType["Cancel"] = "Cancel";
})(AlertButtonType = exports.AlertButtonType || (exports.AlertButtonType = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CType = exports.PType = void 0;
var PType;
(function (PType) {
    PType["class"] = "class";
    PType["text"] = "text";
    PType["prop"] = "prop";
    PType["attr"] = "attr";
})(PType = exports.PType || (exports.PType = {}));
/**
 * C type of component
 */
var CType;
(function (CType) {
    /**
     * Normal child type
     */
    CType["child"] = "child";
    /**
     * Slot type
     */
    CType["slot"] = "slot";
    /**
     * Callback typed child creator function -> scopedSlotCreatorFunc
     */
    CType["scopedSlot"] = "scopedSlot";
})(CType = exports.CType || (exports.CType = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/ILogger.ts":
/*!********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/ILogger.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LogType = void 0;
var LogType;
(function (LogType) {
    LogType[LogType["Debug"] = 0] = "Debug";
    LogType[LogType["MobilDebug"] = 1000] = "MobilDebug";
    LogType[LogType["Trace"] = 200000] = "Trace";
    LogType[LogType["Warning"] = 500000] = "Warning";
    LogType[LogType["Error"] = 1000000] = "Error"; // 500Kb
})(LogType = exports.LogType || (exports.LogType = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/IPropExtension.ts":
/*!***************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/IPropExtension.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IPropOverrideType = void 0;
var IPropOverrideType;
(function (IPropOverrideType) {
    IPropOverrideType["Append"] = "Append";
    IPropOverrideType["Override"] = "Override";
    IPropOverrideType["Replace"] = "Replace";
})(IPropOverrideType = exports.IPropOverrideType || (exports.IPropOverrideType = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/IPropSupport.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/IPropSupport.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IPropSupport = void 0;
var IPropSupport;
(function (IPropSupport) {
    IPropSupport["store"] = "store";
})(IPropSupport = exports.IPropSupport || (exports.IPropSupport = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/ComponentInterfaces/TSComponentBase.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TSComponentBase = void 0;
var TSComponentBase = /** @class */ (function () {
    function TSComponentBase(_a) {
        var _this = this;
        var events = _a.events, selfEventList = _a.selfEventList;
        this.selfEvents = {};
        selfEventList.forEach(function (event) {
            _this.selfEvents[event] = events[event];
            delete events[event];
        });
    }
    TSComponentBase.prototype.emit = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var targetEvent = this.selfEvents[eventName];
        if (!targetEvent) {
            return;
        }
        return targetEvent.apply.apply(targetEvent, __spreadArray([this], __read(args), false));
    };
    return TSComponentBase;
}());
exports.TSComponentBase = TSComponentBase;


/***/ }),

/***/ "../../common/shrimp/interfaces/IPromiseData.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/IPromiseData.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseAllSettled = exports.CreatePromiseData = void 0;
var syncResolved = false;
new Promise(function (res) { return res(); }).then(function () { return syncResolved = true; });
typeof (doNothing) != "undefined" && doNothing();
var syncResolveProblem = syncResolved === true; // platform has sync resolve problem or not
/**
 * @param timeout timeout time in ms, undefined if infinite
 */
function CreatePromiseData(timeout, opt) {
    if (opt === void 0) { opt = {}; }
    var syncResolveFixer = function (cb) { return syncResolveProblem && opt.fixSyncResolve ? function (value) { return setTimeout(function () { return cb(value); }); } : cb; };
    var resolver = undefined, reject = undefined;
    var timer;
    var startTimer = function (timeout) {
        if (timer) {
            clearTimeout(timer);
        }
        timer = setTimeout(function () { reject(new Error("The operation has timed out. timeoutValue  : " + timeout)); }, timeout);
    };
    var resolved = false, rejected = false;
    var isCompleted = function () { return resolved || rejected; };
    if (timeout) {
        startTimer(timeout);
    }
    return {
        startTimer: startTimer,
        promise: new Promise(function (res, rej) {
            var cb = syncResolveFixer(res);
            resolver = function (value) { if (isCompleted()) {
                return;
            } resolved = true; cb(value); };
            reject = function (reason) { if (isCompleted()) {
                return;
            } rejected = true; rej(reason); };
        }),
        resolver: resolver,
        reject: reject,
        isResolved: function () { return resolved; },
        isRejected: function () { return rejected; },
        isCompleted: isCompleted,
    };
}
exports.CreatePromiseData = CreatePromiseData;
function PromiseAllSettled(proms) {
    var _this = this;
    var retProm = CreatePromiseData();
    var left = proms.length;
    proms.forEach(function (prom) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, , 2, 3]);
                    return [4 /*yield*/, prom];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    if (--left <= 0) {
                        retProm.resolver(prom);
                    }
                    return [7 /*endfinally*/];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    return retProm.promise;
}
exports.PromiseAllSettled = PromiseAllSettled;


/***/ }),

/***/ "../../common/shrimp/interfaces/RenderingInterfaces/IDory.ts":
/*!******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/RenderingInterfaces/IDory.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DoryContextName = void 0;
exports.DoryContextName = "Dory";


/***/ }),

/***/ "../../common/shrimp/interfaces/RenderingInterfaces/Operators/IPermanentStoreOperator.ts":
/*!**********************************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/RenderingInterfaces/Operators/IPermanentStoreOperator.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Plateau_UI_PermanentStore_Name_Prefix = exports.Plateau_UI_PermanentStore_Name = void 0;
exports.Plateau_UI_PermanentStore_Name = "PermanentStore";
exports.Plateau_UI_PermanentStore_Name_Prefix = "Plateau_UI_";


/***/ }),

/***/ "../../common/shrimp/interfaces/Scripting/IEvaluator.ts":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/Scripting/IEvaluator.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TsFilterKeysGlobals = void 0;
exports.TsFilterKeysGlobals = {
    Math: true, regex: true, typeOf: true, Date: true, Number: true, JSON: true, string: true, Object: true, js: true,
};


/***/ }),

/***/ "../../common/shrimp/interfaces/Scripting/LangCalc.ts":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/Scripting/LangCalc.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LangCalc = void 0;
var LangCalc = /** @class */ (function () {
    function LangCalc() {
    }
    LangCalc.getLang = function (_a) {
        var _b, _c;
        var self = _a.self, ctrl = _a.ctrl, qJson = _a.qJson, qLang = _a.qLang;
        return self || ((_b = ctrl === null || ctrl === void 0 ? void 0 : ctrl.O) === null || _b === void 0 ? void 0 : _b.CL) || (((_c = qJson === null || qJson === void 0 ? void 0 : qJson.opt) === null || _c === void 0 ? void 0 : _c.QL) || qLang);
    };
    return LangCalc;
}());
exports.LangCalc = LangCalc;


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/IExcel.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/IExcel.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExcelCellType = void 0;
var ExcelCellType;
(function (ExcelCellType) {
    ExcelCellType["boolean"] = "b";
    ExcelCellType["number"] = "n";
    ExcelCellType["date"] = "d";
    ExcelCellType["text"] = "s";
})(ExcelCellType = exports.ExcelCellType || (exports.ExcelCellType = {}));
// type: b Boolean, e Error, n Number, d Date, s Text, z Stub
//{ text: "amount decimal", value: "amount", cellOptions:{ type:enum, numberFormat: "##,#0.00"} }


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/IExternalLocalizationFunc.ts":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/IExternalLocalizationFunc.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalLocalizationFuncContextName = void 0;
exports.ExternalLocalizationFuncContextName = "ExternalLocalizationFunc";


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/INavigationDemand.ts":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/INavigationDemand.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.INavigationDemandType = void 0;
var INavigationDemandType;
(function (INavigationDemandType) {
    INavigationDemandType["forward"] = "forward";
    INavigationDemandType["back"] = "back";
})(INavigationDemandType = exports.INavigationDemandType || (exports.INavigationDemandType = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/INavigationManager.ts":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/INavigationManager.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MobileAnimation = void 0;
var MobileAnimation;
(function (MobileAnimation) {
    MobileAnimation["push"] = "push";
    MobileAnimation["presentFullScreen"] = "presentFullScreen";
    MobileAnimation["fade"] = "fade";
})(MobileAnimation = exports.MobileAnimation || (exports.MobileAnimation = {}));


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/IRoleBaseAuthorizationFunc.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/IRoleBaseAuthorizationFunc.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleBaseAuthorizationFuncContextName = void 0;
exports.RoleBaseAuthorizationFuncContextName = "RoleBaseAuthorizationFunc";


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/IUXManager.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/IUXManager.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UXManagerContextName = void 0;
exports.UXManagerContextName = "UXManager";


/***/ }),

/***/ "../../common/shrimp/interfaces/quick/IWebSDK.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/interfaces/quick/IWebSDK.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CompGroupType = void 0;
var CompGroupType;
(function (CompGroupType) {
    CompGroupType["Vuetify"] = "Vuetify";
    CompGroupType["DevExpress"] = "DevExpress";
    CompGroupType["Sprinkle"] = "Sprinkle";
    CompGroupType["Chart"] = "Chart";
    CompGroupType["Local"] = "Local";
    CompGroupType["GoldenLayout"] = "GoldenLayout";
})(CompGroupType = exports.CompGroupType || (exports.CompGroupType = {}));


/***/ }),

/***/ "../../common/shrimp/omniScriptCompiler/Compressor.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/omniScriptCompiler/Compressor.js ***!
  \***********************************************************************************************/
/*! exports provided: Compress */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compress", function() { return Compress; });
/* harmony import */ var _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
/* harmony import */ var _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__);

    var directions = {
        left: "╣",
        right: "╠",
        up: "╩",
        array: "╬",
        "null": "■"
    };
    var compressNode = function (node) {
        ///<param name="node" value="new Isbank.OmniScript.Node()">node to be compressed</param>
        var typeHelper = new _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__["TypeHelper"]();

        if (node === null) {
            return directions.null;
        }
        var nodeString = node.token.value;
        if (node.token.type === compress.TokenTypes.string) {
            nodeString = "'" + nodeString + "'";
        }
        if (node.left !== null) {
            var leftArray = node.left;
            
            if (!typeHelper.isArray(node.left)) {
                leftArray = [leftArray];
            }

            for (var i = 0; i < leftArray.length; i++) {
                nodeString += directions.left;
                if (typeHelper.isArray(leftArray[i])) {
                    nodeString += compressForest(leftArray[i]);
                } else {
                    nodeString += compressNode(leftArray[i]);
                }
            }
        }

        if (node.right !== null) {
            var rightArray = node.right;

            if (!typeHelper.isArray(rightArray)) {
                rightArray = [rightArray];
            }

            for (var i = 0; i < rightArray.length; i++) {
                nodeString += directions.right;
                if (typeHelper.isArray(rightArray[i])) {
                    nodeString += compressForest(rightArray[i]);
                } else {
                    nodeString += compressNode(rightArray[i]);
                }
            }
        }

        return nodeString + directions.up;
    };
    var compressTree = function (tree) {
        ///<param name="tree" value="new Isbank.OmniScript.Node()">tree to be compressed</param>
        var curNode = tree;
        var treeString = compressNode(curNode);
        return treeString;
    };
    var compressForest = function (forest) {
        ///<param name="forest" value="[new Isbank.OmniScript.Node()]">Forest of trees to be compressed</param>
        var forestString = "";
        var tree = null;
        for (var i = 0; i < forest.length ; i++) {
            tree = forest[i];
            forestString += directions.array + compressTree(tree);
        }
        return forestString + directions.up;
    };
    var Compress = function (forest) {
        ///<param name="forest" value="[new Isbank.OmniScript.Node()]">Forest of trees to be compressed</param>
        return compressForest(forest);
    };
    
    var compress = Compress;

    compress.TokenTypes = {
        identifier: "identifier",
        keyword: "keyword",
        string: "string",
        number: "number",
        operator: "operator"
    };

    

/***/ }),

/***/ "../../common/shrimp/omniScriptCompiler/Lexer.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/omniScriptCompiler/Lexer.js ***!
  \******************************************************************************************/
/*! exports provided: Lex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lex", function() { return Lex; });
/* harmony import */ var _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
/* harmony import */ var _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _QSCError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QSCError */ "../../common/shrimp/omniScriptCompiler/QSCError.ts");
/* harmony import */ var _QSCError__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_QSCError__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Token */ "../../common/shrimp/omniScriptCompiler/Token.ts");
/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Token__WEBPACK_IMPORTED_MODULE_2__);




var Lex = function (dataInput, lexContext, returnOnExess) {
        var char;
        var token; // token that is being filled on cumulatively and has NOT been added
        var prevToken; // token that has been filled previously and has BEEN added to list
        var tokens = [];
        var numbers = "0123456789";
        var characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
        var operators = "(){}[]+-*/!?:%.&|><=\,";
        var longOperators = { "++": 1,/* "--": 1, "+=": 1, "*=": 1, "-=": 1, "/=": 1,*/ "&&": 1, "||": 1, "==": 1, ">=": 1, "<=": 1, "!=": 1 };
        var commentOperators = {"//": 1};
        var stringOperators = { "'": 1 };
        var context = lexContext || { i: 0, data: dataInput || "", line: 1, column: 1 };
        var willReturn = false;
        var space = " ";
        var tab = "\t";

        var keywords = {
            "if": {
                expectedNextTokenValue: "(",
                acceptablePrevTokens: "else"
            },
            "else": {
                expectedNextTokenValue: "{",
                acceptablePrevTokens: "}"
            },
            "foreach": {
                expectedNextTokenValue: "(",
                acceptablePrevTokens: null
            },
            "in": {
                expectedNextTokenValue: { type: _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.identifier },
                acceptablePrevTokens: { type: _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.identifier }
            },
            "break": {
                expectedNextTokenValue: null,
                acceptablePrevTokens: null
            },
            "continue": {
                expectedNextTokenValue: null,
                acceptablePrevTokens: null
            }
        };
        var stringEscapeds = {
            "{": function(){
                return "{";
            },
            "\\": function(){
                return "\\";
            },
            "t": function(){
                return "\t";
            },
            "n": function(){
                return "\n";
            }
        };
        var inStringOperators = {
            "{": function() {
                // string içinde geçen { -> Merhaba {Customer.Name}
                addToken();
    
                var innerTokens = Lex(context.data, context, { "{": 1, "}": -1 });
                for (var i = 0; i < innerTokens.length; i++) {
                    tokens.push(innerTokens[i]);
                }
                token = tokens[tokens.length - 1];
                if (token.value != "}") {
                    error("string statements must end with }" + token.Summarize(), "string statement must end with } " + token.value);
                }
                willReturn = checkExessReturn(token.value);
                prevToken = token;
                token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string, "", getPoz());
                token.position.column++; // continuation of string for next char
            },
            "\\": function() {
                var nextChar = peekNext();
                var escaper = stringEscapeds[nextChar];
                if (!escaper){
                    return;
                }
                token.value += escaper();
                next();
            }
        }

        function checkPrevToken(token, prevToken) {
            ///<param name="prevToken" value="new Isbank.OmniScript.Token();"></param>
            if (prevToken == null) {
                return;
            }
            var accPrevTokens = keywords[token.value].acceptablePrevTokens;
            if (accPrevTokens == null) {
                error("Keyword: " + token.Summarize() + " must be first token in a line.", token.type + ": " + token.value + " must be first token in a line.");
            }

            if (new _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__["TypeHelper"]().isObject(accPrevTokens)) {
                if (accPrevTokens.type != prevToken.type) {
                    error("Keyword: " + token.Summarize() + " can not have " + prevToken.Summarize() + " before", token.type + ": " + token.value + " can not have '" + prevToken.value + "' before");
                }
            } else {
                if (accPrevTokens != prevToken.value) {
                    error("Keyword: " + token.Summarize() + " can not have " + prevToken.Summarize() + " before", token.type + ": " + token.value + " can not have '" + prevToken.value + "' before");
                }
            }
        }

        function isLongOperator(op) {
            return longOperators[op || token.value] == 1;
        }
        function isCommentLongOperator(){
            return commentOperators[token.value] == 1;
        }

        function addToken() {
            if (token != null) {
                if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.identifier && keywords.hasOwnProperty(token.value) && keywords[token.value] != null) {
                    token.type = _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.keyword;
                    checkPrevToken(token, prevToken);
                } else if (prevToken != null && prevToken.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.keyword) {
                    var expNextToken = keywords[prevToken.value].expectedNextTokenValue;
                    if (!expNextToken) {
                        error("Token: " + prevToken.Summarize() + " does not accept anything after it", prevToken.type + ": " + prevToken.value + " does not accept anything after it");
                    } else if (new _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_0__["TypeHelper"]().isObject(expNextToken)) {
                        if (expNextToken.type != token.type) {
                            error("Token: " + token.Summarize() + " can not come after " + prevToken.Summarize(), token.type + ": " + token.value + " can not come after '" + prevToken.value + "'");
                        }
                    } else {
                        if (expNextToken != token.value) {
                            error("Token: " + token.Summarize() + " can not come after " + prevToken.Summarize(), token.type + ": " + token.value + " can not come after '" + prevToken.value + "'");
                        }
                    }
                }

                tokens.push(token);
                prevToken = token;
                token = null;
            }
        }

        function isStringOp(curChar) {
            return stringOperators[curChar || char] == 1;
        }
        function isNumber(curChar) {
            return numbers.indexOf(curChar || char) > -1;
        }
        function isCharacter(curChar) {
            return characters.indexOf(curChar || char) > -1;
        }
        function isOperator(curChar) {
            return operators.indexOf(curChar || char) > -1;
        }

        function getPoz() {
            return { line: context.line, column: context.column };
        }

        function error(consoleMsg, msg) {
            msg = msg || consoleMsg;
            throw new _QSCError__WEBPACK_IMPORTED_MODULE_1__["QSCError"]({ intelliMsg: msg, message: "(Lexer)line: " + context.line + " column: " + context.column + "-> " + consoleMsg,
                stLine: context.line, stColumn: context.column,
                eLine: context.line, eColumn: context.column + 2
             });
        }
        function peekNext() {
            if (context.i + 1 >= context.data.length) {
                return null;
            }
            return context.data[context.i + 1];
        }
        function next() {
            context.i++;
            context.column++;
        }
        function prev() {
            context.i--;
            context.column--;
        }

        function isTokenizer() {
            return char === space || char === tab;
        }


        function checkNewLine() {
            if (char === "\n") {
                return true;
            } else if (char === "\r" && peekNext() === "\n") {
                next();
                return true;
            }
        }

        function checkExessReturn(curChar) {
            var targetChar = curChar || char;
            if (returnOnExess === null || returnOnExess === undefined) {
                return false;
            }
            if (returnOnExess[targetChar] === undefined) {
                return false;
            }

            returnOnExess.value = (returnOnExess.value || 0) + returnOnExess[targetChar];
            if (returnOnExess.value > 0) {
                return false;
            }
            return true;
        }

        while (context.i < context.data.length && !willReturn) {
            char = context.data[context.i];

            willReturn = checkExessReturn();
            if (checkNewLine()) {

                addToken();
                context.line++;
                context.column = 0;
                prevToken = null;
            } else {
                if (token == null) {
                    if (isTokenizer()) {
                        addToken();
                    } else if (isNumber()) {
                        token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.number, char, getPoz());
                    } else if (isStringOp()) {
                        token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string, "", getPoz());
                    } else if (isCharacter()) {
                        token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.identifier, char, getPoz());
                    } else if (isOperator()) {
                        token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator, char, getPoz());
                    } else {
                        error("char: " + char + " is not a permitted char");
                    }
                } else {
                    if (isTokenizer()) {
                        if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string) {
                            token.value += char;
                        } else {
                            addToken();
                        }
                    } else if (isCharacter()) {
                        if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.number || token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.keyword) {
                            error("char: " + char + " can not come after: " + token.Summarize(), "char: " + char + " can not come after: " + token.value);
                        } else if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator) {
                            addToken();
                            token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.identifier, char, getPoz());
                        } else { // string & identifier
                            token.value += char;
                        }
                    } else if (isStringOp()) {
                        if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator) {
                            addToken();
                            token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string, "", getPoz());
                        } else if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string) {
                            if (isStringOp(context.data[context.i + 1])) {
                                if (char === context.data[context.i + 1]) {
                                    token.value += char;
                                    next();
                                } else {
                                    addToken();
                                }
                            } else {
                                addToken();
                            }
                        } else {
                            error("char: " + char + " can not come after: " + token.Summarize(), "char: " + char + " can not come after: " + token.value);
                        }
                    } else if (isNumber()) {
                        if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator) {
                            addToken();
                            token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.number, char, getPoz());
                        } else if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.keyword) {
                            error("number: " + char + " can not come after: " + token.Summarize(), "number: " + char + " can not come after: " + token.value);
                        } else {
                            token.value += char;
                        }
                    } else if (isOperator()) {
                        if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string) {
                            var opFunc = inStringOperators[char];
                            if (opFunc){
                                opFunc();
                            }else{
                                token.value += char;
                            }
                        } else if (token.type != _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator) {
                            addToken();

                            token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator, char, getPoz());
                        } else {
                            token.value += char;
                            if (isCommentLongOperator()){
                                token.type = "comment";
                                do{
                                    token.value += char;
                                    next();
                                    char = context.data[context.i];
                                }while(char && !checkNewLine())
                                prev();
                                token = null; // might use comment tokens in some other time or place. or dimension :)
                            } else if (!isLongOperator()) {
                                // maybe error ??
                                token.value = token.value.substring(0, token.value.length - 1);
                                addToken();
                                token = new _Token__WEBPACK_IMPORTED_MODULE_2__["Token"](_Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.operator, char, getPoz());
                            }
                        }
                    } else {
                        if (token.type == _Token__WEBPACK_IMPORTED_MODULE_2__["Token"].Types.string) {
                            var opFunc = inStringOperators[char];
                            if (opFunc){
                                opFunc();
                            }else{
                                token.value += char;
                            }
                        } else {
                            error("char: " + char + " is not a permitted char");
                        }
                    }
                }
            }

            if (!willReturn) {
                next();
            }
        }
        addToken();

        return tokens;
    };




/***/ }),

/***/ "../../common/shrimp/omniScriptCompiler/Node.ts":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/omniScriptCompiler/Node.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
var Parser_1 = __webpack_require__(/*! ./Parser */ "../../common/shrimp/omniScriptCompiler/Parser.js");
var Token_1 = __webpack_require__(/*! ./Token */ "../../common/shrimp/omniScriptCompiler/Token.ts");
var node = /** @class */ (function () {
    function node(token) {
        if (token == null) {
            throw "(Parser)token is null";
        }
        this.token = token;
        this.left = null;
        this.right = null;
        this.parent = null;
        this.TokObject = Parser_1.ParseObj.Parse.Dict[this.token.type + "s"][this.token.value];
        this.TokObject = this.TokObject == null ? Parser_1.ParseObj.Parse.Dict[this.token.type + "s"].main : this.TokObject;
        if (this.TokObject == null) {
            throw "(Parser)token is not an expected token: " + this.Summarize();
        }
    }
    node.prototype.Summarize = function () {
        return this.token.Summarize();
    };
    node.prototype.ShortSummarize = function () {
        var shortSum = this.token.type;
        switch (this.token.type) {
            case Token_1.Token.Types.operator:
                shortSum += "<<" + this.token.value + ">>";
                break;
        }
        return shortSum;
    };
    return node;
}());
exports.Node = node;


/***/ }),

/***/ "../../common/shrimp/omniScriptCompiler/Parser.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/omniScriptCompiler/Parser.js ***!
  \*******************************************************************************************/
/*! exports provided: ParseObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParseObj", function() { return ParseObj; });
/* harmony import */ var _Node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Node */ "../../common/shrimp/omniScriptCompiler/Node.ts");
/* harmony import */ var _Node__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Node__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ "../../common/shrimp/omniScriptCompiler/Token.ts");
/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Token__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/typeHelper */ "../../common/shrimp/helpers/typeHelper.ts");
/* harmony import */ var _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_helpers_typeHelper__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _QSCError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QSCError */ "../../common/shrimp/omniScriptCompiler/QSCError.ts");
/* harmony import */ var _QSCError__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_QSCError__WEBPACK_IMPORTED_MODULE_3__);





function ParseContext(tokenInputs) {
    this.tokenInputs = tokenInputs;
    this.i = 0;
    this.innerParseClosure = false;
    this.innerParseClosureRetval = null;
    this.innerParseEntryReasons = [];
}
ParseContext.prototype.getInnerParseEntryReason = function(){
    var resLength = this.innerParseEntryReasons.length;
    return resLength ? this.innerParseEntryReasons[resLength - 1] : null;
};
ParseContext.prototype.setInnerParseEntryReason = function (newReason) {
    var oldEntryReason = this.getInnerParseEntryReason();
    this.innerParseEntryReasons.push(newReason);
    return oldEntryReason;
};
ParseContext.prototype.popInnerParseEntryReason = function(){
    this.innerParseEntryReasons.pop();
};
ParseContext.prototype.searchInnerParseEntryReason = function(searchReason){
    for (var i = this.innerParseEntryReasons.length - 1; i >= 0; i--){
        if (this.innerParseEntryReasons[i] == searchReason){
            return true;
        }
    }
    return false;
};

var Parse = function (tokenInputs, parseOptions) {
    ///<param name="tokenInputs" type="[Token]" value="[new Token()]">Lexed tokens</param>
    ///<param name="parseOptions" value="{lineBreakMode: ''}">lineBreakMode: return | multiline | discard</param>
    var forest = [];
    var tree = null;
    var prevNode = null;
    var curNode = null;
    // var rootParse = Object.prototype.toString.call(this).constructor.name != ParseContext.name;
    // var parseContext = !rootParse ? this : new ParseContext(tokenInputs);
    var rootParse = this === undefined;
    var parseContext = !rootParse ? this : new ParseContext(tokenInputs);

    var tokens = parseContext.tokenInputs || [];
    var options = parseOptions || {
    };
    options.lineBreakMode = options.lineBreakMode || "multiline";


    if (tokens.length == 0) {
        return forest;
    }
    while (parseContext.i < tokens.length && !parseContext.innerParseClosure) {
        curNode = new _Node__WEBPACK_IMPORTED_MODULE_0__["Node"](tokens[parseContext.i]);

        if (options.lineBreakMode != "discard") {
            if (prevNode != null && curNode.token.position.line != prevNode.token.position.line) {
                if (options.lineBreakMode == "return") {
                    parseContext.innerParseClosure = true;
                    break;
                } else { // multiline
                    if (curNode.TokObject.closer === true && rootParse === false) {
                        //if this is a closer no line breaking, will be returning allready
                        prevNode = null;
                    } else {
                        forest.push(tree);
                        tree = null;
                        prevNode = null;
                    }
                }
            }
        }


        if (tree == null) {
            if (!curNode.TokObject.canBeFirst) {
                throw createError("(Parser)Statement can not start with " + curNode.Summarize(),
                    "Statement can not start with " + curNode.token.value, curNode, null);
            }
            switch (curNode.token.type) {
                case Lex.tok.operator:
                    if (curNode.token.value == "(") {
                        curNode = Lex.operators["("].CanBeTaken.call(parseContext, null, curNode);
                    }
                    break;
                case Lex.tok.keyword:
                    curNode = curNode.TokObject.CanBeTaken.call(parseContext, null, curNode);

                    break;
            }

            tree = curNode;
        } else {
            var taken = null;
            if (curNode.TokObject.CanBeTaken != null) {
                taken = curNode.TokObject.CanBeTaken.call(parseContext, prevNode, curNode);
            }
            if (taken == false) {
                throw createError(prevNode.ShortSummarize() + " can not be preceed by " + curNode.ShortSummarize(),
                    prevNode.token.value + " can not be preceeded by " + curNode.token.value, curNode, null);
            }
            if (taken == null) {
                var taken = prevNode.TokObject.CanTake.call(parseContext, curNode, prevNode);

                if (taken == null || taken == false) {
                    throw createError(curNode.ShortSummarize() + " can not preceed " + prevNode.ShortSummarize(),
                        curNode.token.value + " can not preceed " + prevNode.token.value, curNode, null);
                }
            }
            if (parseContext.innerParseClosure == false && parseContext.innerParseClosureRetval != null) {
                if (parseContext.innerParseClosureRetval.retTokenValue.indexOf(prevNode.token.value) != 0) {
                    throw createError("matching " + parseContext.innerParseClosureRetval.retTokenValue.substring(0, 1) + " can not be found for " + parseContext.innerParseClosureRetval.retTokenValue.substring(1, 1) + ".",
                        null, parseContext.innerParseClosureRetval.retResponsible, null);
                }
                prevNode.token.endPosition = parseContext.innerParseClosureRetval.retEndPosition;
                prevNode.token.value = parseContext.innerParseClosureRetval.retTokenValue;
                prevNode.TokObject = parseContext.innerParseClosureRetval.retTokObject;
                parseContext.innerParseClosureRetval = null;
            }
            if (taken !== true) {
                curNode = taken;
            }
        }

        while (tree.parent != null) {
            tree = tree.parent;
        }
        prevNode = curNode;
        parseContext.i++;
    }
    if (parseContext.innerParseClosure) {
        parseContext.i--;
        parseContext.innerParseClosure = false;
    }

    if (tree != null) {
        forest.push(tree);
    }

    return forest;
};

var parse = Parse;

var CanTakeOperatorPlus = function (node, self) {
    ///<param name="node" value="new Node()"></param>
    ///<param name="self" value="new Node()"></param>
    switch (node.token.type) {
        case Lex.tok.string:
            switch (self.token.value) {
                case "+":
                    postfix(node, self);
                    return true;
            }
        case Lex.tok.identifier:
            postfix(node, self);
            return true;
        case Lex.tok.number:
            postfix(node, self);
            return true;
        case Lex.tok.operator:
            switch (node.token.value) {
                case "+":
                case "*":
                case "/":
                case "-":
                case "&&":
                case "||":
                    if (!self.right){
                        return false;
                    }
                    infix(node, self);
                    return true;
                case "!":
                    postfix(node, self);
                    return true;
            }
            return false;
    }
};

var peekNext = function () {
    ///<summary></summary>
    ///<returns type="Isbank.OmniScript.Token" value="new Isbank.OmniScript.Token()"></returns>
    if (this.tokenInputs.length <= this.i + 1) {
        return null;
    }
    return this.tokenInputs[this.i + 1]
};

var checkNext = function (expectedTokenValue) {
    var retVal = null;
    var nextToken = peekNext.call(this);
    if (nextToken === null) {
        return expectedTokenValue === null;
    }
    if (nextToken.value === expectedTokenValue && nextToken.type != "string") {
        retVal = true;
    } else {
        retVal = false;
    }

    return retVal;
};
var assertNext = function (expectedTokenValue) {
    var checkRet = checkNext.call(this, expectedTokenValue);
    if (checkRet === true) {
        this.i++;
        return;
    } else if (checkRet === false) {
        unexpectedToken.call(this, expectedTokenValue);
    }

};
var unexpectedToken = function (expectedTokenValue) {
    var expected = expectedTokenValue;

    if (new _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_2__["TypeHelper"]().isArray(expected)) {
        expected = expected.join(",");
    }
    throw createError("(Parser)Unexpected token: " + this.tokenInputs[this.i].Summarize() + " Expected: " + expected,
        "Unexpected token: " + this.tokenInputs[this.i].value + " Expected: " + expected, null, this.tokenInputs[this.i]);
};

var assertRetResp = function (expectedTokenValue) {
    var expecteds = expectedTokenValue;
    if (!new _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_2__["TypeHelper"]().isArray(expecteds)) {
        expecteds = [expecteds];
    }

    var found = false;
    for (var i = 0; i < expecteds.length && !found; i++) {
        if (this.innerParseClosureRetval.retResponsible.token.value == expecteds[i]) {
            found = true;
        }
    }

    if (!found) {
        unexpectedToken.call(this, expectedTokenValue);
    }
};
var assertEntryReasonExistInStack = function(reasonToSearch){
    if (!this.searchInnerParseEntryReason(reasonToSearch)) {
        throw createError(this.tokenInputs[this.i].Summarize() + " can only be used inside " + reasonToSearch + " body",
            this.tokenInputs[this.i].value + " can only be used inside " + reasonToSearch + " body", null, this.tokenInputs[this.i].value);
    }
};

var Lex = {
    tok: {
        operator: _Token__WEBPACK_IMPORTED_MODULE_1__["Token"].Types.operator,
        string: _Token__WEBPACK_IMPORTED_MODULE_1__["Token"].Types.string,
        number: _Token__WEBPACK_IMPORTED_MODULE_1__["Token"].Types.number,
        identifier: _Token__WEBPACK_IMPORTED_MODULE_1__["Token"].Types.identifier,
        keyword: _Token__WEBPACK_IMPORTED_MODULE_1__["Token"].Types.keyword
    },
    strings: {
        main: {
            canBeFirst: true,
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        if (node.token.value === "{") {
                            self.right = [];
                            var statementCounter = 0;
                            var next = null, loop = false;
                            do {
                                this.i++;
                                loop = false;
                                var parsedForest = parse.call(this, null, { lineBreakMode: "return" }); // string statements can not be multiline / 56041 for now... (*)
                                //(*) -> still using forest for future prevention of evaluator changes :)
                                assertRetResp.call(this, "}");
                                self.right.push(parsedForest);
                                self.token.value += ("{" + statementCounter++ + "}");
                                this.innerParseClosureRetval = null;
                                next = peekNext.call(this);
                                if (next !== null && next.type === Lex.tok.string) {
                                    self.token.value += next.value;
                                    this.i++;
                                    next = peekNext.call(this);
                                    if (next !== null && next.value === "{") {
                                        loop = true;
                                        this.i++;
                                    }
                                }
                            } while (loop);
                            return self;
                        } else {
                            infix(node, self);
                        }
                        return true;
                }
            }
        }
    },
    numbers: {
        main: {
            canBeFirst: true,
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        infix(node, self);
                        return true;
                }
            }
        }
    },
    identifiers: {
        main: {
            canBeFirst: true,
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        infix(node, self);
                        return true;
                }
            }
        }
    },
    keywords: {
        "if": {
            canBeFirst: true,
            CanBeTaken: function (node, self) {
                ///<param name="self" value="new Node()"></param>
                if (node != null) {
                    return false;
                }
                
                var myEntryReason = this.getInnerParseEntryReason();

                var setInnerParseContext = function () {
                    if (myEntryReason === "elseif") {
                        this.innerParseClosure = true;
                    } else {
                        this.innerParseClosureRetval = null;
                    }
                }
                assertNext.call(this, "(");
                this.i++;
                self.left = parse.call(this, null, { lineBreakMode: "discard" })[0];
                assertRetResp.call(this, ")");
                this.innerParseClosureRetval = null;

                assertNext.call(this, "{");
                this.i++;
                this.setInnerParseEntryReason("if");
                self.right = [parse.call(this, null, { lineBreakMode: "multiline" }), null];
                this.popInnerParseEntryReason();
                assertRetResp.call(this, "}");

                if (checkNext.call(this, "else") === true) {
                    this.innerParseClosureRetval = null;
                    this.i++;
                    if (checkNext.call(this, "if") === true) {  // else if {
                        this.i++;
                        this.setInnerParseEntryReason("elseif");
                        self.right[1] = parse.call(this, null, { lineBreakMode: "multiline" });
                        this.popInnerParseEntryReason();
                        // check } maybe ??
                        setInnerParseContext.call(this);
                    } else { //else {
                        assertNext.call(this, "{");
                        this.i++;
                        this.setInnerParseEntryReason("else");
                        self.right[1] = parse.call(this, null, { lineBreakMode: "multiline" });
                        this.popInnerParseEntryReason();
                        assertRetResp.call(this, "}");
                        setInnerParseContext.call(this);
                    }
                } else {
                    setInnerParseContext.call(this);
                }

                return self;
            }
        },
        "foreach": {
            canBeFirst: true,
            CanBeTaken: function (node, self) {
                ///<param name="self" value="new Node()"></param>
                if (node != null) {
                    return false;
                }

                var setInnerParseContext = function () {
                    this.innerParseClosureRetval = null;
                }

                assertNext.call(this, "(");

                var identifier = peekNext.call(this);
                if (identifier.type != Lex.tok.identifier) {
                    return false;
                }
                this.i++;

                var inn = peekNext.call(this);
                this.i++;
                if (inn.type != Lex.tok.keyword || inn.value != "in") {
                    unexpectedToken.call(this, "in");
                }

                this.i++;
                inn = new _Node__WEBPACK_IMPORTED_MODULE_0__["Node"](inn);
                identifier = new _Node__WEBPACK_IMPORTED_MODULE_0__["Node"](identifier);
                inn.right = parse.call(this, null, { lineBreakMode: "return" })[0];
                inn.left = identifier;
                self.left = inn;

                assertRetResp.call(this, ")");
                this.innerParseClosureRetval = null;

                assertNext.call(this, "{");
                this.i++;
                this.setInnerParseEntryReason("foreach");
                self.right = [parse.call(this, null, { lineBreakMode: "multiline" })];
                this.popInnerParseEntryReason();
                assertRetResp.call(this, "}");

                setInnerParseContext.call(this);

                return self;
            }
        },
        "in": {
            canBeFirst: false,
            CanBeTaken: function () {
                return false;
            }
        },
        "break": {
            canBeFirst: true,
            CanBeTaken: function (node, self) {
                if (node != null) {
                    return false;
                }
                assertEntryReasonExistInStack.call(this, "foreach");
                return self;
            }
        },
        "continue": {
            canBeFirst: true,
            CanBeTaken: function (node, self) {
                if (node != null) {
                    return false;
                }
                assertEntryReasonExistInStack.call(this, "foreach");
                return self;
            }
        }
    },
    operators: {
        "()": {
            wasOpenable: true,
            concatable: true,
            canBeFirst: false,
            value: "()",
            presedence: -1,
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                infix(node, self);
                return true;
            }
        },
        "(": {
            openable: true,
            canBeFirst: true, presedence: -1,
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                var parsed = [];
                while (true) {
                    parsed.push(parse.call(this, null, { lineBreakMode: "return" })[0]);
                    if (this.innerParseClosureRetval.retResponsible.token.value == ",") {
                        this.innerParseClosureRetval = null;
                        this.i++;
                    } else {
                        break;
                    }
                }

                postfix(parsed, self);
                return self;
            },
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                if (node == null) {
                    this.i++;
                    var parsed = parse.call(this, null, { lineBreakMode: "return" })[0];
                    this.innerParseClosureRetval = null;
                    return parsed;
                }

                switch (node.token.type) {
                    case Lex.tok.operator:
                        if (node.TokObject.wasOpenable === true) {
                            // calling an openable. no differecent than identifier
                            infix(self, node);
                            return true;
                        }
                        // self is presedence operator
                        this.i++;
                        var parsed = parse.call(this, null, { lineBreakMode: "return" })[0];
                        this.innerParseClosureRetval = null;
                        postfix(parsed, node);
                        return parsed;
                    case Lex.tok.number:
                        return false;
                    case Lex.tok.identifier:
                        infix(self, node);
                        return true;
                }

            }
        },
        ")": {
            canBeFirst: false, presedence: 9,
            closer: true,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>

                if (node != null) {
                    switch (node.token.type) {
                        case Lex.tok.operator:
                            //if (node.TokObject.openable != true && node.TokObject.wasOpenable != true) {
                            //    return false;
                            //} evaluator -> and2
                            if (node.token.value == "(") { // açılmanın üstüne kapama -> ()
                                node.token.value = Lex.operators["()"].value;
                                node.TokObject = Lex.operators["()"];
                                node.token.endPosition = self.token.position;
                                return node;
                            }
                            break;
                    }
                }

                this.innerParseClosure = true;
                this.innerParseClosureRetval = {
                    retTokenValue: Lex.operators["()"].value,
                    retTokObject: Lex.operators["()"],
                    retEndPosition: self.token.position,
                    retResponsible: self
                };
                return true;
            }
        },
        "{}": {
            concatable: true,
            canBeFirst: false,
            value: "{}",
            wasOpenable: true,
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        switch (node.token.value) {
                            case Lex.operators["!"]:
                                return false;
                        }
                        infix(node, self);
                        return true;
                }
            }
        },
        "{": {
            openable: true,
            canBeFirst: true, value: "{",
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                var parsed = [];
                var curParsed = null;
                while (true) {
                    curParsed = parse.call(this, null, { lineBreakMode: "discard" })[0];
                    assertRetResp.call(this, ["}", ","]);
                    if (curParsed.token.value != "=") {
                        throw createError("(Parser)object creation scope <<{}>> must consist of assignments <<=>>, not expected: " + curParsed.Summarize(),
                            "object creation scope <<{}>> must consist of assignments <<=>>, not expected: " + curParsed.token.value, curParsed, null);
                    }
                    parsed.push(curParsed);
                    if (this.innerParseClosureRetval.retResponsible.token.value == ",") {
                        this.innerParseClosureRetval = null;
                        this.i++;
                    } else {
                        break;
                    }
                }

                postfix(parsed, self);
                return self;
            }
        },
        "}": {
            value: "}",
            canBeFirst: true,
            closer: true,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                if (node != null) {
                    switch (node.token.type) {
                        case Lex.tok.operator:
                            if (node.TokObject.openable != true && node.TokObject.wasOpenable != true) {
                                return false;
                            }
                            if (node.token.value == "{") { // açılmanın üstüne kapama -> {}
                                node.token.value = Lex.operators["{}"].value;
                                node.TokObject = Lex.operators["{}"];
                                node.token.endPosition = self.token.position;
                                return node;
                            }
                            break;
                    }
                }

                this.innerParseClosure = true;
                this.innerParseClosureRetval = {
                    retTokenValue: Lex.operators["{}"].value,
                    retTokObject: Lex.operators["{}"],
                    retEndPosition: self.token.position,
                    retResponsible: self
                };
                return true;
            }
        },
        "[]": {
            wasOpenable: true,
            concatable: true,
            canBeFirst: false,
            presedence: -1,
            value: "[]",
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        switch (node.token.value) {
                            case Lex.operators["["]:
                            case Lex.operators["!"]:
                                return false;
                        }
                        infix(node, self);
                        return true;
                }
            }
        },
        "[": {
            openable: true,
            presedence: -1,
            value: "[",
            canBeFirst: true,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        if (node.TokObject.wasOpenable === true || node.TokObject.openable === true || node.token.value === "=") {
                            return null; // be handled with [].CanTake, ().CanTake || (.CanTake...
                        }
                        throw createError("(Parser)not implemented 16", "not implemented 16", node, null); //concat two arrays maybe ?? [2,3]+[4,5,6]
                        return true;
                    case Lex.tok.number:
                        return false;
                    case Lex.tok.identifier:
                        infix(self, node);
                        return true;
                }
            },
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>

                var parsed = [];
                while (true) {
                    parsed.push(parse.call(this, null, { lineBreakMode: "return" })[0]);
                    if (this.innerParseClosureRetval.retResponsible.token.value == ",") {
                        this.innerParseClosureRetval = null;
                        this.i++;
                    } else {
                        break;
                    }
                }

                postfix(parsed, self);
                return self;
            }
        },
        "]": {
            value: "]",
            canBeFirst: false,
            closer: true,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                if (node != null) {
                    switch (node.token.type) {
                        case Lex.tok.operator:
                            if (node.token.value == "[") { // açılmanın üstüne kapama -> []
                                node.token.value = Lex.operators["[]"].value;
                                node.TokObject = Lex.operators["[]"];
                                node.token.endPosition = self.token.position;
                                return node;
                            }
                            if (node.TokObject.wasOpenable != true) {
                                return false;
                            }
                    }
                }

                this.innerParseClosure = true;
                this.innerParseClosureRetval = {
                    retTokenValue: Lex.operators["[]"].value,
                    retTokObject: Lex.operators["[]"],
                    retEndPosition: self.token.position,
                    retResponsible: self
                };
                return true;
            }
        },
        "+": {
            concatable: false,
            canBeFirst: false, presedence: 5,
            CanTake: CanTakeOperatorPlus
        },
        "-": {
            concatable: false,
            canBeFirst: true, presedence: 5,
            CanTake: CanTakeOperatorPlus
        },
        "*": {
            concatable: false,
            canBeFirst: false, presedence: 6,
            CanTake: CanTakeOperatorPlus
        },
        "/": {
            concatable: false,
            canBeFirst: false, presedence: 6,
            CanTake: CanTakeOperatorPlus
        },
        "&&": {
            concatable: false,
            canBeFirst: false, presedence: 2,
            CanTake: CanTakeOperatorPlus
        },
        "||": {
            concatable: false,
            canBeFirst: false, presedence: 2,
            CanTake: CanTakeOperatorPlus
        },
        "!": {
            canBeFirst: true, concatable: false,
            presedence: 7,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.number:
                    case Lex.tok.identifier:
                    case Lex.tok.string:
                        return false;
                }
            },
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        return false;
                }
                postfix(node, self);
                return true;
            }
        },
        "?": {
            canBeFirst: false
        },
        ":": {
            canBeFirst: false,
            CanTake: function () {
                //sadece dışarısı object creation'larda ({a=5}) = kullanılmalı hatasını versin diye. Başka bir amaç yok...
                return true;
            }
        },
        "%": {
            canBeFirst: false
        },
        ".": {
            concatable: true,
            presedence: 8,
            canBeFirst: false,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.identifier:
                        infix(self, node);
                        return true;
                }
            },
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.identifier:
                        postfix(node, self);
                        return true;
                }
            }
        },
        "&": {
            canBeFirst: false
        },
        "|": {
            canBeFirst: false
        },
        ">": {
            concatable: false,
            canBeFirst: false, presedence: 4,
            CanTake: CanTakeOperatorPlus
        },
        "<": {
            concatable: false,
            canBeFirst: false, presedence: 4,
            CanTake: CanTakeOperatorPlus
        },
        ">=": {
            concatable: false,
            canBeFirst: false, presedence: 4,
            CanTake: CanTakeOperatorPlus
        },
        "<=": {
            concatable: false,
            canBeFirst: false, presedence: 4,
            CanTake: CanTakeOperatorPlus
        },
        "==": {
            concatable: false,
            canBeFirst: false, presedence: 4,
            CanTake: CanTakeOperatorPlus
        },
        "!=": {
            concatable: false,
            canBeFirst: false, presedence: 4,
            CanTake: CanTakeOperatorPlus
        },
        "=": {
            canBeFirst: false, presedence: -1,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                var head = node;
                while (head.parent != null) {
                    // burada scope'ı ayırmak lazım. SM.go(alper{a=5,b=6}
                    head = head.parent;
                }
                var permitted = {
                    "[]": 1, identifier: 1, ".": 1, string: 1
                };
                if (permitted[head.token.type] == null && permitted[head.token.value] == null) {
                    throw createError("(Parser)left hand side of = has errors: " + self.Summarize(),
                        "left hand side of = has errors: " + self.token.value, self, null);
                }
                infix(self, node);
                return true;
            },
            CanTake: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                var parsed = parse.call(this, null, { lineBreakMode: "return" })[0];
                switch (node.token.type) {
                    case Lex.tok.operator:
                        if (node.token.value == "=") {
                            return false;
                        }
                        break;
                }
                postfix(parsed, self);
                if (this.innerParseClosureRetval != null) {
                    var retRespTokVal = this.innerParseClosureRetval.retResponsible.token.value;
                    if (retRespTokVal == "," || retRespTokVal == "}" || retRespTokVal == ")") { // bitiş sona gelmesi değil de , dolayısı ile
                        this.innerParseClosure = true; // benim değil, üstten girenin
                    }
                }
                return parsed;
            }
        },
        ",": {
            canBeFirst: false, presedence: -1,
            CanBeTaken: function (node, self) {
                ///<param name="node" value="new Node()"></param>
                ///<param name="self" value="new Node()"></param>
                switch (node.token.type) {
                    case Lex.tok.operator:
                        if (node.TokObject.wasOpenable != true) {
                            //if (node.token.value != "()") {
                            return false;
                        }
                        break;
                }

                this.innerParseClosure = true;
                this.innerParseClosureRetval = {
                    retTokenValue: null,
                    retTokObject: null,
                    retEndPosition: null,
                    retResponsible: self
                };

                return true;
            }
        }
    }
};

Parse.Dict = Lex;

var postfix = function (newNode, self) {
    ///<param name="newNode" value="new Node()"></param>
    ///<param name="self" value="new Node()"></param>
    if (!new _helpers_typeHelper__WEBPACK_IMPORTED_MODULE_2__["TypeHelper"]().isArray(newNode)) {
        newNode = [newNode];
    }
    for (var i = 0; i < newNode.length; i++) {
        if (newNode[i].parent != null) {
            throw createError("(Parser)unexpected postfix: newnodes parent is not null: " + newNode[i].Summarize(),
                "unexpected postfix: newnodes parent is not null:" + newNode[i].token.value, newNode[i], null);
        }
        newNode[i].parent = self;
    }

    if (self.right == null) {
        self.right = newNode.length > 1 ? newNode : newNode[0];
    } else {
        throw createError("(Parser)unexpected postfix: selfs right is not null" + self.Summarize(),
            "unexpected postfix: selfs right is not null" + self.token.value, self, null);
    }
};

var putInPlace = function (destNode, sourceNode) {
    ///<param name="destNode" value="new Node()"></param>
    ///<param name="sourceNode" value="new Node()"></param>
    if (destNode.parent == null) {
        destNode.parent = sourceNode;
        if (sourceNode.left == null) {
            sourceNode.left = destNode;
        } else if (sourceNode.right == null) {
            sourceNode.right = destNode;
        } else {
            throw createError("(Parser)Can not put in place source has both left and right: " + sourceNode.Summarize(),
                "Can not put in place source has both left and right: " + sourceNode.token.value, sourceNode, null);
        }
    } else {
        destNode.parent.right = sourceNode;
        sourceNode.parent = destNode.parent;
        destNode.parent = sourceNode;
        if (sourceNode.left == null) {
            sourceNode.left = destNode;
        } else {
            throw createError("(Parser)Can not put in place, incomming source nodes left is not null: " + sourceNode.Summarize(),
                "Can not put in place, incomming source nodes left is not null: " + sourceNode.token.value, sourceNode, null);
        }
    }
};



var infix = function (newNode, self) {
    ///<param name="newNode" value="new Node()"></param>
    ///<param name="self" value="new Node()"></param>
    if (self.parent == null) {
        self.parent = newNode;
        if (newNode.left == null) {
            newNode.left = self;
        } else {
            throw createError("(Parser)unexpected infix: newNode left is not null " + newNode.Summarize(),
                "unexpected infix: newNode left is not null " + newNode.token.value, newNode, null);
        }
    } else {
        var target = self;
        while (true) {
            if (target.parent == null || target.parent.TokObject.presedence < newNode.TokObject.presedence) {
                break;
            }
            if (newNode.TokObject.presedence == -1 && target.parent.TokObject.concatable != true) {
                break;
            }
            target = target.parent;
        }
        putInPlace(target, newNode);
    }
};

var parseExObj = function (message, responsibleNode) {
    return {
        message: "(Parser)" + message,
        responsibleNode: responsibleNode
    };
};

/**
 * 
 * @param {string} consoleMsg 
 * @param {string | undefined} msg 
 * @param {Node | undefined} responsibleNode 
 * @param {Token | undefined} responsibleToken
 */
var createError = function (consoleMsg, msg, responsibleNode, responsibleToken) {
    var pos = { line: 0, column: 0 };
    var endPos = { line: 0, column: 0 };
    if (responsibleNode) {
        pos = (responsibleNode.token && responsibleNode.token.position) || pos;
        endPos = (responsibleNode.token && responsibleNode.token.endPosition) || endPos;
    } else if (responsibleToken) {
        pos = responsibleToken.position || pos;
        endPos = responsibleToken.endPosition || endPos;
    }


    return new _QSCError__WEBPACK_IMPORTED_MODULE_3__["QSCError"]({
        message: consoleMsg, intelliMsg: msg,
        stLine: pos.line, stColumn: pos.line,
        eLine: endPos.line, eColumn: endPos.column,
        responsibleNode: responsibleNode
    });
};

var ParseObj = { Parse: Parse };



/***/ }),

/***/ "../../common/shrimp/omniScriptCompiler/QSCError.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/omniScriptCompiler/QSCError.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QSCError = void 0;
var QSCError = /** @class */ (function (_super) {
    __extends(QSCError, _super);
    function QSCError(_a) {
        var intelliMsg = _a.intelliMsg, message = _a.message, stLine = _a.stLine, stColumn = _a.stColumn, eLine = _a.eLine, eColumn = _a.eColumn, responsibleNode = _a.responsibleNode;
        var _this = _super.call(this, message) || this;
        _this.intelliMsg = intelliMsg;
        _this.stLine = stLine;
        _this.stColumn = stColumn;
        _this.name = QSCError.ErrorName;
        _this.eLine = eLine;
        _this.eColumn = eColumn;
        _this.responsibleNode = responsibleNode;
        return _this;
    }
    QSCError.ErrorName = "QSCError";
    return QSCError;
}(Error));
exports.QSCError = QSCError;
;


/***/ }),

/***/ "../../common/shrimp/omniScriptCompiler/Token.ts":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/omniScriptCompiler/Token.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Token = void 0;
var Token = /** @class */ (function () {
    function Token(type, value, position, endPosition) {
        this.type = type;
        this.value = value;
        this.position = position;
        this.endPosition = endPosition;
    }
    Token.prototype.Summarize = function () {
        var pos = this.position == null ? " @?" : " @line:" + this.position.line + "-column:" + this.position.column;
        pos += this.endPosition != null ? " to: @line" + this.endPosition.line + "-column:" + this.endPosition.column : "";
        return "type: " + this.type + " value: " + this.value + pos;
    };
    Token.reservedIdentifierTypes = {
        response: "native",
        data: "native",
        "true": "boolean",
        "false": "boolean",
        "null": "null"
    };
    Token.Types = {
        identifier: "identifier",
        keyword: "keyword",
        string: "string",
        number: "number",
        operator: "operator"
    };
    return Token;
}());
exports.Token = Token;


/***/ }),

/***/ "../../common/shrimp/performance.ts":
/*!*****************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/performance.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PerfSingles = exports.PerfManager = void 0;
var PerfManager_1 = __webpack_require__(/*! ./src/Performance/PerfManager */ "../../common/shrimp/src/Performance/PerfManager.ts");
Object.defineProperty(exports, "PerfManager", { enumerable: true, get: function () { return PerfManager_1.PerfManager; } });
var PerfSingles_1 = __webpack_require__(/*! ./src/Performance/PerfSingles */ "../../common/shrimp/src/Performance/PerfSingles.ts");
Object.defineProperty(exports, "PerfSingles", { enumerable: true, get: function () { return PerfSingles_1.PerfSingles; } });


/***/ }),

/***/ "../../common/shrimp/src/Performance/PerfManager.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/src/Performance/PerfManager.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerfManager = void 0;
// WTH in node and mobile ?
var perf; // | import("perf_hooks").Performance;
if (typeof performance != "undefined") {
    perf = performance;
}
var PerfManager = /** @class */ (function () {
    function PerfManager() {
        this.isActive = false;
    }
    Object.defineProperty(PerfManager.prototype, "IsActive", {
        get: function () {
            return this.isActive;
        },
        enumerable: false,
        configurable: true
    });
    PerfManager.prototype.Activate = function () {
        if (typeof perf == "undefined") {
            return;
        }
        this.isActive = true;
    };
    PerfManager.prototype.Reset = function () {
        if (!this.IsActive) {
            return;
        }
        perf.clearMarks();
        // if (!(<any>perf).getEntriesByName) { return };
        // perf = <Performance>perf;
        perf.clearMeasures();
    };
    PerfManager.prototype.Measure = function (name, codeBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var retVal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Start(name);
                        return [4 /*yield*/, codeBlock()];
                    case 1:
                        retVal = _a.sent();
                        this.End(name);
                        return [2 /*return*/, retVal];
                }
            });
        });
    };
    PerfManager.prototype.Start = function (name) {
        if (!this.IsActive) {
            return;
        }
        perf.mark(this.getStartName(name));
    };
    PerfManager.prototype.End = function (name, perfableObject) {
        if (!this.IsActive) {
            return;
        }
        var endName = this.getEndName(name);
        perf.mark(endName);
        var x = perf.measure(name, this.getStartName(name), endName); // .measure returns in chrome but not in IE
        if (perfableObject) {
            if (!x) {
                var measures = perf.getMeasures()[name]; // try to extract measure for non returning perf.measure
                x = { duration: measures[measures.length - 1], startTime: 0 };
            }
            if (x) {
                if (!perfableObject.duration) {
                    perfableObject.duration = [x.duration];
                    perfableObject.sum = x.duration;
                    perfableObject.startTime = x.startTime;
                    perfableObject.endTime = (x.startTime + x.duration);
                }
                else {
                    perfableObject.duration.push(x.duration);
                    perfableObject.sum += x.duration;
                    perfableObject.startTime = x.startTime;
                    perfableObject.endTime = (x.startTime + x.duration);
                }
            }
        }
    };
    PerfManager.prototype.GetAvg = function (name) {
        if (!this.IsActive) {
            return undefined;
        }
        // if (!(<any>perf).getEntriesByName) { return };
        // perf = <Performance>perf;
        var entries = name ? perf.getEntriesByName(name) : perf.getEntriesByType("measure");
        return this.avg(entries);
    };
    PerfManager.prototype.GetSum = function (name) {
        if (!this.IsActive) {
            return undefined;
        }
        // if (!(<any>perf).getEntriesByName) { return };
        // perf = <Performance>perf;
        var entries = name ? perf.getEntriesByName(name) : perf.getEntriesByType("measure");
        return this.sum(entries);
    };
    PerfManager.prototype.GetList = function (name) {
        if (!this.IsActive) {
            return undefined;
        }
        var entries = name ? perf.getEntriesByName(name) : perf.getEntriesByType("measure");
        return entries;
    };
    PerfManager.prototype.avg = function (entries) {
        var entriesCumulative = entries.reduce(function (prev, cur) { prev.sum += cur.duration; prev.counter++; return prev; }, { sum: 0, counter: 0 });
        return entriesCumulative.sum / entriesCumulative.counter;
    };
    PerfManager.prototype.sum = function (entries) {
        return entries.reduce(function (prev, cur) { prev += cur.duration; return prev; }, 0);
    };
    PerfManager.prototype.getStartName = function (name) {
        return name + " start";
    };
    PerfManager.prototype.getEndName = function (name) {
        return name + " end";
    };
    return PerfManager;
}());
exports.PerfManager = PerfManager;


/***/ }),

/***/ "../../common/shrimp/src/Performance/PerfSingles.ts":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/src/Performance/PerfSingles.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PerfSingles = void 0;
var PerfManager_1 = __webpack_require__(/*! ./PerfManager */ "../../common/shrimp/src/Performance/PerfManager.ts");
var PerfSingles = /** @class */ (function () {
    function PerfSingles() {
        //Instance
        this.perfSingles = {};
    }
    PerfSingles.Register = function () {
        PerfSingles.findSelf();
    };
    PerfSingles.Activate = function (name) {
        var targetPerf = this.findSelf().findPerf(name);
        targetPerf.Activate();
    };
    PerfSingles.Instance = function (name) {
        return this.findSelf().findPerf(name);
    };
    PerfSingles.Reset = function () {
        this.findSelf().perfSingles = {};
    };
    PerfSingles.findSelf = function () {
        if (PerfSingles.self) {
            return PerfSingles.self;
        }
        if (typeof window === "undefined") {
            return PerfSingles.self = new PerfSingles();
        }
        return PerfSingles.self = window["perfQuickShrimp"] = window["perfQuickShrimp"] || new PerfSingles();
    };
    PerfSingles.prototype.findPerf = function (name) {
        var targetPerf = name ? this.perfSingles[name] : this.perfSingle;
        if (targetPerf) {
            return targetPerf;
        }
        targetPerf = name ? this.perfSingles[name] = new PerfManager_1.PerfManager() : this.perfSingle = new PerfManager_1.PerfManager();
        return targetPerf;
    };
    PerfSingles.prototype.Activate = function (name) {
        var targetPerf = this.findPerf(name);
        targetPerf.Activate();
    };
    return PerfSingles;
}());
exports.PerfSingles = PerfSingles;
PerfSingles.Register();


/***/ }),

/***/ "../../common/shrimp/src/context/contextManager.ts":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/common/shrimp/src/context/contextManager.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextManager = void 0;
var ContextManager = /** @class */ (function () {
    function ContextManager() {
        this.contextItems = {};
    }
    /**
     * Register item to context
     * @param item item to register
     */
    ContextManager.prototype.RegisterItem = function (item, options) {
        if (options === void 0) { options = { override: false }; }
        var contextGroup = this.contextItems[item.contextName];
        if (!contextGroup || options.override) {
            contextGroup = [];
            this.contextItems[item.contextName] = contextGroup;
        }
        contextGroup.push(item);
    };
    ContextManager.prototype.GetOrCreate = function (contextItemName, contextCreatorCb) {
        var contextItem = this.GetItemSingle(contextItemName);
        if (!contextItem) {
            contextItem = contextCreatorCb();
            this.RegisterItem(contextItem);
        }
        return contextItem;
    };
    /**
     * Gets last Item. Use ! if it must exist.
     */
    ContextManager.prototype.GetItemSingle = function (contextItemName) {
        var contextGroup = this.GetItemGroup(contextItemName);
        if (!contextGroup) {
            return undefined;
        }
        return contextGroup[contextGroup.length - 1]; //contextItem.name
    };
    ContextManager.prototype.GetItemGroup = function (contextItemName) {
        return this.contextItems[contextItemName] || null;
    };
    ContextManager.prototype.ClearItemGroup = function (contextItemName) {
        delete this.contextItems[contextItemName];
    };
    ContextManager.prototype.ClearItem = function (c) {
        var itemGroup = this.GetItemGroup(c.contextName);
        if (!itemGroup) {
            return;
        }
        var itemIndex = itemGroup.indexOf(c);
        itemGroup.splice(itemIndex, 1);
    };
    /**
     * Shallow copy of self
     * @param fields if specified, only puts those fields in the clone
     */
    ContextManager.prototype.Clone = function (fields) {
        var _this = this;
        var contextCopy = new ContextManager();
        var keys = fields !== null && fields !== void 0 ? fields : Object.keys(this.contextItems);
        keys.forEach(function (contextKey) { var _a; return contextCopy.contextItems[contextKey] = (_a = _this.contextItems[contextKey]) === null || _a === void 0 ? void 0 : _a.map(function (item) { return item; }); });
        return contextCopy;
    };
    /**
     * Get Contexts registered context item keys
     */
    ContextManager.prototype.GetKeys = function () {
        return Object.keys(this.contextItems);
    };
    return ContextManager;
}());
exports.ContextManager = ContextManager;


/***/ }),

/***/ "../../node_modules/@stechquick/algae/lib/quick/ITheme.js":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/@stechquick/algae/lib/quick/ITheme.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultFonts = exports.FontStyles = exports.FontWeights = void 0;
var FontWeights;
(function (FontWeights) {
    FontWeights[FontWeights["Thin - 100"] = 100] = "Thin - 100";
    FontWeights[FontWeights["Extra Light - 200"] = 200] = "Extra Light - 200";
    FontWeights[FontWeights["Light - 300"] = 300] = "Light - 300";
    FontWeights[FontWeights["Regular - 400"] = 400] = "Regular - 400";
    FontWeights[FontWeights["Medium - 500"] = 500] = "Medium - 500";
    FontWeights[FontWeights["SemiBold - 600"] = 600] = "SemiBold - 600";
    FontWeights[FontWeights["Bold - 700"] = 700] = "Bold - 700";
    FontWeights[FontWeights["Extra Bold - 800"] = 800] = "Extra Bold - 800";
    FontWeights[FontWeights["Black - 900"] = 900] = "Black - 900";
    FontWeights[FontWeights["Weight - 1000"] = 1000] = "Weight - 1000";
})(FontWeights = exports.FontWeights || (exports.FontWeights = {}));
var FontStyles;
(function (FontStyles) {
    FontStyles[FontStyles["Italic"] = 0] = "Italic";
})(FontStyles = exports.FontStyles || (exports.FontStyles = {}));
var getDefaultFonts = function () {
    var fonts = [
        // {
        //   fontFamily: "Arial",
        //   italic: true,
        //   fontWeights: [FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Extra Bold - 800"]]]
        // },
        {
            fontFamily: "Inter",
            fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]], FontWeights[FontWeights["Black - 900"]]]
        },
        {
            fontFamily: "Lato",
            fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Black - 900"]]],
            italic: true
        },
        {
            fontFamily: "Montserrat",
            fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]], FontWeights[FontWeights["Black - 900"]]],
            italic: true
        },
        {
            fontFamily: "Nunito",
            fontWeights: [FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]], FontWeights[FontWeights["Black - 900"]], FontWeights[FontWeights["Weight - 1000"]]],
            italic: true
        },
        {
            fontFamily: "Open Sans",
            fontWeights: [FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]]],
            italic: true
        },
        {
            fontFamily: "Oswald",
            fontWeights: [FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]]]
        }, {
            fontFamily: "Poppins",
            italic: true,
            fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]], FontWeights[FontWeights["Black - 900"]]]
        },
        {
            fontFamily: "Raleway",
            italic: true,
            fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]], FontWeights[FontWeights["Black - 900"]]]
        },
        {
            fontFamily: "Roboto",
            italic: true,
            fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Black - 900"]]]
        },
        {
            fontFamily: "Rubik",
            italic: true,
            fontWeights: [FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]], FontWeights[FontWeights["Black - 900"]]]
        },
        // {
        //   fontFamily: "Segoe UI",
        //   fontWeights: [FontWeights[FontWeights["Thin - 100"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["Medium - 500"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Extra Bold - 800"]]],
        //   italic: true
        // },
        {
            fontFamily: "Source Sans Pro",
            fontWeights: [FontWeights[FontWeights["Extra Light - 200"]], FontWeights[FontWeights["Light - 300"]], FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["SemiBold - 600"]], FontWeights[FontWeights["Bold - 700"]], FontWeights[FontWeights["Black - 900"]]],
            italic: true
        },
        // {
        //   fontFamily: "Verdana",
        //   fontWeights: [FontWeights[FontWeights["Regular - 400"]], FontWeights[FontWeights["SemiBold - 600"]]],
        //   italic: true
        // }
    ];
    var defaultFonts = fonts.flatMap(function (font) {
        if (font.italic) {
            return [font, { fontFamily: font.fontFamily + " Italic", fontWeights: font.fontWeights }];
        }
        return font;
    });
    return defaultFonts;
};
exports.getDefaultFonts = getDefaultFonts;


/***/ }),

/***/ "../../node_modules/@stechquick/flow-runtime/dist/flowRuntime/src/flow.js":
/*!*******************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/@stechquick/flow-runtime/dist/flowRuntime/src/flow.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():undefined}(this,(()=>(()=>{"use strict";var t={d:(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{executeFlow:()=>d});let s=!1;new Promise((t=>t())).then((()=>s=!0)),"undefined"!=typeof doNothing&&doNothing();const r=!0===s;class i{static map(t,e){const s=[];return t.forEach((t=>s.push(e(t)))),s}}class o{constructor(){this.values={}}set(t,e,s){const r=this.values[t];if(r){if(r.secret!=s)throw new Error(`secret ${s} is wrong for key ${t}`);r.value=e}else this.values[t]={secret:s,value:e}}get(t,e){const s=this.values[t];if(s){if(s.secret!=e)throw new Error(`secret ${e} is wrong for key ${t}`);return s.value}}destruct(){Object.keys(this.values).forEach((t=>this.values[t].value.destruct()))}}class n{}const a=(t,e)=>`${t}@${e}`;class c{constructor(){this.values={}}clear(){this.values={}}}class h{constructor(){this.states=new Map}getState(t){let e=this.states.get(t);return e||this.states.set(t,e=new c),e}}class u{constructor(t,e={},s,r,i,a,c){this.flow=t,this.msg=e,this._onEnd=s,this._onFail=r,this.runtime=i,this.origStepRetriever=a,this.environment=c,this.returnValue=new n,this.stepStates=new h,this.commonState=new o,this.stepRetriever=async(t,e)=>await this.origStepRetriever(t,e),this.startGatherRuntimes()}async getStepFromRepo(t,e){return u.stepRepo.getStep(t,e,this.stepRetriever)}async startGatherRuntimes(){await Promise.all(Object.keys(this.flow.steps).map((t=>{const e=this.flow.steps[t];return u.stepRepo.startGather(e.N,e.V,this.stepRetriever)})))}createClient(){const t=this.environment.client;if(t)return{getFormData:()=>t.getFormData(),request:e=>t.request(e),go:e=>t.go(e),alert:e=>t.alert(e)}}createServer(){const t=this.environment.server;if(t)return{getBody:()=>t.getBody(),getCookieString:()=>t.getCookieString(),getHeaders:()=>t.getHeaders(),getHttpMethod:()=>t.getHttpMethod(),getPath:()=>t.getPath(),setHeaders:e=>t.setHeaders(e),writeResponse:e=>t.writeResponse(e)}}createCommonState(){return{get:(t,e)=>this.commonState.get(t,e),set:(t,e,s)=>this.commonState.set(t,e,s)}}onEnd(t){console.log("ending"),this.commonState.destruct(),this._onEnd(t)}onFail(t){this._onFail(t)}}u.stepRepo=new class{constructor(){this.stepDict=new Map}async startGather(t,e,s){const r=a(t,e);let i=this.stepDict.get(r);if(i)return i;let o=s(t,e);return this.stepDict.set(r,o),this.stepDict.set(r,i=await o),i}async getStep(t,e,s){const r=a(t,e);let i=this.stepDict.get(r);return i||(i=await this.startGather(t,e,s)),await this.resolveStep(i)}async resolveStep(t){switch(typeof t){case"function":return t;case"object":return await t}}};class l{constructor(t,e){this.ctx=t,this.currentStep=e}next(t,e){const s=this.ctx.flow.steps[t].O;if(!s)return void this.stop();const r=s[e=e||Object.keys(s)[0]];if(r&&r.length){if(1==r.length)this.currentStep=r[0];else{const t=r.map((t=>new l(this.ctx,t)));this.ctx.runtime.registerThreads(t),this.stop()}this.ctx.runtime.mainLoop()}else this.stop()}async tick(){var t;if(!this.currentStep)return!1;const e=this.currentStep;this.currentStep=void 0;const s=this.ctx.flow.steps[e.ID],r=this.ctx.stepStates.getState(e.ID),i=class{static calculateProps(t){const e={};if(!t.P)return e;const s=t.P;return Object.keys(s).reduce(((t,e)=>(t[e]=s[e],t)),e)}}.calculateProps(s),o=await this.ctx.getStepFromRepo(s.N,s.V),n=(null===(t=s.I[e.inputName])||void 0===t?void 0:t.length)||0,a={inputName:e.inputName,connectionCount:n,connectionIndex:e.connectionIndex},c={next:t=>this.next(e.ID,t),stop:()=>this.stop(),evalGet:(t,e)=>e(t,{msg:this.ctx.msg}),evalSet:(t,e,s)=>s(t,e,{msg:this.ctx.msg}),getServer:()=>this.ctx.createServer(),getClient:()=>this.ctx.createClient(),getCommonState:()=>this.ctx.createCommonState()};return o({msg:this.ctx.msg,flow:c,props:i,state:r,entryInfo:a}),!0}stop(){this.currentStep=void 0,this.ctx.runtime.removeThread(this)}}class p{constructor(t,e,s,r,i,o){this.threads=new Set,this.looping=!1,this.ctx=new u(t,e,s,r,this,i,o)}start(){this.threads.size||(this.registerThreads(this.ctx.flow.startSteps.map((t=>new l(this.ctx,t)))),this.mainLoop())}registerThreads(t){t.forEach((t=>this.threads.add(t)))}removeThread(t){this.threads.delete(t),this.threads.size||this.mainLoop()}async mainLoop(){if(!this.looping){for(this.looping=!0;(await Promise.all(i.map(this.threads,(t=>t.tick())))).find((t=>t)););this.looping=!1,!this.threads.size&&this.ctx.onEnd(this.ctx.returnValue.value)}}}class m extends p{constructor(t,e={},s,r,i,o){super(t,e,s,r,i,o),window.runtime=this}}function d(t,e){const s=function(t,e={}){let s,i,o;const n=t=>{o&&clearTimeout(o),o=setTimeout((()=>{i(new Error(`The operation has timed out. timeoutValue  : ${t}`))}),t)};return t&&n(t),{startTimer:n,promise:new Promise(((t,o)=>{var n;n=t,s=r&&e.fixSyncResolve?t=>setTimeout((()=>n(t))):n,i=o})),resolver:s,reject:i}}();return new(e.debug?m:p)(t,e.msg,(t=>s.resolver(t)),(t=>s.reject(t)),e.stepRetriever,e.environment).start(),s.promise}return e})()));

/***/ }),

/***/ "../../node_modules/base64-js/index.js":
/*!********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/base64-js/index.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "../../node_modules/bignumber.js/bignumber.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/bignumber.js/bignumber.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {
  'use strict';

/*
 *      bignumber.js v9.1.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


  var BigNumber,
    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    mathceil = Math.ceil,
    mathfloor = Math.floor,

    bignumberError = '[BigNumber Error] ',
    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

    BASE = 1e14,
    LOG_BASE = 14,
    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
    SQRT_BASE = 1e7,

    // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9;                                   // 0 to MAX_INT32


  /*
   * Create and return a BigNumber constructor.
   */
  function clone(configObject) {
    var div, convertBase, parseNumeric,
      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
      ONE = new BigNumber(1),


      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


      // The default values below must be integers within the inclusive ranges stated.
      // The values can also be changed at run-time using BigNumber.set.

      // The maximum number of decimal places for operations involving division.
      DECIMAL_PLACES = 20,                     // 0 to MAX

      // The rounding mode used when rounding to the above decimal places, and when using
      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
      // UP         0 Away from zero.
      // DOWN       1 Towards zero.
      // CEIL       2 Towards +Infinity.
      // FLOOR      3 Towards -Infinity.
      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      ROUNDING_MODE = 4,                       // 0 to 8

      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

      // The exponent value at and beneath which toString returns exponential notation.
      // Number type: -7
      TO_EXP_NEG = -7,                         // 0 to -MAX

      // The exponent value at and above which toString returns exponential notation.
      // Number type: 21
      TO_EXP_POS = 21,                         // 0 to MAX

      // RANGE : [MIN_EXP, MAX_EXP]

      // The minimum exponent value, beneath which underflow to zero occurs.
      // Number type: -324  (5e-324)
      MIN_EXP = -1e7,                          // -1 to -MAX

      // The maximum exponent value, above which overflow to Infinity occurs.
      // Number type:  308  (1.7976931348623157e+308)
      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
      MAX_EXP = 1e7,                           // 1 to MAX

      // Whether to use cryptographically-secure random number generation, if available.
      CRYPTO = false,                          // true or false

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP        0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN      1 The remainder has the same sign as the dividend.
      //             This modulo mode is commonly known as 'truncated division' and is
      //             equivalent to (a % n) in JavaScript.
      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
      //             The remainder is always positive.
      //
      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
      // modes are commonly used for the modulus operation.
      // Although the other rounding modes can also be used, they may not give useful results.
      MODULO_MODE = 1,                         // 0 to 9

      // The maximum number of significant digits of the result of the exponentiatedBy operation.
      // If POW_PRECISION is 0, there will be unlimited significant digits.
      POW_PRECISION = 0,                       // 0 to MAX

      // The format specification used by the BigNumber.prototype.toFormat method.
      FORMAT = {
        prefix: '',
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ',',
        decimalSeparator: '.',
        fractionGroupSize: 0,
        fractionGroupSeparator: '\xA0',        // non-breaking space
        suffix: ''
      },

      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
      // '-', '.', whitespace, or repeated character.
      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
      alphabetHasNormalDecimalDigits = true;


    //------------------------------------------------------------------------------------------


    // CONSTRUCTOR


    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */
    function BigNumber(v, b) {
      var alphabet, c, caseChanged, e, i, isNum, len, str,
        x = this;

      // Enable constructor call without `new`.
      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {

        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {

          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

          // Fast path for integers, where n < 2147483648 (2**31).
          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++);

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {

          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

      } else {

        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base');

        // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {

          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error
             (tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0;

        // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {

              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {

              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                  str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        }

        // Prevent later check for length on converted number.
        isNum = false;
        str = convertBase(str, b, 10, x.s);

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
        else e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++);

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(--len) === 48;);

      if (str = str.slice(i, ++len)) {
        len -= i;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (isNum && BigNumber.DEBUG &&
          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
            throw Error
             (tooManyDigits + (x.s * v));
        }

         // Overflow?
        if ((e = e - i - 1) > MAX_EXP) {

          // Infinity.
          x.c = x.e = null;

        // Underflow?
        } else if (e < MIN_EXP) {

          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;  // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0');
          x.c.push(+str);
        }
      } else {

        // Zero.
        x.c = [x.e = 0];
      }
    }


    // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;

    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;


    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {

        if (typeof obj == 'object') {

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error
                 (bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          }

          // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'
          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto &&
                 (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error
                   (bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error
               (bignumberError + p + ' not true or false: ' + v);
            }
          }

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }

          // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'
          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if (typeof v == 'object') FORMAT = v;
            else throw Error
             (bignumberError + p + ' not an object: ' + v);
          }

          // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'
          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p];

            // Disallow if less than two characters,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.
            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
              ALPHABET = v;
            } else {
              throw Error
               (bignumberError + p + ' invalid: ' + v);
            }
          }

        } else {

          // '[BigNumber Error] Object expected: {v}'
          throw Error
           (bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };


    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */
    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;

      var i, n,
        c = v.c,
        e = v.e,
        s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {

        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }

          // Calculate number of digits that c[0] should have, based on the exponent.
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;

          // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
          if (String(c[0]).length == i) {

            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }

            // Last element cannot be zero, unless it is the only element.
            if (n !== 0) return true;
          }
        }

      // Infinity/NaN
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error
        (bignumberError + 'Invalid BigNumber: ' + v);
    };


    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };


    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };


    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
    BigNumber.random = (function () {
      var pow2_53 = 0x20000000000000;

      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
       ? function () { return mathfloor(Math.random() * pow2_53); }
       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
         (Math.random() * 0x800000 | 0); };

      return function (dp) {
        var a, b, e, k, v,
          i = 0,
          c = [],
          rand = new BigNumber(ONE);

        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);

        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {

          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {

            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {

              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

              // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {

                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }
            i = k / 2;

          // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {

            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {

              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {

                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error
             (bignumberError + 'crypto unavailable');
          }
        }

        // Use Math.random.
        if (!CRYPTO) {

          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE;

        // Convert trailing digits to zeros according to dp.
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        }

        // Remove trailing elements which are zero.
        for (; c[i] === 0; c.pop(), i--);

        // Zero?
        if (i < 0) {
          c = [e = 0];
        } else {

          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

          // Count the digits of the first element of c to determine leading zeros, and...
          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

          // adjust the exponent accordingly.
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    })();


    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.sum = function () {
      var i = 1,
        args = arguments,
        sum = new BigNumber(args[0]);
      for (; i < args.length;) sum = sum.plus(args[i++]);
      return sum;
    };


    // PRIVATE FUNCTIONS


    // Called by BigNumber and BigNumber.prototype.toString.
    convertBase = (function () {
      var decimal = '0123456789';

      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }

      // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.
      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r, x, xc, y,
          i = str.indexOf('.'),
          dp = DECIMAL_PLACES,
          rm = ROUNDING_MODE;

        // Non-integer.
        if (i >= 0) {
          k = POW_PRECISION;

          // Unlimited precision.
          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;

          // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
           10, baseOut, decimal);
          y.e = y.c.length;
        }

        // Convert the number as integer.

        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
         ? (alphabet = ALPHABET, decimal)
         : (alphabet = decimal, ALPHABET));

        // xc now represents str as an integer and converted to baseOut. e is the exponent.
        e = k = xc.length;

        // Remove trailing zeros.
        for (; xc[--k] == 0; xc.pop());

        // Zero?
        if (!xc[0]) return alphabet.charAt(0);

        // Does str represent an integer? If so, no need for the division.
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;

          // The sign is needed for correct rounding.
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }

        // xc now represents str converted to baseOut.

        // THe index of the rounding digit.
        d = e + dp + 1;

        // The rounding digit: the digit to the right of the digit that may be rounded up.
        i = xc[d];

        // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;

        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
               rm == (x.s < 0 ? 8 : 7));

        // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.
        if (d < 1 || !xc[0]) {

          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {

          // Truncate xc to the required number of decimal places.
          xc.length = d;

          // Round up?
          if (r) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }

          // Determine trailing zeros.
          for (k = xc.length; !xc[--k];);

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

          // Add leading zeros, decimal point and trailing zeros as required.
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }

        // The caller will add the sign.
        return str;
      };
    })();


    // Perform division in the specified base. Called by div and convertBase.
    div = (function () {

      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m, temp, xlo, xhi,
          carry = 0,
          i = x.length,
          klo = k % SQRT_BASE,
          khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {

          for (i = cmp = 0; i < aL; i++) {

            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1; a.splice(0, 1));
      }

      // x: dividend, y: divisor.
      return function (x, y, dp, rm, base) {
        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
          yL, yz,
          s = x.s == y.s ? 1 : -1,
          xc = x.c,
          yc = y.c;

        // Either NaN, Infinity or 0?
        if (!xc || !xc[0] || !yc || !yc[0]) {

          return new BigNumber(

           // Return NaN if either NaN, or both Infinity or 0.
           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
         );
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }

        // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
        for (i = 0; yc[i] == (xc[i] || 0); i++);

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;

          // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1));

          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL; rem[remL++] = 0);
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0;

            // Compare divisor and remainder.
            cmp = compare(yc, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, n.

              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // n is how many times the divisor goes into the current remainder.
              n = mathfloor(rem0 / yc0);

              //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {

                // n may be > base only when base is 3.
                if (n >= base) n = base - 1;

                // product = divisor * trial digit.
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.
                while (compare(prod, rem, prodL, remL) == 1) {
                  n--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {

                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {

                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                }

                // product = divisor
                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);
              remL = rem.length;

               // If product was < remainder.
              if (cmp == -1) {

                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0

            // Add the next digit, n, to the result array.
            qc[i++] = n;

            // Update the remainder.
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null;

          // Leading zero?
          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {

          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

        // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    })();


    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;

      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      if (!n.c) return n.toString();

      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
         ? toExponential(str, ne)
         : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm);

        // n.e may have changed if the value was rounded up.
        e = n.e;

        str = coeffToString(n.c);
        len = str.length;

        // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.

        // Exponential notation.
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

          // Append zeros?
          for (; len < i; str += '0', len++);
          str = toExponential(str, e);

        // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0');

          // Append zeros?
          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0');
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += '.';
              for (; i--; str += '0');
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    }


    // Handle BigNumber.max and BigNumber.min.
    function maxOrMin(args, method) {
      var n,
        i = 1,
        m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]);

        // If any number is NaN, return NaN.
        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }


    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
    function normalise(n, c, e) {
      var i = 1,
        j = c.length;

       // Remove trailing zeros.
      for (; !c[--j]; c.pop());

      // Calculate the base 10 exponent. First get the number of digits of c[0].
      for (j = c[0]; j >= 10; j /= 10, i++);

      // Overflow?
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

        // Infinity.
        n.c = n.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    }


    // Handle values that fail the validity test in BigNumber.
    parseNumeric = (function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
        dotAfter = /^([^.]+)\.$/,
        dotBefore = /^\.([^.]+)$/,
        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

      return function (x, str, isNum, b) {
        var base,
          s = isNum ? str : str.replace(whitespaceOrPlus, '');

        // No exception on ±Infinity or NaN.
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {

            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b;

              // E.g. '1.' to '1', '.1' to '0.1'
              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          }

          // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'
          if (BigNumber.DEBUG) {
            throw Error
              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          }

          // NaN
          x.s = null;
        }

        x.c = x.e = null;
      }
    })();


    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
    function round(x, sd, rm, r) {
      var d, i, j, k, n, ni, rd,
        xc = x.c,
        pows10 = POWS_TEN;

      // if x is not Infinity or NaN...
      if (xc) {

        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {

          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
          i = sd - d;

          // If the rounding digit is in the first element of xc...
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];

            // Get the rounding digit at index j of n.
            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {

              if (r) {

                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0));
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];

              // Get the number of digits of n.
              for (d = 1; k >= 10; k /= 10, d++);

              // Get the index of rd within n.
              i %= LOG_BASE;

              // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.
              j = i - LOG_BASE + d;

              // Get the rounding digit at index j of n.
              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 ||

          // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

          r = rm < 4
           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

            // Check whether the digit to the left of the rounding digit is odd.
            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
             rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {

              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }

          // Round up?
          if (r) {

            for (; ;) {

              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {

                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++);

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xc.length; xc[--i] === 0; xc.pop());
        }

        // Overflow? Infinity.
        if (x.e > MAX_EXP) {
          x.c = x.e = null;

        // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }


    function valueOf(n) {
      var str,
        e = n.e;

      if (e === null) return n.toString();

      str = coeffToString(n.c);

      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
        ? toExponential(str, e)
        : toFixedPoint(str, e, '0');

      return n.s < 0 ? '-' + str : str;
    }


    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };


    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };


    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.decimalPlaces = P.dp = function (dp, rm) {
      var c, n, v,
        x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last number.
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
      if (n < 0) n = 0;

      return n;
    };


    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };


    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };


    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
    P.exponentiatedBy = P.pow = function (n, m) {
      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
        x = this;

      n = new BigNumber(n);

      // Allow NaN and ±Infinity, but not other non-integers.
      if (n.c && !n.isInteger()) {
        throw Error
          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m);

      // Exponent of MAX_SAFE_INTEGER is 15.
      nIsBig = n.e > 14;

      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {

        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

        if (isModExp) x = x.mod(m);

      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
        // [1, 240000000]
        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
        // [80000000000000]  [99999750000000]
        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0;

        // If x >= 1, k = ±Infinity.
        if (x.e > -1) k = 1 / k;

        // If n is negative return ±0, else return ±Infinity.
        return new BigNumber(nIsNeg ? 1 / k : k);

      } else if (POW_PRECISION) {

        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE);

      // Performs 54 loop iterations for n of 9007199254740991.
      for (; ;) {

        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);

      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };


    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };


    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
    P.isFinite = function () {
      return !!this.c;
    };


    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };


    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

    };


    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };


    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };


    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };


    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
    P.isNaN = function () {
      return !this.s;
    };


    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
    P.isNegative = function () {
      return this.s < 0;
    };


    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
    P.isPositive = function () {
      return this.s > 0;
    };


    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };


    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
    P.minus = function (y, b) {
      var i, j, t, xLTy,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

        // Either zero?
        if (!xc[0] || !yc[0]) {

          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
           ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Determine which is the bigger number.
      if (a = xe - ye) {

        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse();

        // Prepend zeros to equalise exponents.
        for (b = a; b--; t.push(0));
        t.reverse();
      } else {

        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {

          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }

      // x < y? Point xc to the array of the bigger number.
      if (xLTy) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }

      b = (j = yc.length) - (i = xc.length);

      // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
      if (b > 0) for (; b--; xc[i++] = 0);
      b = BASE - 1;

      // Subtract yc from xc.
      for (; j > a;) {

        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b);
          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      }

      // Remove leading zeros and adjust exponent accordingly.
      for (; xc[0] == 0; xc.splice(0, 1), --ye);

      // Zero?
      if (!xc[0]) {

        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }

      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.
      return normalise(y, xc, ye);
    };


    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
    P.modulo = P.mod = function (y, b) {
      var q, s,
        x = this;

      y = new BigNumber(y, b);

      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN);

      // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y));

      // To match JavaScript %, ensure sign of zero is sign of dividend.
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

      return y;
    };


    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
    P.multipliedBy = P.times = function (y, b) {
      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
        base, sqrtBase,
        x = this,
        xc = x.c,
        yc = (y = new BigNumber(y, b)).c;

      // Either NaN, ±Infinity or ±0?
      if (!xc || !yc || !xc[0] || !yc[0]) {

        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;

          // Return ±Infinity if either is ±Infinity.
          if (!xc || !yc) {
            y.c = y.e = null;

          // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;

      // Ensure xc points to longer array and xcL to its length.
      if (xcL < ycL) {
        zc = xc;
        xc = yc;
        yc = zc;
        i = xcL;
        xcL = ycL;
        ycL = i;
      }

      // Initialise the result array with zeros.
      for (i = xcL + ycL, zc = []; i--; zc.push(0));

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };


    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
    P.plus = function (y, b) {
      var t,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
       if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0);

        // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();
        for (; a--; t.push(0));
        t.reverse();
      }

      a = xc.length;
      b = yc.length;

      // Point xc to the longer array, and b to the shorter length.
      if (a - b < 0) {
        t = yc;
        yc = xc;
        xc = t;
        b = a;
      }

      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }

      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible
      return normalise(y, xc, ye);
    };


    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.precision = P.sd = function (sd, rm) {
      var c, n, v,
        x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {

        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--);

        // Add the number of digits of the first element.
        for (v = c[0]; v >= 10; v /= 10, n++);
      }

      if (sd && x.e + 1 > n) n = x.e + 1;

      return n;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };


    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.squareRoot = P.sqrt = function () {
      var m, n, r, rep, t,
        x = this,
        c = x.c,
        s = x.s,
        e = x.e,
        dp = DECIMAL_PLACES + 4,
        half = new BigNumber('0.5');

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }

      // Initial estimate.
      s = Math.sqrt(+valueOf(x));

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      }

      // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;

        // Newton-Raphson iteration.
        for (; ;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {

              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };


    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */
    P.toFormat = function (dp, rm, format) {
      var str,
        x = this;

      if (format == null) {
        if (dp != null && rm && typeof rm == 'object') {
          format = rm;
          rm = null;
        } else if (dp && typeof dp == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if (typeof format != 'object') {
        throw Error
          (bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
          arr = str.split('.'),
          g1 = +format.groupSize,
          g2 = +format.secondaryGroupSize,
          groupSeparator = format.groupSeparator || '',
          intPart = arr[0],
          fractionPart = arr[1],
          isNeg = x.s < 0,
          intDigits = isNeg ? intPart.slice(1) : intPart,
          len = intDigits.length;

        if (g2) {
          i = g1;
          g1 = g2;
          g2 = i;
          len -= i;
        }

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart
         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
           '$&' + (format.fractionGroupSeparator || ''))
          : fractionPart)
         : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };


    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
    P.toFraction = function (md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
        x = this,
        xc = x.c;

      if (md != null) {
        n = new BigNumber(md);

        // Throw if md is less than one or is not an integer, unless it is Infinity.
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error
            (bignumberError + 'Argument ' +
              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);

      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc);

      // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s);

      // n0 = d1 = 0
      n0.c[0] = 0;

      for (; ;)  {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;

      // Determine which fraction is closer to x, n0/d0 or n1/d1
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

      MAX_EXP = exp;

      return r;
    };


    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
    P.toNumber = function () {
      return +valueOf(this);
    };


    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };


    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
    P.toString = function (b) {
      var str,
        n = this,
        s = n.s,
        e = n.e;

      // Infinity or NaN?
      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
           ? toExponential(coeffToString(n.c), e)
           : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };


    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };


    P._isBigNumber = true;

    if (configObject != null) BigNumber.set(configObject);

    return BigNumber;
  }


  // PRIVATE HELPER FUNCTIONS

  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }


  // Return a coefficient array as a string of base 10 digits.
  function coeffToString(a) {
    var s, z,
      i = 1,
      j = a.length,
      r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;
      for (; z--; s = '0' + s);
      r += s;
    }

    // Determine trailing zeros.
    for (j = r.length; r.charCodeAt(--j) === 48;);

    return r.slice(0, j + 1 || 1);
  }


  // Compare the value of BigNumbers x and y.
  function compare(x, y) {
    var a, b,
      xc = x.c,
      yc = y.c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either NaN?
    if (!i || !j) return null;

    a = xc && !xc[0];
    b = yc && !yc[0];

    // Either zero?
    if (a || b) return a ? b ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    a = i < 0;
    b = k == l;

    // Either Infinity?
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    // Compare exponents.
    if (!b) return k > l ^ a ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

    // Compare lengths.
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }


  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error
       (bignumberError + (name || 'Argument') + (typeof n == 'number'
         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
         : ' not a primitive number: ') + String(n));
    }
  }


  // Assumes finite n.
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }


  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
     (e < 0 ? 'e' : 'e+') + e;
  }


  function toFixedPoint(str, e, z) {
    var len, zs;

    // Negative exponent?
    if (e < 0) {

      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z);
      str = zs + str;

    // Positive exponent
    } else {
      len = str.length;

      // Append zeros.
      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z);
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  }


  // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

  // AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node.js and other environments that support module.exports.
  } else {}
})(this);


/***/ }),

/***/ "../../node_modules/buffer/index.js":
/*!*****************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/buffer/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "../../node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "../../node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "../../node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/css/index.js":
/*!**************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__(/*! ./lib/parse */ "../../node_modules/css/lib/parse/index.js");
exports.stringify = __webpack_require__(/*! ./lib/stringify */ "../../node_modules/css/lib/stringify/index.js");


/***/ }),

/***/ "../../node_modules/css/lib/parse/index.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/lib/parse/index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g

module.exports = function(css, options){
  options = options || {};

  /**
   * Positional.
   */

  var lineno = 1;
  var column = 1;

  /**
   * Update lineno and column based on `str`.
   */

  function updatePosition(str) {
    var lines = str.match(/\n/g);
    if (lines) lineno += lines.length;
    var i = str.lastIndexOf('\n');
    column = ~i ? str.length - i : column + str.length;
  }

  /**
   * Mark position and patch `node.position`.
   */

  function position() {
    var start = { line: lineno, column: column };
    return function(node){
      node.position = new Position(start);
      whitespace();
      return node;
    };
  }

  /**
   * Store position information for a node
   */

  function Position(start) {
    this.start = start;
    this.end = { line: lineno, column: column };
    this.source = options.source;
  }

  /**
   * Non-enumerable source string
   */

  Position.prototype.content = css;

  /**
   * Error `msg`.
   */

  var errorsList = [];

  function error(msg) {
    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
    err.reason = msg;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = css;

    if (options.silent) {
      errorsList.push(err);
    } else {
      throw err;
    }
  }

  /**
   * Parse stylesheet.
   */

  function stylesheet() {
    var rulesList = rules();

    return {
      type: 'stylesheet',
      stylesheet: {
        source: options.source,
        rules: rulesList,
        parsingErrors: errorsList
      }
    };
  }

  /**
   * Opening brace.
   */

  function open() {
    return match(/^{\s*/);
  }

  /**
   * Closing brace.
   */

  function close() {
    return match(/^}/);
  }

  /**
   * Parse ruleset.
   */

  function rules() {
    var node;
    var rules = [];
    whitespace();
    comments(rules);
    while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
      if (node !== false) {
        rules.push(node);
        comments(rules);
      }
    }
    return rules;
  }

  /**
   * Match `re` and return captures.
   */

  function match(re) {
    var m = re.exec(css);
    if (!m) return;
    var str = m[0];
    updatePosition(str);
    css = css.slice(str.length);
    return m;
  }

  /**
   * Parse whitespace.
   */

  function whitespace() {
    match(/^\s*/);
  }

  /**
   * Parse comments;
   */

  function comments(rules) {
    var c;
    rules = rules || [];
    while (c = comment()) {
      if (c !== false) {
        rules.push(c);
      }
    }
    return rules;
  }

  /**
   * Parse comment.
   */

  function comment() {
    var pos = position();
    if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;

    var i = 2;
    while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) ++i;
    i += 2;

    if ("" === css.charAt(i-1)) {
      return error('End of comment missing');
    }

    var str = css.slice(2, i - 2);
    column += 2;
    updatePosition(str);
    css = css.slice(i);
    column += 2;

    return pos({
      type: 'comment',
      comment: str
    });
  }

  /**
   * Parse selector.
   */

  function selector() {
    var m = match(/^([^{]+)/);
    if (!m) return;
    /* @fix Remove all comments from selectors
     * http://ostermiller.org/findcomment.html */
    return trim(m[0])
      .replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '')
      .replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
        return m.replace(/,/g, '\u200C');
      })
      .split(/\s*(?![^(]*\)),\s*/)
      .map(function(s) {
        return s.replace(/\u200C/g, ',');
      });
  }

  /**
   * Parse declaration.
   */

  function declaration() {
    var pos = position();

    // prop
    var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (!prop) return;
    prop = trim(prop[0]);

    // :
    if (!match(/^:\s*/)) return error("property missing ':'");

    // val
    var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);

    var ret = pos({
      type: 'declaration',
      property: prop.replace(commentre, ''),
      value: val ? trim(val[0]).replace(commentre, '') : ''
    });

    // ;
    match(/^[;\s]*/);

    return ret;
  }

  /**
   * Parse declarations.
   */

  function declarations() {
    var decls = [];

    if (!open()) return error("missing '{'");
    comments(decls);

    // declarations
    var decl;
    while (decl = declaration()) {
      if (decl !== false) {
        decls.push(decl);
        comments(decls);
      }
    }

    if (!close()) return error("missing '}'");
    return decls;
  }

  /**
   * Parse keyframe.
   */

  function keyframe() {
    var m;
    var vals = [];
    var pos = position();

    while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
      vals.push(m[1]);
      match(/^,\s*/);
    }

    if (!vals.length) return;

    return pos({
      type: 'keyframe',
      values: vals,
      declarations: declarations()
    });
  }

  /**
   * Parse keyframes.
   */

  function atkeyframes() {
    var pos = position();
    var m = match(/^@([-\w]+)?keyframes\s*/);

    if (!m) return;
    var vendor = m[1];

    // identifier
    var m = match(/^([-\w]+)\s*/);
    if (!m) return error("@keyframes missing name");
    var name = m[1];

    if (!open()) return error("@keyframes missing '{'");

    var frame;
    var frames = comments();
    while (frame = keyframe()) {
      frames.push(frame);
      frames = frames.concat(comments());
    }

    if (!close()) return error("@keyframes missing '}'");

    return pos({
      type: 'keyframes',
      name: name,
      vendor: vendor,
      keyframes: frames
    });
  }

  /**
   * Parse supports.
   */

  function atsupports() {
    var pos = position();
    var m = match(/^@supports *([^{]+)/);

    if (!m) return;
    var supports = trim(m[1]);

    if (!open()) return error("@supports missing '{'");

    var style = comments().concat(rules());

    if (!close()) return error("@supports missing '}'");

    return pos({
      type: 'supports',
      supports: supports,
      rules: style
    });
  }

  /**
   * Parse host.
   */

  function athost() {
    var pos = position();
    var m = match(/^@host\s*/);

    if (!m) return;

    if (!open()) return error("@host missing '{'");

    var style = comments().concat(rules());

    if (!close()) return error("@host missing '}'");

    return pos({
      type: 'host',
      rules: style
    });
  }

  /**
   * Parse media.
   */

  function atmedia() {
    var pos = position();
    var m = match(/^@media *([^{]+)/);

    if (!m) return;
    var media = trim(m[1]);

    if (!open()) return error("@media missing '{'");

    var style = comments().concat(rules());

    if (!close()) return error("@media missing '}'");

    return pos({
      type: 'media',
      media: media,
      rules: style
    });
  }


  /**
   * Parse custom-media.
   */

  function atcustommedia() {
    var pos = position();
    var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (!m) return;

    return pos({
      type: 'custom-media',
      name: trim(m[1]),
      media: trim(m[2])
    });
  }

  /**
   * Parse paged media.
   */

  function atpage() {
    var pos = position();
    var m = match(/^@page */);
    if (!m) return;

    var sel = selector() || [];

    if (!open()) return error("@page missing '{'");
    var decls = comments();

    // declarations
    var decl;
    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@page missing '}'");

    return pos({
      type: 'page',
      selectors: sel,
      declarations: decls
    });
  }

  /**
   * Parse document.
   */

  function atdocument() {
    var pos = position();
    var m = match(/^@([-\w]+)?document *([^{]+)/);
    if (!m) return;

    var vendor = trim(m[1]);
    var doc = trim(m[2]);

    if (!open()) return error("@document missing '{'");

    var style = comments().concat(rules());

    if (!close()) return error("@document missing '}'");

    return pos({
      type: 'document',
      document: doc,
      vendor: vendor,
      rules: style
    });
  }

  /**
   * Parse font-face.
   */

  function atfontface() {
    var pos = position();
    var m = match(/^@font-face\s*/);
    if (!m) return;

    if (!open()) return error("@font-face missing '{'");
    var decls = comments();

    // declarations
    var decl;
    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@font-face missing '}'");

    return pos({
      type: 'font-face',
      declarations: decls
    });
  }

  /**
   * Parse import
   */

  var atimport = _compileAtrule('import');

  /**
   * Parse charset
   */

  var atcharset = _compileAtrule('charset');

  /**
   * Parse namespace
   */

  var atnamespace = _compileAtrule('namespace');

  /**
   * Parse non-block at-rules
   */


  function _compileAtrule(name) {
    var re = new RegExp('^@' + name + '\\s*([^;]+);');
    return function() {
      var pos = position();
      var m = match(re);
      if (!m) return;
      var ret = { type: name };
      ret[name] = m[1].trim();
      return pos(ret);
    }
  }

  /**
   * Parse at rule.
   */

  function atrule() {
    if (css[0] != '@') return;

    return atkeyframes()
      || atmedia()
      || atcustommedia()
      || atsupports()
      || atimport()
      || atcharset()
      || atnamespace()
      || atdocument()
      || atpage()
      || athost()
      || atfontface();
  }

  /**
   * Parse rule.
   */

  function rule() {
    var pos = position();
    var sel = selector();

    if (!sel) return error('selector missing');
    comments();

    return pos({
      type: 'rule',
      selectors: sel,
      declarations: declarations()
    });
  }

  return addParent(stylesheet());
};

/**
 * Trim `str`.
 */

function trim(str) {
  return str ? str.replace(/^\s+|\s+$/g, '') : '';
}

/**
 * Adds non-enumerable parent node reference to each node.
 */

function addParent(obj, parent) {
  var isNode = obj && typeof obj.type === 'string';
  var childParent = isNode ? obj : parent;

  for (var k in obj) {
    var value = obj[k];
    if (Array.isArray(value)) {
      value.forEach(function(v) { addParent(v, childParent); });
    } else if (value && typeof value === 'object') {
      addParent(value, childParent);
    }
  }

  if (isNode) {
    Object.defineProperty(obj, 'parent', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: parent || null
    });
  }

  return obj;
}


/***/ }),

/***/ "../../node_modules/css/lib/stringify/compiler.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/lib/stringify/compiler.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * Expose `Compiler`.
 */

module.exports = Compiler;

/**
 * Initialize a compiler.
 *
 * @param {Type} name
 * @return {Type}
 * @api public
 */

function Compiler(opts) {
  this.options = opts || {};
}

/**
 * Emit `str`
 */

Compiler.prototype.emit = function(str) {
  return str;
};

/**
 * Visit `node`.
 */

Compiler.prototype.visit = function(node){
  return this[node.type](node);
};

/**
 * Map visit over array of `nodes`, optionally using a `delim`
 */

Compiler.prototype.mapVisit = function(nodes, delim){
  var buf = '';
  delim = delim || '';

  for (var i = 0, length = nodes.length; i < length; i++) {
    buf += this.visit(nodes[i]);
    if (delim && i < length - 1) buf += this.emit(delim);
  }

  return buf;
};


/***/ }),

/***/ "../../node_modules/css/lib/stringify/compress.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/lib/stringify/compress.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var Base = __webpack_require__(/*! ./compiler */ "../../node_modules/css/lib/stringify/compiler.js");
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");

/**
 * Expose compiler.
 */

module.exports = Compiler;

/**
 * Initialize a new `Compiler`.
 */

function Compiler(options) {
  Base.call(this, options);
}

/**
 * Inherit from `Base.prototype`.
 */

inherits(Compiler, Base);

/**
 * Compile `node`.
 */

Compiler.prototype.compile = function(node){
  return node.stylesheet
    .rules.map(this.visit, this)
    .join('');
};

/**
 * Visit comment node.
 */

Compiler.prototype.comment = function(node){
  return this.emit('', node.position);
};

/**
 * Visit import node.
 */

Compiler.prototype.import = function(node){
  return this.emit('@import ' + node.import + ';', node.position);
};

/**
 * Visit media node.
 */

Compiler.prototype.media = function(node){
  return this.emit('@media ' + node.media, node.position)
    + this.emit('{')
    + this.mapVisit(node.rules)
    + this.emit('}');
};

/**
 * Visit document node.
 */

Compiler.prototype.document = function(node){
  var doc = '@' + (node.vendor || '') + 'document ' + node.document;

  return this.emit(doc, node.position)
    + this.emit('{')
    + this.mapVisit(node.rules)
    + this.emit('}');
};

/**
 * Visit charset node.
 */

Compiler.prototype.charset = function(node){
  return this.emit('@charset ' + node.charset + ';', node.position);
};

/**
 * Visit namespace node.
 */

Compiler.prototype.namespace = function(node){
  return this.emit('@namespace ' + node.namespace + ';', node.position);
};

/**
 * Visit supports node.
 */

Compiler.prototype.supports = function(node){
  return this.emit('@supports ' + node.supports, node.position)
    + this.emit('{')
    + this.mapVisit(node.rules)
    + this.emit('}');
};

/**
 * Visit keyframes node.
 */

Compiler.prototype.keyframes = function(node){
  return this.emit('@'
    + (node.vendor || '')
    + 'keyframes '
    + node.name, node.position)
    + this.emit('{')
    + this.mapVisit(node.keyframes)
    + this.emit('}');
};

/**
 * Visit keyframe node.
 */

Compiler.prototype.keyframe = function(node){
  var decls = node.declarations;

  return this.emit(node.values.join(','), node.position)
    + this.emit('{')
    + this.mapVisit(decls)
    + this.emit('}');
};

/**
 * Visit page node.
 */

Compiler.prototype.page = function(node){
  var sel = node.selectors.length
    ? node.selectors.join(', ')
    : '';

  return this.emit('@page ' + sel, node.position)
    + this.emit('{')
    + this.mapVisit(node.declarations)
    + this.emit('}');
};

/**
 * Visit font-face node.
 */

Compiler.prototype['font-face'] = function(node){
  return this.emit('@font-face', node.position)
    + this.emit('{')
    + this.mapVisit(node.declarations)
    + this.emit('}');
};

/**
 * Visit host node.
 */

Compiler.prototype.host = function(node){
  return this.emit('@host', node.position)
    + this.emit('{')
    + this.mapVisit(node.rules)
    + this.emit('}');
};

/**
 * Visit custom-media node.
 */

Compiler.prototype['custom-media'] = function(node){
  return this.emit('@custom-media ' + node.name + ' ' + node.media + ';', node.position);
};

/**
 * Visit rule node.
 */

Compiler.prototype.rule = function(node){
  var decls = node.declarations;
  if (!decls.length) return '';

  return this.emit(node.selectors.join(','), node.position)
    + this.emit('{')
    + this.mapVisit(decls)
    + this.emit('}');
};

/**
 * Visit declaration node.
 */

Compiler.prototype.declaration = function(node){
  return this.emit(node.property + ':' + node.value, node.position) + this.emit(';');
};



/***/ }),

/***/ "../../node_modules/css/lib/stringify/identity.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/lib/stringify/identity.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var Base = __webpack_require__(/*! ./compiler */ "../../node_modules/css/lib/stringify/compiler.js");
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");

/**
 * Expose compiler.
 */

module.exports = Compiler;

/**
 * Initialize a new `Compiler`.
 */

function Compiler(options) {
  options = options || {};
  Base.call(this, options);
  this.indentation = options.indent;
}

/**
 * Inherit from `Base.prototype`.
 */

inherits(Compiler, Base);

/**
 * Compile `node`.
 */

Compiler.prototype.compile = function(node){
  return this.stylesheet(node);
};

/**
 * Visit stylesheet node.
 */

Compiler.prototype.stylesheet = function(node){
  return this.mapVisit(node.stylesheet.rules, '\n\n');
};

/**
 * Visit comment node.
 */

Compiler.prototype.comment = function(node){
  return this.emit(this.indent() + '/*' + node.comment + '*/', node.position);
};

/**
 * Visit import node.
 */

Compiler.prototype.import = function(node){
  return this.emit('@import ' + node.import + ';', node.position);
};

/**
 * Visit media node.
 */

Compiler.prototype.media = function(node){
  return this.emit('@media ' + node.media, node.position)
    + this.emit(
        ' {\n'
        + this.indent(1))
    + this.mapVisit(node.rules, '\n\n')
    + this.emit(
        this.indent(-1)
        + '\n}');
};

/**
 * Visit document node.
 */

Compiler.prototype.document = function(node){
  var doc = '@' + (node.vendor || '') + 'document ' + node.document;

  return this.emit(doc, node.position)
    + this.emit(
        ' '
      + ' {\n'
      + this.indent(1))
    + this.mapVisit(node.rules, '\n\n')
    + this.emit(
        this.indent(-1)
        + '\n}');
};

/**
 * Visit charset node.
 */

Compiler.prototype.charset = function(node){
  return this.emit('@charset ' + node.charset + ';', node.position);
};

/**
 * Visit namespace node.
 */

Compiler.prototype.namespace = function(node){
  return this.emit('@namespace ' + node.namespace + ';', node.position);
};

/**
 * Visit supports node.
 */

Compiler.prototype.supports = function(node){
  return this.emit('@supports ' + node.supports, node.position)
    + this.emit(
      ' {\n'
      + this.indent(1))
    + this.mapVisit(node.rules, '\n\n')
    + this.emit(
        this.indent(-1)
        + '\n}');
};

/**
 * Visit keyframes node.
 */

Compiler.prototype.keyframes = function(node){
  return this.emit('@' + (node.vendor || '') + 'keyframes ' + node.name, node.position)
    + this.emit(
      ' {\n'
      + this.indent(1))
    + this.mapVisit(node.keyframes, '\n')
    + this.emit(
        this.indent(-1)
        + '}');
};

/**
 * Visit keyframe node.
 */

Compiler.prototype.keyframe = function(node){
  var decls = node.declarations;

  return this.emit(this.indent())
    + this.emit(node.values.join(', '), node.position)
    + this.emit(
      ' {\n'
      + this.indent(1))
    + this.mapVisit(decls, '\n')
    + this.emit(
      this.indent(-1)
      + '\n'
      + this.indent() + '}\n');
};

/**
 * Visit page node.
 */

Compiler.prototype.page = function(node){
  var sel = node.selectors.length
    ? node.selectors.join(', ') + ' '
    : '';

  return this.emit('@page ' + sel, node.position)
    + this.emit('{\n')
    + this.emit(this.indent(1))
    + this.mapVisit(node.declarations, '\n')
    + this.emit(this.indent(-1))
    + this.emit('\n}');
};

/**
 * Visit font-face node.
 */

Compiler.prototype['font-face'] = function(node){
  return this.emit('@font-face ', node.position)
    + this.emit('{\n')
    + this.emit(this.indent(1))
    + this.mapVisit(node.declarations, '\n')
    + this.emit(this.indent(-1))
    + this.emit('\n}');
};

/**
 * Visit host node.
 */

Compiler.prototype.host = function(node){
  return this.emit('@host', node.position)
    + this.emit(
        ' {\n'
        + this.indent(1))
    + this.mapVisit(node.rules, '\n\n')
    + this.emit(
        this.indent(-1)
        + '\n}');
};

/**
 * Visit custom-media node.
 */

Compiler.prototype['custom-media'] = function(node){
  return this.emit('@custom-media ' + node.name + ' ' + node.media + ';', node.position);
};

/**
 * Visit rule node.
 */

Compiler.prototype.rule = function(node){
  var indent = this.indent();
  var decls = node.declarations;
  if (!decls.length) return '';

  return this.emit(node.selectors.map(function(s){ return indent + s }).join(',\n'), node.position)
    + this.emit(' {\n')
    + this.emit(this.indent(1))
    + this.mapVisit(decls, '\n')
    + this.emit(this.indent(-1))
    + this.emit('\n' + this.indent() + '}');
};

/**
 * Visit declaration node.
 */

Compiler.prototype.declaration = function(node){
  return this.emit(this.indent())
    + this.emit(node.property + ': ' + node.value, node.position)
    + this.emit(';');
};

/**
 * Increase, decrease or return current indentation.
 */

Compiler.prototype.indent = function(level) {
  this.level = this.level || 1;

  if (null != level) {
    this.level += level;
    return '';
  }

  return Array(this.level).join(this.indentation || '  ');
};


/***/ }),

/***/ "../../node_modules/css/lib/stringify/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/lib/stringify/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var Compressed = __webpack_require__(/*! ./compress */ "../../node_modules/css/lib/stringify/compress.js");
var Identity = __webpack_require__(/*! ./identity */ "../../node_modules/css/lib/stringify/identity.js");

/**
 * Stringfy the given AST `node`.
 *
 * Options:
 *
 *  - `compress` space-optimized output
 *  - `sourcemap` return an object with `.code` and `.map`
 *
 * @param {Object} node
 * @param {Object} [options]
 * @return {String}
 * @api public
 */

module.exports = function(node, options){
  options = options || {};

  var compiler = options.compress
    ? new Compressed(options)
    : new Identity(options);

  // source maps
  if (options.sourcemap) {
    var sourcemaps = __webpack_require__(/*! ./source-map-support */ "../../node_modules/css/lib/stringify/source-map-support.js");
    sourcemaps(compiler);

    var code = compiler.compile(node);
    compiler.applySourceMaps();

    var map = options.sourcemap === 'generator'
      ? compiler.map
      : compiler.map.toJSON();

    return { code: code, map: map };
  }

  var code = compiler.compile(node);
  return code;
};


/***/ }),

/***/ "../../node_modules/css/lib/stringify/source-map-support.js":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/css/lib/stringify/source-map-support.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var SourceMap = __webpack_require__(/*! source-map */ "../../node_modules/source-map/source-map.js").SourceMapGenerator;
var SourceMapConsumer = __webpack_require__(/*! source-map */ "../../node_modules/source-map/source-map.js").SourceMapConsumer;
var sourceMapResolve = __webpack_require__(/*! source-map-resolve */ "../../node_modules/source-map-resolve/source-map-resolve.js");
var urix = __webpack_require__(/*! urix */ "../../node_modules/urix/index.js");
var fs = __webpack_require__(/*! fs */ "../../node_modules/node-libs-browser/mock/empty.js");
var path = __webpack_require__(/*! path */ "../../node_modules/path-browserify/index.js");

/**
 * Expose `mixin()`.
 */

module.exports = mixin;

/**
 * Mixin source map support into `compiler`.
 *
 * @param {Compiler} compiler
 * @api public
 */

function mixin(compiler) {
  compiler._comment = compiler.comment;
  compiler.map = new SourceMap();
  compiler.position = { line: 1, column: 1 };
  compiler.files = {};
  for (var k in exports) compiler[k] = exports[k];
}

/**
 * Update position.
 *
 * @param {String} str
 * @api private
 */

exports.updatePosition = function(str) {
  var lines = str.match(/\n/g);
  if (lines) this.position.line += lines.length;
  var i = str.lastIndexOf('\n');
  this.position.column = ~i ? str.length - i : this.position.column + str.length;
};

/**
 * Emit `str`.
 *
 * @param {String} str
 * @param {Object} [pos]
 * @return {String}
 * @api private
 */

exports.emit = function(str, pos) {
  if (pos) {
    var sourceFile = urix(pos.source || 'source.css');

    this.map.addMapping({
      source: sourceFile,
      generated: {
        line: this.position.line,
        column: Math.max(this.position.column - 1, 0)
      },
      original: {
        line: pos.start.line,
        column: pos.start.column - 1
      }
    });

    this.addFile(sourceFile, pos);
  }

  this.updatePosition(str);

  return str;
};

/**
 * Adds a file to the source map output if it has not already been added
 * @param {String} file
 * @param {Object} pos
 */

exports.addFile = function(file, pos) {
  if (typeof pos.content !== 'string') return;
  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;

  this.files[file] = pos.content;
};

/**
 * Applies any original source maps to the output and embeds the source file
 * contents in the source map.
 */

exports.applySourceMaps = function() {
  Object.keys(this.files).forEach(function(file) {
    var content = this.files[file];
    this.map.setSourceContent(file, content);

    if (this.options.inputSourcemaps !== false) {
      var originalMap = sourceMapResolve.resolveSync(
        content, file, fs.readFileSync);
      if (originalMap) {
        var map = new SourceMapConsumer(originalMap.map);
        var relativeTo = originalMap.sourcesRelativeTo;
        this.map.applySourceMap(map, file, urix(path.dirname(relativeTo)));
      }
    }
  }, this);
};

/**
 * Process comments, drops sourceMap comments.
 * @param {Object} node
 */

exports.comment = function(node) {
  if (/^# sourceMappingURL=/.test(node.comment))
    return this.emit('', node.position);
  else
    return this._comment(node);
};


/***/ }),

/***/ "../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js":
/*!********************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var MILLISECONDS_IN_MINUTE = 60000

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
module.exports = function getTimezoneOffsetInMilliseconds (dirtyDate) {
  var date = new Date(dirtyDate.getTime())
  var baseTimezoneOffset = date.getTimezoneOffset()
  date.setSeconds(0, 0)
  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE

  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset
}


/***/ }),

/***/ "../../node_modules/date-fns/add_days/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_days/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added
 * @returns {Date} the new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * var result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays (dirtyDate, dirtyAmount) {
  var date = parse(dirtyDate)
  var amount = Number(dirtyAmount)
  date.setDate(date.getDate() + amount)
  return date
}

module.exports = addDays


/***/ }),

/***/ "../../node_modules/date-fns/add_hours/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_hours/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMilliseconds = __webpack_require__(/*! ../add_milliseconds/index.js */ "../../node_modules/date-fns/add_milliseconds/index.js")

var MILLISECONDS_IN_HOUR = 3600000

/**
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be added
 * @returns {Date} the new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
function addHours (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR)
}

module.exports = addHours


/***/ }),

/***/ "../../node_modules/date-fns/add_iso_years/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_iso_years/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getISOYear = __webpack_require__(/*! ../get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js")
var setISOYear = __webpack_require__(/*! ../set_iso_year/index.js */ "../../node_modules/date-fns/set_iso_year/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Add the specified number of ISO week-numbering years to the given date.
 *
 * @description
 * Add the specified number of ISO week-numbering years to the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of ISO week-numbering years to be added
 * @returns {Date} the new date with the ISO week-numbering years added
 *
 * @example
 * // Add 5 ISO week-numbering years to 2 July 2010:
 * var result = addISOYears(new Date(2010, 6, 2), 5)
 * //=> Fri Jun 26 2015 00:00:00
 */
function addISOYears (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return setISOYear(dirtyDate, getISOYear(dirtyDate) + amount)
}

module.exports = addISOYears


/***/ }),

/***/ "../../node_modules/date-fns/add_milliseconds/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_milliseconds/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added
 * @returns {Date} the new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds (dirtyDate, dirtyAmount) {
  var timestamp = parse(dirtyDate).getTime()
  var amount = Number(dirtyAmount)
  return new Date(timestamp + amount)
}

module.exports = addMilliseconds


/***/ }),

/***/ "../../node_modules/date-fns/add_minutes/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_minutes/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMilliseconds = __webpack_require__(/*! ../add_milliseconds/index.js */ "../../node_modules/date-fns/add_milliseconds/index.js")

var MILLISECONDS_IN_MINUTE = 60000

/**
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of minutes to be added
 * @returns {Date} the new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
function addMinutes (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE)
}

module.exports = addMinutes


/***/ }),

/***/ "../../node_modules/date-fns/add_months/index.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_months/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var getDaysInMonth = __webpack_require__(/*! ../get_days_in_month/index.js */ "../../node_modules/date-fns/get_days_in_month/index.js")

/**
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added
 * @returns {Date} the new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * var result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */
function addMonths (dirtyDate, dirtyAmount) {
  var date = parse(dirtyDate)
  var amount = Number(dirtyAmount)
  var desiredMonth = date.getMonth() + amount
  var dateWithDesiredMonth = new Date(0)
  dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1)
  dateWithDesiredMonth.setHours(0, 0, 0, 0)
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth)
  // Set the last day of the new month
  // if the original date was the last day of the longer month
  date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()))
  return date
}

module.exports = addMonths


/***/ }),

/***/ "../../node_modules/date-fns/add_quarters/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_quarters/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMonths = __webpack_require__(/*! ../add_months/index.js */ "../../node_modules/date-fns/add_months/index.js")

/**
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of quarters to be added
 * @returns {Date} the new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * var result = addQuarters(new Date(2014, 8, 1), 1)
 * //=> Mon Dec 01 2014 00:00:00
 */
function addQuarters (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  var months = amount * 3
  return addMonths(dirtyDate, months)
}

module.exports = addQuarters


/***/ }),

/***/ "../../node_modules/date-fns/add_seconds/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_seconds/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMilliseconds = __webpack_require__(/*! ../add_milliseconds/index.js */ "../../node_modules/date-fns/add_milliseconds/index.js")

/**
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be added
 * @returns {Date} the new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
function addSeconds (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMilliseconds(dirtyDate, amount * 1000)
}

module.exports = addSeconds


/***/ }),

/***/ "../../node_modules/date-fns/add_weeks/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_weeks/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addDays = __webpack_require__(/*! ../add_days/index.js */ "../../node_modules/date-fns/add_days/index.js")

/**
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be added
 * @returns {Date} the new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * var result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  var days = amount * 7
  return addDays(dirtyDate, days)
}

module.exports = addWeeks


/***/ }),

/***/ "../../node_modules/date-fns/add_years/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/add_years/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMonths = __webpack_require__(/*! ../add_months/index.js */ "../../node_modules/date-fns/add_months/index.js")

/**
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added
 * @returns {Date} the new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * var result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMonths(dirtyDate, amount * 12)
}

module.exports = addYears


/***/ }),

/***/ "../../node_modules/date-fns/are_ranges_overlapping/index.js":
/*!******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/are_ranges_overlapping/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Range Helpers
 * @summary Is the given date range overlapping with another date range?
 *
 * @description
 * Is the given date range overlapping with another date range?
 *
 * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
 * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
 * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
 * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
 * @returns {Boolean} whether the date ranges are overlapping
 * @throws {Error} startDate of a date range cannot be after its endDate
 *
 * @example
 * // For overlapping date ranges:
 * areRangesOverlapping(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
 * )
 * //=> true
 *
 * @example
 * // For non-overlapping date ranges:
 * areRangesOverlapping(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
 * )
 * //=> false
 */
function areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()
  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()
  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()
  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()

  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
    throw new Error('The start of the range cannot be after the end of the range')
  }

  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime
}

module.exports = areRangesOverlapping


/***/ }),

/***/ "../../node_modules/date-fns/closest_index_to/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/closest_index_to/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Return an index of the closest date from the array comparing to the given date.
 *
 * @description
 * Return an index of the closest date from the array comparing to the given date.
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date[]|String[]|Number[]} datesArray - the array to search
 * @returns {Number} an index of the date closest to the given date
 * @throws {TypeError} the second argument must be an instance of Array
 *
 * @example
 * // Which date is closer to 6 September 2015?
 * var dateToCompare = new Date(2015, 8, 6)
 * var datesArray = [
 *   new Date(2015, 0, 1),
 *   new Date(2016, 0, 1),
 *   new Date(2017, 0, 1)
 * ]
 * var result = closestIndexTo(dateToCompare, datesArray)
 * //=> 1
 */
function closestIndexTo (dirtyDateToCompare, dirtyDatesArray) {
  if (!(dirtyDatesArray instanceof Array)) {
    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')
  }

  var dateToCompare = parse(dirtyDateToCompare)
  var timeToCompare = dateToCompare.getTime()

  var result
  var minDistance

  dirtyDatesArray.forEach(function (dirtyDate, index) {
    var currentDate = parse(dirtyDate)
    var distance = Math.abs(timeToCompare - currentDate.getTime())
    if (result === undefined || distance < minDistance) {
      result = index
      minDistance = distance
    }
  })

  return result
}

module.exports = closestIndexTo


/***/ }),

/***/ "../../node_modules/date-fns/closest_to/index.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/closest_to/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date[]|String[]|Number[]} datesArray - the array to search
 * @returns {Date} the date from the array closest to the given date
 * @throws {TypeError} the second argument must be an instance of Array
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
 * var dateToCompare = new Date(2015, 8, 6)
 * var result = closestTo(dateToCompare, [
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */
function closestTo (dirtyDateToCompare, dirtyDatesArray) {
  if (!(dirtyDatesArray instanceof Array)) {
    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')
  }

  var dateToCompare = parse(dirtyDateToCompare)
  var timeToCompare = dateToCompare.getTime()

  var result
  var minDistance

  dirtyDatesArray.forEach(function (dirtyDate) {
    var currentDate = parse(dirtyDate)
    var distance = Math.abs(timeToCompare - currentDate.getTime())
    if (result === undefined || distance < minDistance) {
      result = currentDate
      minDistance = distance
    }
  })

  return result
}

module.exports = closestTo


/***/ }),

/***/ "../../node_modules/date-fns/compare_asc/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/compare_asc/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * var result = compareAsc(
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * )
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * var result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
function compareAsc (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var timeLeft = dateLeft.getTime()
  var dateRight = parse(dirtyDateRight)
  var timeRight = dateRight.getTime()

  if (timeLeft < timeRight) {
    return -1
  } else if (timeLeft > timeRight) {
    return 1
  } else {
    return 0
  }
}

module.exports = compareAsc


/***/ }),

/***/ "../../node_modules/date-fns/compare_desc/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/compare_desc/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return -1 if the first date is after the second,
 * 1 if the first date is before the second or 0 if dates are equal.
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
 * var result = compareDesc(
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * )
 * //=> 1
 *
 * @example
 * // Sort the array of dates in reverse chronological order:
 * var result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareDesc)
 * //=> [
 * //   Sun Jul 02 1995 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Wed Feb 11 1987 00:00:00
 * // ]
 */
function compareDesc (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var timeLeft = dateLeft.getTime()
  var dateRight = parse(dirtyDateRight)
  var timeRight = dateRight.getTime()

  if (timeLeft > timeRight) {
    return -1
  } else if (timeLeft < timeRight) {
    return 1
  } else {
    return 0
  }
}

module.exports = compareDesc


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_days/index.js":
/*!***********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_days/index.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfDay = __webpack_require__(/*! ../start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js")

var MILLISECONDS_IN_MINUTE = 60000
var MILLISECONDS_IN_DAY = 86400000

/**
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * var result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 */
function differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {
  var startOfDayLeft = startOfDay(dirtyDateLeft)
  var startOfDayRight = startOfDay(dirtyDateRight)

  var timestampLeft = startOfDayLeft.getTime() -
    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE
  var timestampRight = startOfDayRight.getTime() -
    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a day is not constant
  // (e.g. it's different in the day of the daylight saving time clock shift)
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)
}

module.exports = differenceInCalendarDays


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_iso_weeks/index.js":
/*!****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_iso_weeks/index.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfISOWeek = __webpack_require__(/*! ../start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js")

var MILLISECONDS_IN_MINUTE = 60000
var MILLISECONDS_IN_WEEK = 604800000

/**
 * @category ISO Week Helpers
 * @summary Get the number of calendar ISO weeks between the given dates.
 *
 * @description
 * Get the number of calendar ISO weeks between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar ISO weeks
 *
 * @example
 * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
 * var result = differenceInCalendarISOWeeks(
 *   new Date(2014, 6, 21),
 *   new Date(2014, 6, 6)
 * )
 * //=> 3
 */
function differenceInCalendarISOWeeks (dirtyDateLeft, dirtyDateRight) {
  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft)
  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight)

  var timestampLeft = startOfISOWeekLeft.getTime() -
    startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE
  var timestampRight = startOfISOWeekRight.getTime() -
    startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)
}

module.exports = differenceInCalendarISOWeeks


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_iso_years/index.js":
/*!****************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_iso_years/index.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getISOYear = __webpack_require__(/*! ../get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of calendar ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of calendar ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar ISO week-numbering years
 *
 * @example
 * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
 * var result = differenceInCalendarISOYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 2
 */
function differenceInCalendarISOYears (dirtyDateLeft, dirtyDateRight) {
  return getISOYear(dirtyDateLeft) - getISOYear(dirtyDateRight)
}

module.exports = differenceInCalendarISOYears


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_months/index.js":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_months/index.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear()
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth()

  return yearDiff * 12 + monthDiff
}

module.exports = differenceInCalendarMonths


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_quarters/index.js":
/*!***************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_quarters/index.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getQuarter = __webpack_require__(/*! ../get_quarter/index.js */ "../../node_modules/date-fns/get_quarter/index.js")
var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Quarter Helpers
 * @summary Get the number of calendar quarters between the given dates.
 *
 * @description
 * Get the number of calendar quarters between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar quarters
 *
 * @example
 * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
 * var result = differenceInCalendarQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 3
 */
function differenceInCalendarQuarters (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear()
  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight)

  return yearDiff * 4 + quarterDiff
}

module.exports = differenceInCalendarQuarters


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_weeks/index.js":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_weeks/index.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfWeek = __webpack_require__(/*! ../start_of_week/index.js */ "../../node_modules/date-fns/start_of_week/index.js")

var MILLISECONDS_IN_MINUTE = 60000
var MILLISECONDS_IN_WEEK = 604800000

/**
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the number of calendar weeks
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * var result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * var result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   {weekStartsOn: 1}
 * )
 * //=> 2
 */
function differenceInCalendarWeeks (dirtyDateLeft, dirtyDateRight, dirtyOptions) {
  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions)
  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions)

  var timestampLeft = startOfWeekLeft.getTime() -
    startOfWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE
  var timestampRight = startOfWeekRight.getTime() -
    startOfWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)
}

module.exports = differenceInCalendarWeeks


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_calendar_years/index.js":
/*!************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_calendar_years/index.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * var result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */
function differenceInCalendarYears (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  return dateLeft.getFullYear() - dateRight.getFullYear()
}

module.exports = differenceInCalendarYears


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_days/index.js":
/*!**************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_days/index.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var differenceInCalendarDays = __webpack_require__(/*! ../difference_in_calendar_days/index.js */ "../../node_modules/date-fns/difference_in_calendar_days/index.js")
var compareAsc = __webpack_require__(/*! ../compare_asc/index.js */ "../../node_modules/date-fns/compare_asc/index.js")

/**
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full days between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full days
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * var result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 */
function differenceInDays (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  var sign = compareAsc(dateLeft, dateRight)
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight))
  dateLeft.setDate(dateLeft.getDate() - sign * difference)

  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastDayNotFull = compareAsc(dateLeft, dateRight) === -sign
  return sign * (difference - isLastDayNotFull)
}

module.exports = differenceInDays


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_hours/index.js":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_hours/index.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var differenceInMilliseconds = __webpack_require__(/*! ../difference_in_milliseconds/index.js */ "../../node_modules/date-fns/difference_in_milliseconds/index.js")

var MILLISECONDS_IN_HOUR = 3600000

/**
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * var result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */
function differenceInHours (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

module.exports = differenceInHours


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_iso_years/index.js":
/*!*******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_iso_years/index.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var differenceInCalendarISOYears = __webpack_require__(/*! ../difference_in_calendar_iso_years/index.js */ "../../node_modules/date-fns/difference_in_calendar_iso_years/index.js")
var compareAsc = __webpack_require__(/*! ../compare_asc/index.js */ "../../node_modules/date-fns/compare_asc/index.js")
var subISOYears = __webpack_require__(/*! ../sub_iso_years/index.js */ "../../node_modules/date-fns/sub_iso_years/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of full ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of full ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full ISO week-numbering years
 *
 * @example
 * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
 * var result = differenceInISOYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 1
 */
function differenceInISOYears (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  var sign = compareAsc(dateLeft, dateRight)
  var difference = Math.abs(differenceInCalendarISOYears(dateLeft, dateRight))
  dateLeft = subISOYears(dateLeft, sign * difference)

  // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1
  // if last calendar ISO year is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastISOYearNotFull = compareAsc(dateLeft, dateRight) === -sign
  return sign * (difference - isLastISOYearNotFull)
}

module.exports = differenceInISOYears


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_milliseconds/index.js":
/*!**********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_milliseconds/index.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * var result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)
  return dateLeft.getTime() - dateRight.getTime()
}

module.exports = differenceInMilliseconds


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_minutes/index.js":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_minutes/index.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var differenceInMilliseconds = __webpack_require__(/*! ../difference_in_milliseconds/index.js */ "../../node_modules/date-fns/difference_in_milliseconds/index.js")

var MILLISECONDS_IN_MINUTE = 60000

/**
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the number of minutes between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * var result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 */
function differenceInMinutes (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

module.exports = differenceInMinutes


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_months/index.js":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_months/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var differenceInCalendarMonths = __webpack_require__(/*! ../difference_in_calendar_months/index.js */ "../../node_modules/date-fns/difference_in_calendar_months/index.js")
var compareAsc = __webpack_require__(/*! ../compare_asc/index.js */ "../../node_modules/date-fns/compare_asc/index.js")

/**
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 7
 */
function differenceInMonths (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  var sign = compareAsc(dateLeft, dateRight)
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight))
  dateLeft.setMonth(dateLeft.getMonth() - sign * difference)

  // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign
  return sign * (difference - isLastMonthNotFull)
}

module.exports = differenceInMonths


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_quarters/index.js":
/*!******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_quarters/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var differenceInMonths = __webpack_require__(/*! ../difference_in_months/index.js */ "../../node_modules/date-fns/difference_in_months/index.js")

/**
 * @category Quarter Helpers
 * @summary Get the number of full quarters between the given dates.
 *
 * @description
 * Get the number of full quarters between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * var result = differenceInQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */
function differenceInQuarters (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMonths(dirtyDateLeft, dirtyDateRight) / 3
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

module.exports = differenceInQuarters


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_seconds/index.js":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_seconds/index.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var differenceInMilliseconds = __webpack_require__(/*! ../difference_in_milliseconds/index.js */ "../../node_modules/date-fns/difference_in_milliseconds/index.js")

/**
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * var result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
function differenceInSeconds (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

module.exports = differenceInSeconds


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_weeks/index.js":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_weeks/index.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var differenceInDays = __webpack_require__(/*! ../difference_in_days/index.js */ "../../node_modules/date-fns/difference_in_days/index.js")

/**
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * var result = differenceInWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 2
 */
function differenceInWeeks (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInDays(dirtyDateLeft, dirtyDateRight) / 7
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

module.exports = differenceInWeeks


/***/ }),

/***/ "../../node_modules/date-fns/difference_in_years/index.js":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/difference_in_years/index.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var differenceInCalendarYears = __webpack_require__(/*! ../difference_in_calendar_years/index.js */ "../../node_modules/date-fns/difference_in_calendar_years/index.js")
var compareAsc = __webpack_require__(/*! ../compare_asc/index.js */ "../../node_modules/date-fns/compare_asc/index.js")

/**
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * var result = differenceInYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 1
 */
function differenceInYears (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)

  var sign = compareAsc(dateLeft, dateRight)
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight))
  dateLeft.setFullYear(dateLeft.getFullYear() - sign * difference)

  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign
  return sign * (difference - isLastYearNotFull)
}

module.exports = differenceInYears


/***/ }),

/***/ "../../node_modules/date-fns/distance_in_words/index.js":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/distance_in_words/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var compareDesc = __webpack_require__(/*! ../compare_desc/index.js */ "../../node_modules/date-fns/compare_desc/index.js")
var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var differenceInSeconds = __webpack_require__(/*! ../difference_in_seconds/index.js */ "../../node_modules/date-fns/difference_in_seconds/index.js")
var differenceInMonths = __webpack_require__(/*! ../difference_in_months/index.js */ "../../node_modules/date-fns/difference_in_months/index.js")
var enLocale = __webpack_require__(/*! ../locale/en/index.js */ "../../node_modules/date-fns/locale/en/index.js")

var MINUTES_IN_DAY = 1440
var MINUTES_IN_ALMOST_TWO_DAYS = 2520
var MINUTES_IN_MONTH = 43200
var MINUTES_IN_TWO_MONTHS = 86400

/**
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date|String|Number} date - the other date
 * @param {Object} [options] - the object with options
 * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
 * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the distance in words
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * var result = distanceInWords(
 *   new Date(2014, 6, 2),
 *   new Date(2015, 0, 1)
 * )
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * var result = distanceInWords(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * var result = distanceInWords(
 *   new Date(2016, 0, 1),
 *   new Date(2015, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * var eoLocale = require('date-fns/locale/eo')
 * var result = distanceInWords(
 *   new Date(2016, 7, 1),
 *   new Date(2015, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
function distanceInWords (dirtyDateToCompare, dirtyDate, dirtyOptions) {
  var options = dirtyOptions || {}

  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)

  var locale = options.locale
  var localize = enLocale.distanceInWords.localize
  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
    localize = locale.distanceInWords.localize
  }

  var localizeOptions = {
    addSuffix: Boolean(options.addSuffix),
    comparison: comparison
  }

  var dateLeft, dateRight
  if (comparison > 0) {
    dateLeft = parse(dirtyDateToCompare)
    dateRight = parse(dirtyDate)
  } else {
    dateLeft = parse(dirtyDate)
    dateRight = parse(dirtyDateToCompare)
  }

  var seconds = differenceInSeconds(dateRight, dateLeft)
  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()
  var minutes = Math.round(seconds / 60) - offset
  var months

  // 0 up to 2 mins
  if (minutes < 2) {
    if (options.includeSeconds) {
      if (seconds < 5) {
        return localize('lessThanXSeconds', 5, localizeOptions)
      } else if (seconds < 10) {
        return localize('lessThanXSeconds', 10, localizeOptions)
      } else if (seconds < 20) {
        return localize('lessThanXSeconds', 20, localizeOptions)
      } else if (seconds < 40) {
        return localize('halfAMinute', null, localizeOptions)
      } else if (seconds < 60) {
        return localize('lessThanXMinutes', 1, localizeOptions)
      } else {
        return localize('xMinutes', 1, localizeOptions)
      }
    } else {
      if (minutes === 0) {
        return localize('lessThanXMinutes', 1, localizeOptions)
      } else {
        return localize('xMinutes', minutes, localizeOptions)
      }
    }

  // 2 mins up to 0.75 hrs
  } else if (minutes < 45) {
    return localize('xMinutes', minutes, localizeOptions)

  // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return localize('aboutXHours', 1, localizeOptions)

  // 1.5 hrs up to 24 hrs
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60)
    return localize('aboutXHours', hours, localizeOptions)

  // 1 day up to 1.75 days
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return localize('xDays', 1, localizeOptions)

  // 1.75 days up to 30 days
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY)
    return localize('xDays', days, localizeOptions)

  // 1 month up to 2 months
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH)
    return localize('aboutXMonths', months, localizeOptions)
  }

  months = differenceInMonths(dateRight, dateLeft)

  // 2 months up to 12 months
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH)
    return localize('xMonths', nearestMonth, localizeOptions)

  // 1 year up to max Date
  } else {
    var monthsSinceStartOfYear = months % 12
    var years = Math.floor(months / 12)

    // N years up to 1 years 3 months
    if (monthsSinceStartOfYear < 3) {
      return localize('aboutXYears', years, localizeOptions)

    // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return localize('overXYears', years, localizeOptions)

    // N years 9 months up to N year 12 months
    } else {
      return localize('almostXYears', years + 1, localizeOptions)
    }
  }
}

module.exports = distanceInWords


/***/ }),

/***/ "../../node_modules/date-fns/distance_in_words_strict/index.js":
/*!********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/distance_in_words_strict/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var compareDesc = __webpack_require__(/*! ../compare_desc/index.js */ "../../node_modules/date-fns/compare_desc/index.js")
var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var differenceInSeconds = __webpack_require__(/*! ../difference_in_seconds/index.js */ "../../node_modules/date-fns/difference_in_seconds/index.js")
var enLocale = __webpack_require__(/*! ../locale/en/index.js */ "../../node_modules/date-fns/locale/en/index.js")

var MINUTES_IN_DAY = 1440
var MINUTES_IN_MONTH = 43200
var MINUTES_IN_YEAR = 525600

/**
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date|String|Number} date - the other date
 * @param {Object} [options] - the object with options
 * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
 * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit
 * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the distance in words
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * var result = distanceInWordsStrict(
 *   new Date(2014, 6, 2),
 *   new Date(2015, 0, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00?
 * var result = distanceInWordsStrict(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 * )
 * //=> '15 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * var result = distanceInWordsStrict(
 *   new Date(2016, 0, 1),
 *   new Date(2015, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> '1 year ago'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, in minutes?
 * var result = distanceInWordsStrict(
 *   new Date(2016, 0, 1),
 *   new Date(2015, 0, 1),
 *   {unit: 'm'}
 * )
 * //=> '525600 minutes'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 28 January 2015, in months, rounded up?
 * var result = distanceInWordsStrict(
 *   new Date(2015, 0, 28),
 *   new Date(2015, 0, 1),
 *   {unit: 'M', partialMethod: 'ceil'}
 * )
 * //=> '1 month'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * var eoLocale = require('date-fns/locale/eo')
 * var result = distanceInWordsStrict(
 *   new Date(2016, 7, 1),
 *   new Date(2015, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> '1 jaro'
 */
function distanceInWordsStrict (dirtyDateToCompare, dirtyDate, dirtyOptions) {
  var options = dirtyOptions || {}

  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)

  var locale = options.locale
  var localize = enLocale.distanceInWords.localize
  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
    localize = locale.distanceInWords.localize
  }

  var localizeOptions = {
    addSuffix: Boolean(options.addSuffix),
    comparison: comparison
  }

  var dateLeft, dateRight
  if (comparison > 0) {
    dateLeft = parse(dirtyDateToCompare)
    dateRight = parse(dirtyDate)
  } else {
    dateLeft = parse(dirtyDate)
    dateRight = parse(dirtyDateToCompare)
  }

  var unit
  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor']
  var seconds = differenceInSeconds(dateRight, dateLeft)
  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()
  var minutes = mathPartial(seconds / 60) - offset
  var hours, days, months, years

  if (options.unit) {
    unit = String(options.unit)
  } else {
    if (minutes < 1) {
      unit = 's'
    } else if (minutes < 60) {
      unit = 'm'
    } else if (minutes < MINUTES_IN_DAY) {
      unit = 'h'
    } else if (minutes < MINUTES_IN_MONTH) {
      unit = 'd'
    } else if (minutes < MINUTES_IN_YEAR) {
      unit = 'M'
    } else {
      unit = 'Y'
    }
  }

  // 0 up to 60 seconds
  if (unit === 's') {
    return localize('xSeconds', seconds, localizeOptions)

  // 1 up to 60 mins
  } else if (unit === 'm') {
    return localize('xMinutes', minutes, localizeOptions)

  // 1 up to 24 hours
  } else if (unit === 'h') {
    hours = mathPartial(minutes / 60)
    return localize('xHours', hours, localizeOptions)

  // 1 up to 30 days
  } else if (unit === 'd') {
    days = mathPartial(minutes / MINUTES_IN_DAY)
    return localize('xDays', days, localizeOptions)

  // 1 up to 12 months
  } else if (unit === 'M') {
    months = mathPartial(minutes / MINUTES_IN_MONTH)
    return localize('xMonths', months, localizeOptions)

  // 1 year up to max Date
  } else if (unit === 'Y') {
    years = mathPartial(minutes / MINUTES_IN_YEAR)
    return localize('xYears', years, localizeOptions)
  }

  throw new Error('Unknown unit: ' + unit)
}

module.exports = distanceInWordsStrict


/***/ }),

/***/ "../../node_modules/date-fns/distance_in_words_to_now/index.js":
/*!********************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/distance_in_words_to_now/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var distanceInWords = __webpack_require__(/*! ../distance_in_words/index.js */ "../../node_modules/date-fns/distance_in_words/index.js")

/**
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @param {Date|String|Number} date - the given date
 * @param {Object} [options] - the object with options
 * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
 * @param {Boolean} [options.addSuffix=false] - result specifies if the second date is earlier or later than the first
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the distance in words
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * var result = distanceInWordsToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * var result = distanceInWordsToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * var result = distanceInWordsToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * var eoLocale = require('date-fns/locale/eo')
 * var result = distanceInWordsToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
function distanceInWordsToNow (dirtyDate, dirtyOptions) {
  return distanceInWords(Date.now(), dirtyDate, dirtyOptions)
}

module.exports = distanceInWordsToNow


/***/ }),

/***/ "../../node_modules/date-fns/each_day/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/each_day/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Return the array of dates within the specified range.
 *
 * @description
 * Return the array of dates within the specified range.
 *
 * @param {Date|String|Number} startDate - the first date
 * @param {Date|String|Number} endDate - the last date
 * @param {Number} [step=1] - the step between each day
 * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate
 * @throws {Error} startDate cannot be after endDate
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * var result = eachDay(
 *   new Date(2014, 9, 6),
 *   new Date(2014, 9, 10)
 * )
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */
function eachDay (dirtyStartDate, dirtyEndDate, dirtyStep) {
  var startDate = parse(dirtyStartDate)
  var endDate = parse(dirtyEndDate)
  var step = dirtyStep !== undefined ? dirtyStep : 1

  var endTime = endDate.getTime()

  if (startDate.getTime() > endTime) {
    throw new Error('The first date cannot be after the second date')
  }

  var dates = []

  var currentDate = startDate
  currentDate.setHours(0, 0, 0, 0)

  while (currentDate.getTime() <= endTime) {
    dates.push(parse(currentDate))
    currentDate.setDate(currentDate.getDate() + step)
  }

  return dates
}

module.exports = eachDay


/***/ }),

/***/ "../../node_modules/date-fns/end_of_day/index.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_day/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay (dirtyDate) {
  var date = parse(dirtyDate)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfDay


/***/ }),

/***/ "../../node_modules/date-fns/end_of_hour/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_hour/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * var result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */
function endOfHour (dirtyDate) {
  var date = parse(dirtyDate)
  date.setMinutes(59, 59, 999)
  return date
}

module.exports = endOfHour


/***/ }),

/***/ "../../node_modules/date-fns/end_of_iso_week/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_iso_week/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var endOfWeek = __webpack_require__(/*! ../end_of_week/index.js */ "../../node_modules/date-fns/end_of_week/index.js")

/**
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfISOWeek (dirtyDate) {
  return endOfWeek(dirtyDate, {weekStartsOn: 1})
}

module.exports = endOfISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/end_of_iso_year/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_iso_year/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getISOYear = __webpack_require__(/*! ../get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js")
var startOfISOWeek = __webpack_require__(/*! ../start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the end of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the end of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an ISO week-numbering year
 *
 * @example
 * // The end of an ISO week-numbering year for 2 July 2005:
 * var result = endOfISOYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 23:59:59.999
 */
function endOfISOYear (dirtyDate) {
  var year = getISOYear(dirtyDate)
  var fourthOfJanuaryOfNextYear = new Date(0)
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)
  var date = startOfISOWeek(fourthOfJanuaryOfNextYear)
  date.setMilliseconds(date.getMilliseconds() - 1)
  return date
}

module.exports = endOfISOYear


/***/ }),

/***/ "../../node_modules/date-fns/end_of_minute/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_minute/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */
function endOfMinute (dirtyDate) {
  var date = parse(dirtyDate)
  date.setSeconds(59, 999)
  return date
}

module.exports = endOfMinute


/***/ }),

/***/ "../../node_modules/date-fns/end_of_month/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_month/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth (dirtyDate) {
  var date = parse(dirtyDate)
  var month = date.getMonth()
  date.setFullYear(date.getFullYear(), month + 1, 0)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfMonth


/***/ }),

/***/ "../../node_modules/date-fns/end_of_quarter/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_quarter/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfQuarter (dirtyDate) {
  var date = parse(dirtyDate)
  var currentMonth = date.getMonth()
  var month = currentMonth - currentMonth % 3 + 3
  date.setMonth(month, 0)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfQuarter


/***/ }),

/***/ "../../node_modules/date-fns/end_of_second/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_second/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */
function endOfSecond (dirtyDate) {
  var date = parse(dirtyDate)
  date.setMilliseconds(999)
  return date
}

module.exports = endOfSecond


/***/ }),

/***/ "../../node_modules/date-fns/end_of_today/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_today/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var endOfDay = __webpack_require__(/*! ../end_of_day/index.js */ "../../node_modules/date-fns/end_of_day/index.js")

/**
 * @category Day Helpers
 * @summary Return the end of today.
 *
 * @description
 * Return the end of today.
 *
 * @returns {Date} the end of today
 *
 * @example
 * // If today is 6 October 2014:
 * var result = endOfToday()
 * //=> Mon Oct 6 2014 23:59:59.999
 */
function endOfToday () {
  return endOfDay(new Date())
}

module.exports = endOfToday


/***/ }),

/***/ "../../node_modules/date-fns/end_of_tomorrow/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_tomorrow/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @category Day Helpers
 * @summary Return the end of tomorrow.
 *
 * @description
 * Return the end of tomorrow.
 *
 * @returns {Date} the end of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * var result = endOfTomorrow()
 * //=> Tue Oct 7 2014 23:59:59.999
 */
function endOfTomorrow () {
  var now = new Date()
  var year = now.getFullYear()
  var month = now.getMonth()
  var day = now.getDate()

  var date = new Date(0)
  date.setFullYear(year, month, day + 1)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfTomorrow


/***/ }),

/***/ "../../node_modules/date-fns/end_of_week/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_week/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek (dirtyDate, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0

  var date = parse(dirtyDate)
  var day = date.getDay()
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn)

  date.setDate(date.getDate() + diff)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfWeek


/***/ }),

/***/ "../../node_modules/date-fns/end_of_year/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_year/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear (dirtyDate) {
  var date = parse(dirtyDate)
  var year = date.getFullYear()
  date.setFullYear(year + 1, 0, 0)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfYear


/***/ }),

/***/ "../../node_modules/date-fns/end_of_yesterday/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/end_of_yesterday/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @category Day Helpers
 * @summary Return the end of yesterday.
 *
 * @description
 * Return the end of yesterday.
 *
 * @returns {Date} the end of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * var result = endOfYesterday()
 * //=> Sun Oct 5 2014 23:59:59.999
 */
function endOfYesterday () {
  var now = new Date()
  var year = now.getFullYear()
  var month = now.getMonth()
  var day = now.getDate()

  var date = new Date(0)
  date.setFullYear(year, month, day - 1)
  date.setHours(23, 59, 59, 999)
  return date
}

module.exports = endOfYesterday


/***/ }),

/***/ "../../node_modules/date-fns/format/index.js":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/format/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getDayOfYear = __webpack_require__(/*! ../get_day_of_year/index.js */ "../../node_modules/date-fns/get_day_of_year/index.js")
var getISOWeek = __webpack_require__(/*! ../get_iso_week/index.js */ "../../node_modules/date-fns/get_iso_week/index.js")
var getISOYear = __webpack_require__(/*! ../get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js")
var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var isValid = __webpack_require__(/*! ../is_valid/index.js */ "../../node_modules/date-fns/is_valid/index.js")
var enLocale = __webpack_require__(/*! ../locale/en/index.js */ "../../node_modules/date-fns/locale/en/index.js")

/**
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format.
 *
 * Accepted tokens:
 * | Unit                    | Token | Result examples                  |
 * |-------------------------|-------|----------------------------------|
 * | Month                   | M     | 1, 2, ..., 12                    |
 * |                         | Mo    | 1st, 2nd, ..., 12th              |
 * |                         | MM    | 01, 02, ..., 12                  |
 * |                         | MMM   | Jan, Feb, ..., Dec               |
 * |                         | MMMM  | January, February, ..., December |
 * | Quarter                 | Q     | 1, 2, 3, 4                       |
 * |                         | Qo    | 1st, 2nd, 3rd, 4th               |
 * | Day of month            | D     | 1, 2, ..., 31                    |
 * |                         | Do    | 1st, 2nd, ..., 31st              |
 * |                         | DD    | 01, 02, ..., 31                  |
 * | Day of year             | DDD   | 1, 2, ..., 366                   |
 * |                         | DDDo  | 1st, 2nd, ..., 366th             |
 * |                         | DDDD  | 001, 002, ..., 366               |
 * | Day of week             | d     | 0, 1, ..., 6                     |
 * |                         | do    | 0th, 1st, ..., 6th               |
 * |                         | dd    | Su, Mo, ..., Sa                  |
 * |                         | ddd   | Sun, Mon, ..., Sat               |
 * |                         | dddd  | Sunday, Monday, ..., Saturday    |
 * | Day of ISO week         | E     | 1, 2, ..., 7                     |
 * | ISO week                | W     | 1, 2, ..., 53                    |
 * |                         | Wo    | 1st, 2nd, ..., 53rd              |
 * |                         | WW    | 01, 02, ..., 53                  |
 * | Year                    | YY    | 00, 01, ..., 99                  |
 * |                         | YYYY  | 1900, 1901, ..., 2099            |
 * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |
 * |                         | GGGG  | 1900, 1901, ..., 2099            |
 * | AM/PM                   | A     | AM, PM                           |
 * |                         | a     | am, pm                           |
 * |                         | aa    | a.m., p.m.                       |
 * | Hour                    | H     | 0, 1, ... 23                     |
 * |                         | HH    | 00, 01, ... 23                   |
 * |                         | h     | 1, 2, ..., 12                    |
 * |                         | hh    | 01, 02, ..., 12                  |
 * | Minute                  | m     | 0, 1, ..., 59                    |
 * |                         | mm    | 00, 01, ..., 59                  |
 * | Second                  | s     | 0, 1, ..., 59                    |
 * |                         | ss    | 00, 01, ..., 59                  |
 * | 1/10 of second          | S     | 0, 1, ..., 9                     |
 * | 1/100 of second         | SS    | 00, 01, ..., 99                  |
 * | Millisecond             | SSS   | 000, 001, ..., 999               |
 * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |
 * |                         | ZZ    | -0100, +0000, ..., +1200         |
 * | Seconds timestamp       | X     | 512969520                        |
 * | Milliseconds timestamp  | x     | 512969520900                     |
 *
 * The characters wrapped in square brackets are escaped.
 *
 * The result may vary by locale.
 *
 * @param {Date|String|Number} date - the original date
 * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens
 * @param {Object} [options] - the object with options
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the formatted date string
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(
 *   new Date(2014, 1, 11),
 *   'MM/DD/YYYY'
 * )
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * var eoLocale = require('date-fns/locale/eo')
 * var result = format(
 *   new Date(2014, 6, 2),
 *   'Do [de] MMMM YYYY',
 *   {locale: eoLocale}
 * )
 * //=> '2-a de julio 2014'
 */
function format (dirtyDate, dirtyFormatStr, dirtyOptions) {
  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'
  var options = dirtyOptions || {}

  var locale = options.locale
  var localeFormatters = enLocale.format.formatters
  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp
  if (locale && locale.format && locale.format.formatters) {
    localeFormatters = locale.format.formatters

    if (locale.format.formattingTokensRegExp) {
      formattingTokensRegExp = locale.format.formattingTokensRegExp
    }
  }

  var date = parse(dirtyDate)

  if (!isValid(date)) {
    return 'Invalid Date'
  }

  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)

  return formatFn(date)
}

var formatters = {
  // Month: 1, 2, ..., 12
  'M': function (date) {
    return date.getMonth() + 1
  },

  // Month: 01, 02, ..., 12
  'MM': function (date) {
    return addLeadingZeros(date.getMonth() + 1, 2)
  },

  // Quarter: 1, 2, 3, 4
  'Q': function (date) {
    return Math.ceil((date.getMonth() + 1) / 3)
  },

  // Day of month: 1, 2, ..., 31
  'D': function (date) {
    return date.getDate()
  },

  // Day of month: 01, 02, ..., 31
  'DD': function (date) {
    return addLeadingZeros(date.getDate(), 2)
  },

  // Day of year: 1, 2, ..., 366
  'DDD': function (date) {
    return getDayOfYear(date)
  },

  // Day of year: 001, 002, ..., 366
  'DDDD': function (date) {
    return addLeadingZeros(getDayOfYear(date), 3)
  },

  // Day of week: 0, 1, ..., 6
  'd': function (date) {
    return date.getDay()
  },

  // Day of ISO week: 1, 2, ..., 7
  'E': function (date) {
    return date.getDay() || 7
  },

  // ISO week: 1, 2, ..., 53
  'W': function (date) {
    return getISOWeek(date)
  },

  // ISO week: 01, 02, ..., 53
  'WW': function (date) {
    return addLeadingZeros(getISOWeek(date), 2)
  },

  // Year: 00, 01, ..., 99
  'YY': function (date) {
    return addLeadingZeros(date.getFullYear(), 4).substr(2)
  },

  // Year: 1900, 1901, ..., 2099
  'YYYY': function (date) {
    return addLeadingZeros(date.getFullYear(), 4)
  },

  // ISO week-numbering year: 00, 01, ..., 99
  'GG': function (date) {
    return String(getISOYear(date)).substr(2)
  },

  // ISO week-numbering year: 1900, 1901, ..., 2099
  'GGGG': function (date) {
    return getISOYear(date)
  },

  // Hour: 0, 1, ... 23
  'H': function (date) {
    return date.getHours()
  },

  // Hour: 00, 01, ..., 23
  'HH': function (date) {
    return addLeadingZeros(date.getHours(), 2)
  },

  // Hour: 1, 2, ..., 12
  'h': function (date) {
    var hours = date.getHours()
    if (hours === 0) {
      return 12
    } else if (hours > 12) {
      return hours % 12
    } else {
      return hours
    }
  },

  // Hour: 01, 02, ..., 12
  'hh': function (date) {
    return addLeadingZeros(formatters['h'](date), 2)
  },

  // Minute: 0, 1, ..., 59
  'm': function (date) {
    return date.getMinutes()
  },

  // Minute: 00, 01, ..., 59
  'mm': function (date) {
    return addLeadingZeros(date.getMinutes(), 2)
  },

  // Second: 0, 1, ..., 59
  's': function (date) {
    return date.getSeconds()
  },

  // Second: 00, 01, ..., 59
  'ss': function (date) {
    return addLeadingZeros(date.getSeconds(), 2)
  },

  // 1/10 of second: 0, 1, ..., 9
  'S': function (date) {
    return Math.floor(date.getMilliseconds() / 100)
  },

  // 1/100 of second: 00, 01, ..., 99
  'SS': function (date) {
    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)
  },

  // Millisecond: 000, 001, ..., 999
  'SSS': function (date) {
    return addLeadingZeros(date.getMilliseconds(), 3)
  },

  // Timezone: -01:00, +00:00, ... +12:00
  'Z': function (date) {
    return formatTimezone(date.getTimezoneOffset(), ':')
  },

  // Timezone: -0100, +0000, ... +1200
  'ZZ': function (date) {
    return formatTimezone(date.getTimezoneOffset())
  },

  // Seconds timestamp: 512969520
  'X': function (date) {
    return Math.floor(date.getTime() / 1000)
  },

  // Milliseconds timestamp: 512969520900
  'x': function (date) {
    return date.getTime()
  }
}

function buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {
  var array = formatStr.match(formattingTokensRegExp)
  var length = array.length

  var i
  var formatter
  for (i = 0; i < length; i++) {
    formatter = localeFormatters[array[i]] || formatters[array[i]]
    if (formatter) {
      array[i] = formatter
    } else {
      array[i] = removeFormattingTokens(array[i])
    }
  }

  return function (date) {
    var output = ''
    for (var i = 0; i < length; i++) {
      if (array[i] instanceof Function) {
        output += array[i](date, formatters)
      } else {
        output += array[i]
      }
    }
    return output
  }
}

function removeFormattingTokens (input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|]$/g, '')
  }
  return input.replace(/\\/g, '')
}

function formatTimezone (offset, delimeter) {
  delimeter = delimeter || ''
  var sign = offset > 0 ? '-' : '+'
  var absOffset = Math.abs(offset)
  var hours = Math.floor(absOffset / 60)
  var minutes = absOffset % 60
  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)
}

function addLeadingZeros (number, targetLength) {
  var output = Math.abs(number).toString()
  while (output.length < targetLength) {
    output = '0' + output
  }
  return output
}

module.exports = format


/***/ }),

/***/ "../../node_modules/date-fns/get_date/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_date/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of month
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * var result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
function getDate (dirtyDate) {
  var date = parse(dirtyDate)
  var dayOfMonth = date.getDate()
  return dayOfMonth
}

module.exports = getDate


/***/ }),

/***/ "../../node_modules/date-fns/get_day/index.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_day/index.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of week
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * var result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */
function getDay (dirtyDate) {
  var date = parse(dirtyDate)
  var day = date.getDay()
  return day
}

module.exports = getDay


/***/ }),

/***/ "../../node_modules/date-fns/get_day_of_year/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_day_of_year/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var startOfYear = __webpack_require__(/*! ../start_of_year/index.js */ "../../node_modules/date-fns/start_of_year/index.js")
var differenceInCalendarDays = __webpack_require__(/*! ../difference_in_calendar_days/index.js */ "../../node_modules/date-fns/difference_in_calendar_days/index.js")

/**
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * var result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
function getDayOfYear (dirtyDate) {
  var date = parse(dirtyDate)
  var diff = differenceInCalendarDays(date, startOfYear(date))
  var dayOfYear = diff + 1
  return dayOfYear
}

module.exports = getDayOfYear


/***/ }),

/***/ "../../node_modules/date-fns/get_days_in_month/index.js":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_days_in_month/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * var result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth (dirtyDate) {
  var date = parse(dirtyDate)
  var year = date.getFullYear()
  var monthIndex = date.getMonth()
  var lastDayOfMonth = new Date(0)
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0)
  lastDayOfMonth.setHours(0, 0, 0, 0)
  return lastDayOfMonth.getDate()
}

module.exports = getDaysInMonth


/***/ }),

/***/ "../../node_modules/date-fns/get_days_in_year/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_days_in_year/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isLeapYear = __webpack_require__(/*! ../is_leap_year/index.js */ "../../node_modules/date-fns/is_leap_year/index.js")

/**
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the number of days in a year
 *
 * @example
 * // How many days are in 2012?
 * var result = getDaysInYear(new Date(2012, 0, 1))
 * //=> 366
 */
function getDaysInYear (dirtyDate) {
  return isLeapYear(dirtyDate) ? 366 : 365
}

module.exports = getDaysInYear


/***/ }),

/***/ "../../node_modules/date-fns/get_hours/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_hours/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the hours
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * var result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
function getHours (dirtyDate) {
  var date = parse(dirtyDate)
  var hours = date.getHours()
  return hours
}

module.exports = getHours


/***/ }),

/***/ "../../node_modules/date-fns/get_iso_day/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_iso_day/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * var result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */
function getISODay (dirtyDate) {
  var date = parse(dirtyDate)
  var day = date.getDay()

  if (day === 0) {
    day = 7
  }

  return day
}

module.exports = getISODay


/***/ }),

/***/ "../../node_modules/date-fns/get_iso_week/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_iso_week/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var startOfISOWeek = __webpack_require__(/*! ../start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js")
var startOfISOYear = __webpack_require__(/*! ../start_of_iso_year/index.js */ "../../node_modules/date-fns/start_of_iso_year/index.js")

var MILLISECONDS_IN_WEEK = 604800000

/**
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * var result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek (dirtyDate) {
  var date = parse(dirtyDate)
  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1
}

module.exports = getISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/get_iso_weeks_in_year/index.js":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_iso_weeks_in_year/index.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfISOYear = __webpack_require__(/*! ../start_of_iso_year/index.js */ "../../node_modules/date-fns/start_of_iso_year/index.js")
var addWeeks = __webpack_require__(/*! ../add_weeks/index.js */ "../../node_modules/date-fns/add_weeks/index.js")

var MILLISECONDS_IN_WEEK = 604800000

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * @description
 * Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the number of ISO weeks in a year
 *
 * @example
 * // How many weeks are in ISO week-numbering year 2015?
 * var result = getISOWeeksInYear(new Date(2015, 1, 11))
 * //=> 53
 */
function getISOWeeksInYear (dirtyDate) {
  var thisYear = startOfISOYear(dirtyDate)
  var nextYear = startOfISOYear(addWeeks(thisYear, 60))
  var diff = nextYear.valueOf() - thisYear.valueOf()
  // Round the number of weeks to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK)
}

module.exports = getISOWeeksInYear


/***/ }),

/***/ "../../node_modules/date-fns/get_iso_year/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_iso_year/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var startOfISOWeek = __webpack_require__(/*! ../start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * var result = getISOYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOYear (dirtyDate) {
  var date = parse(dirtyDate)
  var year = date.getFullYear()

  var fourthOfJanuaryOfNextYear = new Date(0)
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)

  var fourthOfJanuaryOfThisYear = new Date(0)
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year
  } else {
    return year - 1
  }
}

module.exports = getISOYear


/***/ }),

/***/ "../../node_modules/date-fns/get_milliseconds/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_milliseconds/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Millisecond Helpers
 * @summary Get the milliseconds of the given date.
 *
 * @description
 * Get the milliseconds of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the milliseconds
 *
 * @example
 * // Get the milliseconds of 29 February 2012 11:45:05.123:
 * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 123
 */
function getMilliseconds (dirtyDate) {
  var date = parse(dirtyDate)
  var milliseconds = date.getMilliseconds()
  return milliseconds
}

module.exports = getMilliseconds


/***/ }),

/***/ "../../node_modules/date-fns/get_minutes/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_minutes/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the minutes
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
function getMinutes (dirtyDate) {
  var date = parse(dirtyDate)
  var minutes = date.getMinutes()
  return minutes
}

module.exports = getMinutes


/***/ }),

/***/ "../../node_modules/date-fns/get_month/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_month/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the month
 *
 * @example
 * // Which month is 29 February 2012?
 * var result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
function getMonth (dirtyDate) {
  var date = parse(dirtyDate)
  var month = date.getMonth()
  return month
}

module.exports = getMonth


/***/ }),

/***/ "../../node_modules/date-fns/get_overlapping_days_in_ranges/index.js":
/*!**************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_overlapping_days_in_ranges/index.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000

/**
 * @category Range Helpers
 * @summary Get the number of days that overlap in two date ranges
 *
 * @description
 * Get the number of days that overlap in two date ranges
 *
 * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
 * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
 * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
 * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
 * @returns {Number} the number of days that overlap in two date ranges
 * @throws {Error} startDate of a date range cannot be after its endDate
 *
 * @example
 * // For overlapping date ranges adds 1 for each started overlapping day:
 * getOverlappingDaysInRanges(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
 * )
 * //=> 3
 *
 * @example
 * // For non-overlapping date ranges returns 0:
 * getOverlappingDaysInRanges(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
 * )
 * //=> 0
 */
function getOverlappingDaysInRanges (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()
  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()
  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()
  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()

  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
    throw new Error('The start of the range cannot be after the end of the range')
  }

  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime

  if (!isOverlapping) {
    return 0
  }

  var overlapStartDate = comparedStartTime < initialStartTime
    ? initialStartTime
    : comparedStartTime

  var overlapEndDate = comparedEndTime > initialEndTime
    ? initialEndTime
    : comparedEndTime

  var differenceInMs = overlapEndDate - overlapStartDate

  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY)
}

module.exports = getOverlappingDaysInRanges


/***/ }),

/***/ "../../node_modules/date-fns/get_quarter/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_quarter/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the quarter
 *
 * @example
 * // Which quarter is 2 July 2014?
 * var result = getQuarter(new Date(2014, 6, 2))
 * //=> 3
 */
function getQuarter (dirtyDate) {
  var date = parse(dirtyDate)
  var quarter = Math.floor(date.getMonth() / 3) + 1
  return quarter
}

module.exports = getQuarter


/***/ }),

/***/ "../../node_modules/date-fns/get_seconds/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_seconds/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the seconds
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
function getSeconds (dirtyDate) {
  var date = parse(dirtyDate)
  var seconds = date.getSeconds()
  return seconds
}

module.exports = getSeconds


/***/ }),

/***/ "../../node_modules/date-fns/get_time/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_time/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
function getTime (dirtyDate) {
  var date = parse(dirtyDate)
  var timestamp = date.getTime()
  return timestamp
}

module.exports = getTime


/***/ }),

/***/ "../../node_modules/date-fns/get_year/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/get_year/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the year
 *
 * @example
 * // Which year is 2 July 2014?
 * var result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
function getYear (dirtyDate) {
  var date = parse(dirtyDate)
  var year = date.getFullYear()
  return year
}

module.exports = getYear


/***/ }),

/***/ "../../node_modules/date-fns/index.js":
/*!*******************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  addDays: __webpack_require__(/*! ./add_days/index.js */ "../../node_modules/date-fns/add_days/index.js"),
  addHours: __webpack_require__(/*! ./add_hours/index.js */ "../../node_modules/date-fns/add_hours/index.js"),
  addISOYears: __webpack_require__(/*! ./add_iso_years/index.js */ "../../node_modules/date-fns/add_iso_years/index.js"),
  addMilliseconds: __webpack_require__(/*! ./add_milliseconds/index.js */ "../../node_modules/date-fns/add_milliseconds/index.js"),
  addMinutes: __webpack_require__(/*! ./add_minutes/index.js */ "../../node_modules/date-fns/add_minutes/index.js"),
  addMonths: __webpack_require__(/*! ./add_months/index.js */ "../../node_modules/date-fns/add_months/index.js"),
  addQuarters: __webpack_require__(/*! ./add_quarters/index.js */ "../../node_modules/date-fns/add_quarters/index.js"),
  addSeconds: __webpack_require__(/*! ./add_seconds/index.js */ "../../node_modules/date-fns/add_seconds/index.js"),
  addWeeks: __webpack_require__(/*! ./add_weeks/index.js */ "../../node_modules/date-fns/add_weeks/index.js"),
  addYears: __webpack_require__(/*! ./add_years/index.js */ "../../node_modules/date-fns/add_years/index.js"),
  areRangesOverlapping: __webpack_require__(/*! ./are_ranges_overlapping/index.js */ "../../node_modules/date-fns/are_ranges_overlapping/index.js"),
  closestIndexTo: __webpack_require__(/*! ./closest_index_to/index.js */ "../../node_modules/date-fns/closest_index_to/index.js"),
  closestTo: __webpack_require__(/*! ./closest_to/index.js */ "../../node_modules/date-fns/closest_to/index.js"),
  compareAsc: __webpack_require__(/*! ./compare_asc/index.js */ "../../node_modules/date-fns/compare_asc/index.js"),
  compareDesc: __webpack_require__(/*! ./compare_desc/index.js */ "../../node_modules/date-fns/compare_desc/index.js"),
  differenceInCalendarDays: __webpack_require__(/*! ./difference_in_calendar_days/index.js */ "../../node_modules/date-fns/difference_in_calendar_days/index.js"),
  differenceInCalendarISOWeeks: __webpack_require__(/*! ./difference_in_calendar_iso_weeks/index.js */ "../../node_modules/date-fns/difference_in_calendar_iso_weeks/index.js"),
  differenceInCalendarISOYears: __webpack_require__(/*! ./difference_in_calendar_iso_years/index.js */ "../../node_modules/date-fns/difference_in_calendar_iso_years/index.js"),
  differenceInCalendarMonths: __webpack_require__(/*! ./difference_in_calendar_months/index.js */ "../../node_modules/date-fns/difference_in_calendar_months/index.js"),
  differenceInCalendarQuarters: __webpack_require__(/*! ./difference_in_calendar_quarters/index.js */ "../../node_modules/date-fns/difference_in_calendar_quarters/index.js"),
  differenceInCalendarWeeks: __webpack_require__(/*! ./difference_in_calendar_weeks/index.js */ "../../node_modules/date-fns/difference_in_calendar_weeks/index.js"),
  differenceInCalendarYears: __webpack_require__(/*! ./difference_in_calendar_years/index.js */ "../../node_modules/date-fns/difference_in_calendar_years/index.js"),
  differenceInDays: __webpack_require__(/*! ./difference_in_days/index.js */ "../../node_modules/date-fns/difference_in_days/index.js"),
  differenceInHours: __webpack_require__(/*! ./difference_in_hours/index.js */ "../../node_modules/date-fns/difference_in_hours/index.js"),
  differenceInISOYears: __webpack_require__(/*! ./difference_in_iso_years/index.js */ "../../node_modules/date-fns/difference_in_iso_years/index.js"),
  differenceInMilliseconds: __webpack_require__(/*! ./difference_in_milliseconds/index.js */ "../../node_modules/date-fns/difference_in_milliseconds/index.js"),
  differenceInMinutes: __webpack_require__(/*! ./difference_in_minutes/index.js */ "../../node_modules/date-fns/difference_in_minutes/index.js"),
  differenceInMonths: __webpack_require__(/*! ./difference_in_months/index.js */ "../../node_modules/date-fns/difference_in_months/index.js"),
  differenceInQuarters: __webpack_require__(/*! ./difference_in_quarters/index.js */ "../../node_modules/date-fns/difference_in_quarters/index.js"),
  differenceInSeconds: __webpack_require__(/*! ./difference_in_seconds/index.js */ "../../node_modules/date-fns/difference_in_seconds/index.js"),
  differenceInWeeks: __webpack_require__(/*! ./difference_in_weeks/index.js */ "../../node_modules/date-fns/difference_in_weeks/index.js"),
  differenceInYears: __webpack_require__(/*! ./difference_in_years/index.js */ "../../node_modules/date-fns/difference_in_years/index.js"),
  distanceInWords: __webpack_require__(/*! ./distance_in_words/index.js */ "../../node_modules/date-fns/distance_in_words/index.js"),
  distanceInWordsStrict: __webpack_require__(/*! ./distance_in_words_strict/index.js */ "../../node_modules/date-fns/distance_in_words_strict/index.js"),
  distanceInWordsToNow: __webpack_require__(/*! ./distance_in_words_to_now/index.js */ "../../node_modules/date-fns/distance_in_words_to_now/index.js"),
  eachDay: __webpack_require__(/*! ./each_day/index.js */ "../../node_modules/date-fns/each_day/index.js"),
  endOfDay: __webpack_require__(/*! ./end_of_day/index.js */ "../../node_modules/date-fns/end_of_day/index.js"),
  endOfHour: __webpack_require__(/*! ./end_of_hour/index.js */ "../../node_modules/date-fns/end_of_hour/index.js"),
  endOfISOWeek: __webpack_require__(/*! ./end_of_iso_week/index.js */ "../../node_modules/date-fns/end_of_iso_week/index.js"),
  endOfISOYear: __webpack_require__(/*! ./end_of_iso_year/index.js */ "../../node_modules/date-fns/end_of_iso_year/index.js"),
  endOfMinute: __webpack_require__(/*! ./end_of_minute/index.js */ "../../node_modules/date-fns/end_of_minute/index.js"),
  endOfMonth: __webpack_require__(/*! ./end_of_month/index.js */ "../../node_modules/date-fns/end_of_month/index.js"),
  endOfQuarter: __webpack_require__(/*! ./end_of_quarter/index.js */ "../../node_modules/date-fns/end_of_quarter/index.js"),
  endOfSecond: __webpack_require__(/*! ./end_of_second/index.js */ "../../node_modules/date-fns/end_of_second/index.js"),
  endOfToday: __webpack_require__(/*! ./end_of_today/index.js */ "../../node_modules/date-fns/end_of_today/index.js"),
  endOfTomorrow: __webpack_require__(/*! ./end_of_tomorrow/index.js */ "../../node_modules/date-fns/end_of_tomorrow/index.js"),
  endOfWeek: __webpack_require__(/*! ./end_of_week/index.js */ "../../node_modules/date-fns/end_of_week/index.js"),
  endOfYear: __webpack_require__(/*! ./end_of_year/index.js */ "../../node_modules/date-fns/end_of_year/index.js"),
  endOfYesterday: __webpack_require__(/*! ./end_of_yesterday/index.js */ "../../node_modules/date-fns/end_of_yesterday/index.js"),
  format: __webpack_require__(/*! ./format/index.js */ "../../node_modules/date-fns/format/index.js"),
  getDate: __webpack_require__(/*! ./get_date/index.js */ "../../node_modules/date-fns/get_date/index.js"),
  getDay: __webpack_require__(/*! ./get_day/index.js */ "../../node_modules/date-fns/get_day/index.js"),
  getDayOfYear: __webpack_require__(/*! ./get_day_of_year/index.js */ "../../node_modules/date-fns/get_day_of_year/index.js"),
  getDaysInMonth: __webpack_require__(/*! ./get_days_in_month/index.js */ "../../node_modules/date-fns/get_days_in_month/index.js"),
  getDaysInYear: __webpack_require__(/*! ./get_days_in_year/index.js */ "../../node_modules/date-fns/get_days_in_year/index.js"),
  getHours: __webpack_require__(/*! ./get_hours/index.js */ "../../node_modules/date-fns/get_hours/index.js"),
  getISODay: __webpack_require__(/*! ./get_iso_day/index.js */ "../../node_modules/date-fns/get_iso_day/index.js"),
  getISOWeek: __webpack_require__(/*! ./get_iso_week/index.js */ "../../node_modules/date-fns/get_iso_week/index.js"),
  getISOWeeksInYear: __webpack_require__(/*! ./get_iso_weeks_in_year/index.js */ "../../node_modules/date-fns/get_iso_weeks_in_year/index.js"),
  getISOYear: __webpack_require__(/*! ./get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js"),
  getMilliseconds: __webpack_require__(/*! ./get_milliseconds/index.js */ "../../node_modules/date-fns/get_milliseconds/index.js"),
  getMinutes: __webpack_require__(/*! ./get_minutes/index.js */ "../../node_modules/date-fns/get_minutes/index.js"),
  getMonth: __webpack_require__(/*! ./get_month/index.js */ "../../node_modules/date-fns/get_month/index.js"),
  getOverlappingDaysInRanges: __webpack_require__(/*! ./get_overlapping_days_in_ranges/index.js */ "../../node_modules/date-fns/get_overlapping_days_in_ranges/index.js"),
  getQuarter: __webpack_require__(/*! ./get_quarter/index.js */ "../../node_modules/date-fns/get_quarter/index.js"),
  getSeconds: __webpack_require__(/*! ./get_seconds/index.js */ "../../node_modules/date-fns/get_seconds/index.js"),
  getTime: __webpack_require__(/*! ./get_time/index.js */ "../../node_modules/date-fns/get_time/index.js"),
  getYear: __webpack_require__(/*! ./get_year/index.js */ "../../node_modules/date-fns/get_year/index.js"),
  isAfter: __webpack_require__(/*! ./is_after/index.js */ "../../node_modules/date-fns/is_after/index.js"),
  isBefore: __webpack_require__(/*! ./is_before/index.js */ "../../node_modules/date-fns/is_before/index.js"),
  isDate: __webpack_require__(/*! ./is_date/index.js */ "../../node_modules/date-fns/is_date/index.js"),
  isEqual: __webpack_require__(/*! ./is_equal/index.js */ "../../node_modules/date-fns/is_equal/index.js"),
  isFirstDayOfMonth: __webpack_require__(/*! ./is_first_day_of_month/index.js */ "../../node_modules/date-fns/is_first_day_of_month/index.js"),
  isFriday: __webpack_require__(/*! ./is_friday/index.js */ "../../node_modules/date-fns/is_friday/index.js"),
  isFuture: __webpack_require__(/*! ./is_future/index.js */ "../../node_modules/date-fns/is_future/index.js"),
  isLastDayOfMonth: __webpack_require__(/*! ./is_last_day_of_month/index.js */ "../../node_modules/date-fns/is_last_day_of_month/index.js"),
  isLeapYear: __webpack_require__(/*! ./is_leap_year/index.js */ "../../node_modules/date-fns/is_leap_year/index.js"),
  isMonday: __webpack_require__(/*! ./is_monday/index.js */ "../../node_modules/date-fns/is_monday/index.js"),
  isPast: __webpack_require__(/*! ./is_past/index.js */ "../../node_modules/date-fns/is_past/index.js"),
  isSameDay: __webpack_require__(/*! ./is_same_day/index.js */ "../../node_modules/date-fns/is_same_day/index.js"),
  isSameHour: __webpack_require__(/*! ./is_same_hour/index.js */ "../../node_modules/date-fns/is_same_hour/index.js"),
  isSameISOWeek: __webpack_require__(/*! ./is_same_iso_week/index.js */ "../../node_modules/date-fns/is_same_iso_week/index.js"),
  isSameISOYear: __webpack_require__(/*! ./is_same_iso_year/index.js */ "../../node_modules/date-fns/is_same_iso_year/index.js"),
  isSameMinute: __webpack_require__(/*! ./is_same_minute/index.js */ "../../node_modules/date-fns/is_same_minute/index.js"),
  isSameMonth: __webpack_require__(/*! ./is_same_month/index.js */ "../../node_modules/date-fns/is_same_month/index.js"),
  isSameQuarter: __webpack_require__(/*! ./is_same_quarter/index.js */ "../../node_modules/date-fns/is_same_quarter/index.js"),
  isSameSecond: __webpack_require__(/*! ./is_same_second/index.js */ "../../node_modules/date-fns/is_same_second/index.js"),
  isSameWeek: __webpack_require__(/*! ./is_same_week/index.js */ "../../node_modules/date-fns/is_same_week/index.js"),
  isSameYear: __webpack_require__(/*! ./is_same_year/index.js */ "../../node_modules/date-fns/is_same_year/index.js"),
  isSaturday: __webpack_require__(/*! ./is_saturday/index.js */ "../../node_modules/date-fns/is_saturday/index.js"),
  isSunday: __webpack_require__(/*! ./is_sunday/index.js */ "../../node_modules/date-fns/is_sunday/index.js"),
  isThisHour: __webpack_require__(/*! ./is_this_hour/index.js */ "../../node_modules/date-fns/is_this_hour/index.js"),
  isThisISOWeek: __webpack_require__(/*! ./is_this_iso_week/index.js */ "../../node_modules/date-fns/is_this_iso_week/index.js"),
  isThisISOYear: __webpack_require__(/*! ./is_this_iso_year/index.js */ "../../node_modules/date-fns/is_this_iso_year/index.js"),
  isThisMinute: __webpack_require__(/*! ./is_this_minute/index.js */ "../../node_modules/date-fns/is_this_minute/index.js"),
  isThisMonth: __webpack_require__(/*! ./is_this_month/index.js */ "../../node_modules/date-fns/is_this_month/index.js"),
  isThisQuarter: __webpack_require__(/*! ./is_this_quarter/index.js */ "../../node_modules/date-fns/is_this_quarter/index.js"),
  isThisSecond: __webpack_require__(/*! ./is_this_second/index.js */ "../../node_modules/date-fns/is_this_second/index.js"),
  isThisWeek: __webpack_require__(/*! ./is_this_week/index.js */ "../../node_modules/date-fns/is_this_week/index.js"),
  isThisYear: __webpack_require__(/*! ./is_this_year/index.js */ "../../node_modules/date-fns/is_this_year/index.js"),
  isThursday: __webpack_require__(/*! ./is_thursday/index.js */ "../../node_modules/date-fns/is_thursday/index.js"),
  isToday: __webpack_require__(/*! ./is_today/index.js */ "../../node_modules/date-fns/is_today/index.js"),
  isTomorrow: __webpack_require__(/*! ./is_tomorrow/index.js */ "../../node_modules/date-fns/is_tomorrow/index.js"),
  isTuesday: __webpack_require__(/*! ./is_tuesday/index.js */ "../../node_modules/date-fns/is_tuesday/index.js"),
  isValid: __webpack_require__(/*! ./is_valid/index.js */ "../../node_modules/date-fns/is_valid/index.js"),
  isWednesday: __webpack_require__(/*! ./is_wednesday/index.js */ "../../node_modules/date-fns/is_wednesday/index.js"),
  isWeekend: __webpack_require__(/*! ./is_weekend/index.js */ "../../node_modules/date-fns/is_weekend/index.js"),
  isWithinRange: __webpack_require__(/*! ./is_within_range/index.js */ "../../node_modules/date-fns/is_within_range/index.js"),
  isYesterday: __webpack_require__(/*! ./is_yesterday/index.js */ "../../node_modules/date-fns/is_yesterday/index.js"),
  lastDayOfISOWeek: __webpack_require__(/*! ./last_day_of_iso_week/index.js */ "../../node_modules/date-fns/last_day_of_iso_week/index.js"),
  lastDayOfISOYear: __webpack_require__(/*! ./last_day_of_iso_year/index.js */ "../../node_modules/date-fns/last_day_of_iso_year/index.js"),
  lastDayOfMonth: __webpack_require__(/*! ./last_day_of_month/index.js */ "../../node_modules/date-fns/last_day_of_month/index.js"),
  lastDayOfQuarter: __webpack_require__(/*! ./last_day_of_quarter/index.js */ "../../node_modules/date-fns/last_day_of_quarter/index.js"),
  lastDayOfWeek: __webpack_require__(/*! ./last_day_of_week/index.js */ "../../node_modules/date-fns/last_day_of_week/index.js"),
  lastDayOfYear: __webpack_require__(/*! ./last_day_of_year/index.js */ "../../node_modules/date-fns/last_day_of_year/index.js"),
  max: __webpack_require__(/*! ./max/index.js */ "../../node_modules/date-fns/max/index.js"),
  min: __webpack_require__(/*! ./min/index.js */ "../../node_modules/date-fns/min/index.js"),
  parse: __webpack_require__(/*! ./parse/index.js */ "../../node_modules/date-fns/parse/index.js"),
  setDate: __webpack_require__(/*! ./set_date/index.js */ "../../node_modules/date-fns/set_date/index.js"),
  setDay: __webpack_require__(/*! ./set_day/index.js */ "../../node_modules/date-fns/set_day/index.js"),
  setDayOfYear: __webpack_require__(/*! ./set_day_of_year/index.js */ "../../node_modules/date-fns/set_day_of_year/index.js"),
  setHours: __webpack_require__(/*! ./set_hours/index.js */ "../../node_modules/date-fns/set_hours/index.js"),
  setISODay: __webpack_require__(/*! ./set_iso_day/index.js */ "../../node_modules/date-fns/set_iso_day/index.js"),
  setISOWeek: __webpack_require__(/*! ./set_iso_week/index.js */ "../../node_modules/date-fns/set_iso_week/index.js"),
  setISOYear: __webpack_require__(/*! ./set_iso_year/index.js */ "../../node_modules/date-fns/set_iso_year/index.js"),
  setMilliseconds: __webpack_require__(/*! ./set_milliseconds/index.js */ "../../node_modules/date-fns/set_milliseconds/index.js"),
  setMinutes: __webpack_require__(/*! ./set_minutes/index.js */ "../../node_modules/date-fns/set_minutes/index.js"),
  setMonth: __webpack_require__(/*! ./set_month/index.js */ "../../node_modules/date-fns/set_month/index.js"),
  setQuarter: __webpack_require__(/*! ./set_quarter/index.js */ "../../node_modules/date-fns/set_quarter/index.js"),
  setSeconds: __webpack_require__(/*! ./set_seconds/index.js */ "../../node_modules/date-fns/set_seconds/index.js"),
  setYear: __webpack_require__(/*! ./set_year/index.js */ "../../node_modules/date-fns/set_year/index.js"),
  startOfDay: __webpack_require__(/*! ./start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js"),
  startOfHour: __webpack_require__(/*! ./start_of_hour/index.js */ "../../node_modules/date-fns/start_of_hour/index.js"),
  startOfISOWeek: __webpack_require__(/*! ./start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js"),
  startOfISOYear: __webpack_require__(/*! ./start_of_iso_year/index.js */ "../../node_modules/date-fns/start_of_iso_year/index.js"),
  startOfMinute: __webpack_require__(/*! ./start_of_minute/index.js */ "../../node_modules/date-fns/start_of_minute/index.js"),
  startOfMonth: __webpack_require__(/*! ./start_of_month/index.js */ "../../node_modules/date-fns/start_of_month/index.js"),
  startOfQuarter: __webpack_require__(/*! ./start_of_quarter/index.js */ "../../node_modules/date-fns/start_of_quarter/index.js"),
  startOfSecond: __webpack_require__(/*! ./start_of_second/index.js */ "../../node_modules/date-fns/start_of_second/index.js"),
  startOfToday: __webpack_require__(/*! ./start_of_today/index.js */ "../../node_modules/date-fns/start_of_today/index.js"),
  startOfTomorrow: __webpack_require__(/*! ./start_of_tomorrow/index.js */ "../../node_modules/date-fns/start_of_tomorrow/index.js"),
  startOfWeek: __webpack_require__(/*! ./start_of_week/index.js */ "../../node_modules/date-fns/start_of_week/index.js"),
  startOfYear: __webpack_require__(/*! ./start_of_year/index.js */ "../../node_modules/date-fns/start_of_year/index.js"),
  startOfYesterday: __webpack_require__(/*! ./start_of_yesterday/index.js */ "../../node_modules/date-fns/start_of_yesterday/index.js"),
  subDays: __webpack_require__(/*! ./sub_days/index.js */ "../../node_modules/date-fns/sub_days/index.js"),
  subHours: __webpack_require__(/*! ./sub_hours/index.js */ "../../node_modules/date-fns/sub_hours/index.js"),
  subISOYears: __webpack_require__(/*! ./sub_iso_years/index.js */ "../../node_modules/date-fns/sub_iso_years/index.js"),
  subMilliseconds: __webpack_require__(/*! ./sub_milliseconds/index.js */ "../../node_modules/date-fns/sub_milliseconds/index.js"),
  subMinutes: __webpack_require__(/*! ./sub_minutes/index.js */ "../../node_modules/date-fns/sub_minutes/index.js"),
  subMonths: __webpack_require__(/*! ./sub_months/index.js */ "../../node_modules/date-fns/sub_months/index.js"),
  subQuarters: __webpack_require__(/*! ./sub_quarters/index.js */ "../../node_modules/date-fns/sub_quarters/index.js"),
  subSeconds: __webpack_require__(/*! ./sub_seconds/index.js */ "../../node_modules/date-fns/sub_seconds/index.js"),
  subWeeks: __webpack_require__(/*! ./sub_weeks/index.js */ "../../node_modules/date-fns/sub_weeks/index.js"),
  subYears: __webpack_require__(/*! ./sub_years/index.js */ "../../node_modules/date-fns/sub_years/index.js")
}


/***/ }),

/***/ "../../node_modules/date-fns/is_after/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_after/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|String|Number} date - the date that should be after the other one to return true
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter (dirtyDate, dirtyDateToCompare) {
  var date = parse(dirtyDate)
  var dateToCompare = parse(dirtyDateToCompare)
  return date.getTime() > dateToCompare.getTime()
}

module.exports = isAfter


/***/ }),

/***/ "../../node_modules/date-fns/is_before/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_before/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param {Date|String|Number} date - the date that should be before the other one to return true
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore (dirtyDate, dirtyDateToCompare) {
  var date = parse(dirtyDate)
  var dateToCompare = parse(dirtyDateToCompare)
  return date.getTime() < dateToCompare.getTime()
}

module.exports = isBefore


/***/ }),

/***/ "../../node_modules/date-fns/is_date/index.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_date/index.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @category Common Helpers
 * @summary Is the given argument an instance of Date?
 *
 * @description
 * Is the given argument an instance of Date?
 *
 * @param {*} argument - the argument to check
 * @returns {Boolean} the given argument is an instance of Date
 *
 * @example
 * // Is 'mayonnaise' a Date?
 * var result = isDate('mayonnaise')
 * //=> false
 */
function isDate (argument) {
  return argument instanceof Date
}

module.exports = isDate


/***/ }),

/***/ "../../node_modules/date-fns/is_equal/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_equal/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @returns {Boolean} the dates are equal
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * var result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0)
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
function isEqual (dirtyLeftDate, dirtyRightDate) {
  var dateLeft = parse(dirtyLeftDate)
  var dateRight = parse(dirtyRightDate)
  return dateLeft.getTime() === dateRight.getTime()
}

module.exports = isEqual


/***/ }),

/***/ "../../node_modules/date-fns/is_first_day_of_month/index.js":
/*!*****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_first_day_of_month/index.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Is the given date the first day of a month?
 *
 * @description
 * Is the given date the first day of a month?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is the first day of a month
 *
 * @example
 * // Is 1 September 2014 the first day of a month?
 * var result = isFirstDayOfMonth(new Date(2014, 8, 1))
 * //=> true
 */
function isFirstDayOfMonth (dirtyDate) {
  return parse(dirtyDate).getDate() === 1
}

module.exports = isFirstDayOfMonth


/***/ }),

/***/ "../../node_modules/date-fns/is_friday/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_friday/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Friday?
 *
 * @description
 * Is the given date Friday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Friday
 *
 * @example
 * // Is 26 September 2014 Friday?
 * var result = isFriday(new Date(2014, 8, 26))
 * //=> true
 */
function isFriday (dirtyDate) {
  return parse(dirtyDate).getDay() === 5
}

module.exports = isFriday


/***/ }),

/***/ "../../node_modules/date-fns/is_future/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_future/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Is the given date in the future?
 *
 * @description
 * Is the given date in the future?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in the future
 *
 * @example
 * // If today is 6 October 2014, is 31 December 2014 in the future?
 * var result = isFuture(new Date(2014, 11, 31))
 * //=> true
 */
function isFuture (dirtyDate) {
  return parse(dirtyDate).getTime() > new Date().getTime()
}

module.exports = isFuture


/***/ }),

/***/ "../../node_modules/date-fns/is_last_day_of_month/index.js":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_last_day_of_month/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var endOfDay = __webpack_require__(/*! ../end_of_day/index.js */ "../../node_modules/date-fns/end_of_day/index.js")
var endOfMonth = __webpack_require__(/*! ../end_of_month/index.js */ "../../node_modules/date-fns/end_of_month/index.js")

/**
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * var result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
function isLastDayOfMonth (dirtyDate) {
  var date = parse(dirtyDate)
  return endOfDay(date).getTime() === endOfMonth(date).getTime()
}

module.exports = isLastDayOfMonth


/***/ }),

/***/ "../../node_modules/date-fns/is_leap_year/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_leap_year/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Is the given date in the leap year?
 *
 * @description
 * Is the given date in the leap year?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in the leap year
 *
 * @example
 * // Is 1 September 2012 in the leap year?
 * var result = isLeapYear(new Date(2012, 8, 1))
 * //=> true
 */
function isLeapYear (dirtyDate) {
  var date = parse(dirtyDate)
  var year = date.getFullYear()
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0
}

module.exports = isLeapYear


/***/ }),

/***/ "../../node_modules/date-fns/is_monday/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_monday/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Monday?
 *
 * @description
 * Is the given date Monday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Monday
 *
 * @example
 * // Is 22 September 2014 Monday?
 * var result = isMonday(new Date(2014, 8, 22))
 * //=> true
 */
function isMonday (dirtyDate) {
  return parse(dirtyDate).getDay() === 1
}

module.exports = isMonday


/***/ }),

/***/ "../../node_modules/date-fns/is_past/index.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_past/index.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Is the given date in the past?
 *
 * @description
 * Is the given date in the past?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in the past
 *
 * @example
 * // If today is 6 October 2014, is 2 July 2014 in the past?
 * var result = isPast(new Date(2014, 6, 2))
 * //=> true
 */
function isPast (dirtyDate) {
  return parse(dirtyDate).getTime() < new Date().getTime()
}

module.exports = isPast


/***/ }),

/***/ "../../node_modules/date-fns/is_same_day/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_day/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfDay = __webpack_require__(/*! ../start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js")

/**
 * @category Day Helpers
 * @summary Are the given dates in the same day?
 *
 * @description
 * Are the given dates in the same day?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(
 *   new Date(2014, 8, 4, 6, 0),
 *   new Date(2014, 8, 4, 18, 0)
 * )
 * //=> true
 */
function isSameDay (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft)
  var dateRightStartOfDay = startOfDay(dirtyDateRight)

  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime()
}

module.exports = isSameDay


/***/ }),

/***/ "../../node_modules/date-fns/is_same_hour/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_hour/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfHour = __webpack_require__(/*! ../start_of_hour/index.js */ "../../node_modules/date-fns/start_of_hour/index.js")

/**
 * @category Hour Helpers
 * @summary Are the given dates in the same hour?
 *
 * @description
 * Are the given dates in the same hour?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same hour
 *
 * @example
 * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?
 * var result = isSameHour(
 *   new Date(2014, 8, 4, 6, 0),
 *   new Date(2014, 8, 4, 6, 30)
 * )
 * //=> true
 */
function isSameHour (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfHour = startOfHour(dirtyDateLeft)
  var dateRightStartOfHour = startOfHour(dirtyDateRight)

  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime()
}

module.exports = isSameHour


/***/ }),

/***/ "../../node_modules/date-fns/is_same_iso_week/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_iso_week/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameWeek = __webpack_require__(/*! ../is_same_week/index.js */ "../../node_modules/date-fns/is_same_week/index.js")

/**
 * @category ISO Week Helpers
 * @summary Are the given dates in the same ISO week?
 *
 * @description
 * Are the given dates in the same ISO week?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same ISO week
 *
 * @example
 * // Are 1 September 2014 and 7 September 2014 in the same ISO week?
 * var result = isSameISOWeek(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 8, 7)
 * )
 * //=> true
 */
function isSameISOWeek (dirtyDateLeft, dirtyDateRight) {
  return isSameWeek(dirtyDateLeft, dirtyDateRight, {weekStartsOn: 1})
}

module.exports = isSameISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/is_same_iso_year/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_iso_year/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfISOYear = __webpack_require__(/*! ../start_of_iso_year/index.js */ "../../node_modules/date-fns/start_of_iso_year/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Are the given dates in the same ISO week-numbering year?
 *
 * @description
 * Are the given dates in the same ISO week-numbering year?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same ISO week-numbering year
 *
 * @example
 * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?
 * var result = isSameISOYear(
 *   new Date(2003, 11, 29),
 *   new Date(2005, 0, 2)
 * )
 * //=> true
 */
function isSameISOYear (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfYear = startOfISOYear(dirtyDateLeft)
  var dateRightStartOfYear = startOfISOYear(dirtyDateRight)

  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime()
}

module.exports = isSameISOYear


/***/ }),

/***/ "../../node_modules/date-fns/is_same_minute/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_minute/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfMinute = __webpack_require__(/*! ../start_of_minute/index.js */ "../../node_modules/date-fns/start_of_minute/index.js")

/**
 * @category Minute Helpers
 * @summary Are the given dates in the same minute?
 *
 * @description
 * Are the given dates in the same minute?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same minute
 *
 * @example
 * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15
 * // in the same minute?
 * var result = isSameMinute(
 *   new Date(2014, 8, 4, 6, 30),
 *   new Date(2014, 8, 4, 6, 30, 15)
 * )
 * //=> true
 */
function isSameMinute (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft)
  var dateRightStartOfMinute = startOfMinute(dirtyDateRight)

  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime()
}

module.exports = isSameMinute


/***/ }),

/***/ "../../node_modules/date-fns/is_same_month/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_month/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Are the given dates in the same month?
 *
 * @description
 * Are the given dates in the same month?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(
 *   new Date(2014, 8, 2),
 *   new Date(2014, 8, 25)
 * )
 * //=> true
 */
function isSameMonth (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)
  return dateLeft.getFullYear() === dateRight.getFullYear() &&
    dateLeft.getMonth() === dateRight.getMonth()
}

module.exports = isSameMonth


/***/ }),

/***/ "../../node_modules/date-fns/is_same_quarter/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_quarter/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfQuarter = __webpack_require__(/*! ../start_of_quarter/index.js */ "../../node_modules/date-fns/start_of_quarter/index.js")

/**
 * @category Quarter Helpers
 * @summary Are the given dates in the same year quarter?
 *
 * @description
 * Are the given dates in the same year quarter?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same quarter
 *
 * @example
 * // Are 1 January 2014 and 8 March 2014 in the same quarter?
 * var result = isSameQuarter(
 *   new Date(2014, 0, 1),
 *   new Date(2014, 2, 8)
 * )
 * //=> true
 */
function isSameQuarter (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft)
  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight)

  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime()
}

module.exports = isSameQuarter


/***/ }),

/***/ "../../node_modules/date-fns/is_same_second/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_second/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfSecond = __webpack_require__(/*! ../start_of_second/index.js */ "../../node_modules/date-fns/start_of_second/index.js")

/**
 * @category Second Helpers
 * @summary Are the given dates in the same second?
 *
 * @description
 * Are the given dates in the same second?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same second
 *
 * @example
 * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500
 * // in the same second?
 * var result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 30, 15),
 *   new Date(2014, 8, 4, 6, 30, 15, 500)
 * )
 * //=> true
 */
function isSameSecond (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft)
  var dateRightStartOfSecond = startOfSecond(dirtyDateRight)

  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime()
}

module.exports = isSameSecond


/***/ }),

/***/ "../../node_modules/date-fns/is_same_week/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_week/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfWeek = __webpack_require__(/*! ../start_of_week/index.js */ "../../node_modules/date-fns/start_of_week/index.js")

/**
 * @category Week Helpers
 * @summary Are the given dates in the same week?
 *
 * @description
 * Are the given dates in the same week?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Boolean} the dates are in the same week
 *
 * @example
 * // Are 31 August 2014 and 4 September 2014 in the same week?
 * var result = isSameWeek(
 *   new Date(2014, 7, 31),
 *   new Date(2014, 8, 4)
 * )
 * //=> true
 *
 * @example
 * // If week starts with Monday,
 * // are 31 August 2014 and 4 September 2014 in the same week?
 * var result = isSameWeek(
 *   new Date(2014, 7, 31),
 *   new Date(2014, 8, 4),
 *   {weekStartsOn: 1}
 * )
 * //=> false
 */
function isSameWeek (dirtyDateLeft, dirtyDateRight, dirtyOptions) {
  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions)
  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions)

  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime()
}

module.exports = isSameWeek


/***/ }),

/***/ "../../node_modules/date-fns/is_same_year/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_same_year/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same year
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * var result = isSameYear(
 *   new Date(2014, 8, 2),
 *   new Date(2014, 8, 25)
 * )
 * //=> true
 */
function isSameYear (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse(dirtyDateLeft)
  var dateRight = parse(dirtyDateRight)
  return dateLeft.getFullYear() === dateRight.getFullYear()
}

module.exports = isSameYear


/***/ }),

/***/ "../../node_modules/date-fns/is_saturday/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_saturday/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Saturday?
 *
 * @description
 * Is the given date Saturday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Saturday
 *
 * @example
 * // Is 27 September 2014 Saturday?
 * var result = isSaturday(new Date(2014, 8, 27))
 * //=> true
 */
function isSaturday (dirtyDate) {
  return parse(dirtyDate).getDay() === 6
}

module.exports = isSaturday


/***/ }),

/***/ "../../node_modules/date-fns/is_sunday/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_sunday/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Sunday?
 *
 * @description
 * Is the given date Sunday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Sunday
 *
 * @example
 * // Is 21 September 2014 Sunday?
 * var result = isSunday(new Date(2014, 8, 21))
 * //=> true
 */
function isSunday (dirtyDate) {
  return parse(dirtyDate).getDay() === 0
}

module.exports = isSunday


/***/ }),

/***/ "../../node_modules/date-fns/is_this_hour/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_hour/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameHour = __webpack_require__(/*! ../is_same_hour/index.js */ "../../node_modules/date-fns/is_same_hour/index.js")

/**
 * @category Hour Helpers
 * @summary Is the given date in the same hour as the current date?
 *
 * @description
 * Is the given date in the same hour as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this hour
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:00:00 in this hour?
 * var result = isThisHour(new Date(2014, 8, 25, 18))
 * //=> true
 */
function isThisHour (dirtyDate) {
  return isSameHour(new Date(), dirtyDate)
}

module.exports = isThisHour


/***/ }),

/***/ "../../node_modules/date-fns/is_this_iso_week/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_iso_week/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameISOWeek = __webpack_require__(/*! ../is_same_iso_week/index.js */ "../../node_modules/date-fns/is_same_iso_week/index.js")

/**
 * @category ISO Week Helpers
 * @summary Is the given date in the same ISO week as the current date?
 *
 * @description
 * Is the given date in the same ISO week as the current date?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this ISO week
 *
 * @example
 * // If today is 25 September 2014, is 22 September 2014 in this ISO week?
 * var result = isThisISOWeek(new Date(2014, 8, 22))
 * //=> true
 */
function isThisISOWeek (dirtyDate) {
  return isSameISOWeek(new Date(), dirtyDate)
}

module.exports = isThisISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/is_this_iso_year/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_iso_year/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameISOYear = __webpack_require__(/*! ../is_same_iso_year/index.js */ "../../node_modules/date-fns/is_same_iso_year/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Is the given date in the same ISO week-numbering year as the current date?
 *
 * @description
 * Is the given date in the same ISO week-numbering year as the current date?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this ISO week-numbering year
 *
 * @example
 * // If today is 25 September 2014,
 * // is 30 December 2013 in this ISO week-numbering year?
 * var result = isThisISOYear(new Date(2013, 11, 30))
 * //=> true
 */
function isThisISOYear (dirtyDate) {
  return isSameISOYear(new Date(), dirtyDate)
}

module.exports = isThisISOYear


/***/ }),

/***/ "../../node_modules/date-fns/is_this_minute/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_minute/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameMinute = __webpack_require__(/*! ../is_same_minute/index.js */ "../../node_modules/date-fns/is_same_minute/index.js")

/**
 * @category Minute Helpers
 * @summary Is the given date in the same minute as the current date?
 *
 * @description
 * Is the given date in the same minute as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this minute
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:30:00 in this minute?
 * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))
 * //=> true
 */
function isThisMinute (dirtyDate) {
  return isSameMinute(new Date(), dirtyDate)
}

module.exports = isThisMinute


/***/ }),

/***/ "../../node_modules/date-fns/is_this_month/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_month/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameMonth = __webpack_require__(/*! ../is_same_month/index.js */ "../../node_modules/date-fns/is_same_month/index.js")

/**
 * @category Month Helpers
 * @summary Is the given date in the same month as the current date?
 *
 * @description
 * Is the given date in the same month as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this month
 *
 * @example
 * // If today is 25 September 2014, is 15 September 2014 in this month?
 * var result = isThisMonth(new Date(2014, 8, 15))
 * //=> true
 */
function isThisMonth (dirtyDate) {
  return isSameMonth(new Date(), dirtyDate)
}

module.exports = isThisMonth


/***/ }),

/***/ "../../node_modules/date-fns/is_this_quarter/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_quarter/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameQuarter = __webpack_require__(/*! ../is_same_quarter/index.js */ "../../node_modules/date-fns/is_same_quarter/index.js")

/**
 * @category Quarter Helpers
 * @summary Is the given date in the same quarter as the current date?
 *
 * @description
 * Is the given date in the same quarter as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this quarter
 *
 * @example
 * // If today is 25 September 2014, is 2 July 2014 in this quarter?
 * var result = isThisQuarter(new Date(2014, 6, 2))
 * //=> true
 */
function isThisQuarter (dirtyDate) {
  return isSameQuarter(new Date(), dirtyDate)
}

module.exports = isThisQuarter


/***/ }),

/***/ "../../node_modules/date-fns/is_this_second/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_second/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameSecond = __webpack_require__(/*! ../is_same_second/index.js */ "../../node_modules/date-fns/is_same_second/index.js")

/**
 * @category Second Helpers
 * @summary Is the given date in the same second as the current date?
 *
 * @description
 * Is the given date in the same second as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this second
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:30:15.000 in this second?
 * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))
 * //=> true
 */
function isThisSecond (dirtyDate) {
  return isSameSecond(new Date(), dirtyDate)
}

module.exports = isThisSecond


/***/ }),

/***/ "../../node_modules/date-fns/is_this_week/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_week/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameWeek = __webpack_require__(/*! ../is_same_week/index.js */ "../../node_modules/date-fns/is_same_week/index.js")

/**
 * @category Week Helpers
 * @summary Is the given date in the same week as the current date?
 *
 * @description
 * Is the given date in the same week as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Boolean} the date is in this week
 *
 * @example
 * // If today is 25 September 2014, is 21 September 2014 in this week?
 * var result = isThisWeek(new Date(2014, 8, 21))
 * //=> true
 *
 * @example
 * // If today is 25 September 2014 and week starts with Monday
 * // is 21 September 2014 in this week?
 * var result = isThisWeek(new Date(2014, 8, 21), {weekStartsOn: 1})
 * //=> false
 */
function isThisWeek (dirtyDate, dirtyOptions) {
  return isSameWeek(new Date(), dirtyDate, dirtyOptions)
}

module.exports = isThisWeek


/***/ }),

/***/ "../../node_modules/date-fns/is_this_year/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_this_year/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSameYear = __webpack_require__(/*! ../is_same_year/index.js */ "../../node_modules/date-fns/is_same_year/index.js")

/**
 * @category Year Helpers
 * @summary Is the given date in the same year as the current date?
 *
 * @description
 * Is the given date in the same year as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this year
 *
 * @example
 * // If today is 25 September 2014, is 2 July 2014 in this year?
 * var result = isThisYear(new Date(2014, 6, 2))
 * //=> true
 */
function isThisYear (dirtyDate) {
  return isSameYear(new Date(), dirtyDate)
}

module.exports = isThisYear


/***/ }),

/***/ "../../node_modules/date-fns/is_thursday/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_thursday/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Thursday?
 *
 * @description
 * Is the given date Thursday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Thursday
 *
 * @example
 * // Is 25 September 2014 Thursday?
 * var result = isThursday(new Date(2014, 8, 25))
 * //=> true
 */
function isThursday (dirtyDate) {
  return parse(dirtyDate).getDay() === 4
}

module.exports = isThursday


/***/ }),

/***/ "../../node_modules/date-fns/is_today/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_today/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfDay = __webpack_require__(/*! ../start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js")

/**
 * @category Day Helpers
 * @summary Is the given date today?
 *
 * @description
 * Is the given date today?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is today
 *
 * @example
 * // If today is 6 October 2014, is 6 October 14:00:00 today?
 * var result = isToday(new Date(2014, 9, 6, 14, 0))
 * //=> true
 */
function isToday (dirtyDate) {
  return startOfDay(dirtyDate).getTime() === startOfDay(new Date()).getTime()
}

module.exports = isToday


/***/ }),

/***/ "../../node_modules/date-fns/is_tomorrow/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_tomorrow/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfDay = __webpack_require__(/*! ../start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js")

/**
 * @category Day Helpers
 * @summary Is the given date tomorrow?
 *
 * @description
 * Is the given date tomorrow?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is tomorrow
 *
 * @example
 * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?
 * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))
 * //=> true
 */
function isTomorrow (dirtyDate) {
  var tomorrow = new Date()
  tomorrow.setDate(tomorrow.getDate() + 1)
  return startOfDay(dirtyDate).getTime() === startOfDay(tomorrow).getTime()
}

module.exports = isTomorrow


/***/ }),

/***/ "../../node_modules/date-fns/is_tuesday/index.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_tuesday/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Tuesday?
 *
 * @description
 * Is the given date Tuesday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Tuesday
 *
 * @example
 * // Is 23 September 2014 Tuesday?
 * var result = isTuesday(new Date(2014, 8, 23))
 * //=> true
 */
function isTuesday (dirtyDate) {
  return parse(dirtyDate).getDay() === 2
}

module.exports = isTuesday


/***/ }),

/***/ "../../node_modules/date-fns/is_valid/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_valid/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isDate = __webpack_require__(/*! ../is_date/index.js */ "../../node_modules/date-fns/is_date/index.js")

/**
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {Date} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} argument must be an instance of Date
 *
 * @example
 * // For the valid date:
 * var result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the invalid date:
 * var result = isValid(new Date(''))
 * //=> false
 */
function isValid (dirtyDate) {
  if (isDate(dirtyDate)) {
    return !isNaN(dirtyDate)
  } else {
    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')
  }
}

module.exports = isValid


/***/ }),

/***/ "../../node_modules/date-fns/is_wednesday/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_wednesday/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Is the given date Wednesday?
 *
 * @description
 * Is the given date Wednesday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Wednesday
 *
 * @example
 * // Is 24 September 2014 Wednesday?
 * var result = isWednesday(new Date(2014, 8, 24))
 * //=> true
 */
function isWednesday (dirtyDate) {
  return parse(dirtyDate).getDay() === 3
}

module.exports = isWednesday


/***/ }),

/***/ "../../node_modules/date-fns/is_weekend/index.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_weekend/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date falls on a weekend
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * var result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */
function isWeekend (dirtyDate) {
  var date = parse(dirtyDate)
  var day = date.getDay()
  return day === 0 || day === 6
}

module.exports = isWeekend


/***/ }),

/***/ "../../node_modules/date-fns/is_within_range/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_within_range/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Range Helpers
 * @summary Is the given date within the range?
 *
 * @description
 * Is the given date within the range?
 *
 * @param {Date|String|Number} date - the date to check
 * @param {Date|String|Number} startDate - the start of range
 * @param {Date|String|Number} endDate - the end of range
 * @returns {Boolean} the date is within the range
 * @throws {Error} startDate cannot be after endDate
 *
 * @example
 * // For the date within the range:
 * isWithinRange(
 *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)
 * )
 * //=> true
 *
 * @example
 * // For the date outside of the range:
 * isWithinRange(
 *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)
 * )
 * //=> false
 */
function isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {
  var time = parse(dirtyDate).getTime()
  var startTime = parse(dirtyStartDate).getTime()
  var endTime = parse(dirtyEndDate).getTime()

  if (startTime > endTime) {
    throw new Error('The start of the range cannot be after the end of the range')
  }

  return time >= startTime && time <= endTime
}

module.exports = isWithinRange


/***/ }),

/***/ "../../node_modules/date-fns/is_yesterday/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/is_yesterday/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfDay = __webpack_require__(/*! ../start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js")

/**
 * @category Day Helpers
 * @summary Is the given date yesterday?
 *
 * @description
 * Is the given date yesterday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is yesterday
 *
 * @example
 * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?
 * var result = isYesterday(new Date(2014, 9, 5, 14, 0))
 * //=> true
 */
function isYesterday (dirtyDate) {
  var yesterday = new Date()
  yesterday.setDate(yesterday.getDate() - 1)
  return startOfDay(dirtyDate).getTime() === startOfDay(yesterday).getTime()
}

module.exports = isYesterday


/***/ }),

/***/ "../../node_modules/date-fns/last_day_of_iso_week/index.js":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/last_day_of_iso_week/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var lastDayOfWeek = __webpack_require__(/*! ../last_day_of_week/index.js */ "../../node_modules/date-fns/last_day_of_week/index.js")

/**
 * @category ISO Week Helpers
 * @summary Return the last day of an ISO week for the given date.
 *
 * @description
 * Return the last day of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of an ISO week
 *
 * @example
 * // The last day of an ISO week for 2 September 2014 11:55:00:
 * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 00:00:00
 */
function lastDayOfISOWeek (dirtyDate) {
  return lastDayOfWeek(dirtyDate, {weekStartsOn: 1})
}

module.exports = lastDayOfISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/last_day_of_iso_year/index.js":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/last_day_of_iso_year/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getISOYear = __webpack_require__(/*! ../get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js")
var startOfISOWeek = __webpack_require__(/*! ../start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the last day of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the last day of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an ISO week-numbering year
 *
 * @example
 * // The last day of an ISO week-numbering year for 2 July 2005:
 * var result = lastDayOfISOYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 00:00:00
 */
function lastDayOfISOYear (dirtyDate) {
  var year = getISOYear(dirtyDate)
  var fourthOfJanuary = new Date(0)
  fourthOfJanuary.setFullYear(year + 1, 0, 4)
  fourthOfJanuary.setHours(0, 0, 0, 0)
  var date = startOfISOWeek(fourthOfJanuary)
  date.setDate(date.getDate() - 1)
  return date
}

module.exports = lastDayOfISOYear


/***/ }),

/***/ "../../node_modules/date-fns/last_day_of_month/index.js":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/last_day_of_month/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Return the last day of a month for the given date.
 *
 * @description
 * Return the last day of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of a month
 *
 * @example
 * // The last day of a month for 2 September 2014 11:55:00:
 * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */
function lastDayOfMonth (dirtyDate) {
  var date = parse(dirtyDate)
  var month = date.getMonth()
  date.setFullYear(date.getFullYear(), month + 1, 0)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = lastDayOfMonth


/***/ }),

/***/ "../../node_modules/date-fns/last_day_of_quarter/index.js":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/last_day_of_quarter/index.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Quarter Helpers
 * @summary Return the last day of a year quarter for the given date.
 *
 * @description
 * Return the last day of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of a quarter
 *
 * @example
 * // The last day of a quarter for 2 September 2014 11:55:00:
 * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */
function lastDayOfQuarter (dirtyDate) {
  var date = parse(dirtyDate)
  var currentMonth = date.getMonth()
  var month = currentMonth - currentMonth % 3 + 3
  date.setMonth(month, 0)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = lastDayOfQuarter


/***/ }),

/***/ "../../node_modules/date-fns/last_day_of_week/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/last_day_of_week/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Week Helpers
 * @summary Return the last day of a week for the given date.
 *
 * @description
 * Return the last day of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the last day of a week
 *
 * @example
 * // The last day of a week for 2 September 2014 11:55:00:
 * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:
 * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
 * //=> Sun Sep 07 2014 00:00:00
 */
function lastDayOfWeek (dirtyDate, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0

  var date = parse(dirtyDate)
  var day = date.getDay()
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn)

  date.setHours(0, 0, 0, 0)
  date.setDate(date.getDate() + diff)
  return date
}

module.exports = lastDayOfWeek


/***/ }),

/***/ "../../node_modules/date-fns/last_day_of_year/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/last_day_of_year/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Return the last day of a year for the given date.
 *
 * @description
 * Return the last day of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of a year
 *
 * @example
 * // The last day of a year for 2 September 2014 11:55:00:
 * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 00:00:00
 */
function lastDayOfYear (dirtyDate) {
  var date = parse(dirtyDate)
  var year = date.getFullYear()
  date.setFullYear(year + 1, 0, 0)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = lastDayOfYear


/***/ }),

/***/ "../../node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js":
/*!***************************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var commonFormatterKeys = [
  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',
  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',
  'H', 'HH', 'h', 'hh', 'm', 'mm',
  's', 'ss', 'S', 'SS', 'SSS',
  'Z', 'ZZ', 'X', 'x'
]

function buildFormattingTokensRegExp (formatters) {
  var formatterKeys = []
  for (var key in formatters) {
    if (formatters.hasOwnProperty(key)) {
      formatterKeys.push(key)
    }
  }

  var formattingTokens = commonFormatterKeys
    .concat(formatterKeys)
    .sort()
    .reverse()
  var formattingTokensRegExp = new RegExp(
    '(\\[[^\\[]*\\])|(\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'
  )

  return formattingTokensRegExp
}

module.exports = buildFormattingTokensRegExp


/***/ }),

/***/ "../../node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js":
/*!************************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function buildDistanceInWordsLocale () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      one: 'less than a second',
      other: 'less than {{count}} seconds'
    },

    xSeconds: {
      one: '1 second',
      other: '{{count}} seconds'
    },

    halfAMinute: 'half a minute',

    lessThanXMinutes: {
      one: 'less than a minute',
      other: 'less than {{count}} minutes'
    },

    xMinutes: {
      one: '1 minute',
      other: '{{count}} minutes'
    },

    aboutXHours: {
      one: 'about 1 hour',
      other: 'about {{count}} hours'
    },

    xHours: {
      one: '1 hour',
      other: '{{count}} hours'
    },

    xDays: {
      one: '1 day',
      other: '{{count}} days'
    },

    aboutXMonths: {
      one: 'about 1 month',
      other: 'about {{count}} months'
    },

    xMonths: {
      one: '1 month',
      other: '{{count}} months'
    },

    aboutXYears: {
      one: 'about 1 year',
      other: 'about {{count}} years'
    },

    xYears: {
      one: '1 year',
      other: '{{count}} years'
    },

    overXYears: {
      one: 'over 1 year',
      other: 'over {{count}} years'
    },

    almostXYears: {
      one: 'almost 1 year',
      other: 'almost {{count}} years'
    }
  }

  function localize (token, count, options) {
    options = options || {}

    var result
    if (typeof distanceInWordsLocale[token] === 'string') {
      result = distanceInWordsLocale[token]
    } else if (count === 1) {
      result = distanceInWordsLocale[token].one
    } else {
      result = distanceInWordsLocale[token].other.replace('{{count}}', count)
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'in ' + result
      } else {
        return result + ' ago'
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

module.exports = buildDistanceInWordsLocale


/***/ }),

/***/ "../../node_modules/date-fns/locale/en/build_format_locale/index.js":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/locale/en/build_format_locale/index.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var buildFormattingTokensRegExp = __webpack_require__(/*! ../../_lib/build_formatting_tokens_reg_exp/index.js */ "../../node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js")

function buildFormatLocale () {
  // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.
  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
  var meridiemUppercase = ['AM', 'PM']
  var meridiemLowercase = ['am', 'pm']
  var meridiemFull = ['a.m.', 'p.m.']

  var formatters = {
    // Month: Jan, Feb, ..., Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, ..., December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, ..., Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, ..., Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, ..., Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
    }
  }

  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']
  ordinalFormatters.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return ordinal(formatters[formatterToken](date))
    }
  })

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)
  }
}

function ordinal (number) {
  var rem100 = number % 100
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st'
      case 2:
        return number + 'nd'
      case 3:
        return number + 'rd'
    }
  }
  return number + 'th'
}

module.exports = buildFormatLocale


/***/ }),

/***/ "../../node_modules/date-fns/locale/en/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/locale/en/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var buildDistanceInWordsLocale = __webpack_require__(/*! ./build_distance_in_words_locale/index.js */ "../../node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js")
var buildFormatLocale = __webpack_require__(/*! ./build_format_locale/index.js */ "../../node_modules/date-fns/locale/en/build_format_locale/index.js")

/**
 * @category Locales
 * @summary English locale.
 */
module.exports = {
  distanceInWords: buildDistanceInWordsLocale(),
  format: buildFormatLocale()
}


/***/ }),

/***/ "../../node_modules/date-fns/max/index.js":
/*!***********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/max/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * @param {...(Date|String|Number)} dates - the dates to compare
 * @returns {Date} the latest of the dates
 *
 * @example
 * // Which of these dates is the latest?
 * var result = max(
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * )
 * //=> Sun Jul 02 1995 00:00:00
 */
function max () {
  var dirtyDates = Array.prototype.slice.call(arguments)
  var dates = dirtyDates.map(function (dirtyDate) {
    return parse(dirtyDate)
  })
  var latestTimestamp = Math.max.apply(null, dates)
  return new Date(latestTimestamp)
}

module.exports = max


/***/ }),

/***/ "../../node_modules/date-fns/min/index.js":
/*!***********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/min/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Common Helpers
 * @summary Return the earliest of the given dates.
 *
 * @description
 * Return the earliest of the given dates.
 *
 * @param {...(Date|String|Number)} dates - the dates to compare
 * @returns {Date} the earliest of the dates
 *
 * @example
 * // Which of these dates is the earliest?
 * var result = min(
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * )
 * //=> Wed Feb 11 1987 00:00:00
 */
function min () {
  var dirtyDates = Array.prototype.slice.call(arguments)
  var dates = dirtyDates.map(function (dirtyDate) {
    return parse(dirtyDate)
  })
  var earliestTimestamp = Math.min.apply(null, dates)
  return new Date(earliestTimestamp)
}

module.exports = min


/***/ }),

/***/ "../../node_modules/date-fns/parse/index.js":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/parse/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getTimezoneOffsetInMilliseconds = __webpack_require__(/*! ../_lib/getTimezoneOffsetInMilliseconds/index.js */ "../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js")
var isDate = __webpack_require__(/*! ../is_date/index.js */ "../../node_modules/date-fns/is_date/index.js")

var MILLISECONDS_IN_HOUR = 3600000
var MILLISECONDS_IN_MINUTE = 60000
var DEFAULT_ADDITIONAL_DIGITS = 2

var parseTokenDateTimeDelimeter = /[T ]/
var parseTokenPlainTime = /:/

// year tokens
var parseTokenYY = /^(\d{2})$/
var parseTokensYYY = [
  /^([+-]\d{2})$/, // 0 additional digits
  /^([+-]\d{3})$/, // 1 additional digit
  /^([+-]\d{4})$/ // 2 additional digits
]

var parseTokenYYYY = /^(\d{4})/
var parseTokensYYYYY = [
  /^([+-]\d{4})/, // 0 additional digits
  /^([+-]\d{5})/, // 1 additional digit
  /^([+-]\d{6})/ // 2 additional digits
]

// date tokens
var parseTokenMM = /^-(\d{2})$/
var parseTokenDDD = /^-?(\d{3})$/
var parseTokenMMDD = /^-?(\d{2})-?(\d{2})$/
var parseTokenWww = /^-?W(\d{2})$/
var parseTokenWwwD = /^-?W(\d{2})-?(\d{1})$/

// time tokens
var parseTokenHH = /^(\d{2}([.,]\d*)?)$/
var parseTokenHHMM = /^(\d{2}):?(\d{2}([.,]\d*)?)$/
var parseTokenHHMMSS = /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/

// timezone tokens
var parseTokenTimezone = /([Z+-].*)$/
var parseTokenTimezoneZ = /^(Z)$/
var parseTokenTimezoneHH = /^([+-])(\d{2})$/
var parseTokenTimezoneHHMM = /^([+-])(\d{2}):?(\d{2})$/

/**
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If an argument is a string, the function tries to parse it.
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If all above fails, the function passes the given argument to Date constructor.
 *
 * @param {Date|String|Number} argument - the value to convert
 * @param {Object} [options] - the object with options
 * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * var result = parse('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Parse string '+02014101',
 * // if the additional number of digits in the extended year format is 1:
 * var result = parse('+02014101', {additionalDigits: 1})
 * //=> Fri Apr 11 2014 00:00:00
 */
function parse (argument, dirtyOptions) {
  if (isDate(argument)) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime())
  } else if (typeof argument !== 'string') {
    return new Date(argument)
  }

  var options = dirtyOptions || {}
  var additionalDigits = options.additionalDigits
  if (additionalDigits == null) {
    additionalDigits = DEFAULT_ADDITIONAL_DIGITS
  } else {
    additionalDigits = Number(additionalDigits)
  }

  var dateStrings = splitDateString(argument)

  var parseYearResult = parseYear(dateStrings.date, additionalDigits)
  var year = parseYearResult.year
  var restDateString = parseYearResult.restDateString

  var date = parseDate(restDateString, year)

  if (date) {
    var timestamp = date.getTime()
    var time = 0
    var offset

    if (dateStrings.time) {
      time = parseTime(dateStrings.time)
    }

    if (dateStrings.timezone) {
      offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE
    } else {
      var fullTime = timestamp + time
      var fullTimeDate = new Date(fullTime)

      offset = getTimezoneOffsetInMilliseconds(fullTimeDate)

      // Adjust time when it's coming from DST
      var fullTimeDateNextDay = new Date(fullTime)
      fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1)
      var offsetDiff =
        getTimezoneOffsetInMilliseconds(fullTimeDateNextDay) -
        getTimezoneOffsetInMilliseconds(fullTimeDate)
      if (offsetDiff > 0) {
        offset += offsetDiff
      }
    }

    return new Date(timestamp + time + offset)
  } else {
    return new Date(argument)
  }
}

function splitDateString (dateString) {
  var dateStrings = {}
  var array = dateString.split(parseTokenDateTimeDelimeter)
  var timeString

  if (parseTokenPlainTime.test(array[0])) {
    dateStrings.date = null
    timeString = array[0]
  } else {
    dateStrings.date = array[0]
    timeString = array[1]
  }

  if (timeString) {
    var token = parseTokenTimezone.exec(timeString)
    if (token) {
      dateStrings.time = timeString.replace(token[1], '')
      dateStrings.timezone = token[1]
    } else {
      dateStrings.time = timeString
    }
  }

  return dateStrings
}

function parseYear (dateString, additionalDigits) {
  var parseTokenYYY = parseTokensYYY[additionalDigits]
  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]

  var token

  // YYYY or ±YYYYY
  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)
  if (token) {
    var yearString = token[1]
    return {
      year: parseInt(yearString, 10),
      restDateString: dateString.slice(yearString.length)
    }
  }

  // YY or ±YYY
  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)
  if (token) {
    var centuryString = token[1]
    return {
      year: parseInt(centuryString, 10) * 100,
      restDateString: dateString.slice(centuryString.length)
    }
  }

  // Invalid ISO-formatted year
  return {
    year: null
  }
}

function parseDate (dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) {
    return null
  }

  var token
  var date
  var month
  var week

  // YYYY
  if (dateString.length === 0) {
    date = new Date(0)
    date.setUTCFullYear(year)
    return date
  }

  // YYYY-MM
  token = parseTokenMM.exec(dateString)
  if (token) {
    date = new Date(0)
    month = parseInt(token[1], 10) - 1
    date.setUTCFullYear(year, month)
    return date
  }

  // YYYY-DDD or YYYYDDD
  token = parseTokenDDD.exec(dateString)
  if (token) {
    date = new Date(0)
    var dayOfYear = parseInt(token[1], 10)
    date.setUTCFullYear(year, 0, dayOfYear)
    return date
  }

  // YYYY-MM-DD or YYYYMMDD
  token = parseTokenMMDD.exec(dateString)
  if (token) {
    date = new Date(0)
    month = parseInt(token[1], 10) - 1
    var day = parseInt(token[2], 10)
    date.setUTCFullYear(year, month, day)
    return date
  }

  // YYYY-Www or YYYYWww
  token = parseTokenWww.exec(dateString)
  if (token) {
    week = parseInt(token[1], 10) - 1
    return dayOfISOYear(year, week)
  }

  // YYYY-Www-D or YYYYWwwD
  token = parseTokenWwwD.exec(dateString)
  if (token) {
    week = parseInt(token[1], 10) - 1
    var dayOfWeek = parseInt(token[2], 10) - 1
    return dayOfISOYear(year, week, dayOfWeek)
  }

  // Invalid ISO-formatted date
  return null
}

function parseTime (timeString) {
  var token
  var hours
  var minutes

  // hh
  token = parseTokenHH.exec(timeString)
  if (token) {
    hours = parseFloat(token[1].replace(',', '.'))
    return (hours % 24) * MILLISECONDS_IN_HOUR
  }

  // hh:mm or hhmm
  token = parseTokenHHMM.exec(timeString)
  if (token) {
    hours = parseInt(token[1], 10)
    minutes = parseFloat(token[2].replace(',', '.'))
    return (hours % 24) * MILLISECONDS_IN_HOUR +
      minutes * MILLISECONDS_IN_MINUTE
  }

  // hh:mm:ss or hhmmss
  token = parseTokenHHMMSS.exec(timeString)
  if (token) {
    hours = parseInt(token[1], 10)
    minutes = parseInt(token[2], 10)
    var seconds = parseFloat(token[3].replace(',', '.'))
    return (hours % 24) * MILLISECONDS_IN_HOUR +
      minutes * MILLISECONDS_IN_MINUTE +
      seconds * 1000
  }

  // Invalid ISO-formatted time
  return null
}

function parseTimezone (timezoneString) {
  var token
  var absoluteOffset

  // Z
  token = parseTokenTimezoneZ.exec(timezoneString)
  if (token) {
    return 0
  }

  // ±hh
  token = parseTokenTimezoneHH.exec(timezoneString)
  if (token) {
    absoluteOffset = parseInt(token[2], 10) * 60
    return (token[1] === '+') ? -absoluteOffset : absoluteOffset
  }

  // ±hh:mm or ±hhmm
  token = parseTokenTimezoneHHMM.exec(timezoneString)
  if (token) {
    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)
    return (token[1] === '+') ? -absoluteOffset : absoluteOffset
  }

  return 0
}

function dayOfISOYear (isoYear, week, day) {
  week = week || 0
  day = day || 0
  var date = new Date(0)
  date.setUTCFullYear(isoYear, 0, 4)
  var fourthOfJanuaryDay = date.getUTCDay() || 7
  var diff = week * 7 + day + 1 - fourthOfJanuaryDay
  date.setUTCDate(date.getUTCDate() + diff)
  return date
}

module.exports = parse


/***/ }),

/***/ "../../node_modules/date-fns/set_date/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_date/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Set the day of the month to the given date.
 *
 * @description
 * Set the day of the month to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} dayOfMonth - the day of the month of the new date
 * @returns {Date} the new date with the day of the month setted
 *
 * @example
 * // Set the 30th day of the month to 1 September 2014:
 * var result = setDate(new Date(2014, 8, 1), 30)
 * //=> Tue Sep 30 2014 00:00:00
 */
function setDate (dirtyDate, dirtyDayOfMonth) {
  var date = parse(dirtyDate)
  var dayOfMonth = Number(dirtyDayOfMonth)
  date.setDate(dayOfMonth)
  return date
}

module.exports = setDate


/***/ }),

/***/ "../../node_modules/date-fns/set_day/index.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_day/index.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var addDays = __webpack_require__(/*! ../add_days/index.js */ "../../node_modules/date-fns/add_days/index.js")

/**
 * @category Weekday Helpers
 * @summary Set the day of the week to the given date.
 *
 * @description
 * Set the day of the week to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} day - the day of the week of the new date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the new date with the day of the week setted
 *
 * @example
 * // Set Sunday to 1 September 2014:
 * var result = setDay(new Date(2014, 8, 1), 0)
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If week starts with Monday, set Sunday to 1 September 2014:
 * var result = setDay(new Date(2014, 8, 1), 0, {weekStartsOn: 1})
 * //=> Sun Sep 07 2014 00:00:00
 */
function setDay (dirtyDate, dirtyDay, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0
  var date = parse(dirtyDate)
  var day = Number(dirtyDay)
  var currentDay = date.getDay()

  var remainder = day % 7
  var dayIndex = (remainder + 7) % 7

  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay
  return addDays(date, diff)
}

module.exports = setDay


/***/ }),

/***/ "../../node_modules/date-fns/set_day_of_year/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_day_of_year/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Set the day of the year to the given date.
 *
 * @description
 * Set the day of the year to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} dayOfYear - the day of the year of the new date
 * @returns {Date} the new date with the day of the year setted
 *
 * @example
 * // Set the 2nd day of the year to 2 July 2014:
 * var result = setDayOfYear(new Date(2014, 6, 2), 2)
 * //=> Thu Jan 02 2014 00:00:00
 */
function setDayOfYear (dirtyDate, dirtyDayOfYear) {
  var date = parse(dirtyDate)
  var dayOfYear = Number(dirtyDayOfYear)
  date.setMonth(0)
  date.setDate(dayOfYear)
  return date
}

module.exports = setDayOfYear


/***/ }),

/***/ "../../node_modules/date-fns/set_hours/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_hours/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Hour Helpers
 * @summary Set the hours to the given date.
 *
 * @description
 * Set the hours to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} hours - the hours of the new date
 * @returns {Date} the new date with the hours setted
 *
 * @example
 * // Set 4 hours to 1 September 2014 11:30:00:
 * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)
 * //=> Mon Sep 01 2014 04:30:00
 */
function setHours (dirtyDate, dirtyHours) {
  var date = parse(dirtyDate)
  var hours = Number(dirtyHours)
  date.setHours(hours)
  return date
}

module.exports = setHours


/***/ }),

/***/ "../../node_modules/date-fns/set_iso_day/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_iso_day/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var addDays = __webpack_require__(/*! ../add_days/index.js */ "../../node_modules/date-fns/add_days/index.js")
var getISODay = __webpack_require__(/*! ../get_iso_day/index.js */ "../../node_modules/date-fns/get_iso_day/index.js")

/**
 * @category Weekday Helpers
 * @summary Set the day of the ISO week to the given date.
 *
 * @description
 * Set the day of the ISO week to the given date.
 * ISO week starts with Monday.
 * 7 is the index of Sunday, 1 is the index of Monday etc.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} day - the day of the ISO week of the new date
 * @returns {Date} the new date with the day of the ISO week setted
 *
 * @example
 * // Set Sunday to 1 September 2014:
 * var result = setISODay(new Date(2014, 8, 1), 7)
 * //=> Sun Sep 07 2014 00:00:00
 */
function setISODay (dirtyDate, dirtyDay) {
  var date = parse(dirtyDate)
  var day = Number(dirtyDay)
  var currentDay = getISODay(date)
  var diff = day - currentDay
  return addDays(date, diff)
}

module.exports = setISODay


/***/ }),

/***/ "../../node_modules/date-fns/set_iso_week/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_iso_week/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var getISOWeek = __webpack_require__(/*! ../get_iso_week/index.js */ "../../node_modules/date-fns/get_iso_week/index.js")

/**
 * @category ISO Week Helpers
 * @summary Set the ISO week to the given date.
 *
 * @description
 * Set the ISO week to the given date, saving the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} isoWeek - the ISO week of the new date
 * @returns {Date} the new date with the ISO week setted
 *
 * @example
 * // Set the 53rd ISO week to 7 August 2004:
 * var result = setISOWeek(new Date(2004, 7, 7), 53)
 * //=> Sat Jan 01 2005 00:00:00
 */
function setISOWeek (dirtyDate, dirtyISOWeek) {
  var date = parse(dirtyDate)
  var isoWeek = Number(dirtyISOWeek)
  var diff = getISOWeek(date) - isoWeek
  date.setDate(date.getDate() - diff * 7)
  return date
}

module.exports = setISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/set_iso_year/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_iso_year/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var startOfISOYear = __webpack_require__(/*! ../start_of_iso_year/index.js */ "../../node_modules/date-fns/start_of_iso_year/index.js")
var differenceInCalendarDays = __webpack_require__(/*! ../difference_in_calendar_days/index.js */ "../../node_modules/date-fns/difference_in_calendar_days/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Set the ISO week-numbering year to the given date.
 *
 * @description
 * Set the ISO week-numbering year to the given date,
 * saving the week number and the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} isoYear - the ISO week-numbering year of the new date
 * @returns {Date} the new date with the ISO week-numbering year setted
 *
 * @example
 * // Set ISO week-numbering year 2007 to 29 December 2008:
 * var result = setISOYear(new Date(2008, 11, 29), 2007)
 * //=> Mon Jan 01 2007 00:00:00
 */
function setISOYear (dirtyDate, dirtyISOYear) {
  var date = parse(dirtyDate)
  var isoYear = Number(dirtyISOYear)
  var diff = differenceInCalendarDays(date, startOfISOYear(date))
  var fourthOfJanuary = new Date(0)
  fourthOfJanuary.setFullYear(isoYear, 0, 4)
  fourthOfJanuary.setHours(0, 0, 0, 0)
  date = startOfISOYear(fourthOfJanuary)
  date.setDate(date.getDate() + diff)
  return date
}

module.exports = setISOYear


/***/ }),

/***/ "../../node_modules/date-fns/set_milliseconds/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_milliseconds/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Millisecond Helpers
 * @summary Set the milliseconds to the given date.
 *
 * @description
 * Set the milliseconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} milliseconds - the milliseconds of the new date
 * @returns {Date} the new date with the milliseconds setted
 *
 * @example
 * // Set 300 milliseconds to 1 September 2014 11:30:40.500:
 * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)
 * //=> Mon Sep 01 2014 11:30:40.300
 */
function setMilliseconds (dirtyDate, dirtyMilliseconds) {
  var date = parse(dirtyDate)
  var milliseconds = Number(dirtyMilliseconds)
  date.setMilliseconds(milliseconds)
  return date
}

module.exports = setMilliseconds


/***/ }),

/***/ "../../node_modules/date-fns/set_minutes/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_minutes/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Minute Helpers
 * @summary Set the minutes to the given date.
 *
 * @description
 * Set the minutes to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} minutes - the minutes of the new date
 * @returns {Date} the new date with the minutes setted
 *
 * @example
 * // Set 45 minutes to 1 September 2014 11:30:40:
 * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:45:40
 */
function setMinutes (dirtyDate, dirtyMinutes) {
  var date = parse(dirtyDate)
  var minutes = Number(dirtyMinutes)
  date.setMinutes(minutes)
  return date
}

module.exports = setMinutes


/***/ }),

/***/ "../../node_modules/date-fns/set_month/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_month/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var getDaysInMonth = __webpack_require__(/*! ../get_days_in_month/index.js */ "../../node_modules/date-fns/get_days_in_month/index.js")

/**
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month setted
 *
 * @example
 * // Set February to 1 September 2014:
 * var result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */
function setMonth (dirtyDate, dirtyMonth) {
  var date = parse(dirtyDate)
  var month = Number(dirtyMonth)
  var year = date.getFullYear()
  var day = date.getDate()

  var dateWithDesiredMonth = new Date(0)
  dateWithDesiredMonth.setFullYear(year, month, 15)
  dateWithDesiredMonth.setHours(0, 0, 0, 0)
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth)
  // Set the last day of the new month
  // if the original date was the last day of the longer month
  date.setMonth(month, Math.min(day, daysInMonth))
  return date
}

module.exports = setMonth


/***/ }),

/***/ "../../node_modules/date-fns/set_quarter/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_quarter/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")
var setMonth = __webpack_require__(/*! ../set_month/index.js */ "../../node_modules/date-fns/set_month/index.js")

/**
 * @category Quarter Helpers
 * @summary Set the year quarter to the given date.
 *
 * @description
 * Set the year quarter to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} quarter - the quarter of the new date
 * @returns {Date} the new date with the quarter setted
 *
 * @example
 * // Set the 2nd quarter to 2 July 2014:
 * var result = setQuarter(new Date(2014, 6, 2), 2)
 * //=> Wed Apr 02 2014 00:00:00
 */
function setQuarter (dirtyDate, dirtyQuarter) {
  var date = parse(dirtyDate)
  var quarter = Number(dirtyQuarter)
  var oldQuarter = Math.floor(date.getMonth() / 3) + 1
  var diff = quarter - oldQuarter
  return setMonth(date, date.getMonth() + diff * 3)
}

module.exports = setQuarter


/***/ }),

/***/ "../../node_modules/date-fns/set_seconds/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_seconds/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Second Helpers
 * @summary Set the seconds to the given date.
 *
 * @description
 * Set the seconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} seconds - the seconds of the new date
 * @returns {Date} the new date with the seconds setted
 *
 * @example
 * // Set 45 seconds to 1 September 2014 11:30:40:
 * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:30:45
 */
function setSeconds (dirtyDate, dirtySeconds) {
  var date = parse(dirtyDate)
  var seconds = Number(dirtySeconds)
  date.setSeconds(seconds)
  return date
}

module.exports = setSeconds


/***/ }),

/***/ "../../node_modules/date-fns/set_year/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/set_year/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year setted
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * var result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */
function setYear (dirtyDate, dirtyYear) {
  var date = parse(dirtyDate)
  var year = Number(dirtyYear)
  date.setFullYear(year)
  return date
}

module.exports = setYear


/***/ }),

/***/ "../../node_modules/date-fns/start_of_day/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_day/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a day
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay (dirtyDate) {
  var date = parse(dirtyDate)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfDay


/***/ }),

/***/ "../../node_modules/date-fns/start_of_hour/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_hour/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Hour Helpers
 * @summary Return the start of an hour for the given date.
 *
 * @description
 * Return the start of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of an hour
 *
 * @example
 * // The start of an hour for 2 September 2014 11:55:00:
 * var result = startOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:00:00
 */
function startOfHour (dirtyDate) {
  var date = parse(dirtyDate)
  date.setMinutes(0, 0, 0)
  return date
}

module.exports = startOfHour


/***/ }),

/***/ "../../node_modules/date-fns/start_of_iso_week/index.js":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_iso_week/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfWeek = __webpack_require__(/*! ../start_of_week/index.js */ "../../node_modules/date-fns/start_of_week/index.js")

/**
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of an ISO week
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfISOWeek (dirtyDate) {
  return startOfWeek(dirtyDate, {weekStartsOn: 1})
}

module.exports = startOfISOWeek


/***/ }),

/***/ "../../node_modules/date-fns/start_of_iso_year/index.js":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_iso_year/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getISOYear = __webpack_require__(/*! ../get_iso_year/index.js */ "../../node_modules/date-fns/get_iso_year/index.js")
var startOfISOWeek = __webpack_require__(/*! ../start_of_iso_week/index.js */ "../../node_modules/date-fns/start_of_iso_week/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of an ISO year
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * var result = startOfISOYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfISOYear (dirtyDate) {
  var year = getISOYear(dirtyDate)
  var fourthOfJanuary = new Date(0)
  fourthOfJanuary.setFullYear(year, 0, 4)
  fourthOfJanuary.setHours(0, 0, 0, 0)
  var date = startOfISOWeek(fourthOfJanuary)
  return date
}

module.exports = startOfISOYear


/***/ }),

/***/ "../../node_modules/date-fns/start_of_minute/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_minute/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Minute Helpers
 * @summary Return the start of a minute for the given date.
 *
 * @description
 * Return the start of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a minute
 *
 * @example
 * // The start of a minute for 1 December 2014 22:15:45.400:
 * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:00
 */
function startOfMinute (dirtyDate) {
  var date = parse(dirtyDate)
  date.setSeconds(0, 0)
  return date
}

module.exports = startOfMinute


/***/ }),

/***/ "../../node_modules/date-fns/start_of_month/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_month/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a month
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth (dirtyDate) {
  var date = parse(dirtyDate)
  date.setDate(1)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfMonth


/***/ }),

/***/ "../../node_modules/date-fns/start_of_quarter/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_quarter/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Quarter Helpers
 * @summary Return the start of a year quarter for the given date.
 *
 * @description
 * Return the start of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a quarter
 *
 * @example
 * // The start of a quarter for 2 September 2014 11:55:00:
 * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Jul 01 2014 00:00:00
 */
function startOfQuarter (dirtyDate) {
  var date = parse(dirtyDate)
  var currentMonth = date.getMonth()
  var month = currentMonth - currentMonth % 3
  date.setMonth(month, 1)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfQuarter


/***/ }),

/***/ "../../node_modules/date-fns/start_of_second/index.js":
/*!***********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_second/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Second Helpers
 * @summary Return the start of a second for the given date.
 *
 * @description
 * Return the start of a second for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a second
 *
 * @example
 * // The start of a second for 1 December 2014 22:15:45.400:
 * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.000
 */
function startOfSecond (dirtyDate) {
  var date = parse(dirtyDate)
  date.setMilliseconds(0)
  return date
}

module.exports = startOfSecond


/***/ }),

/***/ "../../node_modules/date-fns/start_of_today/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_today/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var startOfDay = __webpack_require__(/*! ../start_of_day/index.js */ "../../node_modules/date-fns/start_of_day/index.js")

/**
 * @category Day Helpers
 * @summary Return the start of today.
 *
 * @description
 * Return the start of today.
 *
 * @returns {Date} the start of today
 *
 * @example
 * // If today is 6 October 2014:
 * var result = startOfToday()
 * //=> Mon Oct 6 2014 00:00:00
 */
function startOfToday () {
  return startOfDay(new Date())
}

module.exports = startOfToday


/***/ }),

/***/ "../../node_modules/date-fns/start_of_tomorrow/index.js":
/*!*************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_tomorrow/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @category Day Helpers
 * @summary Return the start of tomorrow.
 *
 * @description
 * Return the start of tomorrow.
 *
 * @returns {Date} the start of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * var result = startOfTomorrow()
 * //=> Tue Oct 7 2014 00:00:00
 */
function startOfTomorrow () {
  var now = new Date()
  var year = now.getFullYear()
  var month = now.getMonth()
  var day = now.getDate()

  var date = new Date(0)
  date.setFullYear(year, month, day + 1)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfTomorrow


/***/ }),

/***/ "../../node_modules/date-fns/start_of_week/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_week/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek (dirtyDate, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0

  var date = parse(dirtyDate)
  var day = date.getDay()
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn

  date.setDate(date.getDate() - diff)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfWeek


/***/ }),

/***/ "../../node_modules/date-fns/start_of_year/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_year/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ../parse/index.js */ "../../node_modules/date-fns/parse/index.js")

/**
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a year
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear (dirtyDate) {
  var cleanDate = parse(dirtyDate)
  var date = new Date(0)
  date.setFullYear(cleanDate.getFullYear(), 0, 1)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfYear


/***/ }),

/***/ "../../node_modules/date-fns/start_of_yesterday/index.js":
/*!**************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/start_of_yesterday/index.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @category Day Helpers
 * @summary Return the start of yesterday.
 *
 * @description
 * Return the start of yesterday.
 *
 * @returns {Date} the start of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * var result = startOfYesterday()
 * //=> Sun Oct 5 2014 00:00:00
 */
function startOfYesterday () {
  var now = new Date()
  var year = now.getFullYear()
  var month = now.getMonth()
  var day = now.getDate()

  var date = new Date(0)
  date.setFullYear(year, month, day - 1)
  date.setHours(0, 0, 0, 0)
  return date
}

module.exports = startOfYesterday


/***/ }),

/***/ "../../node_modules/date-fns/sub_days/index.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_days/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addDays = __webpack_require__(/*! ../add_days/index.js */ "../../node_modules/date-fns/add_days/index.js")

/**
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be subtracted
 * @returns {Date} the new date with the days subtracted
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * var result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */
function subDays (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addDays(dirtyDate, -amount)
}

module.exports = subDays


/***/ }),

/***/ "../../node_modules/date-fns/sub_hours/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_hours/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addHours = __webpack_require__(/*! ../add_hours/index.js */ "../../node_modules/date-fns/add_hours/index.js")

/**
 * @category Hour Helpers
 * @summary Subtract the specified number of hours from the given date.
 *
 * @description
 * Subtract the specified number of hours from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be subtracted
 * @returns {Date} the new date with the hours subtracted
 *
 * @example
 * // Subtract 2 hours from 11 July 2014 01:00:00:
 * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)
 * //=> Thu Jul 10 2014 23:00:00
 */
function subHours (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addHours(dirtyDate, -amount)
}

module.exports = subHours


/***/ }),

/***/ "../../node_modules/date-fns/sub_iso_years/index.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_iso_years/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addISOYears = __webpack_require__(/*! ../add_iso_years/index.js */ "../../node_modules/date-fns/add_iso_years/index.js")

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Subtract the specified number of ISO week-numbering years from the given date.
 *
 * @description
 * Subtract the specified number of ISO week-numbering years from the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of ISO week-numbering years to be subtracted
 * @returns {Date} the new date with the ISO week-numbering years subtracted
 *
 * @example
 * // Subtract 5 ISO week-numbering years from 1 September 2014:
 * var result = subISOYears(new Date(2014, 8, 1), 5)
 * //=> Mon Aug 31 2009 00:00:00
 */
function subISOYears (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addISOYears(dirtyDate, -amount)
}

module.exports = subISOYears


/***/ }),

/***/ "../../node_modules/date-fns/sub_milliseconds/index.js":
/*!************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_milliseconds/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMilliseconds = __webpack_require__(/*! ../add_milliseconds/index.js */ "../../node_modules/date-fns/add_milliseconds/index.js")

/**
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted
 * @returns {Date} the new date with the milliseconds subtracted
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMilliseconds(dirtyDate, -amount)
}

module.exports = subMilliseconds


/***/ }),

/***/ "../../node_modules/date-fns/sub_minutes/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_minutes/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMinutes = __webpack_require__(/*! ../add_minutes/index.js */ "../../node_modules/date-fns/add_minutes/index.js")

/**
 * @category Minute Helpers
 * @summary Subtract the specified number of minutes from the given date.
 *
 * @description
 * Subtract the specified number of minutes from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of minutes to be subtracted
 * @returns {Date} the new date with the mintues subtracted
 *
 * @example
 * // Subtract 30 minutes from 10 July 2014 12:00:00:
 * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 11:30:00
 */
function subMinutes (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMinutes(dirtyDate, -amount)
}

module.exports = subMinutes


/***/ }),

/***/ "../../node_modules/date-fns/sub_months/index.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_months/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addMonths = __webpack_require__(/*! ../add_months/index.js */ "../../node_modules/date-fns/add_months/index.js")

/**
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted
 * @returns {Date} the new date with the months subtracted
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * var result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */
function subMonths (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addMonths(dirtyDate, -amount)
}

module.exports = subMonths


/***/ }),

/***/ "../../node_modules/date-fns/sub_quarters/index.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_quarters/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addQuarters = __webpack_require__(/*! ../add_quarters/index.js */ "../../node_modules/date-fns/add_quarters/index.js")

/**
 * @category Quarter Helpers
 * @summary Subtract the specified number of year quarters from the given date.
 *
 * @description
 * Subtract the specified number of year quarters from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of quarters to be subtracted
 * @returns {Date} the new date with the quarters subtracted
 *
 * @example
 * // Subtract 3 quarters from 1 September 2014:
 * var result = subQuarters(new Date(2014, 8, 1), 3)
 * //=> Sun Dec 01 2013 00:00:00
 */
function subQuarters (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addQuarters(dirtyDate, -amount)
}

module.exports = subQuarters


/***/ }),

/***/ "../../node_modules/date-fns/sub_seconds/index.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_seconds/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addSeconds = __webpack_require__(/*! ../add_seconds/index.js */ "../../node_modules/date-fns/add_seconds/index.js")

/**
 * @category Second Helpers
 * @summary Subtract the specified number of seconds from the given date.
 *
 * @description
 * Subtract the specified number of seconds from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be subtracted
 * @returns {Date} the new date with the seconds subtracted
 *
 * @example
 * // Subtract 30 seconds from 10 July 2014 12:45:00:
 * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:44:30
 */
function subSeconds (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addSeconds(dirtyDate, -amount)
}

module.exports = subSeconds


/***/ }),

/***/ "../../node_modules/date-fns/sub_weeks/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_weeks/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addWeeks = __webpack_require__(/*! ../add_weeks/index.js */ "../../node_modules/date-fns/add_weeks/index.js")

/**
 * @category Week Helpers
 * @summary Subtract the specified number of weeks from the given date.
 *
 * @description
 * Subtract the specified number of weeks from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be subtracted
 * @returns {Date} the new date with the weeks subtracted
 *
 * @example
 * // Subtract 4 weeks from 1 September 2014:
 * var result = subWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Aug 04 2014 00:00:00
 */
function subWeeks (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addWeeks(dirtyDate, -amount)
}

module.exports = subWeeks


/***/ }),

/***/ "../../node_modules/date-fns/sub_years/index.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/date-fns/sub_years/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var addYears = __webpack_require__(/*! ../add_years/index.js */ "../../node_modules/date-fns/add_years/index.js")

/**
 * @category Year Helpers
 * @summary Subtract the specified number of years from the given date.
 *
 * @description
 * Subtract the specified number of years from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be subtracted
 * @returns {Date} the new date with the years subtracted
 *
 * @example
 * // Subtract 5 years from 1 September 2014:
 * var result = subYears(new Date(2014, 8, 1), 5)
 * //=> Tue Sep 01 2009 00:00:00
 */
function subYears (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount)
  return addYears(dirtyDate, -amount)
}

module.exports = subYears


/***/ }),

/***/ "../../node_modules/ieee754/index.js":
/*!******************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/ieee754/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "../../node_modules/inherits/inherits_browser.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/inherits/inherits_browser.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!******************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/isarray/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "../../node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale sync ^\.\/.*$ ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "../../node_modules/moment/locale/af.js",
	"./af.js": "../../node_modules/moment/locale/af.js",
	"./ar": "../../node_modules/moment/locale/ar.js",
	"./ar-dz": "../../node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "../../node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "../../node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "../../node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "../../node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "../../node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "../../node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "../../node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "../../node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "../../node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "../../node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "../../node_modules/moment/locale/ar-tn.js",
	"./ar.js": "../../node_modules/moment/locale/ar.js",
	"./az": "../../node_modules/moment/locale/az.js",
	"./az.js": "../../node_modules/moment/locale/az.js",
	"./be": "../../node_modules/moment/locale/be.js",
	"./be.js": "../../node_modules/moment/locale/be.js",
	"./bg": "../../node_modules/moment/locale/bg.js",
	"./bg.js": "../../node_modules/moment/locale/bg.js",
	"./bm": "../../node_modules/moment/locale/bm.js",
	"./bm.js": "../../node_modules/moment/locale/bm.js",
	"./bn": "../../node_modules/moment/locale/bn.js",
	"./bn-bd": "../../node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "../../node_modules/moment/locale/bn-bd.js",
	"./bn.js": "../../node_modules/moment/locale/bn.js",
	"./bo": "../../node_modules/moment/locale/bo.js",
	"./bo.js": "../../node_modules/moment/locale/bo.js",
	"./br": "../../node_modules/moment/locale/br.js",
	"./br.js": "../../node_modules/moment/locale/br.js",
	"./bs": "../../node_modules/moment/locale/bs.js",
	"./bs.js": "../../node_modules/moment/locale/bs.js",
	"./ca": "../../node_modules/moment/locale/ca.js",
	"./ca.js": "../../node_modules/moment/locale/ca.js",
	"./cs": "../../node_modules/moment/locale/cs.js",
	"./cs.js": "../../node_modules/moment/locale/cs.js",
	"./cv": "../../node_modules/moment/locale/cv.js",
	"./cv.js": "../../node_modules/moment/locale/cv.js",
	"./cy": "../../node_modules/moment/locale/cy.js",
	"./cy.js": "../../node_modules/moment/locale/cy.js",
	"./da": "../../node_modules/moment/locale/da.js",
	"./da.js": "../../node_modules/moment/locale/da.js",
	"./de": "../../node_modules/moment/locale/de.js",
	"./de-at": "../../node_modules/moment/locale/de-at.js",
	"./de-at.js": "../../node_modules/moment/locale/de-at.js",
	"./de-ch": "../../node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "../../node_modules/moment/locale/de-ch.js",
	"./de.js": "../../node_modules/moment/locale/de.js",
	"./dv": "../../node_modules/moment/locale/dv.js",
	"./dv.js": "../../node_modules/moment/locale/dv.js",
	"./el": "../../node_modules/moment/locale/el.js",
	"./el.js": "../../node_modules/moment/locale/el.js",
	"./en-au": "../../node_modules/moment/locale/en-au.js",
	"./en-au.js": "../../node_modules/moment/locale/en-au.js",
	"./en-ca": "../../node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "../../node_modules/moment/locale/en-ca.js",
	"./en-gb": "../../node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "../../node_modules/moment/locale/en-gb.js",
	"./en-ie": "../../node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "../../node_modules/moment/locale/en-ie.js",
	"./en-il": "../../node_modules/moment/locale/en-il.js",
	"./en-il.js": "../../node_modules/moment/locale/en-il.js",
	"./en-in": "../../node_modules/moment/locale/en-in.js",
	"./en-in.js": "../../node_modules/moment/locale/en-in.js",
	"./en-nz": "../../node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "../../node_modules/moment/locale/en-nz.js",
	"./en-sg": "../../node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "../../node_modules/moment/locale/en-sg.js",
	"./eo": "../../node_modules/moment/locale/eo.js",
	"./eo.js": "../../node_modules/moment/locale/eo.js",
	"./es": "../../node_modules/moment/locale/es.js",
	"./es-do": "../../node_modules/moment/locale/es-do.js",
	"./es-do.js": "../../node_modules/moment/locale/es-do.js",
	"./es-mx": "../../node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "../../node_modules/moment/locale/es-mx.js",
	"./es-us": "../../node_modules/moment/locale/es-us.js",
	"./es-us.js": "../../node_modules/moment/locale/es-us.js",
	"./es.js": "../../node_modules/moment/locale/es.js",
	"./et": "../../node_modules/moment/locale/et.js",
	"./et.js": "../../node_modules/moment/locale/et.js",
	"./eu": "../../node_modules/moment/locale/eu.js",
	"./eu.js": "../../node_modules/moment/locale/eu.js",
	"./fa": "../../node_modules/moment/locale/fa.js",
	"./fa.js": "../../node_modules/moment/locale/fa.js",
	"./fi": "../../node_modules/moment/locale/fi.js",
	"./fi.js": "../../node_modules/moment/locale/fi.js",
	"./fil": "../../node_modules/moment/locale/fil.js",
	"./fil.js": "../../node_modules/moment/locale/fil.js",
	"./fo": "../../node_modules/moment/locale/fo.js",
	"./fo.js": "../../node_modules/moment/locale/fo.js",
	"./fr": "../../node_modules/moment/locale/fr.js",
	"./fr-ca": "../../node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "../../node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "../../node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "../../node_modules/moment/locale/fr-ch.js",
	"./fr.js": "../../node_modules/moment/locale/fr.js",
	"./fy": "../../node_modules/moment/locale/fy.js",
	"./fy.js": "../../node_modules/moment/locale/fy.js",
	"./ga": "../../node_modules/moment/locale/ga.js",
	"./ga.js": "../../node_modules/moment/locale/ga.js",
	"./gd": "../../node_modules/moment/locale/gd.js",
	"./gd.js": "../../node_modules/moment/locale/gd.js",
	"./gl": "../../node_modules/moment/locale/gl.js",
	"./gl.js": "../../node_modules/moment/locale/gl.js",
	"./gom-deva": "../../node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "../../node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "../../node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "../../node_modules/moment/locale/gom-latn.js",
	"./gu": "../../node_modules/moment/locale/gu.js",
	"./gu.js": "../../node_modules/moment/locale/gu.js",
	"./he": "../../node_modules/moment/locale/he.js",
	"./he.js": "../../node_modules/moment/locale/he.js",
	"./hi": "../../node_modules/moment/locale/hi.js",
	"./hi.js": "../../node_modules/moment/locale/hi.js",
	"./hr": "../../node_modules/moment/locale/hr.js",
	"./hr.js": "../../node_modules/moment/locale/hr.js",
	"./hu": "../../node_modules/moment/locale/hu.js",
	"./hu.js": "../../node_modules/moment/locale/hu.js",
	"./hy-am": "../../node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "../../node_modules/moment/locale/hy-am.js",
	"./id": "../../node_modules/moment/locale/id.js",
	"./id.js": "../../node_modules/moment/locale/id.js",
	"./is": "../../node_modules/moment/locale/is.js",
	"./is.js": "../../node_modules/moment/locale/is.js",
	"./it": "../../node_modules/moment/locale/it.js",
	"./it-ch": "../../node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "../../node_modules/moment/locale/it-ch.js",
	"./it.js": "../../node_modules/moment/locale/it.js",
	"./ja": "../../node_modules/moment/locale/ja.js",
	"./ja.js": "../../node_modules/moment/locale/ja.js",
	"./jv": "../../node_modules/moment/locale/jv.js",
	"./jv.js": "../../node_modules/moment/locale/jv.js",
	"./ka": "../../node_modules/moment/locale/ka.js",
	"./ka.js": "../../node_modules/moment/locale/ka.js",
	"./kk": "../../node_modules/moment/locale/kk.js",
	"./kk.js": "../../node_modules/moment/locale/kk.js",
	"./km": "../../node_modules/moment/locale/km.js",
	"./km.js": "../../node_modules/moment/locale/km.js",
	"./kn": "../../node_modules/moment/locale/kn.js",
	"./kn.js": "../../node_modules/moment/locale/kn.js",
	"./ko": "../../node_modules/moment/locale/ko.js",
	"./ko.js": "../../node_modules/moment/locale/ko.js",
	"./ku": "../../node_modules/moment/locale/ku.js",
	"./ku.js": "../../node_modules/moment/locale/ku.js",
	"./ky": "../../node_modules/moment/locale/ky.js",
	"./ky.js": "../../node_modules/moment/locale/ky.js",
	"./lb": "../../node_modules/moment/locale/lb.js",
	"./lb.js": "../../node_modules/moment/locale/lb.js",
	"./lo": "../../node_modules/moment/locale/lo.js",
	"./lo.js": "../../node_modules/moment/locale/lo.js",
	"./lt": "../../node_modules/moment/locale/lt.js",
	"./lt.js": "../../node_modules/moment/locale/lt.js",
	"./lv": "../../node_modules/moment/locale/lv.js",
	"./lv.js": "../../node_modules/moment/locale/lv.js",
	"./me": "../../node_modules/moment/locale/me.js",
	"./me.js": "../../node_modules/moment/locale/me.js",
	"./mi": "../../node_modules/moment/locale/mi.js",
	"./mi.js": "../../node_modules/moment/locale/mi.js",
	"./mk": "../../node_modules/moment/locale/mk.js",
	"./mk.js": "../../node_modules/moment/locale/mk.js",
	"./ml": "../../node_modules/moment/locale/ml.js",
	"./ml.js": "../../node_modules/moment/locale/ml.js",
	"./mn": "../../node_modules/moment/locale/mn.js",
	"./mn.js": "../../node_modules/moment/locale/mn.js",
	"./mr": "../../node_modules/moment/locale/mr.js",
	"./mr.js": "../../node_modules/moment/locale/mr.js",
	"./ms": "../../node_modules/moment/locale/ms.js",
	"./ms-my": "../../node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "../../node_modules/moment/locale/ms-my.js",
	"./ms.js": "../../node_modules/moment/locale/ms.js",
	"./mt": "../../node_modules/moment/locale/mt.js",
	"./mt.js": "../../node_modules/moment/locale/mt.js",
	"./my": "../../node_modules/moment/locale/my.js",
	"./my.js": "../../node_modules/moment/locale/my.js",
	"./nb": "../../node_modules/moment/locale/nb.js",
	"./nb.js": "../../node_modules/moment/locale/nb.js",
	"./ne": "../../node_modules/moment/locale/ne.js",
	"./ne.js": "../../node_modules/moment/locale/ne.js",
	"./nl": "../../node_modules/moment/locale/nl.js",
	"./nl-be": "../../node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "../../node_modules/moment/locale/nl-be.js",
	"./nl.js": "../../node_modules/moment/locale/nl.js",
	"./nn": "../../node_modules/moment/locale/nn.js",
	"./nn.js": "../../node_modules/moment/locale/nn.js",
	"./oc-lnc": "../../node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "../../node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "../../node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "../../node_modules/moment/locale/pa-in.js",
	"./pl": "../../node_modules/moment/locale/pl.js",
	"./pl.js": "../../node_modules/moment/locale/pl.js",
	"./pt": "../../node_modules/moment/locale/pt.js",
	"./pt-br": "../../node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "../../node_modules/moment/locale/pt-br.js",
	"./pt.js": "../../node_modules/moment/locale/pt.js",
	"./ro": "../../node_modules/moment/locale/ro.js",
	"./ro.js": "../../node_modules/moment/locale/ro.js",
	"./ru": "../../node_modules/moment/locale/ru.js",
	"./ru.js": "../../node_modules/moment/locale/ru.js",
	"./sd": "../../node_modules/moment/locale/sd.js",
	"./sd.js": "../../node_modules/moment/locale/sd.js",
	"./se": "../../node_modules/moment/locale/se.js",
	"./se.js": "../../node_modules/moment/locale/se.js",
	"./si": "../../node_modules/moment/locale/si.js",
	"./si.js": "../../node_modules/moment/locale/si.js",
	"./sk": "../../node_modules/moment/locale/sk.js",
	"./sk.js": "../../node_modules/moment/locale/sk.js",
	"./sl": "../../node_modules/moment/locale/sl.js",
	"./sl.js": "../../node_modules/moment/locale/sl.js",
	"./sq": "../../node_modules/moment/locale/sq.js",
	"./sq.js": "../../node_modules/moment/locale/sq.js",
	"./sr": "../../node_modules/moment/locale/sr.js",
	"./sr-cyrl": "../../node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "../../node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "../../node_modules/moment/locale/sr.js",
	"./ss": "../../node_modules/moment/locale/ss.js",
	"./ss.js": "../../node_modules/moment/locale/ss.js",
	"./sv": "../../node_modules/moment/locale/sv.js",
	"./sv.js": "../../node_modules/moment/locale/sv.js",
	"./sw": "../../node_modules/moment/locale/sw.js",
	"./sw.js": "../../node_modules/moment/locale/sw.js",
	"./ta": "../../node_modules/moment/locale/ta.js",
	"./ta.js": "../../node_modules/moment/locale/ta.js",
	"./te": "../../node_modules/moment/locale/te.js",
	"./te.js": "../../node_modules/moment/locale/te.js",
	"./tet": "../../node_modules/moment/locale/tet.js",
	"./tet.js": "../../node_modules/moment/locale/tet.js",
	"./tg": "../../node_modules/moment/locale/tg.js",
	"./tg.js": "../../node_modules/moment/locale/tg.js",
	"./th": "../../node_modules/moment/locale/th.js",
	"./th.js": "../../node_modules/moment/locale/th.js",
	"./tk": "../../node_modules/moment/locale/tk.js",
	"./tk.js": "../../node_modules/moment/locale/tk.js",
	"./tl-ph": "../../node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "../../node_modules/moment/locale/tl-ph.js",
	"./tlh": "../../node_modules/moment/locale/tlh.js",
	"./tlh.js": "../../node_modules/moment/locale/tlh.js",
	"./tr": "../../node_modules/moment/locale/tr.js",
	"./tr.js": "../../node_modules/moment/locale/tr.js",
	"./tzl": "../../node_modules/moment/locale/tzl.js",
	"./tzl.js": "../../node_modules/moment/locale/tzl.js",
	"./tzm": "../../node_modules/moment/locale/tzm.js",
	"./tzm-latn": "../../node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "../../node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "../../node_modules/moment/locale/tzm.js",
	"./ug-cn": "../../node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "../../node_modules/moment/locale/ug-cn.js",
	"./uk": "../../node_modules/moment/locale/uk.js",
	"./uk.js": "../../node_modules/moment/locale/uk.js",
	"./ur": "../../node_modules/moment/locale/ur.js",
	"./ur.js": "../../node_modules/moment/locale/ur.js",
	"./uz": "../../node_modules/moment/locale/uz.js",
	"./uz-latn": "../../node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "../../node_modules/moment/locale/uz-latn.js",
	"./uz.js": "../../node_modules/moment/locale/uz.js",
	"./vi": "../../node_modules/moment/locale/vi.js",
	"./vi.js": "../../node_modules/moment/locale/vi.js",
	"./x-pseudo": "../../node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "../../node_modules/moment/locale/x-pseudo.js",
	"./yo": "../../node_modules/moment/locale/yo.js",
	"./yo.js": "../../node_modules/moment/locale/yo.js",
	"./zh-cn": "../../node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "../../node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "../../node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "../../node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "../../node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "../../node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "../../node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "../../node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "../../node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "../../node_modules/moment/locale/af.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/af.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var af = moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
            '_'
        ),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (input) {
            return /^nm$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: "'n paar sekondes",
            ss: '%d sekondes',
            m: "'n minuut",
            mm: '%d minute',
            h: "'n uur",
            hh: '%d ure',
            d: "'n dag",
            dd: '%d dae',
            M: "'n maand",
            MM: '%d maande',
            y: "'n jaar",
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            ); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        },
    });

    return af;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar-dz.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar-dz.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Amine Roukh: https://github.com/Amine27
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi
//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'جانفي',
            'فيفري',
            'مارس',
            'أفريل',
            'ماي',
            'جوان',
            'جويلية',
            'أوت',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arDz = moment.defineLocale('ar-dz', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arDz;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar-kw.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar-kw.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arKw = moment.defineLocale('ar-kw', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arKw;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar-ly.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar-ly.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Libya) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            0: '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arLy = moment.defineLocale('ar-ly', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arLy;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar-ma.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar-ma.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arMa = moment.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arMa;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar-sa.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar-sa.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        };

    var arSa = moment.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return arSa;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar-tn.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar-tn.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort:
            'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arTn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ar.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ar.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var ar = moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ar;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/az.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/az.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı',
    };

    var az = moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
            '_'
        ),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays:
            'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split(
                '_'
            ),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'bir neçə saniyə',
            ss: '%d saniyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il',
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = (number % 100) - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return az;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/be.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/be.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            dd: 'дзень_дні_дзён',
            MM: 'месяц_месяцы_месяцаў',
            yy: 'год_гады_гадоў',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split(
                '_'
            ),
            standalone:
                'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split(
                    '_'
                ),
        },
        monthsShort:
            'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split(
                '_'
            ),
            standalone:
                'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split(
                    '_'
                ),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
        },
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm',
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'дзень',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) &&
                        number % 100 !== 12 &&
                        number % 100 !== 13
                        ? number + '-і'
                        : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return be;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/bg.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/bg.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bg = moment.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Миналата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Миналия] dddd [в] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            ss: '%d секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            w: 'седмица',
            ww: '%d седмици',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bg;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/bm.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/bm.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bm = moment.defineLocale('bm', {
        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split(
            '_'
        ),
        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
        },
        calendar: {
            sameDay: '[Bi lɛrɛ] LT',
            nextDay: '[Sini lɛrɛ] LT',
            nextWeek: 'dddd [don lɛrɛ] LT',
            lastDay: '[Kunu lɛrɛ] LT',
            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s kɔnɔ',
            past: 'a bɛ %s bɔ',
            s: 'sanga dama dama',
            ss: 'sekondi %d',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lɛrɛ kelen',
            hh: 'lɛrɛ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return bm;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/bn-bd.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/bn-bd.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali (Bangladesh) [bn-bd]
//! author : Asraf Hossain Patoary : https://github.com/ashwoolford

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bnBd = moment.defineLocale('bn-bd', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort:
            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
                '_'
            ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },

        meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'রাত') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ভোর') {
                return hour;
            } else if (meridiem === 'সকাল') {
                return hour;
            } else if (meridiem === 'দুপুর') {
                return hour >= 3 ? hour : hour + 12;
            } else if (meridiem === 'বিকাল') {
                return hour + 12;
            } else if (meridiem === 'সন্ধ্যা') {
                return hour + 12;
            }
        },

        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 6) {
                return 'ভোর';
            } else if (hour < 12) {
                return 'সকাল';
            } else if (hour < 15) {
                return 'দুপুর';
            } else if (hour < 18) {
                return 'বিকাল';
            } else if (hour < 20) {
                return 'সন্ধ্যা';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bnBd;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/bn.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/bn.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bn = moment.defineLocale('bn', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort:
            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
                '_'
            ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/bo.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/bo.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '༡',
            2: '༢',
            3: '༣',
            4: '༤',
            5: '༥',
            6: '༦',
            7: '༧',
            8: '༨',
            9: '༩',
            0: '༠',
        },
        numberMap = {
            '༡': '1',
            '༢': '2',
            '༣': '3',
            '༤': '4',
            '༥': '5',
            '༦': '6',
            '༧': '7',
            '༨': '8',
            '༩': '9',
            '༠': '0',
        };

    var bo = moment.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split(
            '_'
        ),
        monthsShort:
            'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split(
                '_'
            ),
        monthsShortRegex: /^(ཟླ་\d{1,2})/,
        monthsParseExact: true,
        weekdays:
            'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split(
                '_'
            ),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split(
            '_'
        ),
        weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            ss: '%d སྐར་ཆ།',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ',
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/br.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/br.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            mm: 'munutenn',
            MM: 'miz',
            dd: 'devezh',
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            m: 'v',
            b: 'v',
            d: 'z',
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var monthsParse = [
            /^gen/i,
            /^c[ʼ\']hwe/i,
            /^meu/i,
            /^ebr/i,
            /^mae/i,
            /^(mez|eve)/i,
            /^gou/i,
            /^eos/i,
            /^gwe/i,
            /^her/i,
            /^du/i,
            /^ker/i,
        ],
        monthsRegex =
            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        monthsStrictRegex =
            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
        monthsShortStrictRegex =
            /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        fullWeekdaysParse = [
            /^sul/i,
            /^lun/i,
            /^meurzh/i,
            /^merc[ʼ\']her/i,
            /^yaou/i,
            /^gwener/i,
            /^sadorn/i,
        ],
        shortWeekdaysParse = [
            /^Sul/i,
            /^Lun/i,
            /^Meu/i,
            /^Mer/i,
            /^Yao/i,
            /^Gwe/i,
            /^Sad/i,
        ],
        minWeekdaysParse = [
            /^Su/i,
            /^Lu/i,
            /^Me([^r]|$)/i,
            /^Mer/i,
            /^Ya/i,
            /^Gw/i,
            /^Sa/i,
        ];

    var br = moment.defineLocale('br', {
        months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
            '_'
        ),
        monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParse: minWeekdaysParse,
        fullWeekdaysParse: fullWeekdaysParse,
        shortWeekdaysParse: shortWeekdaysParse,
        minWeekdaysParse: minWeekdaysParse,

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY HH:mm',
            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warcʼhoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Decʼh da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s ʼzo',
            s: 'un nebeud segondennoù',
            ss: '%d eilenn',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function (number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
        isPM: function (token) {
            return token === 'g.m.';
        },
        meridiem: function (hour, minute, isLower) {
            return hour < 12 ? 'a.m.' : 'g.m.';
        },
    });

    return br;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/bs.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/bs.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bs;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ca.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ca.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ca = moment.defineLocale('ca', {
        months: {
            standalone:
                'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
                    '_'
                ),
            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
                '_'
            ),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [passat a ' +
                    (this.hours() !== 1 ? 'les' : 'la') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'uns segons',
            ss: '%d segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ca;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/cs.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/cs.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = {
            format: 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(
                '_'
            ),
            standalone:
                'ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince'.split(
                    '_'
                ),
        },
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
        monthsParse = [
            /^led/i,
            /^úno/i,
            /^bře/i,
            /^dub/i,
            /^kvě/i,
            /^(čvn|červen$|června)/i,
            /^(čvc|červenec|července)/i,
            /^srp/i,
            /^zář/i,
            /^říj/i,
            /^lis/i,
            /^pro/i,
        ],
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsRegex =
            /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
        }
    }

    var cs = moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsStrictRegex:
            /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex:
            /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY',
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cs;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/cv.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/cv.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cv = moment.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split(
            '_'
        ),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays:
            'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split(
                '_'
            ),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (output) {
                var affix = /сехет$/i.exec(output)
                    ? 'рен'
                    : /ҫул$/i.exec(output)
                    ? 'тан'
                    : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            ss: '%d ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return cv;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/cy.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/cy.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
            '_'
        ),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
            '_'
        ),
        weekdays:
            'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
                '_'
            ),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '',
                    'af',
                    'il',
                    'ydd',
                    'ydd',
                    'ed',
                    'ed',
                    'ed',
                    'fed',
                    'fed',
                    'fed', // 1af to 10fed
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'fed', // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cy;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/da.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/da.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var da = moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'på dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            ss: '%d sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return da;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/de-at.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/de-at.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deAt;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/de-ch.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/de-ch.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deCh;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/de.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/de.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return de;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/dv.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/dv.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'ޖެނުއަރީ',
            'ފެބްރުއަރީ',
            'މާރިޗު',
            'އޭޕްރީލު',
            'މޭ',
            'ޖޫން',
            'ޖުލައި',
            'އޯގަސްޓު',
            'ސެޕްޓެމްބަރު',
            'އޮކްޓޯބަރު',
            'ނޮވެމްބަރު',
            'ޑިސެމްބަރު',
        ],
        weekdays = [
            'އާދިއްތަ',
            'ހޯމަ',
            'އަންގާރަ',
            'ބުދަ',
            'ބުރާސްފަތި',
            'ހުކުރު',
            'ހޮނިހިރު',
        ];

    var dv = moment.defineLocale('dv', {
        months: months,
        monthsShort: months,
        weekdays: weekdays,
        weekdaysShort: weekdays,
        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /މކ|މފ/,
        isPM: function (input) {
            return 'މފ' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            ss: 'd% ސިކުންތު',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return dv;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/el.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/el.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    var el = moment.defineLocale('el', {
        monthsNominativeEl:
            'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split(
                '_'
            ),
        monthsGenitiveEl:
            'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split(
                '_'
            ),
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (
                typeof format === 'string' &&
                /D/.test(format.substring(0, format.indexOf('MMMM')))
            ) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split(
            '_'
        ),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function (input) {
            return (input + '').toLowerCase()[0] === 'μ';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L',
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            ss: '%d δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια',
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4st is the first week of the year.
        },
    });

    return el;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-au.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-au.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enAu = moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enAu;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-ca.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-ca.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enCa = moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enCa;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-gb.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-gb.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enGb = moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enGb;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-ie.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-ie.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIe = moment.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enIe;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-il.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-il.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Israel) [en-il]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIl = moment.defineLocale('en-il', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enIl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-in.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-in.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (India) [en-in]
//! author : Jatin Agrawal : https://github.com/jatinag22

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIn = moment.defineLocale('en-in', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return enIn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-nz.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-nz.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enNz = moment.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enNz;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/en-sg.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/en-sg.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Singapore) [en-sg]
//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enSg = moment.defineLocale('en-sg', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enSg;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/eo.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/eo.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean
//! comment : Vivakvo corrected the translation by colindean and miestasmia

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eo = moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: '[la] D[-an de] MMMM, YYYY',
            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd[n je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasintan] dddd[n je] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'post %s',
            past: 'antaŭ %s',
            s: 'kelkaj sekundoj',
            ss: '%d sekundoj',
            m: 'unu minuto',
            mm: '%d minutoj',
            h: 'unu horo',
            hh: '%d horoj',
            d: 'unu tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'unu monato',
            MM: '%d monatoj',
            y: 'unu jaro',
            yy: '%d jaroj',
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/es-do.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/es-do.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return esDo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/es-mx.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/es-mx.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Mexico) [es-mx]
//! author : JC Franco : https://github.com/jcfranco

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esMx = moment.defineLocale('es-mx', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return esMx;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/es-us.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/es-us.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta
//! author : chrisrodz : https://github.com/chrisrodz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'MM/DD/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return esUs;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/es.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/es.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return es;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/et.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/et.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            ss: [number + 'sekundi', number + 'sekundit'],
            m: ['ühe minuti', 'üks minut'],
            mm: [number + ' minuti', number + ' minutit'],
            h: ['ühe tunni', 'tund aega', 'üks tund'],
            hh: [number + ' tunni', number + ' tundi'],
            d: ['ühe päeva', 'üks päev'],
            M: ['kuu aja', 'kuu aega', 'üks kuu'],
            MM: [number + ' kuu', number + ' kuud'],
            y: ['ühe aasta', 'aasta', 'üks aasta'],
            yy: [number + ' aasta', number + ' aastat'],
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
            '_'
        ),
        monthsShort:
            'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays:
            'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split(
                '_'
            ),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d päeva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return et;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/eu.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/eu.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eu = moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
            '_'
        ),
        monthsShort:
            'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
                '_'
            ),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            ss: '%d segundo',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eu;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fa.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fa.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '۱',
            2: '۲',
            3: '۳',
            4: '۴',
            5: '۵',
            6: '۶',
            7: '۷',
            8: '۸',
            9: '۹',
            0: '۰',
        },
        numberMap = {
            '۱': '1',
            '۲': '2',
            '۳': '3',
            '۴': '4',
            '۵': '5',
            '۶': '6',
            '۷': '7',
            '۸': '8',
            '۹': '9',
            '۰': '0',
        };

    var fa = moment.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
            '_'
        ),
        monthsShort:
            'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
                '_'
            ),
        weekdays:
            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
                '_'
            ),
        weekdaysShort:
            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
                '_'
            ),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چند ثانیه',
            ss: '%d ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string
                .replace(/[۰-۹]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return fa;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fi.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fi.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersPast =
            'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(
                ' '
            ),
        numbersFuture = [
            'nolla',
            'yhden',
            'kahden',
            'kolmen',
            'neljän',
            'viiden',
            'kuuden',
            numbersPast[7],
            numbersPast[8],
            numbersPast[9],
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                result = isFuture ? 'sekunnin' : 'sekuntia';
                break;
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10
            ? isFuture
                ? numbersFuture[number]
                : numbersPast[number]
            : number;
    }

    var fi = moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
            '_'
        ),
        monthsShort:
            'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split(
                '_'
            ),
        weekdays:
            'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
                '_'
            ),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fi;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fil.js":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fil.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Filipino [fil]
//! author : Dan Hagman : https://github.com/hagmandan
//! author : Matthew Co : https://github.com/matthewdeeco

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fil = moment.defineLocale('fil', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fil;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fo.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fo.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123
//! author : Kristian Sakarisson : https://github.com/sakarisson

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fo = moment.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays:
            'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            ss: '%d sekundir',
            m: 'ein minuttur',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaður',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fr-ca.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fr-ca.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCa = moment.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
    });

    return frCa;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fr-ch.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fr-ch.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCh = moment.defineLocale('fr-ch', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return frCh;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fr.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fr.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsStrictRegex =
            /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsShortStrictRegex =
            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
        monthsRegex =
            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsParse = [
            /^janv/i,
            /^févr/i,
            /^mars/i,
            /^avr/i,
            /^mai/i,
            /^juin/i,
            /^juil/i,
            /^août/i,
            /^sept/i,
            /^oct/i,
            /^nov/i,
            /^déc/i,
        ];

    var fr = moment.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            w: 'une semaine',
            ww: '%d semaines',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fr;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/fy.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/fy.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
            '_'
        ),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            ss: '%d sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fy;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ga.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ga.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Irish or Irish Gaelic [ga]
//! author : André Silva : https://github.com/askpt

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Eanáir',
            'Feabhra',
            'Márta',
            'Aibreán',
            'Bealtaine',
            'Meitheamh',
            'Iúil',
            'Lúnasa',
            'Meán Fómhair',
            'Deireadh Fómhair',
            'Samhain',
            'Nollaig',
        ],
        monthsShort = [
            'Ean',
            'Feabh',
            'Márt',
            'Aib',
            'Beal',
            'Meith',
            'Iúil',
            'Lún',
            'M.F.',
            'D.F.',
            'Samh',
            'Noll',
        ],
        weekdays = [
            'Dé Domhnaigh',
            'Dé Luain',
            'Dé Máirt',
            'Dé Céadaoin',
            'Déardaoin',
            'Dé hAoine',
            'Dé Sathairn',
        ],
        weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
        weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné ag] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d míonna',
            y: 'bliain',
            yy: '%d bliain',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ga;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/gd.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/gd.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Am Faoilleach',
            'An Gearran',
            'Am Màrt',
            'An Giblean',
            'An Cèitean',
            'An t-Ògmhios',
            'An t-Iuchar',
            'An Lùnastal',
            'An t-Sultain',
            'An Dàmhair',
            'An t-Samhain',
            'An Dùbhlachd',
        ],
        monthsShort = [
            'Faoi',
            'Gear',
            'Màrt',
            'Gibl',
            'Cèit',
            'Ògmh',
            'Iuch',
            'Lùn',
            'Sult',
            'Dàmh',
            'Samh',
            'Dùbh',
        ],
        weekdays = [
            'Didòmhnaich',
            'Diluain',
            'Dimàirt',
            'Diciadain',
            'Diardaoin',
            'Dihaoine',
            'Disathairne',
        ],
        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
        weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            ss: '%d diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gd;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/gl.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/gl.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var gl = moment.defineLocale('gl', {
        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split(
            '_'
        ),
        monthsShort:
            'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function () {
                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/gom-deva.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/gom-deva.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Devanagari script [gom-deva]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
            m: ['एका मिणटान', 'एक मिनूट'],
            mm: [number + ' मिणटांनी', number + ' मिणटां'],
            h: ['एका वरान', 'एक वर'],
            hh: [number + ' वरांनी', number + ' वरां'],
            d: ['एका दिसान', 'एक दीस'],
            dd: [number + ' दिसांनी', number + ' दीस'],
            M: ['एका म्हयन्यान', 'एक म्हयनो'],
            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
            y: ['एका वर्सान', 'एक वर्स'],
            yy: [number + ' वर्सांनी', number + ' वर्सां'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomDeva = moment.defineLocale('gom-deva', {
        months: {
            standalone:
                'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
                    '_'
                ),
            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
        weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
        weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [वाजतां]',
            LTS: 'A h:mm:ss [वाजतां]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]',
        },
        calendar: {
            sameDay: '[आयज] LT',
            nextDay: '[फाल्यां] LT',
            nextWeek: '[फुडलो] dddd[,] LT',
            lastDay: '[काल] LT',
            lastWeek: '[फाटलो] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s आदीं',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'वेर' only applies to day of the month
                case 'D':
                    return number + 'वेर';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राती') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळीं') {
                return hour;
            } else if (meridiem === 'दनपारां') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'सांजे') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'राती';
            } else if (hour < 12) {
                return 'सकाळीं';
            } else if (hour < 16) {
                return 'दनपारां';
            } else if (hour < 20) {
                return 'सांजे';
            } else {
                return 'राती';
            }
        },
    });

    return gomDeva;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/gom-latn.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/gom-latn.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['thoddea sekondamni', 'thodde sekond'],
            ss: [number + ' sekondamni', number + ' sekond'],
            m: ['eka mintan', 'ek minut'],
            mm: [number + ' mintamni', number + ' mintam'],
            h: ['eka voran', 'ek vor'],
            hh: [number + ' voramni', number + ' voram'],
            d: ['eka disan', 'ek dis'],
            dd: [number + ' disamni', number + ' dis'],
            M: ['eka mhoinean', 'ek mhoino'],
            MM: [number + ' mhoineamni', number + ' mhoine'],
            y: ['eka vorsan', 'ek voros'],
            yy: [number + ' vorsamni', number + ' vorsam'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months: {
            standalone:
                'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
                    '_'
                ),
            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
        },
        calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Fuddlo] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fattlo] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /rati|sokallim|donparam|sanje/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokallim') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokallim';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        },
    });

    return gomLatn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/gu.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/gu.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '૧',
            2: '૨',
            3: '૩',
            4: '૪',
            5: '૫',
            6: '૬',
            7: '૭',
            8: '૮',
            9: '૯',
            0: '૦',
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0',
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(
            '_'
        ),
        monthsShort:
            'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(
            '_'
        ),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પહેલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ',
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return gu;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/he.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/he.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var he = moment.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split(
            '_'
        ),
        monthsShort:
            'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            ss: '%d שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            },
        },
        meridiemParse:
            /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        },
    });

    return he;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/hi.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/hi.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        },
        monthsParse = [
            /^जन/i,
            /^फ़र|फर/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सितं|सित/i,
            /^अक्टू/i,
            /^नव|नवं/i,
            /^दिसं|दिस/i,
        ],
        shortMonthsParse = [
            /^जन/i,
            /^फ़र/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सित/i,
            /^अक्टू/i,
            /^नव/i,
            /^दिस/i,
        ];

    var hi = moment.defineLocale('hi', {
        months: {
            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split(
                '_'
            ),
            standalone:
                'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split(
                    '_'
                ),
        },
        monthsShort:
            'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे',
        },

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: shortMonthsParse,

        monthsRegex:
            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsShortRegex:
            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsStrictRegex:
            /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,

        monthsShortStrictRegex:
            /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,

        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            ss: '%d सेकंड',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return hi;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/hr.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/hr.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
                '_'
            ),
            standalone:
                'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
                    '_'
                ),
        },
        monthsShort:
            'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM YYYY',
            LLL: 'Do MMMM YYYY H:mm',
            LLLL: 'dddd, Do MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prošlu] [nedjelju] [u] LT';
                    case 3:
                        return '[prošlu] [srijedu] [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hr;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/hu.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/hu.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner
//! author : Peter Viszt  : https://github.com/passatgt

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var weekEndings =
        'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix
                    ? 'néhány másodperc'
                    : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix)
                    ? ' másodperc'
                    : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (
            (isFuture ? '' : '[múlt] ') +
            '[' +
            weekEndings[this.day()] +
            '] LT[-kor]'
        );
    }

    var hu = moment.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm',
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return hu;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/hy-am.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/hy-am.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var hyAm = moment.defineLocale('hy-am', {
        months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split(
                '_'
            ),
            standalone:
                'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split(
                    '_'
                ),
        },
        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays:
            'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split(
                '_'
            ),
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm',
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            ss: '%d վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի',
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hyAm;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/id.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/id.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var id = moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            ss: '%d detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return id;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/is.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/is.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nokkrar sekúndur'
                    : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum')
                    );
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return (
                        result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum')
                    );
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture
                            ? 'klukkustundir'
                            : 'klukkustundum')
                    );
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays:
            'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return is;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/it-ch.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/it-ch.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian (Switzerland) [it-ch]
//! author : xfh : https://github.com/xfh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var itCh = moment.defineLocale('it-ch', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return itCh;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/it.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/it.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz
//! author: Marco : https://github.com/Manfre98

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var it = moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: function () {
                return (
                    '[Oggi a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextDay: function () {
                return (
                    '[Domani a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextWeek: function () {
                return (
                    'dddd [a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastDay: function () {
                return (
                    '[Ieri a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return (
                            '[La scorsa] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                    default:
                        return (
                            '[Lo scorso] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'tra %s',
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            w: 'una settimana',
            ww: '%d settimane',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return it;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ja.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ja.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ja = moment.defineLocale('ja', {
        eras: [
            {
                since: '2019-05-01',
                offset: 1,
                name: '令和',
                narrow: '㋿',
                abbr: 'R',
            },
            {
                since: '1989-01-08',
                until: '2019-04-30',
                offset: 1,
                name: '平成',
                narrow: '㍻',
                abbr: 'H',
            },
            {
                since: '1926-12-25',
                until: '1989-01-07',
                offset: 1,
                name: '昭和',
                narrow: '㍼',
                abbr: 'S',
            },
            {
                since: '1912-07-30',
                until: '1926-12-24',
                offset: 1,
                name: '大正',
                narrow: '㍽',
                abbr: 'T',
            },
            {
                since: '1873-01-01',
                until: '1912-07-29',
                offset: 6,
                name: '明治',
                narrow: '㍾',
                abbr: 'M',
            },
            {
                since: '0001-01-01',
                until: '1873-12-31',
                offset: 1,
                name: '西暦',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: '紀元前',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        eraYearOrdinalRegex: /(元|\d+)年/,
        eraYearOrdinalParse: function (input, match) {
            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
        },
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日 dddd HH:mm',
            l: 'YYYY/MM/DD',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日(ddd) HH:mm',
        },
        meridiemParse: /午前|午後/i,
        isPM: function (input) {
            return input === '午後';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay: '[昨日] LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}日/,
        ordinal: function (number, period) {
            switch (period) {
                case 'y':
                    return number === 1 ? '元年' : number + '年';
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            ss: '%d秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年',
        },
    });

    return ja;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/jv.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/jv.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var jv = moment.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            ss: '%d detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return jv;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ka.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ka.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/IrakliJani

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ka = moment.defineLocale('ka', {
        months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split(
            '_'
        ),
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: {
            standalone:
                'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split(
                    '_'
                ),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split(
                '_'
            ),
            isFormat: /(წინა|შემდეგ)/,
        },
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return s.replace(
                    /(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,
                    function ($0, $1, $2) {
                        return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
                    }
                );
            },
            past: function (s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
                return s;
            },
            s: 'რამდენიმე წამი',
            ss: '%d წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი',
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if (
                number < 20 ||
                (number <= 100 && number % 20 === 0) ||
                number % 100 === 0
            ) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7,
        },
    });

    return ka;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/kk.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/kk.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші',
    };

    var kk = moment.defineLocale('kk', {
        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split(
            '_'
        ),
        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split(
            '_'
        ),
        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            ss: '%d секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return kk;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/km.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/km.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '១',
            2: '២',
            3: '៣',
            4: '៤',
            5: '៥',
            6: '៦',
            7: '៧',
            8: '៨',
            9: '៩',
            0: '០',
        },
        numberMap = {
            '១': '1',
            '២': '2',
            '៣': '3',
            '៤': '4',
            '៥': '5',
            '៦': '6',
            '៧': '7',
            '៨': '8',
            '៩': '9',
            '០': '0',
        };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort:
            'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
                '_'
            ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ',
        },
        dayOfMonthOrdinalParse: /ទី\d{1,2}/,
        ordinal: 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return km;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/kn.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/kn.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '೧',
            2: '೨',
            3: '೩',
            4: '೪',
            5: '೫',
            6: '೬',
            7: '೭',
            8: '೮',
            9: '೯',
            0: '೦',
        },
        numberMap = {
            '೧': '1',
            '೨': '2',
            '೩': '3',
            '೪': '4',
            '೫': '5',
            '೬': '6',
            '೭': '7',
            '೮': '8',
            '೯': '9',
            '೦': '0',
        };

    var kn = moment.defineLocale('kn', {
        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split(
            '_'
        ),
        monthsShort:
            'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split(
            '_'
        ),
        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[ಇಂದು] LT',
            nextDay: '[ನಾಳೆ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ನಿನ್ನೆ] LT',
            lastWeek: '[ಕೊನೆಯ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ನಂತರ',
            past: '%s ಹಿಂದೆ',
            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss: '%d ಸೆಕೆಂಡುಗಳು',
            m: 'ಒಂದು ನಿಮಿಷ',
            mm: '%d ನಿಮಿಷ',
            h: 'ಒಂದು ಗಂಟೆ',
            hh: '%d ಗಂಟೆ',
            d: 'ಒಂದು ದಿನ',
            dd: '%d ದಿನ',
            M: 'ಒಂದು ತಿಂಗಳು',
            MM: '%d ತಿಂಗಳು',
            y: 'ಒಂದು ವರ್ಷ',
            yy: '%d ವರ್ಷ',
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal: function (number) {
            return number + 'ನೇ';
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return kn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ko.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ko.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ko = moment.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split(
            '_'
        ),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h:mm',
            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
            l: 'YYYY.MM.DD.',
            ll: 'YYYY년 MMMM D일',
            lll: 'YYYY년 MMMM D일 A h:mm',
            llll: 'YYYY년 MMMM D일 dddd A h:mm',
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇 초',
            ss: '%d초',
            m: '1분',
            mm: '%d분',
            h: '한 시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한 달',
            MM: '%d달',
            y: '일 년',
            yy: '%d년',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse: /오전|오후/,
        isPM: function (token) {
            return token === '오후';
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
    });

    return ko;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ku.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ku.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kurdish [ku]
//! author : Shahram Mebashar : https://github.com/ShahramMebashar

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        months = [
            'کانونی دووەم',
            'شوبات',
            'ئازار',
            'نیسان',
            'ئایار',
            'حوزەیران',
            'تەمموز',
            'ئاب',
            'ئەیلوول',
            'تشرینی یەكەم',
            'تشرینی دووەم',
            'كانونی یەکەم',
        ];

    var ku = moment.defineLocale('ku', {
        months: months,
        monthsShort: months,
        weekdays:
            'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split(
                '_'
            ),
        weekdaysShort:
            'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ئێواره‌|به‌یانی/,
        isPM: function (input) {
            return /ئێواره‌/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'به‌یانی';
            } else {
                return 'ئێواره‌';
            }
        },
        calendar: {
            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
            nextDay: '[به‌یانی كاتژمێر] LT',
            nextWeek: 'dddd [كاتژمێر] LT',
            lastDay: '[دوێنێ كاتژمێر] LT',
            lastWeek: 'dddd [كاتژمێر] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'له‌ %s',
            past: '%s',
            s: 'چه‌ند چركه‌یه‌ك',
            ss: 'چركه‌ %d',
            m: 'یه‌ك خوله‌ك',
            mm: '%d خوله‌ك',
            h: 'یه‌ك كاتژمێر',
            hh: '%d كاتژمێر',
            d: 'یه‌ك ڕۆژ',
            dd: '%d ڕۆژ',
            M: 'یه‌ك مانگ',
            MM: '%d مانگ',
            y: 'یه‌ك ساڵ',
            yy: '%d ساڵ',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ku;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ky.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ky.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү',
    };

    var ky = moment.defineLocale('ky', {
        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
            '_'
        ),
        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split(
            '_'
        ),
        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split(
            '_'
        ),
        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгүн саат] LT',
            nextDay: '[Эртең саат] LT',
            nextWeek: 'dddd [саат] LT',
            lastDay: '[Кечээ саат] LT',
            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ичинде',
            past: '%s мурун',
            s: 'бирнече секунд',
            ss: '%d секунд',
            m: 'бир мүнөт',
            mm: '%d мүнөт',
            h: 'бир саат',
            hh: '%d саат',
            d: 'бир күн',
            dd: '%d күн',
            M: 'бир ай',
            MM: '%d ай',
            y: 'бир жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ky;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/lb.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/lb.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eng Minutt', 'enger Minutt'],
            h: ['eng Stonn', 'enger Stonn'],
            d: ['een Dag', 'engem Dag'],
            M: ['ee Mount', 'engem Mount'],
            y: ['ee Joer', 'engem Joer'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split(
                '_'
            ),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            },
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            ss: '%d Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d Méint',
            y: processRelativeTime,
            yy: '%d Joer',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lb;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/lo.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/lo.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var lo = moment.defineLocale('lo', {
        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
            '_'
        ),
        monthsShort:
            'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
                '_'
            ),
        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss: '%d ວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ',
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function (number) {
            return 'ທີ່' + number;
        },
    });

    return lo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/lt.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/lt.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundė_sekundžių_sekundes',
        m: 'minutė_minutės_minutę',
        mm: 'minutės_minučių_minutes',
        h: 'valanda_valandos_valandą',
        hh: 'valandos_valandų_valandas',
        d: 'diena_dienos_dieną',
        dd: 'dienos_dienų_dienas',
        M: 'mėnuo_mėnesio_mėnesį',
        MM: 'mėnesiai_mėnesių_mėnesius',
        y: 'metai_metų_metus',
        yy: 'metai_metų_metus',
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix
            ? forms(key)[0]
            : isFuture
            ? forms(key)[1]
            : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return (
                result + translateSingular(number, withoutSuffix, key[0], isFuture)
            );
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split(
                '_'
            ),
            standalone:
                'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split(
                    '_'
                ),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split(
                '_'
            ),
            standalone:
                'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split(
                    '_'
                ),
            isFormat: /dddd HH:mm/,
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            ss: translate,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lt;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/lv.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/lv.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        h: 'stundas_stundām_stunda_stundas'.split('_'),
        hh: 'stundas_stundām_stunda_stundas'.split('_'),
        d: 'dienas_dienām_diena_dienas'.split('_'),
        dd: 'dienas_dienām_diena_dienas'.split('_'),
        M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        y: 'gada_gadiem_gads_gadi'.split('_'),
        yy: 'gada_gadiem_gads_gadi'.split('_'),
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays:
            'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split(
                '_'
            ),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            ss: relativeTimeWithPlural,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lv;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/me.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/me.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return me;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/mi.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/mi.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split(
            '_'
        ),
        monthsShort:
            'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
                '_'
            ),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mi;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/mk.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/mk.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0
//! author : Sashko Todorov : https://github.com/bkyceh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mk = moment.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пред %s',
            s: 'неколку секунди',
            ss: '%d секунди',
            m: 'една минута',
            mm: '%d минути',
            h: 'еден час',
            hh: '%d часа',
            d: 'еден ден',
            dd: '%d дена',
            M: 'еден месец',
            MM: '%d месеци',
            y: 'една година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return mk;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ml.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ml.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ml = moment.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split(
            '_'
        ),
        monthsShort:
            'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split(
                '_'
            ),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു',
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            ss: '%d സെക്കൻഡ്',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം',
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        },
    });

    return ml;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/mn.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/mn.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Mongolian [mn]
//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split(
            '_'
        ),
        monthsShort:
            '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY оны MMMMын D',
            LLL: 'YYYY оны MMMMын D HH:mm',
            LLLL: 'dddd, YYYY оны MMMMын D HH:mm',
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM: function (input) {
            return input === 'ҮХ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar: {
            sameDay: '[Өнөөдөр] LT',
            nextDay: '[Маргааш] LT',
            nextWeek: '[Ирэх] dddd LT',
            lastDay: '[Өчигдөр] LT',
            lastWeek: '[Өнгөрсөн] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s дараа',
            past: '%s өмнө',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        },
    });

    return mn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/mr.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/mr.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'काही सेकंद';
                    break;
                case 'ss':
                    output = '%d सेकंद';
                    break;
                case 'm':
                    output = 'एक मिनिट';
                    break;
                case 'mm':
                    output = '%d मिनिटे';
                    break;
                case 'h':
                    output = 'एक तास';
                    break;
                case 'hh':
                    output = '%d तास';
                    break;
                case 'd':
                    output = 'एक दिवस';
                    break;
                case 'dd':
                    output = '%d दिवस';
                    break;
                case 'M':
                    output = 'एक महिना';
                    break;
                case 'MM':
                    output = '%d महिने';
                    break;
                case 'y':
                    output = 'एक वर्ष';
                    break;
                case 'yy':
                    output = '%d वर्षे';
                    break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'काही सेकंदां';
                    break;
                case 'ss':
                    output = '%d सेकंदां';
                    break;
                case 'm':
                    output = 'एका मिनिटा';
                    break;
                case 'mm':
                    output = '%d मिनिटां';
                    break;
                case 'h':
                    output = 'एका तासा';
                    break;
                case 'hh':
                    output = '%d तासां';
                    break;
                case 'd':
                    output = 'एका दिवसा';
                    break;
                case 'dd':
                    output = '%d दिवसां';
                    break;
                case 'M':
                    output = 'एका महिन्या';
                    break;
                case 'MM':
                    output = '%d महिन्यां';
                    break;
                case 'y':
                    output = 'एका वर्षा';
                    break;
                case 'yy':
                    output = '%d वर्षां';
                    break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
            '_'
        ),
        monthsShort:
            'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता',
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr,
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
                return hour;
            } else if (
                meridiem === 'दुपारी' ||
                meridiem === 'सायंकाळी' ||
                meridiem === 'रात्री'
            ) {
                return hour >= 12 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour >= 0 && hour < 6) {
                return 'पहाटे';
            } else if (hour < 12) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return mr;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ms-my.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ms-my.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var msMy = moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return msMy;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ms.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ms.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ms = moment.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ms;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/mt.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/mt.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maltese (Malta) [mt]
//! author : Alessandro Maruccia : https://github.com/alesma

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mt = moment.defineLocale('mt', {
        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays:
            'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split(
                '_'
            ),
        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Illum fil-]LT',
            nextDay: '[Għada fil-]LT',
            nextWeek: 'dddd [fil-]LT',
            lastDay: '[Il-bieraħ fil-]LT',
            lastWeek: 'dddd [li għadda] [fil-]LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'f’ %s',
            past: '%s ilu',
            s: 'ftit sekondi',
            ss: '%d sekondi',
            m: 'minuta',
            mm: '%d minuti',
            h: 'siegħa',
            hh: '%d siegħat',
            d: 'ġurnata',
            dd: '%d ġranet',
            M: 'xahar',
            MM: '%d xhur',
            y: 'sena',
            yy: '%d sni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mt;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/my.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/my.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '၁',
            2: '၂',
            3: '၃',
            4: '၄',
            5: '၅',
            6: '၆',
            7: '၇',
            8: '၈',
            9: '၉',
            0: '၀',
        },
        numberMap = {
            '၁': '1',
            '၂': '2',
            '၃': '3',
            '၄': '4',
            '၅': '5',
            '၆': '6',
            '၇': '7',
            '၈': '8',
            '၉': '9',
            '၀': '0',
        };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split(
            '_'
        ),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split(
            '_'
        ),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss: '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်',
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return my;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/nb.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/nb.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nb = moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            ss: '%d sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            w: 'en uke',
            ww: '%d uker',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nb;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ne.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ne.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    var ne = moment.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split(
            '_'
        ),
        monthsShort:
            'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split(
            '_'
        ),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            ss: '%d सेकेण्ड',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ne;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/nl-be.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/nl-be.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nlBe;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/nl.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/nl.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            w: 'één week',
            ww: '%d weken',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/nn.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/nn.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! authors : https://github.com/mechuwind
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nn = moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            ss: '%d sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            w: 'ei veke',
            ww: '%d veker',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/oc-lnc.js":
/*!*************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/oc-lnc.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Occitan, lengadocian dialecte [oc-lnc]
//! author : Quentin PAGÈS : https://github.com/Quenty31

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ocLnc = moment.defineLocale('oc-lnc', {
        months: {
            standalone:
                'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split(
                    '_'
                ),
            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split(
            '_'
        ),
        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: '[uèi a] LT',
            nextDay: '[deman a] LT',
            nextWeek: 'dddd [a] LT',
            lastDay: '[ièr a] LT',
            lastWeek: 'dddd [passat a] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'unas segondas',
            ss: '%d segondas',
            m: 'una minuta',
            mm: '%d minutas',
            h: 'una ora',
            hh: '%d oras',
            d: 'un jorn',
            dd: '%d jorns',
            M: 'un mes',
            MM: '%d meses',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4,
        },
    });

    return ocLnc;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/pa-in.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/pa-in.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '੧',
            2: '੨',
            3: '੩',
            4: '੪',
            5: '੫',
            6: '੬',
            7: '੭',
            8: '੮',
            9: '੯',
            0: '੦',
        },
        numberMap = {
            '੧': '1',
            '੨': '2',
            '੩': '3',
            '੪': '4',
            '੫': '5',
            '੬': '6',
            '੭': '7',
            '੮': '8',
            '੯': '9',
            '੦': '0',
        };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
            '_'
        ),
        monthsShort:
            'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
                '_'
            ),
        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split(
            '_'
        ),
        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm ਵਜੇ',
            LTS: 'A h:mm:ss ਵਜੇ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ',
        },
        calendar: {
            sameDay: '[ਅਜ] LT',
            nextDay: '[ਕਲ] LT',
            nextWeek: '[ਅਗਲਾ] dddd, LT',
            lastDay: '[ਕਲ] LT',
            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ਵਿੱਚ',
            past: '%s ਪਿਛਲੇ',
            s: 'ਕੁਝ ਸਕਿੰਟ',
            ss: '%d ਸਕਿੰਟ',
            m: 'ਇਕ ਮਿੰਟ',
            mm: '%d ਮਿੰਟ',
            h: 'ਇੱਕ ਘੰਟਾ',
            hh: '%d ਘੰਟੇ',
            d: 'ਇੱਕ ਦਿਨ',
            dd: '%d ਦਿਨ',
            M: 'ਇੱਕ ਮਹੀਨਾ',
            MM: '%d ਮਹੀਨੇ',
            y: 'ਇੱਕ ਸਾਲ',
            yy: '%d ਸਾਲ',
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return paIn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/pl.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/pl.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsNominative =
            'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split(
                '_'
            ),
        monthsSubjective =
            'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split(
                '_'
            ),
        monthsParse = [
            /^sty/i,
            /^lut/i,
            /^mar/i,
            /^kwi/i,
            /^maj/i,
            /^cze/i,
            /^lip/i,
            /^sie/i,
            /^wrz/i,
            /^paź/i,
            /^lis/i,
            /^gru/i,
        ];
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'ww':
                return result + (plural(number) ? 'tygodnie' : 'tygodni');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays:
            'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzień',
            dd: '%d dni',
            w: 'tydzień',
            ww: translate,
            M: 'miesiąc',
            MM: translate,
            y: 'rok',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/pt-br.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/pt-br.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ptBr = moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split(
                '_'
            ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
        weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        invalidDate: 'Data inválida',
    });

    return ptBr;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/pt.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/pt.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pt = moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split(
                '_'
            ),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            w: 'uma semana',
            ww: '%d semanas',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pt;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ro.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ro.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly
//! author : Emanuel Cepoi : https://github.com/cepem

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                ss: 'secunde',
                mm: 'minute',
                hh: 'ore',
                dd: 'zile',
                ww: 'săptămâni',
                MM: 'luni',
                yy: 'ani',
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
            '_'
        ),
        monthsShort:
            'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            ss: relativeTimeWithPlural,
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o oră',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            w: 'o săptămână',
            ww: relativeTimeWithPlural,
            M: 'o lună',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural,
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ro;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ru.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ru.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            hh: 'час_часа_часов',
            dd: 'день_дня_дней',
            ww: 'неделя_недели_недель',
            MM: 'месяц_месяца_месяцев',
            yy: 'год_года_лет',
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [
        /^янв/i,
        /^фев/i,
        /^мар/i,
        /^апр/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^авг/i,
        /^сен/i,
        /^окт/i,
        /^ноя/i,
        /^дек/i,
    ];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months: {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split(
                '_'
            ),
            standalone:
                'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
                    '_'
                ),
        },
        monthsShort: {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split(
                '_'
            ),
            standalone:
                'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split(
                    '_'
                ),
        },
        weekdays: {
            standalone:
                'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split(
                    '_'
                ),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split(
                '_'
            ),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/,
        },
        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex:
            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex:
            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex:
            /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соответствует только сокращённым формам
        monthsShortStrictRegex:
            /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., H:mm',
            LLLL: 'dddd, D MMMM YYYY г., H:mm',
        },
        calendar: {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'час',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            w: 'неделя',
            ww: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ru;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sd.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sd.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوري',
            'فيبروري',
            'مارچ',
            'اپريل',
            'مئي',
            'جون',
            'جولاءِ',
            'آگسٽ',
            'سيپٽمبر',
            'آڪٽوبر',
            'نومبر',
            'ڊسمبر',
        ],
        days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];

    var sd = moment.defineLocale('sd', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[اڄ] LT',
            nextDay: '[سڀاڻي] LT',
            nextWeek: 'dddd [اڳين هفتي تي] LT',
            lastDay: '[ڪالهه] LT',
            lastWeek: '[گزريل هفتي] dddd [تي] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s پوء',
            past: '%s اڳ',
            s: 'چند سيڪنڊ',
            ss: '%d سيڪنڊ',
            m: 'هڪ منٽ',
            mm: '%d منٽ',
            h: 'هڪ ڪلاڪ',
            hh: '%d ڪلاڪ',
            d: 'هڪ ڏينهن',
            dd: '%d ڏينهن',
            M: 'هڪ مهينو',
            MM: '%d مهينا',
            y: 'هڪ سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sd;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/se.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/se.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var se = moment.defineLocale('se', {
        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split(
            '_'
        ),
        monthsShort:
            'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays:
            'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split(
                '_'
            ),
        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            ss: '%d sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return se;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/si.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/si.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split(
            '_'
        ),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split(
            '_'
        ),
        weekdays:
            'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split(
                '_'
            ),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss',
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            ss: 'තත්පර %d',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal: function (number) {
            return number + ' වැනි';
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        },
    });

    return si;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sk.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sk.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months =
            'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split(
                '_'
            ),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
        }
    }

    var sk = moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sk;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sl.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sl.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nekaj sekund'
                    : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sq.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sq.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sq = moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split(
            '_'
        ),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split(
            '_'
        ),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            ss: '%d sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sq;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sr-cyrl.js":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sr-cyrl.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једног минута'],
            mm: ['минут', 'минута', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            d: ['један дан', 'једног дана'],
            dd: ['дан', 'дана', 'дана'],
            M: ['један месец', 'једног месеца'],
            MM: ['месец', 'месеца', 'месеци'],
            y: ['једну годину', 'једне године'],
            yy: ['годину', 'године', 'година'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'једна година';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'годину') {
                return number + ' година';
            }

            return number + ' ' + word;
        },
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split(
            '_'
        ),
        monthsShort:
            'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return srCyrl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sr.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sr.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            d: ['jedan dan', 'jednog dana'],
            dd: ['dan', 'dana', 'dana'],
            M: ['jedan mesec', 'jednog meseca'],
            MM: ['mesec', 'meseca', 'meseci'],
            y: ['jednu godinu', 'jedne godine'],
            yy: ['godinu', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'jedna godina';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'godinu') {
                return number + ' godina';
            }

            return number + ' ' + word;
        },
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sr;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ss.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ss.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ss = moment.defineLocale('ss', {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
            '_'
        ),
        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays:
            'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
                '_'
            ),
        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            ss: '%d mzuzwana',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka',
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: '%d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ss;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sv.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sv.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sv = moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            ss: '%d sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? ':e'
                        : b === 1
                        ? ':a'
                        : b === 2
                        ? ':a'
                        : b === 3
                        ? ':e'
                        : ':e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sv;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/sw.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/sw.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sw = moment.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays:
            'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
                '_'
            ),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'hh:mm A',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            ss: 'sekunde %d',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'siku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sw;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ta.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ta.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '௧',
            2: '௨',
            3: '௩',
            4: '௪',
            5: '௫',
            6: '௬',
            7: '௭',
            8: '௮',
            9: '௯',
            0: '௦',
        },
        numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0',
        };

    var ta = moment.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
            '_'
        ),
        monthsShort:
            'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
                '_'
            ),
        weekdays:
            'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split(
                '_'
            ),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split(
            '_'
        ),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm',
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            ss: '%d விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்',
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal: function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ta;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/te.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/te.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var te = moment.defineLocale('te', {
        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split(
            '_'
        ),
        monthsShort:
            'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split(
                '_'
            ),
        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            ss: '%d సెకన్లు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు',
        },
        dayOfMonthOrdinalParse: /\d{1,2}వ/,
        ordinal: '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return te;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tet.js":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tet.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo
//! author : Sonia Simoes : https://github.com/soniasimoes

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tet = moment.defineLocale('tet', {
        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'segundu balun',
            ss: 'segundu %d',
            m: 'minutu ida',
            mm: 'minutu %d',
            h: 'oras ida',
            hh: 'oras %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tet;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tg.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tg.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tajik [tg]
//! author : Orif N. Jr. : https://github.com/orif-jr

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум',
    };

    var tg = moment.defineLocale('tg', {
        months: {
            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split(
                '_'
            ),
            standalone:
                'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
                    '_'
                ),
        },
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split(
            '_'
        ),
        weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Имрӯз соати] LT',
            nextDay: '[Фардо соати] LT',
            lastDay: '[Дирӯз соати] LT',
            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'баъди %s',
            past: '%s пеш',
            s: 'якчанд сония',
            m: 'як дақиқа',
            mm: '%d дақиқа',
            h: 'як соат',
            hh: '%d соат',
            d: 'як рӯз',
            dd: '%d рӯз',
            M: 'як моҳ',
            MM: '%d моҳ',
            y: 'як сол',
            yy: '%d сол',
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1th is the first week of the year.
        },
    });

    return tg;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/th.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/th.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var th = moment.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split(
            '_'
        ),
        monthsShort:
            'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H:mm',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm',
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            ss: '%d วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            w: '1 สัปดาห์',
            ww: '%d สัปดาห์',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี',
        },
    });

    return th;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tk.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tk.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkmen [tk]
//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inji",
        5: "'inji",
        8: "'inji",
        70: "'inji",
        80: "'inji",
        2: "'nji",
        7: "'nji",
        20: "'nji",
        50: "'nji",
        3: "'ünji",
        4: "'ünji",
        100: "'ünji",
        6: "'njy",
        9: "'unjy",
        10: "'unjy",
        30: "'unjy",
        60: "'ynjy",
        90: "'ynjy",
    };

    var tk = moment.defineLocale('tk', {
        months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
        weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(
            '_'
        ),
        weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
        weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün sagat] LT',
            nextDay: '[ertir sagat] LT',
            nextWeek: '[indiki] dddd [sagat] LT',
            lastDay: '[düýn] LT',
            lastWeek: '[geçen] dddd [sagat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s soň',
            past: '%s öň',
            s: 'birnäçe sekunt',
            m: 'bir minut',
            mm: '%d minut',
            h: 'bir sagat',
            hh: '%d sagat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir aý',
            MM: '%d aý',
            y: 'bir ýyl',
            yy: '%d ýyl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'unjy";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tk;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tl-ph.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tl-ph.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tlPh = moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlPh;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tlh.js":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tlh.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'leS'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'waQ'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'nem'
                : time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'Hu’'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'wen'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'ben'
                : time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
            ten = Math.floor((number % 100) / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
        }
        return word === '' ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split(
            '_'
        ),
        monthsShort:
            'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        weekdaysShort:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L',
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            ss: translate,
            m: 'wa’ tup',
            mm: translate,
            h: 'wa’ rep',
            hh: translate,
            d: 'wa’ jaj',
            dd: translate,
            M: 'wa’ jar',
            MM: translate,
            y: 'wa’ DIS',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlh;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tr.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tr.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı",
    };

    var tr = moment.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split(
            '_'
        ),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split(
            '_'
        ),
        weekdaysShort: 'Paz_Pzt_Sal_Çar_Per_Cum_Cmt'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'öö' : 'ÖÖ';
            } else {
                return isLower ? 'ös' : 'ÖS';
            }
        },
        meridiemParse: /öö|ÖÖ|ös|ÖS/,
        isPM: function (input) {
            return input === 'ös' || input === 'ÖS';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            ss: '%d saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            w: 'bir hafta',
            ww: '%d hafta',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'ıncı";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tr;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tzl.js":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tzl.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function (input) {
            return "d'o" === input.toLowerCase();
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? "d'o" : "D'O";
            } else {
                return isLower ? "d'a" : "D'A";
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['viensas secunds', "'iensas secunds"],
            ss: [number + ' secunds', '' + number + ' secunds'],
            m: ["'n míut", "'iens míut"],
            mm: [number + ' míuts', '' + number + ' míuts'],
            h: ["'n þora", "'iensa þora"],
            hh: [number + ' þoras', '' + number + ' þoras'],
            d: ["'n ziua", "'iensa ziua"],
            dd: [number + ' ziuas', '' + number + ' ziuas'],
            M: ["'n mes", "'iens mes"],
            MM: [number + ' mesen', '' + number + ' mesen'],
            y: ["'n ar", "'iens ar"],
            yy: [number + ' ars', '' + number + ' ars'],
        };
        return isFuture
            ? format[key][0]
            : withoutSuffix
            ? format[key][0]
            : format[key][1];
    }

    return tzl;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tzm-latn.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tzm-latn.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzmLatn = moment.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
            '_'
        ),
        monthsShort:
            'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
                '_'
            ),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            ss: '%d imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzmLatn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/tzm.js":
/*!**********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/tzm.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzm = moment.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
            '_'
        ),
        monthsShort:
            'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
                '_'
            ),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            ss: '%d ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzm;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ug-cn.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ug-cn.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uyghur (China) [ug-cn]
//! author: boyaq : https://github.com/boyaq

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort:
            'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
                '_'
            ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل',
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return ugCn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/uk.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/uk.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            dd: 'день_дні_днів',
            MM: 'місяць_місяці_місяців',
            yy: 'рік_роки_років',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                nominative:
                    'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split(
                        '_'
                    ),
                accusative:
                    'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split(
                        '_'
                    ),
                genitive:
                    'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split(
                        '_'
                    ),
            },
            nounCase;

        if (m === true) {
            return weekdays['nominative']
                .slice(1, 7)
                .concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
            ? 'accusative'
            : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
            ? 'genitive'
            : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months: {
            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split(
                '_'
            ),
            standalone:
                'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split(
                    '_'
                ),
        },
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split(
            '_'
        ),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm',
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'годину',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'місяць',
            MM: relativeTimeWithPlural,
            y: 'рік',
            yy: relativeTimeWithPlural,
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uk;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/ur.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/ur.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوری',
            'فروری',
            'مارچ',
            'اپریل',
            'مئی',
            'جون',
            'جولائی',
            'اگست',
            'ستمبر',
            'اکتوبر',
            'نومبر',
            'دسمبر',
        ],
        days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];

    var ur = moment.defineLocale('ur', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[آج بوقت] LT',
            nextDay: '[کل بوقت] LT',
            nextWeek: 'dddd [بوقت] LT',
            lastDay: '[گذشتہ روز بوقت] LT',
            lastWeek: '[گذشتہ] dddd [بوقت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s بعد',
            past: '%s قبل',
            s: 'چند سیکنڈ',
            ss: '%d سیکنڈ',
            m: 'ایک منٹ',
            mm: '%d منٹ',
            h: 'ایک گھنٹہ',
            hh: '%d گھنٹے',
            d: 'ایک دن',
            dd: '%d دن',
            M: 'ایک ماہ',
            MM: '%d ماہ',
            y: 'ایک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ur;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/uz-latn.js":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/uz-latn.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uzLatn = moment.defineLocale('uz-latn', {
        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays:
            'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
                '_'
            ),
        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            ss: '%d soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uzLatn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/uz.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/uz.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uz = moment.defineLocale('uz', {
        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
            '_'
        ),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            ss: '%d фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return uz;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/vi.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/vi.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk
//! author : Chien Kira : https://github.com/chienkira

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var vi = moment.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split(
            '_'
        ),
        monthsShort:
            'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split(
            '_'
        ),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function (input) {
            return /^ch$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần trước lúc] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            ss: '%d giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            w: 'một tuần',
            ww: '%d tuần',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return vi;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/x-pseudo.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/x-pseudo.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var xPseudo = moment.defineLocale('x-pseudo', {
        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split(
            '_'
        ),
        monthsShort:
            'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split(
                '_'
            ),
        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[T~ódá~ý át] LT',
            nextDay: '[T~ómó~rró~w át] LT',
            nextWeek: 'dddd [át] LT',
            lastDay: '[Ý~ést~érdá~ý át] LT',
            lastWeek: '[L~ást] dddd [át] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'í~ñ %s',
            past: '%s á~gó',
            s: 'á ~féw ~sécó~ñds',
            ss: '%d s~écóñ~ds',
            m: 'á ~míñ~úté',
            mm: '%d m~íñú~tés',
            h: 'á~ñ hó~úr',
            hh: '%d h~óúrs',
            d: 'á ~dáý',
            dd: '%d d~áýs',
            M: 'á ~móñ~th',
            MM: '%d m~óñt~hs',
            y: 'á ~ýéár',
            yy: '%d ý~éárs',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return xPseudo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/yo.js":
/*!*********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/yo.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var yo = moment.defineLocale('yo', {
        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split(
            '_'
        ),
        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Ònì ni] LT',
            nextDay: '[Ọ̀la ni] LT',
            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
            lastDay: '[Àna ni] LT',
            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ní %s',
            past: '%s kọjá',
            s: 'ìsẹjú aayá die',
            ss: 'aayá %d',
            m: 'ìsẹjú kan',
            mm: 'ìsẹjú %d',
            h: 'wákati kan',
            hh: 'wákati %d',
            d: 'ọjọ́ kan',
            dd: 'ọjọ́ %d',
            M: 'osù kan',
            MM: 'osù %d',
            y: 'ọdún kan',
            yy: 'ọdún %d',
        },
        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: 'ọjọ́ %d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return yo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/zh-cn.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/zh-cn.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng
//! author : uu109 : https://github.com/uu109

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhCn = moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[下]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            lastDay: '[昨天]LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[上]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s后',
            past: '%s前',
            s: '几秒',
            ss: '%d 秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            w: '1 周',
            ww: '%d 周',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年',
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return zhCn;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/zh-hk.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/zh-hk.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd
//! author : Anthony : https://github.com/anthonylau

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhHk = moment.defineLocale('zh-hk', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1200) {
                return '上午';
            } else if (hm === 1200) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhHk;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/zh-mo.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/zh-mo.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Macau) [zh-mo]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Tan Yuanhong : https://github.com/le0tan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhMo = moment.defineLocale('zh-mo', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'D/M/YYYY',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhMo;

})));


/***/ }),

/***/ "../../node_modules/moment/locale/zh-tw.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/locale/zh-tw.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "../../node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhTw = moment.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhTw;

})));


/***/ }),

/***/ "../../node_modules/moment/moment.js":
/*!******************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/moment/moment.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i,
            arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i,
            prop,
            val,
            momentPropertiesLen = momentProperties.length;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentPropertiesLen > 0) {
            for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key,
                    argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
            for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(
                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                    function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }
                )
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback,
            tokenLen;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths =
            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
        defaultLocaleMonthsShort =
            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        }
    );

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match('^[^/\\\\]*$') != null;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports &&
            isLocaleNameSane(name)
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                __webpack_require__("../../node_modules/moment/locale sync recursive ^\\.\\/.*$")("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat,
            isoDatesLen = isoDates.length,
            isoTimesLen = isoTimes.length;

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^()]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era,
            tokenLen;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false,
            configfLen = config._f.length;

        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < configfLen; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i,
            orderLen = ordering.length;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < orderLen; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property,
            propertyLen = properties.length;

        for (i = 0; i < propertyLen; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        }
    );

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.4';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "../../node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../../node_modules/node-libs-browser/mock/empty.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/node-libs-browser/mock/empty.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "../../node_modules/parsel-js/dist/parsel.min.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/parsel-js/dist/parsel.min.js ***!
  \******************************************************************************************/
/*! exports provided: RECURSIVE_PSEUDO_CLASSES, RECURSIVE_PSEUDO_CLASSES_ARGS, TOKENS, TRIM_TOKENS, gobbleParens, nestTokens, parse, specificity, specificityToNumber, tokenize, tokenizeBy, walk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RECURSIVE_PSEUDO_CLASSES", function() { return s; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RECURSIVE_PSEUDO_CLASSES_ARGS", function() { return l; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOKENS", function() { return e; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRIM_TOKENS", function() { return r; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gobbleParens", function() { return u; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nestTokens", function() { return c; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return f; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "specificity", function() { return h; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "specificityToNumber", function() { return g; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenize", function() { return a; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenizeBy", function() { return i; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walk", function() { return p; });
const e={attribute:/\[\s*(?:(?<namespace>\*|[-\w]*)\|)?(?<name>[-\w\u{0080}-\u{FFFF}]+)\s*(?:(?<operator>\W?=)\s*(?<value>.+?)\s*(?<caseSensitive>[iIsS])?\s*)?\]/gu,id:/#(?<name>(?:[-\w\u{0080}-\u{FFFF}]|\\.)+)/gu,class:/\.(?<name>(?:[-\w\u{0080}-\u{FFFF}]|\\.)+)/gu,comma:/\s*,\s*/g,combinator:/\s*[\s>+~]\s*/g,"pseudo-element":/::(?<name>[-\w\u{0080}-\u{FFFF}]+)(?:\((?<argument>¶+)\))?/gu,"pseudo-class":/:(?<name>[-\w\u{0080}-\u{FFFF}]+)(?:\((?<argument>¶+)\))?/gu,type:/(?:(?<namespace>\*|[-\w]*)\|)?(?<name>[-\w\u{0080}-\u{FFFF}]+)|\*/gu},t=new Set(["pseudo-class","pseudo-element"]),n=new Set([...t,"attribute"]),r=new Set(["combinator","comma"]),s=new Set(["not","is","where","has","matches","-moz-any","-webkit-any","nth-child","nth-last-child"]),l={"nth-child":/(?<index>[\dn+-]+)\s+of\s+(?<subtree>.+)/};s["nth-last-child"]=l["nth-child"];const o=Object.assign({},e);function u(e,t){let n="",r=[];for(;t<e.length;t++){let s=e[t];if("("===s)r.push(s);else if(")"===s){if(!(r.length>0))throw new Error("Closing paren without opening paren at "+t);r.pop()}if(n+=s,0===r.length)return n}throw new Error("Opening paren without closing paren")}function i(e,t){if(!e)return[];var n=[e];for(var s in t){let e=t[s];for(var l=0;l<n.length;l++){var o=n[l];if("string"==typeof o){e.lastIndex=0;var u=e.exec(o);if(u){let e=u.index-1,t=[],r=u[0],i=o.slice(0,e+1);i&&t.push(i),t.push({type:s,content:r,...u.groups});let a=o.slice(e+r.length+1);a&&t.push(a),n.splice(l,1,...t)}}}}let i=0;for(let e=0;e<n.length;e++){let t=n[e],s=t.length||t.content.length;"object"==typeof t&&(t.pos=[i,i+s],r.has(t.type)&&(t.content=t.content.trim()||" ")),i+=s}return n}function a(r){if(!r)return null;r=r.trim();let s=[];r=r.replace(/(['"])(\\\1|.)+?\1/g,((e,t,n,r)=>(s.push({str:e,start:r}),t+"§".repeat(n.length)+t)));let l,a=[],c=0;for(;(l=r.indexOf("(",c))>-1;){let e=u(r,l);a.push({str:e,start:l}),r=r.substring(0,l)+"("+"¶".repeat(e.length-2)+")"+r.substring(l+e.length),c=l+e.length}let p=i(r,e);function f(e,t,n){for(let r of e)for(let e of p)if(n.has(e.type)&&e.pos[0]<r.start&&r.start<e.pos[1]){let n=e.content;if(e.content=e.content.replace(t,r.str),e.content!==n){o[e.type].lastIndex=0;let t=o[e.type].exec(e.content).groups;Object.assign(e,t)}}}return f(a,/\(¶+\)/,t),f(s,/(['"])§+?\1/,n),p}function c(e,{list:t=!0}={}){if(t&&e.find((e=>"comma"===e.type))){let t=[],n=[];for(let r=0;r<e.length;r++)if("comma"===e[r].type){if(0===n.length)throw new Error("Incorrect comma at "+r);t.push(c(n,{list:!1})),n.length=0}else n.push(e[r]);if(0===n.length)throw new Error("Trailing comma");return t.push(c(n,{list:!1})),{type:"list",list:t}}for(let t=e.length-1;t>=0;t--){let n=e[t];if("combinator"===n.type){let r=e.slice(0,t),s=e.slice(t+1);return{type:"complex",combinator:n.content,left:c(r),right:c(s)}}}return 0===e.length?null:1===e.length?e[0]:{type:"compound",list:[...e]}}function p(e,t,n,r){if(e){if("complex"===e.type)p(e.left,t,n,e),p(e.right,t,n,e);else if("compound"===e.type)for(let r of e.list)p(r,t,n,e);else e.subtree&&n&&n.subtree&&p(e.subtree,t,n,e);t(e,r)}}function f(e,{recursive:t=!0,list:n=!0}={}){let r=a(e);if(!r)return null;let o=c(r,{list:n});return t&&p(o,(e=>{if("pseudo-class"===e.type&&e.argument&&s.has(e.name)){let t=e.argument;const n=l[e.name];if(n){const r=n.exec(t);if(!r)return;Object.assign(e,r.groups),t=r.groups.subtree}t&&(e.subtree=f(t,{recursive:!0,list:!0}))}})),o}function g(e,t){return t=t||Math.max(...e)+1,e[0]*t**2+e[1]*t+e[2]}function h(e,{format:t="array"}={}){let n="object"==typeof e?e:f(e,{recursive:!0});if(!n)return null;if("list"===n.type){let e=10,t=n.list.map((t=>{let n=h(t);return e=Math.max(e,...n),n})),r=t.map((t=>g(t,e)));return t[function(e){let t=e[0],n=0;for(let r=0;r<e.length;r++)e[r]>t&&(n=r,t=e[r]);return 0===e.length?-1:n}(r)]}let r=[0,0,0];return p(n,(e=>{if("id"===e.type)r[0]++;else if("class"===e.type||"attribute"===e.type)r[1]++;else if("type"===e.type&&"*"!==e.content||"pseudo-element"===e.type)r[2]++;else if("pseudo-class"===e.type&&"where"!==e.name)if(s.has(e.name)&&e.subtree){h(e.subtree).forEach(((e,t)=>r[t]+=e))}else r[1]++})),r}o["pseudo-element"]=RegExp(e["pseudo-element"].source.replace("(?<argument>¶+)","(?<argument>.+?)"),"gu"),o["pseudo-class"]=RegExp(e["pseudo-class"].source.replace("(?<argument>¶+)","(?<argument>.+)"),"gu");


/***/ }),

/***/ "../../node_modules/path-browserify/index.js":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/path-browserify/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!********************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/process/browser.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../node_modules/resolve-url/resolve-url.js":
/*!****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/resolve-url/resolve-url.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright 2014 Simon Lydell
// X11 (“MIT”) Licensed. (See LICENSE.)

void (function(root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
}(this, function() {

  function resolveUrl(/* ...urls */) {
    var numUrls = arguments.length

    if (numUrls === 0) {
      throw new Error("resolveUrl requires at least one argument; got none.")
    }

    var base = document.createElement("base")
    base.href = arguments[0]

    if (numUrls === 1) {
      return base.href
    }

    var head = document.getElementsByTagName("head")[0]
    head.insertBefore(base, head.firstChild)

    var a = document.createElement("a")
    var resolved

    for (var index = 1; index < numUrls; index++) {
      a.href = arguments[index]
      resolved = a.href
      base.href = resolved
    }

    head.removeChild(base)

    return resolved
  }

  return resolveUrl

}));


/***/ }),

/***/ "../../node_modules/rework/index.js":
/*!*****************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/rework/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var css = __webpack_require__(/*! css */ "../../node_modules/css/index.js");
var convertSourceMap = __webpack_require__(/*! convert-source-map */ "../../node_modules/rework/node_modules/convert-source-map/index.js");
var parse = css.parse;
var stringify = css.stringify;

/**
 * Expose `rework`.
 */

exports = module.exports = rework;

/**
 * Initialize a new stylesheet `Rework` with `str`.
 *
 * @param {String} str
 * @param {Object} options
 * @return {Rework}
 * @api public
 */

function rework(str, options) {
  return new Rework(parse(str, options));
}

/**
 * Initialize a new stylesheet `Rework` with `obj`.
 *
 * @param {Object} obj
 * @api private
 */

function Rework(obj) {
  this.obj = obj;
}

/**
 * Use the given plugin `fn(style, rework)`.
 *
 * @param {Function} fn
 * @return {Rework}
 * @api public
 */

Rework.prototype.use = function(fn){
  fn(this.obj.stylesheet, this);
  return this;
};

/**
 * Stringify the stylesheet.
 *
 * @param {Object} options
 * @return {String}
 * @api public
 */

Rework.prototype.toString = function(options){
  options = options || {};
  var result = stringify(this.obj, options);
  if (options.sourcemap && !options.sourcemapAsObject) {
    result = result.code + '\n' + sourcemapToComment(result.map);
  }
  return result;
};

/**
 * Convert sourcemap to base64-encoded comment
 *
 * @param {Object} map
 * @return {String}
 * @api private
 */

function sourcemapToComment(map) {
  var content = convertSourceMap.fromObject(map).toBase64();
  return '/*# sourceMappingURL=data:application/json;base64,' + content + ' */';
}


/***/ }),

/***/ "../../node_modules/rework/node_modules/convert-source-map/index.js":
/*!*************************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/rework/node_modules/convert-source-map/index.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var fs = __webpack_require__(/*! fs */ "../../node_modules/node-libs-browser/mock/empty.js");
var path = __webpack_require__(/*! path */ "../../node_modules/path-browserify/index.js");

var commentRx = /^[ \t]*(?:\/\/|\/\*)[@#][ \t]+sourceMappingURL=data:(?:application|text)\/json;base64,(.+)(?:\*\/)?/mg;
var mapFileCommentRx =
  // //# sourceMappingURL=foo.js.map                       /*# sourceMappingURL=foo.js.map */
  /(?:^[ \t]*\/\/[@|#][ \t]+sourceMappingURL=(.+?)[ \t]*$)|(?:^[ \t]*\/\*[@#][ \t]+sourceMappingURL=(.+?)[ \t]*\*\/[ \t]*$)/mg

function decodeBase64(base64) {
  return new Buffer(base64, 'base64').toString();
}

function stripComment(sm) {
  return sm.split(',').pop();
}

function readFromFileMap(sm, dir) {
  // NOTE: this will only work on the server since it attempts to read the map file

  var r = mapFileCommentRx.exec(sm);
  mapFileCommentRx.lastIndex = 0;
  
  // for some odd reason //# .. captures in 1 and /* .. */ in 2
  var filename = r[1] || r[2];
  var filepath = path.join(dir, filename);

  try {
    return fs.readFileSync(filepath, 'utf8');
  } catch (e) {
    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
  }
}

function Converter (sm, opts) {
  opts = opts || {};
  try {
    if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
    if (opts.hasComment) sm = stripComment(sm);
    if (opts.isEncoded) sm = decodeBase64(sm);
    if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

    this.sourcemap = sm;
  } catch(e) {
    console.error(e);
    return null;
  }
}

Converter.prototype.toJSON = function (space) {
  return JSON.stringify(this.sourcemap, null, space);
};

Converter.prototype.toBase64 = function () {
  var json = this.toJSON();
  return new Buffer(json).toString('base64');
};

Converter.prototype.toComment = function () {
  var base64 = this.toBase64();
  return '//# sourceMappingURL=data:application/json;base64,' + base64;
};

// returns copy instead of original
Converter.prototype.toObject = function () {
  return JSON.parse(this.toJSON());
};

Converter.prototype.addProperty = function (key, value) {
  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
  return this.setProperty(key, value);
};

Converter.prototype.setProperty = function (key, value) {
  this.sourcemap[key] = value;
  return this;
};

Converter.prototype.getProperty = function (key) {
  return this.sourcemap[key];
};

exports.fromObject = function (obj) {
  return new Converter(obj);
};

exports.fromJSON = function (json) {
  return new Converter(json, { isJSON: true });
};

exports.fromBase64 = function (base64) {
  return new Converter(base64, { isEncoded: true });
};

exports.fromComment = function (comment) {
  comment = comment
    .replace(/^\/\*/g, '//')
    .replace(/\*\/$/g, '');

  return new Converter(comment, { isEncoded: true, hasComment: true });
};

exports.fromMapFileComment = function (comment, dir) {
  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromSource = function (content) {
  var m = content.match(commentRx);
  commentRx.lastIndex = 0;
  return m ? exports.fromComment(m.pop()) : null;
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromMapFileSource = function (content, dir) {
  var m = content.match(mapFileCommentRx);
  mapFileCommentRx.lastIndex = 0;
  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
};

exports.removeComments = function (src) {
  commentRx.lastIndex = 0;
  return src.replace(commentRx, '');
};

exports.removeMapFileComments = function (src) {
  mapFileCommentRx.lastIndex = 0;
  return src.replace(mapFileCommentRx, '');
};

exports.__defineGetter__('commentRegex', function () {
  commentRx.lastIndex = 0;
  return commentRx; 
});

exports.__defineGetter__('mapFileCommentRegex', function () {
  mapFileCommentRx.lastIndex = 0;
  return mapFileCommentRx; 
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/setimmediate/setImmediate.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/setimmediate/setImmediate.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/source-map-resolve/source-map-resolve.js":
/*!******************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map-resolve/source-map-resolve.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Note: source-map-resolve.js is generated from source-map-resolve-node.js and
// source-map-resolve-template.js. Only edit the two latter files, _not_
// source-map-resolve.js!

void (function(root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! source-map-url */ "../../node_modules/source-map-url/source-map-url.js"), __webpack_require__(/*! resolve-url */ "../../node_modules/resolve-url/resolve-url.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else { var resolveUrl, sourceMappingURL; }
}(this, function(sourceMappingURL, resolveUrl) {

  function callbackAsync(callback, error, result) {
    setImmediate(function() { callback(error, result) })
  }

  function parseMapToJSON(string, data) {
    try {
      return JSON.parse(string.replace(/^\)\]\}'/, ""))
    } catch (error) {
      error.sourceMapData = data
      throw error
    }
  }

  function readSync(read, url, data) {
    var readUrl = url
    try {
      return String(read(readUrl))
    } catch (error) {
      error.sourceMapData = data
      throw error
    }
  }



  function resolveSourceMap(code, codeUrl, read, callback) {
    var mapData
    try {
      mapData = resolveSourceMapHelper(code, codeUrl)
    } catch (error) {
      return callbackAsync(callback, error)
    }
    if (!mapData || mapData.map) {
      return callbackAsync(callback, null, mapData)
    }
    var readUrl = mapData.url
    read(readUrl, function(error, result) {
      if (error) {
        error.sourceMapData = mapData
        return callback(error)
      }
      mapData.map = String(result)
      try {
        mapData.map = parseMapToJSON(mapData.map, mapData)
      } catch (error) {
        return callback(error)
      }
      callback(null, mapData)
    })
  }

  function resolveSourceMapSync(code, codeUrl, read) {
    var mapData = resolveSourceMapHelper(code, codeUrl)
    if (!mapData || mapData.map) {
      return mapData
    }
    mapData.map = readSync(read, mapData.url, mapData)
    mapData.map = parseMapToJSON(mapData.map, mapData)
    return mapData
  }

  var dataUriRegex = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/

  /**
   * The media type for JSON text is application/json.
   *
   * {@link https://tools.ietf.org/html/rfc8259#section-11 | IANA Considerations }
   *
   * `text/json` is non-standard media type
   */
  var jsonMimeTypeRegex = /^(?:application|text)\/json$/

  /**
   * JSON text exchanged between systems that are not part of a closed ecosystem
   * MUST be encoded using UTF-8.
   *
   * {@link https://tools.ietf.org/html/rfc8259#section-8.1 | Character Encoding}
   */
  var jsonCharacterEncoding = "utf-8"

  function base64ToBuf(b64) {
    var binStr = atob(b64)
    var len = binStr.length
    var arr = new Uint8Array(len)
    for (var i = 0; i < len; i++) {
      arr[i] = binStr.charCodeAt(i)
    }
    return arr
  }

  function decodeBase64String(b64) {
    if (typeof TextDecoder === "undefined" || typeof Uint8Array === "undefined") {
      return atob(b64)
    }
    var buf = base64ToBuf(b64);
    // Note: `decoder.decode` method will throw a `DOMException` with the
    // `"EncodingError"` value when an coding error is found.
    var decoder = new TextDecoder(jsonCharacterEncoding, {fatal: true})
    return decoder.decode(buf);
  }

  function resolveSourceMapHelper(code, codeUrl) {
    var url = sourceMappingURL.getFrom(code)
    if (!url) {
      return null
    }

    var dataUri = url.match(dataUriRegex)
    if (dataUri) {
      var mimeType = dataUri[1] || "text/plain"
      var lastParameter = dataUri[2] || ""
      var encoded = dataUri[3] || ""
      var data = {
        sourceMappingURL: url,
        url: null,
        sourcesRelativeTo: codeUrl,
        map: encoded
      }
      if (!jsonMimeTypeRegex.test(mimeType)) {
        var error = new Error("Unuseful data uri mime type: " + mimeType)
        error.sourceMapData = data
        throw error
      }
      try {
        data.map = parseMapToJSON(
          lastParameter === ";base64" ? decodeBase64String(encoded) : decodeURIComponent(encoded),
          data
        )
      } catch (error) {
        error.sourceMapData = data
        throw error
      }
      return data
    }

    var mapUrl = resolveUrl(codeUrl, url)
    return {
      sourceMappingURL: url,
      url: mapUrl,
      sourcesRelativeTo: mapUrl,
      map: null
    }
  }



  function resolveSources(map, mapUrl, read, options, callback) {
    if (typeof options === "function") {
      callback = options
      options = {}
    }
    var pending = map.sources ? map.sources.length : 0
    var result = {
      sourcesResolved: [],
      sourcesContent:  []
    }

    if (pending === 0) {
      callbackAsync(callback, null, result)
      return
    }

    var done = function() {
      pending--
      if (pending === 0) {
        callback(null, result)
      }
    }

    resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) {
      result.sourcesResolved[index] = fullUrl
      if (typeof sourceContent === "string") {
        result.sourcesContent[index] = sourceContent
        callbackAsync(done, null)
      } else {
        var readUrl = fullUrl
        read(readUrl, function(error, source) {
          result.sourcesContent[index] = error ? error : String(source)
          done()
        })
      }
    })
  }

  function resolveSourcesSync(map, mapUrl, read, options) {
    var result = {
      sourcesResolved: [],
      sourcesContent:  []
    }

    if (!map.sources || map.sources.length === 0) {
      return result
    }

    resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) {
      result.sourcesResolved[index] = fullUrl
      if (read !== null) {
        if (typeof sourceContent === "string") {
          result.sourcesContent[index] = sourceContent
        } else {
          var readUrl = fullUrl
          try {
            result.sourcesContent[index] = String(read(readUrl))
          } catch (error) {
            result.sourcesContent[index] = error
          }
        }
      }
    })

    return result
  }

  var endingSlash = /\/?$/

  function resolveSourcesHelper(map, mapUrl, options, fn) {
    options = options || {}
    var fullUrl
    var sourceContent
    var sourceRoot
    for (var index = 0, len = map.sources.length; index < len; index++) {
      sourceRoot = null
      if (typeof options.sourceRoot === "string") {
        sourceRoot = options.sourceRoot
      } else if (typeof map.sourceRoot === "string" && options.sourceRoot !== false) {
        sourceRoot = map.sourceRoot
      }
      // If the sourceRoot is the empty string, it is equivalent to not setting
      // the property at all.
      if (sourceRoot === null || sourceRoot === '') {
        fullUrl = resolveUrl(mapUrl, map.sources[index])
      } else {
        // Make sure that the sourceRoot ends with a slash, so that `/scripts/subdir` becomes
        // `/scripts/subdir/<source>`, not `/scripts/<source>`. Pointing to a file as source root
        // does not make sense.
        fullUrl = resolveUrl(mapUrl, sourceRoot.replace(endingSlash, "/"), map.sources[index])
      }
      sourceContent = (map.sourcesContent || [])[index]
      fn(fullUrl, sourceContent, index)
    }
  }



  function resolve(code, codeUrl, read, options, callback) {
    if (typeof options === "function") {
      callback = options
      options = {}
    }
    if (code === null) {
      var mapUrl = codeUrl
      var data = {
        sourceMappingURL: null,
        url: mapUrl,
        sourcesRelativeTo: mapUrl,
        map: null
      }
      var readUrl = mapUrl
      read(readUrl, function(error, result) {
        if (error) {
          error.sourceMapData = data
          return callback(error)
        }
        data.map = String(result)
        try {
          data.map = parseMapToJSON(data.map, data)
        } catch (error) {
          return callback(error)
        }
        _resolveSources(data)
      })
    } else {
      resolveSourceMap(code, codeUrl, read, function(error, mapData) {
        if (error) {
          return callback(error)
        }
        if (!mapData) {
          return callback(null, null)
        }
        _resolveSources(mapData)
      })
    }

    function _resolveSources(mapData) {
      resolveSources(mapData.map, mapData.sourcesRelativeTo, read, options, function(error, result) {
        if (error) {
          return callback(error)
        }
        mapData.sourcesResolved = result.sourcesResolved
        mapData.sourcesContent  = result.sourcesContent
        callback(null, mapData)
      })
    }
  }

  function resolveSync(code, codeUrl, read, options) {
    var mapData
    if (code === null) {
      var mapUrl = codeUrl
      mapData = {
        sourceMappingURL: null,
        url: mapUrl,
        sourcesRelativeTo: mapUrl,
        map: null
      }
      mapData.map = readSync(read, mapUrl, mapData)
      mapData.map = parseMapToJSON(mapData.map, mapData)
    } else {
      mapData = resolveSourceMapSync(code, codeUrl, read)
      if (!mapData) {
        return null
      }
    }
    var result = resolveSourcesSync(mapData.map, mapData.sourcesRelativeTo, read, options)
    mapData.sourcesResolved = result.sourcesResolved
    mapData.sourcesContent  = result.sourcesContent
    return mapData
  }



  return {
    resolveSourceMap:     resolveSourceMap,
    resolveSourceMapSync: resolveSourceMapSync,
    resolveSources:       resolveSources,
    resolveSourcesSync:   resolveSourcesSync,
    resolve:              resolve,
    resolveSync:          resolveSync,
    parseMapToJSON:       parseMapToJSON
  }

}));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../timers-browserify/main.js */ "../../node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "../../node_modules/source-map-url/source-map-url.js":
/*!**********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map-url/source-map-url.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright 2014 Simon Lydell
// X11 (“MIT”) Licensed. (See LICENSE.)

void (function(root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
}(this, function() {

  var innerRegex = /[#@] sourceMappingURL=([^\s'"]*)/

  var regex = RegExp(
    "(?:" +
      "/\\*" +
      "(?:\\s*\r?\n(?://)?)?" +
      "(?:" + innerRegex.source + ")" +
      "\\s*" +
      "\\*/" +
      "|" +
      "//(?:" + innerRegex.source + ")" +
    ")" +
    "\\s*"
  )

  return {

    regex: regex,
    _innerRegex: innerRegex,

    getFrom: function(code) {
      var match = code.match(regex)
      return (match ? match[1] || match[2] || "" : null)
    },

    existsIn: function(code) {
      return regex.test(code)
    },

    removeFrom: function(code) {
      return code.replace(regex, "")
    },

    insertBefore: function(code, string) {
      var match = code.match(regex)
      if (match) {
        return code.slice(0, match.index) + string + code.slice(match.index)
      } else {
        return code + string
      }
    }
  }

}));


/***/ }),

/***/ "../../node_modules/source-map/lib/array-set.js":
/*!*****************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/array-set.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "../../node_modules/source-map/lib/util.js");
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;


/***/ }),

/***/ "../../node_modules/source-map/lib/base64-vlq.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/base64-vlq.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(/*! ./base64 */ "../../node_modules/source-map/lib/base64.js");

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),

/***/ "../../node_modules/source-map/lib/base64.js":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/base64.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),

/***/ "../../node_modules/source-map/lib/binary-search.js":
/*!*********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/binary-search.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),

/***/ "../../node_modules/source-map/lib/mapping-list.js":
/*!********************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/mapping-list.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "../../node_modules/source-map/lib/util.js");

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;


/***/ }),

/***/ "../../node_modules/source-map/lib/quick-sort.js":
/*!******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/quick-sort.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),

/***/ "../../node_modules/source-map/lib/source-map-consumer.js":
/*!***************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/source-map-consumer.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "../../node_modules/source-map/lib/util.js");
var binarySearch = __webpack_require__(/*! ./binary-search */ "../../node_modules/source-map/lib/binary-search.js");
var ArraySet = __webpack_require__(/*! ./array-set */ "../../node_modules/source-map/lib/array-set.js").ArraySet;
var base64VLQ = __webpack_require__(/*! ./base64-vlq */ "../../node_modules/source-map/lib/base64-vlq.js");
var quickSort = __webpack_require__(/*! ./quick-sort */ "../../node_modules/source-map/lib/quick-sort.js").quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ }),

/***/ "../../node_modules/source-map/lib/source-map-generator.js":
/*!****************************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/source-map-generator.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(/*! ./base64-vlq */ "../../node_modules/source-map/lib/base64-vlq.js");
var util = __webpack_require__(/*! ./util */ "../../node_modules/source-map/lib/util.js");
var ArraySet = __webpack_require__(/*! ./array-set */ "../../node_modules/source-map/lib/array-set.js").ArraySet;
var MappingList = __webpack_require__(/*! ./mapping-list */ "../../node_modules/source-map/lib/mapping-list.js").MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),

/***/ "../../node_modules/source-map/lib/source-node.js":
/*!*******************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/source-node.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = __webpack_require__(/*! ./source-map-generator */ "../../node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator;
var util = __webpack_require__(/*! ./util */ "../../node_modules/source-map/lib/util.js");

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;


/***/ }),

/***/ "../../node_modules/source-map/lib/util.js":
/*!************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/lib/util.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),

/***/ "../../node_modules/source-map/source-map.js":
/*!**************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/source-map/source-map.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = __webpack_require__(/*! ./lib/source-map-generator */ "../../node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator;
exports.SourceMapConsumer = __webpack_require__(/*! ./lib/source-map-consumer */ "../../node_modules/source-map/lib/source-map-consumer.js").SourceMapConsumer;
exports.SourceNode = __webpack_require__(/*! ./lib/source-node */ "../../node_modules/source-map/lib/source-node.js").SourceNode;


/***/ }),

/***/ "../../node_modules/timers-browserify/main.js":
/*!***************************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/timers-browserify/main.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "../../node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/urix/index.js":
/*!***************************************************************************!*\
  !*** /Users/alperbatioglu/dev/monorepos/quick/node_modules/urix/index.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 Simon Lydell
// X11 (“MIT”) Licensed. (See LICENSE.)

var path = __webpack_require__(/*! path */ "../../node_modules/path-browserify/index.js")

"use strict"

function urix(aPath) {
  if (path.sep === "\\") {
    return aPath
      .replace(/\\/g, "/")
      .replace(/^[a-z]:\/?/i, "/")
  }
  return aPath
}

module.exports = urix


/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../../node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bridge = void 0;
var qshell_1 = __webpack_require__(/*! ../../common/qshell */ "../../common/qshell/index.ts");
var QJsonExtractHelper_1 = __webpack_require__(/*! ../../common/shrimp/helpers/qjsonParser/QJsonExtractHelper */ "../../common/shrimp/helpers/qjsonParser/QJsonExtractHelper.ts");
__webpack_require__(/*! ./src/api/nativeOverrides */ "./src/api/nativeOverrides.ts");
var compManager_1 = __webpack_require__(/*! ./src/component/compManager */ "./src/component/compManager.ts");
var CssRoot_1 = __webpack_require__(/*! ./src/css/Interfaces/CssRoot */ "./src/css/Interfaces/CssRoot.ts");
var CssSettings_1 = __webpack_require__(/*! ./src/css/Interfaces/CssSettings */ "./src/css/Interfaces/CssSettings.ts");
var cssASTCacher_1 = __webpack_require__(/*! ./src/css/cssASTCacher */ "./src/css/cssASTCacher.ts");
var cssExtender_1 = __webpack_require__(/*! ./src/css/cssExtender */ "./src/css/cssExtender.ts");
var cssParser_1 = __webpack_require__(/*! ./src/css/cssParser */ "./src/css/cssParser.ts");
var cssSettings_1 = __webpack_require__(/*! ./src/css/cssSettings */ "./src/css/cssSettings.ts");
var cssEngine_1 = __webpack_require__(/*! ./src/cssEngine/cssEngine */ "./src/cssEngine/cssEngine.ts");
var CookieManager_1 = __webpack_require__(/*! ./src/qshellImplementations/CookieManager */ "./src/qshellImplementations/CookieManager.ts");
var ModuleManagerImpl_1 = __webpack_require__(/*! ./src/qshellImplementations/ModuleManagerImpl */ "./src/qshellImplementations/ModuleManagerImpl.ts");
var StoreManager_1 = __webpack_require__(/*! ./src/qshellImplementations/StoreManager */ "./src/qshellImplementations/StoreManager.ts");
var componentManager_1 = __webpack_require__(/*! ./src/qshellImplementations/componentManager */ "./src/qshellImplementations/componentManager.ts");
var cryptoraphyManager_1 = __webpack_require__(/*! ./src/qshellImplementations/cryptoraphyManager */ "./src/qshellImplementations/cryptoraphyManager.ts");
var eventOperatorImpl_1 = __webpack_require__(/*! ./src/qshellImplementations/eventOperatorImpl */ "./src/qshellImplementations/eventOperatorImpl.ts");
var globalMethodImpl_1 = __webpack_require__(/*! ./src/qshellImplementations/globalMethodImpl */ "./src/qshellImplementations/globalMethodImpl.ts");
var hostTriggererImp_1 = __webpack_require__(/*! ./src/qshellImplementations/hostTriggererImp */ "./src/qshellImplementations/hostTriggererImp.ts");
var navigationManagerImpl_1 = __webpack_require__(/*! ./src/qshellImplementations/navigationManagerImpl */ "./src/qshellImplementations/navigationManagerImpl.ts");
var networkManager_1 = __webpack_require__(/*! ./src/qshellImplementations/networkManager */ "./src/qshellImplementations/networkManager.ts");
var componentOperator_1 = __webpack_require__(/*! ./src/qshellImplementations/operators/componentOperator */ "./src/qshellImplementations/operators/componentOperator.ts");
var loadingOperator_1 = __webpack_require__(/*! ./src/qshellImplementations/operators/loadingOperator */ "./src/qshellImplementations/operators/loadingOperator.ts");
var platformManagerImp_1 = __webpack_require__(/*! ./src/qshellImplementations/platformManagerImp */ "./src/qshellImplementations/platformManagerImp.ts");
var qjsonRetriever_1 = __webpack_require__(/*! ./src/qshellImplementations/qjsonRetriever */ "./src/qshellImplementations/qjsonRetriever.ts");
var regionalManagerImpl_1 = __webpack_require__(/*! ./src/qshellImplementations/regionalManagerImpl */ "./src/qshellImplementations/regionalManagerImpl.ts");
var uxManagerImpl_1 = __webpack_require__(/*! ./src/qshellImplementations/uxManagerImpl */ "./src/qshellImplementations/uxManagerImpl.ts");
var rendererState_1 = __webpack_require__(/*! ./src/state/rendererState */ "./src/state/rendererState.ts");
var log_1 = __webpack_require__(/*! ./src/tracing/log */ "./src/tracing/log.ts");
var permanentStoreOperator_1 = __webpack_require__(/*! ./src/qshellImplementations/operators/permanentStoreOperator */ "./src/qshellImplementations/operators/permanentStoreOperator.ts");
var bridge = /** @class */ (function () {
    function bridge() {
        this.network = new networkManager_1.networkManager();
        (0, log_1.log)("bridge constructor start");
        var qjsonRetriever = new qjsonRetriever_1.qJsonRetriever();
        var moduleManager = new ModuleManagerImpl_1.ModuleManager();
        var network = this.network;
        this.globalMethods = new globalMethodImpl_1.globalMethodImpl();
        var cookieManager = new CookieManager_1.CookieManager();
        var storeManager = new StoreManager_1.StoreManager();
        var region = new regionalManagerImpl_1.RegionalManagerImpl();
        var ux = new uxManagerImpl_1.UxManagerImpl();
        this.cssSettings = new CssSettings_1.CssSettings();
        this.cachedASTs = new cssASTCacher_1.CssASTCacher();
        var hostTriggerer = new hostTriggererImp_1.HostTriggererImp();
        var eventOperator = new eventOperatorImpl_1.EventOperatorImpl();
        var platformManager = new platformManagerImp_1.PlatformManagerImp();
        var componentOperator = new componentOperator_1.ComponentOperator();
        var loadingOperator = new loadingOperator_1.LoadingOperator();
        var permanentStoreOperator = new permanentStoreOperator_1.PermanentStoreOperator();
        var navigationManager = new navigationManagerImpl_1.navigationManagerImpl();
        var cryptoManager = new cryptoraphyManager_1.cryptographyManager();
        this.qshell = new qshell_1.QShell({ qjsonRetriever: qjsonRetriever, moduleManager: moduleManager, network: network, ux: ux, region: region, hostTriggerer: hostTriggerer, platformType: platformType, platformManager: platformManager }, { eventOperator: eventOperator, componentOperator: componentOperator, loadingOperator: loadingOperator, permanentStoreOperator: permanentStoreOperator });
        (0, log_1.log)("qshell created");
        var compMngr = new componentManager_1.componentManager();
        this.renderer = this.qshell.CreateRenderer({ componentManager: compMngr, cryptoManager: cryptoManager, globalMethods: this.globalMethods, storeManager: storeManager, cookieManager: cookieManager, navigationManager: navigationManager });
        this.globalMethods.setRenderer(this.renderer);
        this.renderer.PageCompletedHook.subscribe(function (options) {
            (0, log_1.log)("bridgets PageCompletedHook triggered pageId: " + options.pageId);
            setTimeout(function () { return nb_PageCompleted(options.pageId); });
        });
        this.renderer.PageRenderStartedHook.subscribe(function (options) {
            (0, log_1.log)("bridgets PageRenderStartedHook triggered pageId: " + options.pageId);
            nb_PageRenderStarted(options.pageId);
        });
        this.renderer.BeforeRenderStartHook.subscribe(function () { nb_BeforeRenderStarted(); });
        (0, log_1.log)("renderer created");
        (0, log_1.log)("bridge constructor end");
    }
    Object.defineProperty(bridge, "settings", {
        get: function () {
            return this._settings;
        },
        set: function (v) {
            this._settings = v;
        },
        enumerable: false,
        configurable: true
    });
    bridge.prototype.SetLRType = function (LRType) {
        (0, log_1.log)("changing LR Type");
        this.renderer.SetLRType(LRType);
    };
    bridge.prototype.SetConfigValues = function (configValues) {
        this.renderer.SetConfigValues(configValues);
    };
    bridge.prototype.Render = function (qjsonPath, displayCallBack, param, pageTransition) {
        var _this = this;
        (0, log_1.log)("rendering qjson: " + qjsonPath);
        this.renderer.DisplayHook.TriggerPostSubscribersWithCb = true;
        this.renderer.SetDisplayCallBack(function (elements, pageId, pageName, navigationDirectionType, additionals, noHistory) {
            var _a;
            var self = _this;
            var hiCssCache = (_a = rendererState_1.RendererState.ConvertAdditionals(additionals)) === null || _a === void 0 ? void 0 : _a.cssCache;
            setTimeout(function () {
                // const transition = noHistory ? "none" : "push"; // Çalışmıyor olabilir
                displayCallBack(elements, pageId, pageName, navigationDirectionType, hiCssCache, pageTransition, noHistory);
                self.renderer.DisplayHook.triggerPostSubscribers();
                (0, log_1.log)("PostSubscribers triggered manually.");
            });
            return;
        });
        (0, log_1.log)("display callback set");
        this.renderer.Render({ pjsonPath: qjsonPath, storeItems: param });
        (0, log_1.log)("render end");
    };
    bridge.prototype.LoadCss = function (deviceSettings, css) {
        this.cssSettings.parsedAndTreedCssList = new cssParser_1.CssParser().ParseCss(css || [], deviceSettings, this.cachedASTs);
        this.cssSettings.deviceSettings = deviceSettings;
    };
    bridge.prototype.Init = function (options) {
        this.network.setMockMode(options === null || options === void 0 ? void 0 : options.mockMode);
    };
    bridge.prototype.LoadDeviceSettings = function (deviceSettings) {
        componentManager_1.componentManager.deviceSettings = deviceSettings;
    };
    bridge.prototype.CacheGlobalCss = function (cssString) {
        this.cachedASTs.CacheASTs(cssString);
    };
    bridge.prototype.HadiCss = function (includeCached, rendererType) {
        if (includeCached === void 0) { includeCached = false; }
        if (rendererType === void 0) { rendererType = "PageRenderer"; }
        (0, log_1.log)("hadi start");
        var targetRenderer = rendererType == "PageRenderer" ? this.renderer : globalMethodImpl_1.globalMethodImpl.alertRenderer;
        (0, log_1.log)('Hadi renderertype:');
        (0, log_1.log)(rendererType);
        var dory = "DoryInst" in targetRenderer ? targetRenderer.DoryInst : targetRenderer.DoryJrInst;
        var controlList = dory.GetComponentList();
        if (!controlList) {
            return undefined;
        }
        if (cssSettings_1.partialCssActive < 2) {
            var controlDict_1 = dory.GetComponentCollection();
            if (!controlDict_1 || !Object.keys(controlDict_1).find(function (compId) { return cssExtender_1.CssExtender.FixAndGetExtended(controlDict_1[compId]).classNode.needCss; })) {
                return undefined;
            } // no modified comp. No Css Calc needed.
        }
        var historyItem = dory.GetLastHistory();
        var retVal = cssEngine_1.CssEngine.Csserize(controlList, this.cssSettings, historyItem.pageName);
        var keys = Object.keys(retVal);
        CssRoot_1.CssRoot.ArangeApplicationStyle(retVal);
        var cache = rendererState_1.RendererState.RetrieveAdditionals(dory).cssCache;
        keys.forEach(function (key) { return cache[key] = retVal[key]; });
        var returnCss = { cssDict: includeCached ? cache : retVal, diffKeys: keys };
        (0, log_1.log)('Hadi returnCss:');
        return returnCss;
    };
    /// Android cihazda cihaz Back yapılmasında çağrılan method. quick.back() methodu buraya girmiyor.
    bridge.prototype.Back = function () {
        var _a, _b, _c, _d;
        var currentMessaging = (_a = this.renderer.GetCurrentHistoryItem()) === null || _a === void 0 ? void 0 : _a.GetControlWithTypeName("Messaging");
        // doryRenderer.Dory.context.GetItemSingle("HistoryManager").currentLevel().last().GetControlWithTypeName("Messaging")        
        if (currentMessaging && (currentMessaging === null || currentMessaging === void 0 ? void 0 : currentMessaging.component) &&
            (currentMessaging === null || currentMessaging === void 0 ? void 0 : currentMessaging.component).selfEvents &&
            (currentMessaging === null || currentMessaging === void 0 ? void 0 : currentMessaging.component).selfEvents.OnDeviceBack) {
            var onDeviceBackResult = (_d = (_c = (_b = currentMessaging === null || currentMessaging === void 0 ? void 0 : currentMessaging.component) === null || _b === void 0 ? void 0 : _b.emit) === null || _c === void 0 ? void 0 : _c.call(_b, "OnDeviceBack")) !== null && _d !== void 0 ? _d : true;
            //return onDeviceBackResult;
            onDeviceBackResult = onDeviceBackResult !== false;
            (0, log_1.log)(onDeviceBackResult);
            if (!onDeviceBackResult) {
                return false; //iş anroidde
            }
        }
        this.renderer.Back();
        return true;
    };
    bridge.prototype.ResetQJsonPool = function () {
        this.qshell.ResetQJsonPool();
    };
    bridge.prototype.SetCompClass = function (compUID, addClassList, removeClassList) {
        var dory = this.renderer.DoryInst;
        var compColl = dory.GetComponentCollectionByUID(compUID);
        if (!compColl) {
            return;
        }
        compManager_1.CompManager.SetClass(compColl, addClassList, removeClassList);
    };
    bridge.prototype.IsPageComplete = function () {
        return this.renderer.PageCompletedHook.IsTriggered();
    };
    bridge.prototype.SetPipelineQjson = function (qjsonString) {
        var qjson = QJsonExtractHelper_1.QJsonExtractHelper.qJsonExtractor(qjsonString);
        this.renderer.settingsQJsons.SetPipelineQjson(qjson);
        (0, log_1.log)("Set pipeline qjson complete");
    };
    bridge.prototype.SetAlertQjson = function (qjsonString, alertDisplayCb) {
        var qjson = QJsonExtractHelper_1.QJsonExtractHelper.qJsonExtractor(qjsonString);
        this.renderer.settingsQJsons.SetAlertQjson(qjson);
        this.globalMethods.alertDisplayCb = alertDisplayCb;
        (0, log_1.log)("Set alert qjson complete");
    };
    bridge.prototype.SetEditMode = function (state) {
        this.renderer.SetEditMode(state);
    };
    bridge.prototype.SetSettings = function (settings) {
        bridge.settings = settings;
    };
    return bridge;
}());
exports.bridge = bridge;
(0, log_1.log)("hello from bridge");


/***/ }),

/***/ "./src/api/nativeOverrides.ts":
/*!************************************!*\
  !*** ./src/api/nativeOverrides.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var mobile = typeof (bulkLog) !== "undefined";
var origConsoleLog = console.log;
console.log = function () {
    if (nb_trace == "none") {
        return;
    }
    var args = Array.prototype.slice.call(arguments);
    if (!mobile) {
        origConsoleLog.apply(console, args); // typescript@4.2.4 için npm install pls 😁
    }
    else {
        var c;
        var bulkItems = args.map(function (arg) {
            c = c++ - 1; //no not modify. fixes I386_EXC_BRK
            return (arg instanceof String || arg instanceof Number || arg instanceof Boolean) ? arg : JSON.stringify(arg);
        });
        bulkLog(bulkItems);
    }
};
if (mobile) {
    global.process = {};
    global.process.hrtime = {
        bigint: function () {
            var num = BigInt(nb_highResTimer());
            return num;
        }
    };
}
if (mobile) {
    var x = {
        randomUUID: function () { return nb_randomUUID(); },
    };
    global.crypto = x;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/component/compManager.ts":
/*!**************************************!*\
  !*** ./src/component/compManager.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompManager = void 0;
var componentExtender_1 = __webpack_require__(/*! ./componentExtender */ "./src/component/componentExtender.ts");
var cssExtender_1 = __webpack_require__(/*! ../css/cssExtender */ "./src/css/cssExtender.ts");
/**
 * Vuetify isCssColor -> node_modules/vuetify/src/util/colorUtils.ts
 */
function isCssColor(color) {
    return !!color && !!color.match(/^(#|var\(--|(rgb|hsl)a?\()/);
}
/**
 *
 * @param opt components either use setTextColor or setBackgroundColor inside colorable (mixin, node_modules/vuetify/src/mixins/colorable.ts). check the original
 * component code and decide accordingly, "bg" | "text". prefer "bg" 🤔
 * @returns
 */
function createColorProp(opt) {
    opt.suffix = opt.suffix || "";
    return {
        reflectToMobile: false,
        modifier: function (compCollExt, compExt, oldVal, newVal) {
            if (oldVal == newVal) {
                return { needCss: false };
            }
            var bgOrText = opt.bgColorOrTextColorCb(compExt);
            var _a = bgOrText == "bg" ?
                { inlineTarget1: "background-color", inlineTarget2: "border-color" } :
                { inlineTarget1: "caret-color", inlineTarget2: "color" }, inlineTarget1 = _a.inlineTarget1, inlineTarget2 = _a.inlineTarget2;
            if (oldVal) {
                if (!isCssColor(oldVal)) {
                    if (bgOrText == "bg") {
                        oldVal.trim().split(" ").filter(function (eachClass) { return eachClass; }).forEach(function (eachClass) { return compCollExt.classNode.classes[eachClass + opt.suffix] = false; });
                    }
                    else {
                        var _b = __read(oldVal.trim().split(" ", 2), 2), colorName = _b[0], colorModifier = _b[1]; // Vuetify setTextColor -> node_modules/vuetify/src/mixins/colorable.ts [62-71]
                        compCollExt.classNode.classes[colorName + '--text'] = false;
                        if (colorModifier) {
                            compCollExt.classNode.classes['text--' + colorModifier] = false;
                        }
                    }
                }
                else {
                    delete compCollExt.classNode.inlineStyles[inlineTarget1]; // Vuetify setBackgroundColor -> node_modules/vuetify/src/mixins/colorable.ts [27-38]
                    delete compCollExt.classNode.inlineStyles[inlineTarget2];
                    if (Object.keys(compCollExt.classNode.inlineStyles).length <= 0) {
                        compCollExt.classNode.inlineStyles = undefined;
                    }
                }
            }
            if (newVal) {
                if (!isCssColor(newVal)) {
                    if (bgOrText == "bg") {
                        newVal.trim().split(" ").filter(function (eachClass) { return eachClass; }).forEach(function (eachClass) { return compCollExt.classNode.classes[eachClass + opt.suffix] = true; });
                    }
                    else {
                        var _c = __read(newVal.trim().split(" ", 2), 2), colorName = _c[0], colorModifier = _c[1]; // Vuetify setTextColor -> node_modules/vuetify/src/mixins/colorable.ts [62-71]
                        compCollExt.classNode.classes[colorName + '--text'] = true;
                        if (colorModifier) {
                            compCollExt.classNode.classes['text--' + colorModifier] = true;
                        }
                    }
                }
                else {
                    //node_modules/vuetify/src/mixins/colorable/index.ts > setBackgroundColor
                    compCollExt.classNode.inlineStyles = compCollExt.classNode.inlineStyles || {}; // Vuetify setBackgroundColor -> node_modules/vuetify/src/mixins/colorable.ts [27-38]
                    compCollExt.classNode.inlineStyles[inlineTarget1] = newVal;
                    compCollExt.classNode.inlineStyles[inlineTarget2] = newVal;
                }
            }
            return { needCss: true };
        }
    };
}
function justManageProp(_a) {
    var reflectToMobile = _a.reflectToMobile;
    return {
        modifier: function () { return { needCss: false }; },
        reflectToMobile: reflectToMobile
    };
}
;
var compPropSetterDict;
var compPropSetterDictTyped = compPropSetterDict = {
    VAppBar: {
        color: createColorProp({ bgColorOrTextColorCb: function () { return "bg"; } }),
    },
    VIcon: {
        color: createColorProp({ suffix: "--text", bgColorOrTextColorCb: function () { return "text"; } }),
        xSmall: justManageProp({ reflectToMobile: false }),
        small: justManageProp({ reflectToMobile: false }),
        medium: justManageProp({ reflectToMobile: false }),
        large: justManageProp({ reflectToMobile: false }),
        xLarge: justManageProp({ reflectToMobile: false }),
        size: justManageProp({ reflectToMobile: false }),
    },
    VBtn: {
        color: createColorProp({ bgColorOrTextColorCb: function (compExt) { return compExt.compPropDict.text || compExt.compPropDict.outlined ? "text" : "bg"; } }),
        disabled: {
            reflectToMobile: true,
            modifier: function (compCollExt, compExt, oldVal, newVal) {
                if (oldVal == newVal) {
                    return { needCss: false };
                }
                compPropSetterDictTyped.VBtn.color.modifier(compCollExt, compExt, newVal ? compExt.compPropDict.color : "", newVal ? "" : compExt.compPropDict.color);
                compCollExt.classNode.classes["v-btn--disabled"] = newVal;
                return { needCss: true };
            }
        },
        text: justManageProp({ reflectToMobile: true }),
        outlined: justManageProp({ reflectToMobile: true }),
    },
    VTextField: {
        rules: justManageProp({ reflectToMobile: true }),
        errorCount: justManageProp({ reflectToMobile: true }),
    },
    VSelect: {
        rules: justManageProp({ reflectToMobile: true }),
    },
    VCard: {
        color: createColorProp({ bgColorOrTextColorCb: function () { return "bg"; } }),
    },
    VFooter: {
        color: createColorProp({ bgColorOrTextColorCb: function () { return "bg"; } }),
    },
    VStepperStep: {
        color: createColorProp({ bgColorOrTextColorCb: function () { return "bg"; } }),
    },
    VSnackbar: {
        color: createColorProp({ bgColorOrTextColorCb: function (compExt) { return !compExt.compPropDict.text && !compExt.compPropDict.outlined ? "bg" : "text"; } }), //node_modules/vuetify/src/components/VSnackbar/VSnackbar.ts [163-165]
    }
    // VExpansionPanel: {
    //     activeClass: justManageProp({ reflectToMobile: false }),
    // }
};
function vuetifyValidate(rules, internalValue, force, value) {
    // vuetify validate -> https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/mixins/validatable/index.ts
    if (force === void 0) { force = false; }
    var errorBucket = [];
    value = value || internalValue;
    // if (force) this.hasInput = this.hasFocused = true
    for (var index = 0; index < rules.length; index++) {
        var rule = rules[index];
        var valid = typeof rule === 'function' ? rule(value) : rule;
        if (valid === false || typeof valid === 'string') {
            errorBucket.push(valid || '');
        }
    }
    // this.errorBucket = errorBucket
    // this.valid = errorBucket.length === 0
    // return this.valid
    return { errorBucket: errorBucket, valid: errorBucket.length === 0, force: force };
}
var validateCreator = function (compExtended, compCollection) {
    return function (force, value) {
        var _a, _b;
        if (force === void 0) { force = false; }
        var rules = compExtended.compPropDict.rules;
        if (!rules || rules.length <= 0) {
            return true;
        }
        var internalValue = (_a = compCollection.component) === null || _a === void 0 ? void 0 : _a.value;
        var vuetifyValidateResult = vuetifyValidate(rules, internalValue, force, value);
        var errorCount = (_b = compExtended.compPropDict.errorCount) !== null && _b !== void 0 ? _b : 1; // errorCount default -> 1
        vuetifyValidateResult.errorBucket = vuetifyValidateResult.errorBucket.slice(0, errorCount);
        nb_updateCompValidation(compCollection.RootHistoryItem.pageId, compCollection.GetCompUID(), vuetifyValidateResult);
        return vuetifyValidateResult.valid;
    };
};
var compMethodCreatorDict = {
    VTextField: {
        validate: validateCreator
    },
    VSelect: {
        validate: validateCreator
    }
};
var CompManager = /** @class */ (function () {
    function CompManager() {
    }
    CompManager.SetProp = function (compCollection, propName, newVal) {
        var _a;
        var propChanger = (_a = compPropSetterDict[compCollection.compType]) === null || _a === void 0 ? void 0 : _a[propName];
        if (!propChanger) {
            return { reflectToMobile: true };
        }
        var compExtended = componentExtender_1.ComponentExtender.GetExtended(compCollection);
        var compCollExt = cssExtender_1.CssExtender.FixAndGetExtended(compCollection);
        var oldVal = compExtended.compPropDict[propName];
        var modifyResult = propChanger.modifier(compCollExt, compExtended, oldVal, newVal);
        if (modifyResult.needCss) {
            compCollExt.classNode.needCss = true;
        }
        if (compExtended) {
            compExtended.compPropDict[propName] = newVal;
        }
        return { reflectToMobile: propChanger.reflectToMobile };
    };
    CompManager.GetProp = function (compCollection, propName) {
        var _a, _b;
        var propChanger = (_a = compPropSetterDict[compCollection.compType]) === null || _a === void 0 ? void 0 : _a[propName];
        if (propChanger) {
            var compExtended = componentExtender_1.ComponentExtender.GetExtended(compCollection);
            var value = compExtended.compPropDict[propName];
            return { value: value, managedProp: true };
        }
        var methodCreator = (_b = compMethodCreatorDict[compCollection.compType]) === null || _b === void 0 ? void 0 : _b[propName];
        if (methodCreator) {
            var compExtended = componentExtender_1.ComponentExtender.GetExtended(compCollection);
            return { managedProp: true, value: methodCreator(compExtended, compCollection) };
        }
        return { managedProp: false };
    };
    CompManager.GetManagedProperties = function (compName) {
        return compPropSetterDict[compName];
    };
    CompManager.IsManagedProperty = function (compName, propName) {
        var comp = CompManager.GetManagedProperties(compName);
        if (!comp) {
            return false;
        }
        ;
        return comp[propName] !== undefined;
    };
    CompManager.SetClass = function (compCollection, addList, removeList) {
        var classNode = cssExtender_1.CssExtender.FixAndGetExtended(compCollection).classNode;
        addList.forEach(function (addClass) { return classNode.classes[addClass] = true; });
        removeList.forEach(function (removeClass) { return classNode.classes[removeClass] = false; });
        classNode.needCss = true;
    };
    return CompManager;
}());
exports.CompManager = CompManager;


/***/ }),

/***/ "./src/component/componentExtender.ts":
/*!********************************************!*\
  !*** ./src/component/componentExtender.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentExtender = void 0;
var compManager_1 = __webpack_require__(/*! ./compManager */ "./src/component/compManager.ts");
var cssExtender_1 = __webpack_require__(/*! ../css/cssExtender */ "./src/css/cssExtender.ts");
var ComponentExtender = /** @class */ (function () {
    function ComponentExtender() {
    }
    ComponentExtender.CreateComponentExtended = function (compCollection, props) {
        var managedProps = compManager_1.CompManager.GetManagedProperties(compCollection.compType);
        if (!managedProps) {
            return;
        }
        var compExtended = compCollection.extended = { compPropDict: {} };
        var compCollExt = cssExtender_1.CssExtender.FixAndGetExtended(compCollection);
        Object.keys(props).map(function (propName) {
            var propChanger = managedProps[propName];
            if (!propChanger) {
                return undefined;
            }
            var newVal = props[propName];
            compExtended.compPropDict[propName] = newVal;
            return { propChanger: propChanger, newVal: newVal, propName: propName };
        }).forEach(function (data) {
            //Warning!! Do not merge foreach and map, first put ALL prop values on compPropDict, then call modifiers.
            if (data && data.propChanger) {
                data.propChanger.modifier(compCollExt, compExtended, undefined, data.newVal);
                !data.propChanger.reflectToMobile && delete props[data.propName];
            }
        });
    };
    ComponentExtender.GetExtended = function (compColl) {
        return compColl.extended;
    };
    return ComponentExtender;
}());
exports.ComponentExtender = ComponentExtender;


/***/ }),

/***/ "./src/css/Interfaces/CssRoot.ts":
/*!***************************************!*\
  !*** ./src/css/Interfaces/CssRoot.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssRoot = exports.q_tsbridge_htmlName = exports.q_tsbridge_bodyName = exports.q_tsbridge_appName = void 0;
exports.q_tsbridge_appName = "q_tsbridge_app", exports.q_tsbridge_bodyName = "q_tsbridge_body", exports.q_tsbridge_htmlName = "q_tsbridge_html";
var CssRoot = /** @class */ (function () {
    function CssRoot() {
    }
    CssRoot.ArangeApplicationStyle = function (compCSSHierarchyDict) {
        Object.keys(compCSSHierarchyDict).forEach(function (compId) {
            var _a;
            var curComp = compCSSHierarchyDict[compId];
            if (curComp.position == "fixed") {
                var height = curComp.height;
                if (!height) {
                    return;
                }
                var targetStyle = ((_a = curComp.bottom) === null || _a === void 0 ? void 0 : _a.startsWith("0")) ? "padding-bottom" : "padding-top";
                compCSSHierarchyDict[exports.q_tsbridge_appName][targetStyle] = height;
            }
        });
    };
    return CssRoot;
}());
exports.CssRoot = CssRoot;


/***/ }),

/***/ "./src/css/Interfaces/CssSettings.ts":
/*!*******************************************!*\
  !*** ./src/css/Interfaces/CssSettings.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssSettings = void 0;
/**
 * Sizes
Xsmall	xs	Small to large phone	< 600px
Small   sm	Small to medium tablet	600px > < 960px
Medium	md	Large tablet to laptop	960px > < 1264px*
Large	lg	Desktop	                1264px > < 1904px*
XLarge	xl	4k and ultra-wide	    > 1904px*
 */
var CssSettings = /** @class */ (function () {
    function CssSettings() {
        this.deviceSettings = { width: 500 };
        this.parsedAndTreedCssList = [];
    }
    CssSettings.prototype.smAndDown = function () {
        return this.deviceSettings.width < 960;
    };
    return CssSettings;
}());
exports.CssSettings = CssSettings;


/***/ }),

/***/ "./src/css/cssASTCacher.ts":
/*!*********************************!*\
  !*** ./src/css/cssASTCacher.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssASTCacher = void 0;
var CssASTCacher = /** @class */ (function () {
    function CssASTCacher() {
    }
    CssASTCacher.prototype.CacheASTs = function (serializedAbstractSyntaxTrees) {
        this.cachedASTs = serializedAbstractSyntaxTrees.map(function (serializedTree) { return JSON.parse(serializedTree); });
    };
    CssASTCacher.prototype.PrependCachedASTs = function (rules) {
        var _a;
        var retVal = rules.map(function (item) { return item; });
        (_a = this.cachedASTs) === null || _a === void 0 ? void 0 : _a.forEach(function (item) { return retVal.push(item); });
        return retVal;
    };
    return CssASTCacher;
}());
exports.CssASTCacher = CssASTCacher;


/***/ }),

/***/ "./src/css/cssExtender.ts":
/*!********************************!*\
  !*** ./src/css/cssExtender.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssExtender = void 0;
var compTagDict = {
    "VBtn": "button",
    "VForm": "form",
    "div": "div",
    "body": "body",
    "html": "html"
};
var CssExtender = /** @class */ (function () {
    function CssExtender() {
    }
    CssExtender.CreateComponentExtended = function (compCollection, compClass, compUID) {
        var classArray = [];
        if (compCollection.compDomClass) { //carefull "" is unwanted
            classArray = compCollection.compDomClass.split(" ");
        }
        if (compClass) {
            compClass.trim().split(" ").forEach(function (eachClass) { return eachClass && classArray.push(eachClass); });
        }
        var componentExtended = { classNode: { classes: {}, compTag: compTagDict[compCollection.compType], UID: compUID, needCss: true } };
        componentExtended.classNode.classes = classArray.reduce(function (prev, cur) { return (prev[cur] = true) && prev; }, {});
        componentExtended.parent = compCollection.parentCompCollection;
        compCollection.cssExtended = componentExtended;
        return componentExtended;
    };
    CssExtender.FixAndGetExtended = function (compColl) {
        if (compColl.cssExtended) {
            return compColl.cssExtended;
        }
        return CssExtender.CreateComponentExtended(compColl, undefined, compColl.GetCompUID()); // non extended comps can not have class previously
    };
    return CssExtender;
}());
exports.CssExtender = CssExtender;


/***/ }),

/***/ "./src/css/cssFlatter.ts":
/*!*******************************!*\
  !*** ./src/css/cssFlatter.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssFlatter = void 0;
//https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords
var colorNames = JSON.parse('{"black":"000000","silver":"c0c0c0","gray":"808080","white":"ffffff","maroon":"800000","red":"ff0000","purple":"800080","fuchsia":"ff00ff","green":"008000","lime":"00ff00","olive":"808000","yellow":"ffff00","navy":"000080","blue":"0000ff","teal":"008080","aqua":"00ffff","orange":"ffa500","aliceblue":"f0f8ff","antiquewhite":"faebd7","aquamarine":"7fffd4","azure":"f0ffff","beige":"f5f5dc","bisque":"ffe4c4","blanchedalmond":"ffebcd","blueviolet":"8a2be2","brown":"a52a2a","burlywood":"deb887","cadetblue":"5f9ea0","chartreuse":"7fff00","chocolate":"d2691e","coral":"ff7f50","cornflowerblue":"6495ed","cornsilk":"fff8dc","crimson":"dc143c","cyan":"#00ffff","darkblue":"00008b","darkcyan":"008b8b","darkgoldenrod":"b8860b","darkgray":"a9a9a9","darkgreen":"006400","darkgrey":"a9a9a9","darkkhaki":"bdb76b","darkmagenta":"8b008b","darkolivegreen":"556b2f","darkorange":"ff8c00","darkorchid":"9932cc","darkred":"8b0000","darksalmon":"e9967a","darkseagreen":"8fbc8f","darkslateblue":"483d8b","darkslategray":"2f4f4f","darkslategrey":"2f4f4f","darkturquoise":"00ced1","darkviolet":"9400d3","deeppink":"ff1493","deepskyblue":"00bfff","dimgray":"696969","dimgrey":"696969","dodgerblue":"1e90ff","firebrick":"b22222","floralwhite":"fffaf0","forestgreen":"228b22","gainsboro":"dcdcdc","ghostwhite":"f8f8ff","gold":"ffd700","goldenrod":"daa520","greenyellow":"adff2f","grey":"808080","honeydew":"f0fff0","hotpink":"ff69b4","indianred":"cd5c5c","indigo":"4b0082","ivory":"fffff0","khaki":"f0e68c","lavender":"e6e6fa","lavenderblush":"fff0f5","lawngreen":"7cfc00","lemonchiffon":"fffacd","lightblue":"add8e6","lightcoral":"f08080","lightcyan":"e0ffff","lightgoldenrodyellow":"fafad2","lightgray":"d3d3d3","lightgreen":"90ee90","lightgrey":"d3d3d3","lightpink":"ffb6c1","lightsalmon":"ffa07a","lightseagreen":"20b2aa","lightskyblue":"87cefa","lightslategray":"778899","lightslategrey":"778899","lightsteelblue":"b0c4de","lightyellow":"ffffe0","limegreen":"32cd32","linen":"faf0e6","magenta":"#ff00ff","mediumaquamarine":"66cdaa","mediumblue":"0000cd","mediumorchid":"ba55d3","mediumpurple":"9370db","mediumseagreen":"3cb371","mediumslateblue":"7b68ee","mediumspringgreen":"00fa9a","mediumturquoise":"48d1cc","mediumvioletred":"c71585","midnightblue":"191970","mintcream":"f5fffa","mistyrose":"ffe4e1","moccasin":"ffe4b5","navajowhite":"ffdead","oldlace":"fdf5e6","olivedrab":"6b8e23","orangered":"ff4500","orchid":"da70d6","palegoldenrod":"eee8aa","palegreen":"98fb98","paleturquoise":"afeeee","palevioletred":"db7093","papayawhip":"ffefd5","peachpuff":"ffdab9","peru":"cd853f","pink":"ffc0cb","plum":"dda0dd","powderblue":"b0e0e6","rosybrown":"bc8f8f","royalblue":"4169e1","saddlebrown":"8b4513","salmon":"fa8072","sandybrown":"f4a460","seagreen":"2e8b57","seashell":"fff5ee","sienna":"a0522d","skyblue":"87ceeb","slateblue":"6a5acd","slategray":"708090","slategrey":"708090","snow":"fffafa","springgreen":"00ff7f","steelblue":"4682b4","tan":"d2b48c","thistle":"d8bfd8","tomato":"ff6347","turquoise":"40e0d0","violet":"ee82ee","wheat":"f5deb3","whitesmoke":"f5f5f5","yellowgreen":"9acd32","rebeccapurple":"663399"}');
function onlyDigits(s) {
    for (var i = s.length - 1; i >= 0; i--) {
        var d = s.charCodeAt(i);
        if (d < 48 || d > 57)
            return false;
    }
    return true;
}
;
function isPercentage(s) {
    if (!s.endsWith("%")) {
        return false;
    }
    return onlyDigits(s.substring(0, s.length - 1));
}
function isLength(s) {
    var endsWitdh = ["rem", "cap", "ch", "em", "ex", "ic", "lh", "rlh", "vh", "vw", "vi", "vb", "vmin", "vmax", "px", "cm", "mm", "Q", "in", "pc", "pt"];
    var endItem = endsWitdh.find(function (end) { return s.endsWith(end); });
    if (!endItem) {
        return false;
    }
    return onlyDigits(s.substring(0, s.length - endItem.length));
}
var borderStyleKeys = { none: true, hidden: true, dotted: true, dashed: true, solid: true, double: true, groove: true, ridge: true, inset: true, outset: true };
function isBorderStyle(s) {
    return borderStyleKeys[s] || false;
}
var borderWidthKeys = { thin: true, medium: true, thick: true };
function isBorderWidth(s) {
    return borderWidthKeys[s] || isLength(s);
}
function split(value) {
    return value.split(" ").filter(function (item) { return item; });
}
var marginSplitConverter = {
    1: function (data) { return [
        { property: "margin-top", value: data[0] }, { property: "margin-bottom", value: data[0] }, { property: "margin-right", value: data[0] }, { property: "margin-left", value: data[0] }
    ]; },
    2: function (data) { return [
        { property: "margin-top", value: data[0] }, { property: "margin-bottom", value: data[0] },
        { property: "margin-right", value: data[1] }, { property: "margin-left", value: data[1] }
    ]; },
    3: function (data) { return [
        { property: "margin-top", value: data[0] },
        { property: "margin-right", value: data[1] }, { property: "margin-left", value: data[1] },
        { property: "margin-bottom", value: data[2] }
    ]; },
    4: function (data) { return [
        { property: "margin-top", value: data[0] },
        { property: "margin-right", value: data[1] },
        { property: "margin-bottom", value: data[2] },
        { property: "margin-left", value: data[3] }
    ]; },
};
var paddingSplitConverter = {
    1: function (data) { return [
        { property: "padding-top", value: data[0] }, { property: "padding-bottom", value: data[0] }, { property: "padding-right", value: data[0] }, { property: "padding-left", value: data[0] }
    ]; },
    2: function (data) { return [
        { property: "padding-top", value: data[0] }, { property: "padding-bottom", value: data[0] },
        { property: "padding-right", value: data[1] }, { property: "padding-left", value: data[1] }
    ]; },
    3: function (data) { return [
        { property: "padding-top", value: data[0] },
        { property: "padding-right", value: data[1] }, { property: "padding-left", value: data[1] },
        { property: "padding-bottom", value: data[2] }
    ]; },
    4: function (data) { return [
        { property: "padding-top", value: data[0] },
        { property: "padding-right", value: data[1] },
        { property: "padding-bottom", value: data[2] },
        { property: "padding-left", value: data[3] }
    ]; },
};
var shortColorFlatter = function (value) {
    if (value.length != 4 || value[0] != "#") {
        return value;
    }
    return "#" + value[1] + value[1] + value[2] + value[2] + value[3] + value[3];
};
var generateColorFlatter = function (propertyName) {
    return function (value) {
        return [{ property: propertyName, value: shortColorFlatter(value) }];
    };
};
var flattenDict = {
    color: {
        flatter: generateColorFlatter("color"),
    },
    "background-color": {
        flatter: generateColorFlatter("background-color"),
    },
    padding: {
        flatter: function (value) {
            var _a;
            var splitted = split(value);
            return (_a = paddingSplitConverter[splitted.length]) === null || _a === void 0 ? void 0 : _a.call(paddingSplitConverter, splitted);
        }
    },
    border: {
        flatter: function (value) {
            var border_color = "", border_style = "", border_width = "";
            var splitted = split(value);
            splitted.forEach(function (item) {
                if (isBorderWidth(item)) {
                    border_width = item;
                    return;
                }
                if (isBorderStyle(item)) {
                    border_style = item;
                    return;
                }
                border_color += item; // dirty solution for color, should be like background implementation
            });
            if (border_style == "none" || !border_style) {
                return [];
            }
            return [
                { property: "border-style", value: border_style },
                { property: "border-color", value: shortColorFlatter(border_color) },
                { property: "border-width", value: border_width },
            ];
        }
    },
    margin: {
        flatter: function (value) {
            var _a;
            var splitted = split(value);
            return (_a = marginSplitConverter[splitted.length]) === null || _a === void 0 ? void 0 : _a.call(marginSplitConverter, splitted);
        }
    },
    flex: {
        flatter: function (value) {
            var grow = "", shrink = "", basis = "";
            var splitConverter = {
                "auto": function (val) { grow = "1"; shrink = "1"; basis = "auto"; },
                "none": function (val) { grow = "0"; shrink = "0"; basis = "auto"; },
                "": function (val) { return split(value).forEach(function (item) {
                    if (onlyDigits(item)) {
                        if (!grow) {
                            grow = item;
                        }
                        else {
                            shrink = item;
                        }
                    }
                    else {
                        basis = item;
                    }
                }); }
            };
            (splitConverter[value] || splitConverter[""])(value);
            return [{ property: "flex-grow", value: grow }, { property: "flex-shrink", value: shrink || "1" }, { property: "flex-basis", value: basis || "0%" }];
        }
    },
    background: {
        flatter: function (value) {
            var attachment_def = "scroll", clip_def = "border-box", color_def = "transparent", image_def = "none", origin_def = "padding-box", position_def = "0% 0%", repeat_def = "repeat", size_def = "auto auto";
            var attachment = "", clip = "", color = "", image = "", origin = "", position = "", repeat = "", size = "";
            var attachment_func = function (val) { return attachment += (attachment ? " " : "") + val; }, clip_func = function (val) { origin_func(val); clip = clip || val; }, color_func = function (val) { return color += (color ? " " : "") + val; }, image_func = function (val) { return image += (image ? " " : "") + val; }, origin_func = function (val) { return origin += (origin ? " " : "") + val; }, position_func = function (val) { return position += (position ? " " : "") + val; }, repeat_func = function (val) { return repeat += (repeat ? " " : "") + val; }, size_func = function (val) { return size += (size ? " " : "") + val; };
            //https://developer.mozilla.org/en-US/docs/Web/CSS/background
            var direcMap = {
                "currentcolor": color_func,
                "none": image_func,
                "top": position_func,
                "left": position_func,
                "right": position_func,
                "center": position_func,
                "bottom": position_func,
                "cover": size_func,
                "contain": size_func,
                "repeat-x": repeat_func,
                "repeat-y": repeat_func,
                "repeat": repeat_func,
                "space": repeat_func,
                "round": repeat_func,
                "no-repeat": repeat_func,
                "scroll": attachment_func,
                "fixed": attachment_func,
                "local": attachment_func,
                "border-box": clip_func,
                "padding-box": clip_func,
                "content-box": clip_func,
                "transparent": color_func
            };
            var startMap = {
                1: {
                    "#": { func: color_func, closeWaiter: 0 },
                    "'": { func: image_func, closeWaiter: 0 },
                    '"': { func: image_func, closeWaiter: 0 }
                },
                4: {
                    "rgb(": { func: color_func, closeWaiter: 1 },
                    "hsl(": { func: color_func, closeWaiter: 1 },
                    "url(": { func: image_func, closeWaiter: 1 },
                },
                5: {
                    "rgba(": { func: color_func, closeWaiter: 1 },
                    "hsla(": { func: color_func, closeWaiter: 1 },
                },
                6: {
                    "paint(": { func: image_func, closeWaiter: 1 },
                },
                11: {
                    "cross-fade(": { func: image_func, closeWaiter: 1 },
                },
                15: {
                    "conic-gradient(": { func: image_func, closeWaiter: 1 },
                },
                16: {
                    "linear-gradient(": { func: image_func, closeWaiter: 1 },
                    "radial-gradient(": { func: image_func, closeWaiter: 1 },
                },
                26: {
                    "repeating-linear-gradient(": { func: image_func, closeWaiter: 1 },
                    "repeating-radial-gradient(": { func: image_func, closeWaiter: 1 },
                }
            };
            var startMapKeys = Object.keys(startMap).map(function (item) { return Number(item); });
            var waitingEnd = 0;
            var appender;
            split(value).forEach(function (item) {
                if (waitingEnd > 0) {
                    waitingEnd += item.indexOf("(") > -1 ? 1 : 0;
                    waitingEnd -= item.indexOf(")") > -1 ? 1 : 0;
                    appender === null || appender === void 0 ? void 0 : appender(item);
                    return;
                }
                var direct = direcMap[item];
                if (direct) {
                    appender = direct;
                    direct(item);
                    return;
                }
                var color = colorNames[item];
                if (color) {
                    appender = color_func;
                    color_func(item);
                    return;
                }
                if (item == "/" && appender == position_func) {
                    appender = size_func;
                    return;
                }
                var map;
                startMapKeys.filter(function (length) { return item.length > length; }).find(function (length) { var _a; map = (_a = startMap[length]) === null || _a === void 0 ? void 0 : _a[item.substring(0, length)]; return map; });
                if (map) {
                    map.func(item);
                    waitingEnd += map.closeWaiter;
                    if (waitingEnd > 0) {
                        waitingEnd -= item.indexOf(")") > -1 ? map.closeWaiter : 0;
                    }
                    if (waitingEnd > 0) {
                        appender = map.func;
                    }
                    return;
                }
                appender = (appender == size_func) ? size_func : position_func;
                appender(item);
            });
            return [
                { property: "background-attachment", value: attachment },
                { property: "background-clip", value: clip },
                { property: "background-color", value: shortColorFlatter(color) },
                { property: "background-image", value: image },
                { property: "background-origin", value: origin },
                { property: "background-position", value: position },
                { property: "background-repeat", value: repeat },
                { property: "background-size", value: size }
            ];
        }
    }
};
var CssFlatter = /** @class */ (function () {
    function CssFlatter() {
    }
    CssFlatter.Flatten = function (property, value) {
        var _a;
        var flattens = (_a = flattenDict[property]) === null || _a === void 0 ? void 0 : _a.flatter(value);
        return flattens;
    };
    CssFlatter.Importance = function (value) {
        var retVal = { value: value.toString(), imp: false };
        if (retVal.value.indexOf("!important") > -1) {
            retVal.value = retVal.value.replace("!important", "");
            retVal.imp = true;
        }
        retVal.value = retVal.value.trim();
        return retVal;
    };
    return CssFlatter;
}());
exports.CssFlatter = CssFlatter;


/***/ }),

/***/ "./src/css/cssInlineStyles.ts":
/*!************************************!*\
  !*** ./src/css/cssInlineStyles.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssInlineStyles = void 0;
var componentExtender_1 = __webpack_require__(/*! ../component/componentExtender */ "./src/component/componentExtender.ts");
var cssExtender_1 = __webpack_require__(/*! ./cssExtender */ "./src/css/cssExtender.ts");
var cssFlatter_1 = __webpack_require__(/*! ./cssFlatter */ "./src/css/cssFlatter.ts");
var numberDict = {
    "1": true, "2": true, "3": true, "4": true, "5": true, "6": true, "7": true, "8": true, "9": true, "0": true,
    ".": true,
    " ": false
};
;
function keys(obj) {
    return Object.keys(obj);
}
function convertToUnit(str, unit) {
    if (unit === void 0) { unit = 'px'; }
    if (str == null || str === '') {
        return undefined;
    }
    else if (isNaN(+str)) {
        return String(str);
    }
    else {
        return "" + Number(str) + unit;
    }
}
var numberUnitSeperator = function (value, options) {
    options.defaultUnit = options.defaultUnit || "px";
    options.mobileFactor = options.mobileFactor || true;
    value = value.toString();
    var len = value.length;
    var retVal = { number: 0, unit: "" };
    var numberPart = "";
    var curChar;
    for (var i = 0; i < len; i++) {
        curChar = value[i];
        switch (numberDict[curChar]) {
            case true:
                numberPart += curChar;
                break;
            case false: break;
            case undefined:
            default:
                retVal.unit += curChar;
                break;
        }
    }
    retVal.number = parseInt(numberPart);
    retVal.unit = retVal.unit || options.defaultUnit;
    return retVal;
};
function mobileFactor(input, factorOverride) {
    if (input.unit != "px") {
        return;
    }
    if (factorOverride !== undefined) {
        input.number *= factorOverride;
    }
    else {
        input.number *= 0.7;
    }
}
var numberUnitConcat = function (value) { return value.number + value.unit; };
function createHeightFunc(options) {
    if (options === void 0) { options = {}; }
    return function (compCssProps, propValue) {
        if (!propValue) {
            return;
        }
        var importance = cssFlatter_1.CssFlatter.Importance(propValue);
        var value = numberUnitSeperator(importance.value, {});
        mobileFactor(value, options.mobileFactor);
        var valueConcat = numberUnitConcat(value);
        compCssProps.Add("height", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
    };
}
function createWidthFunc(opt) {
    var options = opt || {};
    return function (compCssProps, propValue, proxifiedCompInst, cssSettings) {
        if (propValue == undefined) {
            if (options.defaultVal) {
                propValue = options.defaultVal;
            }
            else if (options.screenRatio) {
                propValue = options.screenRatio * cssSettings.deviceSettings.width;
            }
        }
        if (!propValue) {
            return;
        }
        var importance = cssFlatter_1.CssFlatter.Importance(propValue);
        var value = numberUnitSeperator(importance.value, {});
        mobileFactor(value, options.mobileFactor);
        var valueConcat = numberUnitConcat(value);
        compCssProps.Add("width", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
    };
}
function createmaxWidthFunc(options) {
    if (options === void 0) { options = {}; }
    return function (compCssProps, propValue) {
        if (!propValue) {
            return;
        }
        var importance = cssFlatter_1.CssFlatter.Importance(propValue);
        var value = numberUnitSeperator(importance.value, {});
        mobileFactor(value, options.mobileFactor);
        var valueConcat = numberUnitConcat(value);
        compCssProps.Add("max-width", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
    };
}
function createminWidthFunc(options) {
    if (options === void 0) { options = {}; }
    return function (compCssProps, propValue) {
        if (!propValue) {
            return;
        }
        var importance = cssFlatter_1.CssFlatter.Importance(propValue);
        var value = numberUnitSeperator(importance.value, {});
        mobileFactor(value, options.mobileFactor);
        var valueConcat = numberUnitConcat(value);
        compCssProps.Add("min-width", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
    };
}
function createmaxHeightFunc(options) {
    if (options === void 0) { options = {}; }
    return function (compCssProps, propValue) {
        if (!propValue) {
            return;
        }
        var importance = cssFlatter_1.CssFlatter.Importance(propValue);
        var value = numberUnitSeperator(importance.value, {});
        mobileFactor(value, options.mobileFactor);
        var valueConcat = numberUnitConcat(value);
        compCssProps.Add("max-height", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
    };
}
function createminHeightFunc(options) {
    if (options === void 0) { options = {}; }
    return function (compCssProps, propValue) {
        if (!propValue) {
            return;
        }
        var importance = cssFlatter_1.CssFlatter.Importance(propValue);
        var value = numberUnitSeperator(importance.value, {});
        mobileFactor(value, options.mobileFactor);
        var valueConcat = numberUnitConcat(value);
        compCssProps.Add("min-height", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
    };
}
var inlineStylerDict = {
    VAlert: {
        height: createHeightFunc(),
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VAppBar: {
        absolute: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            compCssProps.Add("left", "0", CssInlineStyles.InlineSpecificity, false);
            compCssProps.Add("right", "0", CssInlineStyles.InlineSpecificity, false);
        },
        fixed: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            compCssProps.Add("left", "0", CssInlineStyles.InlineSpecificity, false);
            compCssProps.Add("right", "0", CssInlineStyles.InlineSpecificity, false);
        },
        height: function (compCssProps, propValue, proxifiedCompInst, cssSettings) {
            var defaulted = 64;
            if (propValue) {
                defaulted = propValue;
            }
            else if (proxifiedCompInst.dense) {
                defaulted = 48;
            }
            else if (cssSettings.smAndDown()) {
                defaulted = 56;
            }
            /**
             * Vuetify taken from -> VAppBar.computedContentHeight
            if (!this.shrinkOnScroll) return VToolbar.options.computed.computedContentHeight.call(this)

            const min = this.dense ? 48 : 56
            const max = this.computedOriginalHeight

            return min + (max - min) * this.scrollRatio

            VToolbar.computedContentHeight (): number {
                if (this.height) return parseInt(this.height)
                if (this.isProminent && this.dense) return 96
                if (this.isProminent && this.short) return 112
                if (this.isProminent) return 128
                if (this.dense) return 48
                if (this.short || this.$vuetify.breakpoint.smAndDown) return 56
                return 64
            }
             */
            var importance = cssFlatter_1.CssFlatter.Importance(defaulted);
            var value = numberUnitSeperator(importance.value, {});
            //mobileFactor(value);
            var valueConcat = numberUnitConcat(value);
            compCssProps.Add("height", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
        },
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VAvatar: {
        height: createHeightFunc(),
        width: createWidthFunc(),
        size: function (compCssProps, propValue) {
            var importance = cssFlatter_1.CssFlatter.Importance(propValue !== null && propValue !== void 0 ? propValue : 48);
            var value = numberUnitSeperator(importance.value, {});
            //mobileFactor(value);
            var valueConcat = numberUnitConcat(value);
            compCssProps.Add("height", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
            compCssProps.Add("width", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
            compCssProps.Add("min-width", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
        },
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VAutocomplete: {
        height: createHeightFunc(),
    },
    VBadge: {
        offsetX: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            var importance = cssFlatter_1.CssFlatter.Importance(propValue);
            var value = numberUnitSeperator(importance.value, {});
            mobileFactor(value);
            var valueConcat = numberUnitConcat(value);
            compCssProps.Add("left", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
        },
        offsetY: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            var importance = cssFlatter_1.CssFlatter.Importance(propValue);
            var value = numberUnitSeperator(importance.value, {});
            mobileFactor(value);
            var valueConcat = numberUnitConcat(value);
            compCssProps.Add("bottom", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
        },
    },
    VBottomSheet: {
        width: createWidthFunc(),
        maxWidth: createmaxWidthFunc()
    },
    VBtn: {
        width: createWidthFunc({ mobileFactor: 1 }),
        height: createHeightFunc({ mobileFactor: 1 }),
        minWidth: createminWidthFunc({ mobileFactor: 1 }),
        maxWidth: createmaxWidthFunc({ mobileFactor: 1 }),
        maxHeight: createmaxHeightFunc({ mobileFactor: 1 }),
        minHeight: createminHeightFunc({ mobileFactor: 1 })
    },
    VBottomNavigation: {
        width: createWidthFunc(),
        height: createHeightFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VCombobox: {
        height: createHeightFunc()
    },
    VCard: {
        width: createWidthFunc({ mobileFactor: 1 }),
        height: createHeightFunc({ mobileFactor: 1 }),
        minWidth: createminWidthFunc({ mobileFactor: 1 }),
        maxWidth: createmaxWidthFunc({ mobileFactor: 1 }),
        maxHeight: createmaxHeightFunc({ mobileFactor: 1 }),
        minHeight: createminHeightFunc({ mobileFactor: 1 })
    },
    VCarousel: {
        height: createHeightFunc()
    },
    // VDataTable: {
    // },
    VDialog: {
        width: createWidthFunc(),
        maxWidth: createmaxWidthFunc()
    },
    VDatePicker: {
        width: createWidthFunc(),
    },
    VOverflowBtn: {
        height: createHeightFunc()
    },
    VFooter: {
        fixed: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            compCssProps.Add("bottom", "0", CssInlineStyles.InlineSpecificity, false);
            compCssProps.Add("left", "0", CssInlineStyles.InlineSpecificity, false);
            compCssProps.Add("right", "0", CssInlineStyles.InlineSpecificity, false);
        },
        absolute: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            compCssProps.Add("bottom", "0", CssInlineStyles.InlineSpecificity, false);
            compCssProps.Add("left", "0", CssInlineStyles.InlineSpecificity, false);
            compCssProps.Add("right", "0", CssInlineStyles.InlineSpecificity, false);
        },
        height: createHeightFunc(),
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VFileInput: {
        height: createHeightFunc()
    },
    VList: {
        height: createHeightFunc(),
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VImg: {
        height: createHeightFunc({ mobileFactor: 1.0 }),
        width: createWidthFunc({ mobileFactor: 1.0 }),
        minWidth: createminWidthFunc({ mobileFactor: 1.0 }),
        maxWidth: createmaxWidthFunc({ mobileFactor: 1.0 }),
        maxHeight: createmaxHeightFunc({ mobileFactor: 1.0 }),
        minHeight: createminHeightFunc({ mobileFactor: 1.0 })
    },
    VMenu: {
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        zIndex: function (compCssProps, propValue) {
            if (!propValue) {
                return;
            }
            var importance = cssFlatter_1.CssFlatter.Importance(propValue);
            var value = numberUnitSeperator(importance.value, {});
            mobileFactor(value);
            var valueConcat = numberUnitConcat(value);
            compCssProps.Add("z-index", valueConcat, CssInlineStyles.InlineSpecificity, importance.imp);
        },
    },
    VNavigationDrawer: {
        height: createHeightFunc(),
        width: createWidthFunc({ screenRatio: 0.65 }),
    },
    VProgressCircular: {
        width: createWidthFunc(),
    },
    VRangeSlider: {
        height: createHeightFunc(),
    },
    VSlider: {
        height: createHeightFunc(),
    },
    VSelect: {
        height: createHeightFunc(),
    },
    VSparkline: {
        height: createHeightFunc(),
        width: createWidthFunc(),
    },
    VSheet: {
        height: createHeightFunc(),
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VSnackbar: {
        height: createHeightFunc(),
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VToolbar: {
        height: createHeightFunc(),
        width: createWidthFunc(),
        minWidth: createminWidthFunc(),
        maxWidth: createmaxWidthFunc(),
        maxHeight: createmaxHeightFunc(),
        minHeight: createminHeightFunc()
    },
    VTextField: {
        height: createHeightFunc(),
    },
    VTextarea: {
        height: createHeightFunc(),
    },
    VTimePicker: {
        width: createWidthFunc(),
    },
    VCalendar: {
        width: createWidthFunc(),
    },
    VTabs: {
        height: createHeightFunc(),
    },
    VProgressLinear: {
        height: createHeightFunc(),
    },
    VParallax: {
        height: createHeightFunc(),
    },
    //directly with component
    // VCarouselAlternative: (compCssProps, proxifiedCompInst) => {
    //     const height = proxifiedCompInst.height;
    //     if (typeof height == "string") {
    //         const importance = CssFlatter.Importance(height);
    //         compCssProps.Add("height", pixeller(importance.value), 9000, importance.imp);
    //     }
    // }
    QLabel: function (compCssProps) {
        compCssProps.Add("line-height", "1.3", CssInlineStyles.InlineSpecificity, false); //qlabel inline code
    },
    VIcon: function (compCssProps, compExtended) {
        var sizes = {
            xSmall: compExtended.compPropDict.xSmall,
            small: compExtended.compPropDict.small,
            medium: compExtended.compPropDict.medium,
            large: compExtended.compPropDict.large,
            xLarge: compExtended.compPropDict.xLarge,
        };
        var SIZE_MAP;
        (function (SIZE_MAP) {
            SIZE_MAP["xSmall"] = "12px";
            SIZE_MAP["small"] = "16px";
            SIZE_MAP["default"] = "24px";
            SIZE_MAP["medium"] = "28px";
            SIZE_MAP["large"] = "36px";
            SIZE_MAP["xLarge"] = "40px";
        })(SIZE_MAP || (SIZE_MAP = {}));
        var explicitSize = keys(sizes).find(function (key) { return sizes[key]; });
        var fontSize = (explicitSize && SIZE_MAP[explicitSize]) || convertToUnit(compExtended.compPropDict.size);
        if (fontSize) {
            compCssProps.Add("font-size", fontSize, CssInlineStyles.InlineSpecificity, false);
        }
    }
};
var CssInlineStyles = /** @class */ (function () {
    function CssInlineStyles() {
    }
    CssInlineStyles.ApplySelfStyles = function (compCssProps, compCollection, cssSettings) {
        var inlineStyles = cssExtender_1.CssExtender.FixAndGetExtended(compCollection).classNode.inlineStyles;
        var compExtended = componentExtender_1.ComponentExtender.GetExtended(compCollection);
        if (inlineStyles) {
            Object.keys(inlineStyles).forEach(function (key) { return compCssProps.Add(key, inlineStyles[key], CssInlineStyles.InlineSpecificity, false); });
        }
        var inlineStyler = inlineStylerDict[compCollection.compType];
        if (!inlineStyler) {
            return;
        }
        if (inlineStyler instanceof Function) {
            inlineStyler(compCssProps, compExtended);
        }
        else {
            Object.keys(inlineStyler).forEach(function (propName) {
                var propValue = compCollection.component[propName];
                inlineStyler[propName](compCssProps, propValue, compCollection.component, cssSettings);
            });
        }
    };
    CssInlineStyles.InlineSpecificity = 9000;
    return CssInlineStyles;
}());
exports.CssInlineStyles = CssInlineStyles;


/***/ }),

/***/ "./src/css/cssMediaEvaluator.ts":
/*!**************************************!*\
  !*** ./src/css/cssMediaEvaluator.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssMediaEvaluator = void 0;
var log_1 = __webpack_require__(/*! ../tracing/log */ "./src/tracing/log.ts");
function logTokenError(errText, token, context) {
    var _a;
    var message = errText + " -> selector: " + context.originalSelector + " token: " + token.type + ", " + (token.combinator || token.name || "") + ", " + (token.value || token.argument || "") + ", " + (((_a = token.pos) === null || _a === void 0 ? void 0 : _a.join("-")) || "");
    (0, log_1.log)(message);
}
function assertType(tokenInput, context) {
    var token = tokenInput;
    switch (token.type) {
        case "complex":
            if (!token.combinator || !token.left || !token.right) {
                logTokenError("token has missing fields", token, context);
                return undefined;
            }
            return token;
        case "type":
            if (!token.content) {
                logTokenError("token has missing fields", token, context);
                return undefined;
            }
            return token;
        default:
            return undefined;
    }
}
var evalTokens = {
    complex: function (token, context) {
        var tokenComplex = assertType(token, context);
        if (!tokenComplex) {
            return false;
        }
        if (tokenComplex.combinator != " ") {
            throw new Error("unexpected combinator: " + tokenComplex.combinator + " in media complex");
        }
        return context.recurser(tokenComplex.left, context) && context.recurser(tokenComplex.right, context); // careful with the short circuit -> && (no right execution if left fails)
    },
    type: function (token, context) {
        var tokenType = assertType(token, context);
        if (!tokenType) {
            return false;
        }
        context.mediaSelector = context.mediaSelector; // this is media, must exist
        var tokenTypeMedia = tokenType;
        switch (tokenTypeMedia.name) {
            case "print":
                return false;
            case "max-width":
            case "min-width":
                context.mediaSelector.waitingFor = tokenTypeMedia.name;
            case "screen":
            case "all":
            case "only":
            case "and":
                return true;
            default:
                if (!context.mediaSelector.waitingFor) {
                    return false;
                }
                var value = Number(tokenTypeMedia.name.replace("px", ""));
                var waitingFor = context.mediaSelector.waitingFor;
                delete context.mediaSelector.waitingFor;
                switch (waitingFor) {
                    case "max-width":
                        return context.mediaSelector.screenInfo.width <= value;
                    case "min-width":
                        return context.mediaSelector.screenInfo.width >= value;
                    default:
                        return false;
                }
        }
    }
};
var CssMediaEvaluator = /** @class */ (function () {
    function CssMediaEvaluator() {
    }
    CssMediaEvaluator.MediaEval = function (token, originalSelector, deviceSettings) {
        var mediaSelector = { screenInfo: { width: deviceSettings.width } };
        var recurser = function (token, context) {
            return evalTokens[token.type](token, context);
        };
        var context = { recurser: recurser, originalSelector: originalSelector, mediaSelector: mediaSelector, upward: true };
        return context.recurser(token, context);
    };
    return CssMediaEvaluator;
}());
exports.CssMediaEvaluator = CssMediaEvaluator;


/***/ }),

/***/ "./src/css/cssParser.ts":
/*!******************************!*\
  !*** ./src/css/cssParser.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssParser = void 0;
var rework_1 = __importDefault(__webpack_require__(/*! rework */ "../../node_modules/rework/index.js"));
var cssMediaEvaluator_1 = __webpack_require__(/*! ./cssMediaEvaluator */ "./src/css/cssMediaEvaluator.ts");
var cssPropDict_1 = __webpack_require__(/*! ./cssPropDict */ "./src/css/cssPropDict.ts");
// import * as parsel from "parsel-js"; -> for d.ts in node_modules
var parseljs = __importStar(__webpack_require__(/*! parsel-js */ "../../node_modules/parsel-js/dist/parsel.min.js"));
var cssFlatter_1 = __webpack_require__(/*! ./cssFlatter */ "./src/css/cssFlatter.ts");
var cssEvaluator_1 = __webpack_require__(/*! ../cssEngine/cssEvaluator */ "./src/cssEngine/cssEvaluator.ts");
var reworkFixer_1 = __webpack_require__(/*! ./fixer/reworkFixer */ "./src/css/fixer/reworkFixer.ts");
var parsel = parseljs;
var CssParser = /** @class */ (function () {
    function CssParser() {
    }
    CssParser.prototype.ParseCss = function (cssList, deviceSettings, cachedASTs) {
        var parsedCssList = cssList.map(function (cssString) { return (0, reworkFixer_1.reworkFixer)((0, rework_1.default)(cssString).obj.stylesheet, false); });
        if (cachedASTs) {
            parsedCssList = cachedASTs.PrependCachedASTs(parsedCssList);
        }
        var selectorMapper = function (selector) {
            var AST = parsel.parse(selector);
            return { selector: selector, AST: AST, specificityNum: parsel.specificityToNumber(parsel.specificity(selector), 10), evaluationPlan: cssEvaluator_1.CssEvaluator.GenerateTokenEvaluator(AST, selector) };
        };
        // let shortHandedList: Array<IQDeclaration> = [];
        var ruleMapper = (function (rule) {
            switch (rule.type) {
                case "media":
                    var mediaAST = parsel.parse(rule.media.replace(/\(/g, "").replace(/\)/g, "").replace(/:/g, ""));
                    if (!cssMediaEvaluator_1.CssMediaEvaluator.MediaEval(mediaAST, rule.media, deviceSettings)) {
                        return undefined;
                    }
                    var iqMedia = {
                        rules: rule.rules.map(ruleMapper).filter(function (rule) { return rule != null; }),
                        media: rule.media,
                        type: rule.type
                    };
                    return iqMedia;
                case "rule":
                    delete rule.position;
                    var iqRule_1 = {
                        type: rule.type,
                        declarations: [],
                        parselDatas: rule.selectors.map(selectorMapper),
                    };
                    rule.declarations.forEach(function (item) {
                        if (item.type == "comment") {
                            return;
                        }
                        item.value = cssPropDict_1.CssPropDict.LowerCurrentColor(item.value);
                        var importance = cssFlatter_1.CssFlatter.Importance(item.value);
                        var retVal = { property: item.property, value: importance.value, flattens: cssFlatter_1.CssFlatter.Flatten(item.property, importance.value), imp: importance.imp };
                        iqRule_1.declarations.push(retVal);
                    });
                    return iqRule_1;
                default:
                    return undefined;
            }
        }).bind(this);
        var parsedAndTreedCssList = parsedCssList.map(function (css) { return css.rules.map(ruleMapper).filter(function (item) { return item != null; }); });
        return parsedAndTreedCssList;
    };
    return CssParser;
}());
exports.CssParser = CssParser;


/***/ }),

/***/ "./src/css/cssPropDict.ts":
/*!********************************!*\
  !*** ./src/css/cssPropDict.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssPropDict = void 0;
var CssPropDict = /** @class */ (function () {
    function CssPropDict() {
        this.cssPropDict = {};
    }
    CssPropDict.LowerCurrentColor = function (cssValue) {
        var lower = cssValue.toLowerCase();
        return lower == "currentcolor" ? lower : cssValue;
    };
    CssPropDict.prototype.Clone = function () {
        var _this = this;
        var cloned = new CssPropDict();
        Object.keys(this.cssPropDict).map(function (key) { return ({ key: key, value: _this.cssPropDict[key] }); })
            .forEach(function (prop) { return cloned.cssPropDict[prop.key] = { specNum: prop.value.specNum, value: prop.value.value, imp: prop.value.imp }; });
        return cloned;
    };
    CssPropDict.prototype.GetDictOnly = function () {
        var _this = this;
        return Object.keys(this.cssPropDict).reduce(function (prev, cssPropName) { prev[cssPropName] = _this.cssPropDict[cssPropName].value; return prev; }, {});
    };
    /**
     * @param specNum spesificity number
     */
    CssPropDict.prototype.Add = function (cssProp, value, specNum, imp) {
        var selfProp = this.cssPropDict[cssProp];
        if (!selfProp) {
            this.cssPropDict[cssProp] = { value: value, specNum: specNum, imp: imp };
            return;
        }
        if (selfProp.imp && !imp) {
            return;
        }
        if (imp && !selfProp.imp) {
            this.cssPropDict[cssProp] = { value: value, specNum: specNum, imp: imp };
            return;
        }
        // if equal, new commer overrides
        if (specNum >= selfProp.specNum) {
            this.cssPropDict[cssProp] = { value: value, specNum: specNum, imp: imp };
            return;
        }
    };
    CssPropDict.prototype.CascadeParent = function (parentCssProps) {
        var _this = this;
        Object.keys(parentCssProps.cssPropDict).forEach(function (cssPropName) {
            var selfProp = _this.cssPropDict[cssPropName];
            if (selfProp) {
                //inherit rule
                if (selfProp.value == "inherit") {
                    var parentProp_1 = parentCssProps.cssPropDict[cssPropName];
                    _this.cssPropDict[cssPropName] = { value: parentProp_1.value, specNum: selfProp.specNum, imp: parentProp_1.imp }; // carefull, work with clone object //56041
                }
                return;
            }
            //inheritance rule
            if (!CssPropDict.CssInheritList[cssPropName]) {
                return;
            }
            var parentProp = parentCssProps.cssPropDict[cssPropName];
            _this.cssPropDict[cssPropName] = { value: parentProp.value, specNum: parentProp.specNum, imp: parentProp.imp }; // !! carefull, work with clone object //56041
        });
        parentCssProps.cssPropDict;
    };
    CssPropDict.prototype.HandleCurrentColor = function () {
        var _this = this;
        var colorValue = this.cssPropDict["color"];
        if (!colorValue) {
            return;
        }
        CssPropDict.currentColorPropList.forEach(function (value) {
            var cssVal = _this.cssPropDict[value];
            if (cssVal) {
                cssVal.value = cssVal.value.replace("currentcolor", colorValue.value);
            }
        });
    };
    CssPropDict.prototype.GetValue = function (key) {
        return this.cssPropDict[key];
    };
    CssPropDict.CssInheritList = {
        'border-collapse': true, 'border-spacing': true,
        'caption-side': true,
        'color': true,
        'cursor': true,
        'direction': true,
        'empty-cells': true,
        'font': true, 'font-family': true, 'font-size': true, 'font-style': true, 'font-variant': true, 'font-weight': true, 'font-size-adjust': true, 'font-stretch': true,
        'letter-spacing': true,
        'line-height': true,
        'list-style': true, 'list-style-image': true, 'list-style-position': true, 'list-style-type': true,
        'overflow-wrap': true,
        'orphans': true,
        'quotes': true,
        'tab-size': true,
        'text-align': true, 'text-align-last': true, 'text-decoration-color': true, 'text-indent': true, 'text-justify': true, 'text-shadow': true, 'text-transform': true,
        'visibility': true,
        'white-space': true,
        'widows': true,
        'word-break': true, 'word-spacing': true, 'word-wrap': true,
    };
    // CSS prop value flatten
    // Left array will be removed when all css prop values are flattened
    // "background" is flattened
    // "border" was flattened
    CssPropDict.currentColorPropList = ["box-shadow"].concat(["background-color", "box-shadow-color", "border-color", "fill", "stroke"]);
    return CssPropDict;
}());
exports.CssPropDict = CssPropDict;


/***/ }),

/***/ "./src/css/cssSettings.ts":
/*!********************************!*\
  !*** ./src/css/cssSettings.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.partialCssActive = void 0;
exports.partialCssActive = 2; // 0- down, 1- transmit changed, 2- transmit and calculate changed


/***/ }),

/***/ "./src/css/fakeSolutions/pageFake.ts":
/*!*******************************************!*\
  !*** ./src/css/fakeSolutions/pageFake.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageFake = void 0;
var cssFlatter_1 = __webpack_require__(/*! ../cssFlatter */ "./src/css/cssFlatter.ts");
var cssInlineStyles_1 = __webpack_require__(/*! ../cssInlineStyles */ "./src/css/cssInlineStyles.ts");
var CssRoot_1 = __webpack_require__(/*! ../Interfaces/CssRoot */ "./src/css/Interfaces/CssRoot.ts");
function process(css) {
    return Object.keys(css).map(function (cssProp) {
        var importance = cssFlatter_1.CssFlatter.Importance(css[cssProp]);
        return {
            property: cssProp,
            value: importance.value,
            flattens: cssFlatter_1.CssFlatter.Flatten(cssProp, css[cssProp]),
            imp: importance.imp
        };
    });
}
var pageCompFakes = {
    "/static/qjson/fakeTest/textCenter": (_a = {},
        _a[CssRoot_1.q_tsbridge_appName] = process({ background: "linear-gradient(180deg, #043DB0 0%, #62C5FA 30%, #FFFFFF 100%)" }),
        _a["EdtrComp_75"] = process({ "text-align": "center !important" }),
        _a),
    "/isleasing-sym/qjsonfunc?qjsonpath=home": (_b = {},
        _b[CssRoot_1.q_tsbridge_appName] = process({ background: "linear-gradient(180deg,#043DB0 0%,#62C5FA 30%,#FFFFFF 100%)" }),
        _b),
    "/isleasing-sym/qjsonfunc?qjsonpath=login": (_c = {},
        _c[CssRoot_1.q_tsbridge_appName] = process({ background: "#fafafa" }),
        _c),
    "/isleasing-sym/qjsonfunc?qjsonpath=changePassword": (_d = {},
        _d[CssRoot_1.q_tsbridge_appName] = process({ background: "#fafafa" }),
        _d),
    "/isleasing-sym/qjsonfunc?qjsonpath=registerForChangingPassword": (_e = {},
        _e[CssRoot_1.q_tsbridge_appName] = process({ background: "#fafafa" }),
        _e),
    "/isleasing-sym/qjsonfunc?qjsonpath=loginRememberedUser": (_f = {},
        _f[CssRoot_1.q_tsbridge_appName] = process({ background: "#fafafa" }),
        _f),
    "/isleasing-sym/qjsonfunc?qjsonpath=otp": (_g = {},
        _g[CssRoot_1.q_tsbridge_appName] = process({ background: "#fafafa" }),
        _g["txtOtp1"] = process({ "font-size": "32px !important", "text-align": "center" }),
        _g["txtOtp2"] = process({ "font-size": "32px !important", "text-align": "center" }),
        _g["txtOtp3"] = process({ "font-size": "32px !important", "text-align": "center" }),
        _g["txtOtp4"] = process({ "font-size": "32px !important", "text-align": "center" }),
        _g)
};
var PageFake = /** @class */ (function () {
    function PageFake() {
    }
    PageFake.FixFakedComp = function (pageName, compId, compCssProps) {
        var _a;
        var fakeModifiers = (_a = pageCompFakes[pageName]) === null || _a === void 0 ? void 0 : _a[compId];
        if (!fakeModifiers) {
            return;
        }
        fakeModifiers.forEach(function (modifier) {
            return modifier.flattens
                ? modifier.flattens.forEach(function (eachModifier) { return compCssProps.Add(eachModifier.property, eachModifier.value, cssInlineStyles_1.CssInlineStyles.InlineSpecificity, modifier.imp); })
                : compCssProps.Add(modifier.property, modifier.value, cssInlineStyles_1.CssInlineStyles.InlineSpecificity, modifier.imp);
        });
    };
    return PageFake;
}());
exports.PageFake = PageFake;


/***/ }),

/***/ "./src/css/fixer/reworkFixer.ts":
/*!**************************************!*\
  !*** ./src/css/fixer/reworkFixer.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.reworkFixer = void 0;
function reworkImportFix(rules, log) {
    if (rules.rules[0].type != "import") {
        return false;
    }
    var imp = rules.rules[0];
    var quoteIndex = imp.import.indexOf("'");
    if (quoteIndex == -1) {
        return false;
    }
    var lastQuoteIndex = imp.import.lastIndexOf("'");
    if (lastQuoteIndex > imp.import.length - 5) {
        return false;
    }
    var firstRule = rules.rules[1];
    if (firstRule.type != "rule") {
        return false;
    }
    var selectorQuote = firstRule.selectors[0].indexOf("'");
    var colon = firstRule.selectors[0].indexOf(";", selectorQuote);
    if (colon - selectorQuote > 3) {
        return false;
    }
    var newLineIndex = firstRule.selectors[0].lastIndexOf("\n");
    var targetIndex = newLineIndex > colon ? newLineIndex : colon;
    imp.import += firstRule.selectors[0].substring(0, targetIndex + 1);
    firstRule.selectors[0] = firstRule.selectors[0].substring(targetIndex + 1);
    return true;
}
function reworkFixer(rules, log) {
    log = false;
    var importFix = reworkImportFix(rules, log);
    return rules;
}
exports.reworkFixer = reworkFixer;


/***/ }),

/***/ "./src/cssEngine/cssEngine.ts":
/*!************************************!*\
  !*** ./src/cssEngine/cssEngine.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CssEngine = void 0;
var cssExtender_1 = __webpack_require__(/*! ../css/cssExtender */ "./src/css/cssExtender.ts");
var cssPropDict_1 = __webpack_require__(/*! ../css/cssPropDict */ "./src/css/cssPropDict.ts");
var CssRoot_1 = __webpack_require__(/*! ../css/Interfaces/CssRoot */ "./src/css/Interfaces/CssRoot.ts");
var cssEvaluator_1 = __webpack_require__(/*! ./cssEvaluator */ "./src/cssEngine/cssEvaluator.ts");
var pageFake_1 = __webpack_require__(/*! ../css/fakeSolutions/pageFake */ "./src/css/fakeSolutions/pageFake.ts");
var cssInlineStyles_1 = __webpack_require__(/*! ../css/cssInlineStyles */ "./src/css/cssInlineStyles.ts");
var cssSettings_1 = __webpack_require__(/*! ../css/cssSettings */ "./src/css/cssSettings.ts");
var classStringToDict = function (classString) { return classString.trim().split(" ").reduce(function (prev, cur) { return (prev[cur] = true) && prev; }, {}); };
//optimizasyon static func yerine inline func'lar
var CssEngine = /** @class */ (function () {
    function CssEngine() {
    }
    CssEngine.createRoot = function () {
        var app = { classes: classStringToDict("v-application theme--light"), compTag: "div", UID: CssRoot_1.q_tsbridge_appName, compCssProps: new cssPropDict_1.CssPropDict(), needCss: true };
        var body = { classes: {}, compTag: "body", children: [app], UID: CssRoot_1.q_tsbridge_bodyName, compCssProps: new cssPropDict_1.CssPropDict(), needCss: true };
        var html = { classes: {}, compTag: "html", children: [body], UID: CssRoot_1.q_tsbridge_htmlName, compCssProps: new cssPropDict_1.CssPropDict(), needCss: true };
        return { html: html, body: body, app: app };
    };
    CssEngine.convertCompToClassNode = function (comp) {
        var _a, _b;
        var compCssExtended = cssExtender_1.CssExtender.FixAndGetExtended(comp);
        var classNode = compCssExtended.classNode;
        classNode.compColl = comp;
        classNode.compCssProps = new cssPropDict_1.CssPropDict();
        classNode.children = (_b = (_a = comp.GetDoryJr()) === null || _a === void 0 ? void 0 : _a.GetComponentList()) === null || _b === void 0 ? void 0 : _b.map(CssEngine.convertCompToClassNode);
        if (!comp.children) {
            return classNode;
        }
        classNode.children = classNode.children || [];
        Object.keys(comp.children).map(function (childName) { return comp.children[childName].map(CssEngine.convertCompToClassNode); })
            .forEach(function (children) { return children.forEach(function (child) { return classNode.children.push(child); }); });
        return classNode;
    };
    CssEngine.filterCssNeededBranches = function (classNodes, parentNeedCss) {
        if (cssSettings_1.partialCssActive < 2) {
            return classNodes;
        }
        var retVal = classNodes.filter(function (classNode) {
            var _a;
            var selfNeedCss = parentNeedCss || classNode.needCss;
            if (classNode.children) {
                classNode.children = CssEngine.filterCssNeededBranches(classNode.children, selfNeedCss);
            }
            return selfNeedCss || ((_a = classNode.children) === null || _a === void 0 ? void 0 : _a.length);
        });
        return retVal;
    };
    CssEngine.ruleProcessor = function (rule, root) {
        switch (rule.type) {
            case "media":
                rule.rules.forEach(function (eachRule) { return CssEngine.ruleProcessor(eachRule, root); });
                break;
            case "rule":
                //optimization tek parseldata ayrılabilir, çoğunluk tek parseldata
                //optimization çoklu parseldatalar node'ları unique'leştirip ruleları 1 kere uygulasa daha hızlı olur
                rule.parselDatas.forEach(function (parselData) {
                    cssEvaluator_1.CssEvaluator.GetMathingNodes(root, parselData.evaluationPlan).forEach(function (node) { return rule.declarations.forEach(function (declaration) {
                        if (declaration.flattens) {
                            declaration.flattens.forEach(function (flatten) { return node.compCssProps.Add(flatten.property, flatten.value, parselData.specificityNum, declaration.imp); });
                        }
                        else {
                            node.compCssProps.Add(declaration.property, declaration.value, parselData.specificityNum, declaration.imp);
                        }
                    }); });
                });
                break;
        }
    };
    CssEngine.isRoot = function (node) {
        switch (node.UID) {
            case CssRoot_1.q_tsbridge_appName:
            case CssRoot_1.q_tsbridge_bodyName:
            case CssRoot_1.q_tsbridge_htmlName: return true;
            default: return false;
        }
    };
    CssEngine.fillCumulative = function (node, cssSettings, cumulativeCssDict, pageName, parentNeedCss) {
        var _a;
        node.compCssProps.HandleCurrentColor();
        if (pageName) {
            var compId = ((_a = node.compColl) === null || _a === void 0 ? void 0 : _a.compId) || node.UID; // fakedComps require compID. UID for html, body, app.
            pageFake_1.PageFake.FixFakedComp(pageName, compId, node.compCssProps);
        }
        //no compColl means html, body, div -> no Inline style
        if (node.compColl) {
            cssInlineStyles_1.CssInlineStyles.ApplySelfStyles(node.compCssProps, node.compColl, cssSettings);
        }
        var needCss = node.needCss || parentNeedCss;
        if (cssSettings_1.partialCssActive < 1 || needCss) {
            cumulativeCssDict[node.UID] = node.compCssProps.GetDictOnly();
        }
        node.needCss = false;
        if (!node.children) {
            return;
        }
        var needCssForChildren = needCss && !CssEngine.isRoot(node);
        node.children.forEach(function (child) {
            child.compCssProps.CascadeParent(node.compCssProps);
            CssEngine.fillCumulative(child, cssSettings, cumulativeCssDict, pageName, needCssForChildren);
        });
    };
    CssEngine.Csserize = function (controlList, cssSettings, pageName) {
        var cumulativeCssDict = {};
        var classNodes = controlList.map(CssEngine.convertCompToClassNode).filter(function (item) { return item != undefined; });
        classNodes = CssEngine.filterCssNeededBranches(classNodes, false);
        if (!classNodes.length) {
            return {};
        }
        var rootNodes = CssEngine.createRoot();
        var root = rootNodes.html;
        rootNodes.app.children = classNodes;
        cssSettings.parsedAndTreedCssList.forEach(function (cssTree) { return cssTree.forEach(function (rule) { return CssEngine.ruleProcessor(rule, root); }); });
        CssEngine.fillCumulative(root, cssSettings, cumulativeCssDict, pageName, false);
        return cumulativeCssDict;
    };
    return CssEngine;
}());
exports.CssEngine = CssEngine;


/***/ }),

/***/ "./src/cssEngine/cssEvaluator.ts":
/*!***************************************!*\
  !*** ./src/cssEngine/cssEvaluator.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssEvaluator = void 0;
var log_1 = __webpack_require__(/*! ../tracing/log */ "./src/tracing/log.ts");
var duplicateHelper_1 = __webpack_require__(/*! ../../../../common/shrimp/helpers/duplicateHelper */ "../../common/shrimp/helpers/duplicateHelper.ts");
function logTokenError(errText, token, originalSelector) {
    var _a;
    var message = errText + " -> selector: " + originalSelector + " token: " + token.type + ", " + (token.combinator || token.name || "") + ", " + (token.value || token.argument || "") + ", " + (((_a = token.pos) === null || _a === void 0 ? void 0 : _a.join("-")) || "");
    (0, log_1.log)(message);
    return new Error(message);
}
function assertType(tokenInput, originalSelector) {
    var token = tokenInput;
    switch (token.type) {
        case "attribute":
            if (!token.content || !token.name || !token.operator || !token.value) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "class":
            if (!token.content || !token.name) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "complex":
            if (!token.combinator || !token.left || !token.right) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "compound":
            if (!token.list) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "id":
            if (!token.content || !token.name) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "pseudo-class":
            if (!token.content || !token.name) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "pseudo-element":
            if (!token.content || !token.name) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        case "type":
            if (!token.content) {
                throw logTokenError("token has missing fields", token, originalSelector);
            }
            return token;
        default:
            throw logTokenError("unexpected token type", token, originalSelector);
            ;
    }
}
var iterateAll = function (node, self, iterator, duplicatePreventer) {
    self && iterator(node);
    if (!node.children) {
        return;
    }
    var len = node.children.length;
    for (var i = 0; i < len; i++) {
        if (duplicatePreventer) {
            if (duplicatePreventer.has(node.children[i])) {
                continue;
            }
            duplicatePreventer.add(node.children[i]);
        }
        iterator(node.children[i]);
        // if (!node.children[i].children) { return; } //premature optimization ??
        iterateAll(node.children[i], false, iterator, duplicatePreventer);
    }
};
var tokenEvaluatorGeneratorDict = {
    type: function (token, originalSelector) {
        var tokenType = assertType(token, originalSelector);
        if (tokenType.content == "*") {
            tokenType.selfCb = function (node, context, searcher, pseudoMofier) {
                var retVal = [];
                (searcher || iterateAll)(node, true, function (candidate) { return pseudoMofier(true) && retVal.push(candidate); }, undefined);
                return retVal;
            };
        }
        else {
            var typeContent_1 = tokenType.content;
            tokenType.selfCb = function (node, context, searcher, pseudoMofier) {
                var retVal = [];
                (searcher || iterateAll)(node, true, function (candidate) { return pseudoMofier(candidate.compTag == typeContent_1) && retVal.push(candidate); }, undefined);
                return retVal;
            };
        }
        return tokenType;
    },
    class: function (token, originalSelector) {
        var tokenClass = assertType(token, originalSelector);
        var className = tokenClass.name;
        tokenClass.selfCb = function (node, context, searcher, pseudoMofier) {
            var retVal = [];
            (searcher || iterateAll)(node, true, function (candidate) { return pseudoMofier(candidate.classes[className]) && retVal.push(candidate); }, undefined);
            return retVal;
        };
        return tokenClass;
    },
    compound: function (token, originalSelector) {
        var tokenCompound = assertType(token, originalSelector);
        tokenCompound.listEvaler = tokenCompound.list.map(function (item) { if (!tokenEvaluatorGeneratorDict[item.type]) {
            debugger;
        } return tokenEvaluatorGeneratorDict[item.type](item, originalSelector); });
        tokenCompound.selfCb = function (node, context, searcher, pseudoMofier) {
            var candidates = tokenCompound.listEvaler[0].selfCb(node, context, searcher, pseudoMofier);
            if (candidates.length <= 0) {
                return [];
            }
            var childSearcher = function (node, self, iterator) { return iterator(node); };
            var bucket = [];
            var len = tokenCompound.listEvaler.length;
            var _loop_1 = function (i) {
                candidates.forEach(function (candidate) { return tokenCompound.listEvaler[i].selfCb(candidate, context, childSearcher, pseudoMofier).forEach(function (cand) { return bucket.push(cand); }); });
                if (bucket.length == 0) {
                    return { value: [] };
                }
                candidates = bucket;
                bucket = [];
            };
            for (var i = 1; i < len; i++) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            return candidates;
        };
        return tokenCompound;
    },
    complex: function (token, originalSelector) {
        var tokenComplex = assertType(token, originalSelector);
        tokenComplex.leftEvaler = tokenEvaluatorGeneratorDict[tokenComplex.left.type](tokenComplex.left, originalSelector);
        tokenComplex.rightEvaler = tokenEvaluatorGeneratorDict[tokenComplex.right.type](tokenComplex.right, originalSelector);
        switch (tokenComplex.combinator) {
            case " ":
                tokenComplex.selfCb = function (node, context, searcher, pseudoMofier) {
                    var candidates = tokenComplex.leftEvaler.selfCb(node, context, undefined, pseudoMofier);
                    if (candidates.length <= 0) {
                        return [];
                    }
                    var childSearcher = function (node, self, iterator) { return iterateAll(node, false, iterator, new WeakSet()); };
                    var retVal = [];
                    candidates.forEach(function (candidate) { return tokenComplex.rightEvaler.selfCb(candidate, context, childSearcher, pseudoMofier).forEach(function (cand) { return retVal.push(cand); }); });
                    return retVal;
                };
                break;
            case ">":
                tokenComplex.selfCb = function (node, context, searcher, pseudoMofier) {
                    var candidates = tokenComplex.leftEvaler.selfCb(node, context, undefined, pseudoMofier);
                    if (candidates.length <= 0) {
                        return [];
                    }
                    var childSearcher = function (node, self, iterator) { return node.children && node.children.forEach(function (child) { return iterator(child); }); };
                    var retVal = [];
                    candidates.forEach(function (candidate) { return tokenComplex.rightEvaler.selfCb(candidate, context, childSearcher, pseudoMofier).forEach(function (cand) { return retVal.push(cand); }); });
                    return retVal;
                };
                break;
            case "+":
                throw new TokenNotSupportedError("no +");
            case "~":
                throw new TokenNotSupportedError("no ~");
            default:
                throw logTokenError("unexpected complex", tokenComplex, originalSelector);
        }
        return tokenComplex;
    },
    id: function () {
        throw new TokenNotSupportedError("no id based css in components");
    },
    attribute: function () {
        throw new TokenNotSupportedError("no attribute based css in components");
    },
    "pseudo-element": function () {
        throw new TokenNotSupportedError("no pseudo-element");
    },
    "pseudo-class": function (token, originalSelector) {
        var tokenPsCls = assertType(token, originalSelector);
        switch (tokenPsCls.name) {
            case "not":
                if (!tokenPsCls.subtree) {
                    throw new TokenNotSupportedError("not token(pseudo-class) should have subtree");
                }
                tokenPsCls.subtreeEvaler = tokenEvaluatorGeneratorDict[tokenPsCls.subtree.type](tokenPsCls.subtree, originalSelector);
                tokenPsCls.selfCb = function (node, context, searcher) {
                    var retVal = [];
                    // const childSearcher: SearcherFunc = (node, self, iterator) => iterator(node);
                    tokenPsCls.subtreeEvaler.selfCb(node, context, searcher /*|| childSearcher*/, function (result) { return !result; }).forEach(function (item) { return retVal.push(item); });
                    return retVal;
                };
                return tokenPsCls;
            default:
                throw new TokenNotSupportedError("no pseudo-class: " + tokenPsCls.name);
        }
    }
};
var TokenNotSupportedError = /** @class */ (function (_super) {
    __extends(TokenNotSupportedError, _super);
    function TokenNotSupportedError(msg) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, msg) || this;
        _this.__proto__ = _newTarget.prototype;
        return _this;
    }
    return TokenNotSupportedError;
}(Error));
function handleTokenNotSupported(cb) {
    try {
        return cb();
    }
    catch (error) {
        if (error instanceof TokenNotSupportedError) {
            return { selfCb: function () { return []; } };
        }
        throw error;
    }
}
var CssEvaluator = /** @class */ (function () {
    function CssEvaluator() {
    }
    CssEvaluator.GenerateTokenEvaluator = function (token, originalSelector) {
        return handleTokenNotSupported(function () { return tokenEvaluatorGeneratorDict[token.type](token, originalSelector); });
        // return tokenEvaluatorGeneratorDict[token.type](token, originalSelector);
    };
    CssEvaluator.GetMathingNodes = function (rootNode, tokenEvaluator) {
        var retVal = tokenEvaluator.selfCb(rootNode, {}, undefined, function (res) { return res; });
        //optimization no remove duplicates, stop duplicate traversion while traversing
        return duplicateHelper_1.DuplicateHelper.RemoveDuplicates(retVal);
    };
    return CssEvaluator;
}());
exports.CssEvaluator = CssEvaluator;


/***/ }),

/***/ "./src/qshellImplementations/CookieManager.ts":
/*!****************************************************!*\
  !*** ./src/qshellImplementations/CookieManager.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CookieManager = void 0;
var CookieManager = /** @class */ (function () {
    function CookieManager() {
        this.contextName = "CookieManager";
    }
    CookieManager.prototype.setCookie = function (_a) {
        var key = _a.key, cookieValue = _a.cookieValue;
        nb_setCookie(key, cookieValue);
    };
    CookieManager.prototype.clearCookies = function () {
        nb_clearCookies();
    };
    CookieManager.prototype.getItemFromCookies = function (_a) {
        var key = _a.key;
        return nb_getCookie(key);
    };
    CookieManager.prototype.getAllCookies = function () {
        return nb_getAllCookies();
    };
    CookieManager.prototype.removeItemFromCookies = function (_a) {
        var key = _a.key;
        nb_removeCookie(key);
    };
    return CookieManager;
}());
exports.CookieManager = CookieManager;


/***/ }),

/***/ "./src/qshellImplementations/ModuleManagerImpl.ts":
/*!********************************************************!*\
  !*** ./src/qshellImplementations/ModuleManagerImpl.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleManager = void 0;
var ModuleManager = /** @class */ (function () {
    function ModuleManager() {
    }
    ModuleManager.prototype.CheckComponent = function (compName) {
        return undefined;
    };
    return ModuleManager;
}());
exports.ModuleManager = ModuleManager;


/***/ }),

/***/ "./src/qshellImplementations/StoreManager.ts":
/*!***************************************************!*\
  !*** ./src/qshellImplementations/StoreManager.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreManager = void 0;
var StoreManager = /** @class */ (function () {
    function StoreManager() {
        this.contextName = "StoreManager";
    }
    StoreManager.prototype.setLocalStorage = function (_a) {
        var key = _a.key, value = _a.value;
        nb_setLocalStorage(key, value);
    };
    StoreManager.prototype.clearLocalStorage = function () {
        nb_clearLocalStorage();
    };
    StoreManager.prototype.getItemFromLocalStorage = function (_a) {
        var key = _a.key;
        return nb_getItemFromLocalStorage(key);
    };
    StoreManager.prototype.removeItemFromLocalStorage = function (_a) {
        var key = _a.key;
        nb_removeItemFromLocalStorage(key);
    };
    return StoreManager;
}());
exports.StoreManager = StoreManager;


/***/ }),

/***/ "./src/qshellImplementations/componentManager.ts":
/*!*******************************************************!*\
  !*** ./src/qshellImplementations/componentManager.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.componentManager = void 0;
var StyleHelper_1 = __webpack_require__(/*! ../../../../common/shrimp/helpers/StyleHelper */ "../../common/shrimp/helpers/StyleHelper.ts");
var ICompJson_1 = __webpack_require__(/*! ../../../../common/shrimp/interfaces/ComponentInterfaces/ICompJson */ "../../common/shrimp/interfaces/ComponentInterfaces/ICompJson.ts");
var compManager_1 = __webpack_require__(/*! ../component/compManager */ "./src/component/compManager.ts");
var componentExtender_1 = __webpack_require__(/*! ../component/componentExtender */ "./src/component/componentExtender.ts");
var cssExtender_1 = __webpack_require__(/*! ../css/cssExtender */ "./src/css/cssExtender.ts");
var CssSettings_1 = __webpack_require__(/*! ../css/Interfaces/CssSettings */ "./src/css/Interfaces/CssSettings.ts");
var log_1 = __webpack_require__(/*! ../tracing/log */ "./src/tracing/log.ts");
var ITheme_1 = __webpack_require__(/*! @stechquick/algae/lib/quick/ITheme */ "../../node_modules/@stechquick/algae/lib/quick/ITheme.js");
var componentManager = /** @class */ (function () {
    function componentManager() {
        this.contextName = "asdsa";
    }
    componentManager.prototype.createComponent = function (_a) {
        var componentName = _a.componentName, props = _a.props, events = _a.events, asChildType = _a.asChildType, asChildName = _a.asChildName, slots = _a.slots, scopedSlots = _a.scopedSlots, compClass = _a.compClass, text = _a.text, attrs = _a.attrs, componentCollection = _a.componentCollection, styles = _a.styles;
        (0, log_1.log)("createComponent: " + componentName + " asChild: " + asChildType);
        (0, log_1.log)("createComponent events: ", events);
        (0, log_1.log)("createComponent props: ", props);
        (0, log_1.log)("createComponent text: ", text);
        (0, log_1.log)("createComponent attrs: ", attrs);
        (0, log_1.log)("createComponent slots", slots);
        (0, log_1.log)("createComponent scopedSlots", scopedSlots);
        (0, log_1.log)("createComponent class", compClass);
        var compUID = componentCollection.GetCompUID();
        cssExtender_1.CssExtender.CreateComponentExtended(componentCollection, compClass, compUID);
        componentExtender_1.ComponentExtender.CreateComponentExtended(componentCollection, props);
        this.removeUnusedBPFieldsAndReplaceCurrent(styles);
        this.setExplicitStyles(componentName, styles);
        var scopedFuncs = {};
        if (scopedSlots) {
            Object.keys(scopedSlots).forEach(function (key) {
                scopedFuncs[key] = function (scopeObject) { return scopedSlots[key](scopeObject).map(function (compColl) { return compColl.vDomElement; }); };
            });
        }
        if (attrs) {
            //merge attrs into props. THIS IS TEMPORARY. What is comp allready has that prop. (For DEMO Purposses)
            Object.keys(attrs).forEach(function (attrKey) { return props[attrKey] = attrs[attrKey]; });
        }
        if (text) {
            props["text"] = text;
        }
        var compViewModal;
        var instance;
        var noProxy = false;
        if (componentName == "TSComponentWrapper") {
            instance = props._renderingProps.targetLocalComponent();
            compViewModal = instance.Render();
            noProxy = true;
        }
        else {
            instance = nb_createComponent(componentName, props, events, asChildType, compUID, slots, scopedFuncs, compClass, styles);
            compViewModal = instance;
        }
        var retVal = {};
        switch (asChildType) {
            case ICompJson_1.CType.slot:
            case ICompJson_1.CType.scopedSlot:
                retVal.vel = compViewModal;
            //mobile creates component at the same time as vel. HACK for ComponentCommunicator.ArrangeChildren.
            case ICompJson_1.CType.child:
            default:
                retVal.el = compViewModal;
                retVal.instance = instance;
                break;
        }
        retVal.instance = noProxy ? retVal.instance : this.proxify(retVal.instance, { objName: componentName, compColl: componentCollection });
        return retVal;
    };
    componentManager.prototype.componentHasProp = function (componentName, propName) {
        if (propName == "qValue") {
            return true;
        }
        if (compManager_1.CompManager.IsManagedProperty(componentName, propName)) {
            return true;
        }
        return nb_componentHasProp(componentName, propName);
    };
    componentManager.prototype.createContainerView = function (compUID) {
        return nb_createContainerView(compUID);
    };
    componentManager.prototype.updateContainerView = function (_a) {
        var givenObject = _a.givenObject, elements = _a.elements, pageShift = _a.pageShift;
        nb_updateContainerView(givenObject, elements, pageShift);
    };
    componentManager.prototype.proxify = function (object, options) {
        var _this = this;
        (0, log_1.log)("proxifying obj: " + options.objName + " ID: " + options.compColl.compId);
        return new Proxy(object, {
            set: function (obj, propName, value) {
                var propNameString = propName.toString();
                if (componentManager.noProxyDict[propNameString]) {
                    (0, log_1.log)("bypass setting obj:" + options.objName + (" ID: " + options.compColl.compId) + " prop: " + propNameString);
                    obj[propName] = value;
                    return true;
                }
                var setRes = compManager_1.CompManager.SetProp(options.compColl, propName, value);
                if (!setRes.reflectToMobile) {
                    (0, log_1.log)("not reflecting to mobile obj:" + options.objName + (" ID: " + options.compColl.compId) + " prop: " + propNameString);
                    return true;
                }
                var type = "other";
                if (value === undefined) {
                    type = "nil";
                }
                else if (value instanceof Function ||
                    (value instanceof Array && value.length > 0 && value[0] instanceof Function)) {
                    type = "nativefunc";
                }
                (0, log_1.log)("setting obj:" + options.objName + (" ID: " + options.compColl.compId) + " prop: " + propNameString + " type: " + type);
                nb_setProperty(options.compColl.RootHistoryItem.pageId, object, propName, value, type);
                return true;
            }, get: function (obj, propName) {
                var propNameString = propName.toString();
                if (componentManager.noProxyDict[propNameString]) {
                    (0, log_1.log)("bypass getting obj:" + options.objName + " prop: " + propNameString);
                    return obj[propName];
                }
                var getRes = compManager_1.CompManager.GetProp(options.compColl, propNameString);
                if (getRes.managedProp) {
                    (0, log_1.log)("not getting from mobile obj:" + options.objName + " prop: " + propNameString);
                    return getRes.value;
                }
                var propVal = nb_getProperty(options.compColl.RootHistoryItem.pageId, object, propName);
                var propValType = propVal.type != "other" ? propVal.type : typeof (propVal.target);
                switch (propValType) {
                    case "nativefunc": // JS can not proxify functions 
                        (0, log_1.log)("proxify function prop");
                        var funcName_1 = propNameString;
                        return function () {
                            (0, log_1.log)("yalanci method: ", funcName_1, object);
                            var args = Array.prototype.slice.call(arguments);
                            return nb_executeMethod2(options.compColl.RootHistoryItem.pageId, object, funcName_1, args);
                        };
                    case "object": // JS must proxify non protocol or non NSDictionary objects
                        return _this.proxify(propVal.target, { objName: options.objName + "." + propNameString, compColl: options.compColl });
                    case "nil":
                        return undefined;
                    case "dict": // JS can access NSDictionary fields
                    case "array": // JS can access array
                    default: // JS can access primitives
                        return propVal.target;
                }
            },
            // apply: (target, thisArg, argArray) => {
            //     log("calling method:" + options.objName); // here obj/target is a function
            //     const retVal = nb_executeMethod(object, thisArg, argArray);
            //     log("called");
            //     return retVal;
            // }
        });
    };
    componentManager.prototype.setVisibility = function (compColl, compVisibility) {
        nb_setVisibility(compColl.RootHistoryItem.pageId, compColl.domElement, compVisibility);
    };
    componentManager.prototype.getComponentValue = function (compColl) {
        var valueProp = "value";
        return compColl.component[valueProp];
    };
    componentManager.prototype.setComponentValue = function (compColl, value) {
        var valueProp = "value";
        compColl.component[valueProp] = value;
    };
    componentManager.prototype.getComponentStyle = function (comp) {
        return comp.style;
    };
    componentManager.prototype.setComponentStyle = function (compCollection, prop, value) {
        var camelCasePattern = /(.*?)(fontFamily|fontWeight)$/i;
        var propParts = prop.split(camelCasePattern);
        function convertFontWeight(weight) {
            var fontWeight = ITheme_1.FontWeights[weight];
            return fontWeight ? fontWeight.split('-')[0] : weight;
        }
        if (propParts.length > 1) {
            var propPrefix = propParts[1];
            var propKey = propParts[2];
            if (propKey.toLowerCase() === "fontfamily" || propKey.toLowerCase() === "fontweight") {
                var fontFamily = propKey.toLowerCase() === "fontfamily" ? value : (compCollection.compStyleValues[propPrefix ? propPrefix + "FontFamily" : 'fontFamily'] || '');
                fontFamily = Array.isArray(fontFamily) ? fontFamily[0] : fontFamily;
                var fontWeight = propKey.toLowerCase() === "fontweight" ? value : (compCollection.compStyleValues[propPrefix ? propPrefix + "FontWeight" : 'fontWeight'] || '');
                fontWeight = convertFontWeight(fontWeight);
                prop = propPrefix ? propPrefix + "CombinedFont" : 'combinedFont';
                compCollection.compStyleValues[prop] = value = (fontFamily + "-" + fontWeight).trim();
            }
        }
        nb_setComponentStyleByValue(compCollection.RootHistoryItem.pageId, compCollection.GetCompUID(), prop, value);
    };
    componentManager.prototype.createComponentQValue = function (compCollection) {
        var _this = this;
        if (!compCollection.component) {
            return;
        }
        var valueKey = "qValue";
        var valueProp = Object.getOwnPropertyDescriptor(compCollection.component, valueKey);
        if (!valueProp) {
            Object.defineProperty(compCollection.component, valueKey, {
                get: function () { return _this.getComponentValue(compCollection); },
                set: function (v) { return _this.setComponentValue(compCollection, v); },
            });
        }
    };
    componentManager.prototype.setExplicitStyles = function (componentName, styleValues) {
        var explicitComponents = {
            VBtn: {
                "alignItems": "center",
                "justifyContent": "center"
            }
        };
        if (!styleValues || !explicitComponents[componentName]) {
            return;
        }
        Object.assign(styleValues, explicitComponents[componentName]);
    };
    componentManager.prototype.removeUnusedBPFieldsAndReplaceCurrent = function (styleValues) {
        if (!styleValues) {
            return;
        }
        var deviceWidth = componentManager.deviceSettings.width;
        var currentBPFields = "";
        Object.keys(styleValues).filter(function (item) { return typeof styleValues[item] === "object"; }).forEach(function (range) {
            var splittedRange = range.split("-");
            var min = StyleHelper_1.StyleHelper.matchSizeValue(splittedRange[0]);
            var max = StyleHelper_1.StyleHelper.matchSizeValue(splittedRange[1]);
            if (min < deviceWidth && deviceWidth < max) {
                currentBPFields = range;
            }
            else {
                delete styleValues[range];
            }
        });
        if (!currentBPFields || !styleValues[currentBPFields]) {
            return;
        }
        Object.keys(styleValues[currentBPFields]).forEach(function (field) {
            if (field === "col") {
                var flexBasis = (100 / 12) * parseInt(styleValues[currentBPFields][field]);
                styleValues["flex-grow"] = "0";
                styleValues["flex-shrink"] = "0";
                styleValues["flex-basis"] = flexBasis ? flexBasis + "%" : "auto";
                styleValues["max-width"] = flexBasis ? flexBasis + "%" : "100%";
            }
            styleValues[field] = styleValues[currentBPFields][field];
        });
        delete styleValues[currentBPFields];
    };
    componentManager.deviceSettings = new CssSettings_1.CssSettings().deviceSettings;
    componentManager.noProxyDict = {
        "hibernate": true,
        "resurrect": true,
        "QSProxy": true,
        "Symbol(Symbol.toStringTag)": true,
        "MethodProxy": true,
        "qValue": true,
        visible: true,
        class: true,
        style: true
    };
    return componentManager;
}());
exports.componentManager = componentManager;


/***/ }),

/***/ "./src/qshellImplementations/cryptoraphyManager.ts":
/*!*********************************************************!*\
  !*** ./src/qshellImplementations/cryptoraphyManager.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.cryptographyManager = void 0;
var cryptographyManager = /** @class */ (function () {
    function cryptographyManager() {
        this.contextName = cryptographyManager.ContextName;
    }
    cryptographyManager.prototype.cryptoGenerateKeyPair = function () {
        return nb_cryptography_generateKeyPair();
    };
    cryptographyManager.prototype.cryptoStore = function (keyPair) {
        return nb_cryptography_store(keyPair);
    };
    cryptographyManager.prototype.cryptoSha512 = function (value) {
        return nb_cryptography_hash_sha512(value);
    };
    cryptographyManager.prototype.cryptoSign = function (value, privateKey, options) {
        return nb_cryptography_sign(value, privateKey, options === null || options === void 0 ? void 0 : options.padding, options === null || options === void 0 ? void 0 : options.digestAlgorithm);
    };
    cryptographyManager.ContextName = "cryptoraphyManager"; // ? yalan dolan xD
    return cryptographyManager;
}());
exports.cryptographyManager = cryptographyManager;


/***/ }),

/***/ "./src/qshellImplementations/eventOperatorImpl.ts":
/*!********************************************************!*\
  !*** ./src/qshellImplementations/eventOperatorImpl.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventOperatorImpl = void 0;
var EventOperatorImpl = /** @class */ (function () {
    function EventOperatorImpl() {
    }
    EventOperatorImpl.prototype.eventCompleteCb = function (options) {
        nb_eventComplete(options.pageId, options.compUID, options.eventName, options.isPageComplete);
    };
    return EventOperatorImpl;
}());
exports.EventOperatorImpl = EventOperatorImpl;


/***/ }),

/***/ "./src/qshellImplementations/globalMethodImpl.ts":
/*!*******************************************************!*\
  !*** ./src/qshellImplementations/globalMethodImpl.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.globalMethodImpl = void 0;
var IPromiseData_1 = __webpack_require__(/*! ../../../../common/shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var log_1 = __webpack_require__(/*! ../tracing/log */ "./src/tracing/log.ts");
var globalMethodImpl = /** @class */ (function () {
    function globalMethodImpl() {
        this.contextName = "globalMethodImpl";
    }
    globalMethodImpl.prototype.dynamicCompHandler = function (_a) {
        var createdComps = _a.createdComps, referenceComp = _a.referenceComp, compLocater = _a.compLocater, parentCollection = _a.parentCollection;
        if (createdComps.length != 1) {
            (0, log_1.log)("not implemented with multiple created components");
            throw "not implemented with multiple created components";
        }
        var createdComp = createdComps[0];
        (0, log_1.log)("Dynamic Component Handler" +
            ("Created Comp:" + createdComp + ", referenceComp: " + referenceComp + ", compLocater:" + compLocater + ", parentCollection:" + parentCollection));
        nb_dynamicCompHandler(createdComp.domElement, referenceComp === null || referenceComp === void 0 ? void 0 : referenceComp.domElement, compLocater, parentCollection === null || parentCollection === void 0 ? void 0 : parentCollection.domElement);
        if (!parentCollection) {
            (0, log_1.log)("implement with no parent");
            throw "to be implemented with no parent";
        }
    };
    globalMethodImpl.prototype.deleteComponent = function (compCollection) {
        if (!compCollection.compId) {
            return;
        }
        nb_deleteComponent(compCollection.GetCompUID());
    };
    globalMethodImpl.prototype.getDeepLinkParams = function () {
        return nb_getDeepLinkParams();
    };
    //delete this comment on 5/2022
    // goDashboard(): void {
    //     log("go dashboard");
    //     nb_goDashboard();
    // }
    globalMethodImpl.prototype.alert = function (options, parameters) {
        var _a, _b;
        var clickEventDict = {};
        var actionButtons = (_a = options.actionButtons) === null || _a === void 0 ? void 0 : _a.filter(function (button) { return button.clickEventName != undefined; }).map(function (button, index) {
            clickEventDict["event_" + index] = function () {
                var _a, _b;
                return (_b = (_a = parameters === null || parameters === void 0 ? void 0 : parameters.ownerComponent) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.Trigger({
                    eventName: button.clickEventName,
                });
            };
            return {
                name: button.name,
                type: button.type,
            };
        });
        if (this.alertDisplayCb) {
            var alertQJSON = (_b = globalMethodImpl.renderer) === null || _b === void 0 ? void 0 : _b.settingsQJsons.GetAlertQjson();
            if (alertQJSON) {
                this.createAlert(alertQJSON, options, this.alertDisplayCb, parameters);
                return;
            }
        }
        else {
            nb_alert(options.title || "", options.text || "", options.category || "Info", actionButtons, clickEventDict);
        }
    };
    globalMethodImpl.prototype.createAlert = function (qjson, options, alertDisplayCb, parameters) {
        var _a;
        if (!globalMethodImpl.renderer) {
            return;
        }
        globalMethodImpl.alertRenderer =
            globalMethodImpl.renderer.CreateChildRenderer("quialert");
        globalMethodImpl.alertRenderer.SetCallbackDisplay(function (domEls, pageId, pageName, navDir, override) {
            alertDisplayCb(domEls);
        });
        var approveEventName, cancelEventName;
        var buttonApplier = {
            Confirm: function (eventName) { return (approveEventName = eventName); },
            Cancel: function (eventName) { return (cancelEventName = eventName); },
        };
        (_a = options.actionButtons) === null || _a === void 0 ? void 0 : _a.forEach(function (actionButton) {
            return buttonApplier[actionButton.type](actionButton.clickEventName);
        });
        var createEventTriggerer = function (eventName) {
            return function () {
                if (!(parameters === null || parameters === void 0 ? void 0 : parameters.ownerComponent) || !eventName) {
                    return;
                }
                parameters.ownerComponent.events.Trigger({ eventName: eventName });
            };
        };
        globalMethodImpl.alertRenderer.Render({
            qjson: qjson,
            props: {
                title: options.title,
                text: options.text,
                category: options.category,
                actionButtons: options.actionButtons,
                error: options.error,
                additionals: options.additionals,
            },
            events: {
                onCancel: createEventTriggerer(cancelEventName),
                onConfirm: createEventTriggerer(approveEventName),
            },
            compParentInst: null,
            noHistory: true,
            pageId: parameters.currentPageId,
        });
    };
    globalMethodImpl.prototype.goNative = function (_a) {
        var code = _a.code, param = _a.param;
        nb_goNative(code, param);
    };
    globalMethodImpl.prototype.downloadHandler = function (responseFile) {
        return nb_download(responseFile.data, responseFile.name);
    };
    globalMethodImpl.prototype.setRenderer = function (renderer) {
        globalMethodImpl.renderer = renderer;
    };
    globalMethodImpl.prototype.setEnvironment = function (env) { };
    globalMethodImpl.prototype.setYamlLogType = function (logType) { };
    globalMethodImpl.prototype.setPageTitle = function (value) { };
    globalMethodImpl.prototype.copyToClipboard = function (value) {
        nb_copyToClipboard(value);
    };
    globalMethodImpl.prototype.getCurrentPosition = function () {
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        var successCallBack = function (position) {
            var successPosition = {
                positionSuccess: position,
                isSuccess: true
            };
            prom.resolver(successPosition);
        };
        var errorCallBack = function (positionError) {
            var errorPosition = {
                isSuccess: false,
                positionError: positionError
            };
            prom.reject(errorPosition);
        };
        // let options : PositionOptions ={
        //     timeout:3000
        // }
        nb_getCurrentPosition(successCallBack, errorCallBack);
        return prom.promise;
    };
    globalMethodImpl.prototype.setFavicon = function (icon) { };
    globalMethodImpl.prototype.getNetworkConnection = function () {
        // mobil asenkron olursa bu kod değişecek
        return nb_getNetworkConnection();
    };
    globalMethodImpl.prototype.listenNetworkConnection = function () {
        nb_listenNetworkConnection(function () {
            var _a, _b;
            console.log("You are now connected to the network.");
            (_b = (_a = globalMethodImpl.renderer) === null || _a === void 0 ? void 0 : _a.settingsQJsons) === null || _b === void 0 ? void 0 : _b.TriggerPipeline("onNetworkStatusChange", { isNetworkConnected: true });
        }, function () {
            var _a, _b;
            console.log("The network connection has been lost.");
            (_b = (_a = globalMethodImpl.renderer) === null || _a === void 0 ? void 0 : _a.settingsQJsons) === null || _b === void 0 ? void 0 : _b.TriggerPipeline("onNetworkStatusChange", { isNetworkConnected: false });
        });
    };
    return globalMethodImpl;
}());
exports.globalMethodImpl = globalMethodImpl;


/***/ }),

/***/ "./src/qshellImplementations/hostTriggererImp.ts":
/*!*******************************************************!*\
  !*** ./src/qshellImplementations/hostTriggererImp.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HostTriggererImp = void 0;
var IPromiseData_1 = __webpack_require__(/*! ../../../../common/shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var HostTriggererImp = /** @class */ (function () {
    function HostTriggererImp() {
        this.contextName = "HostTriggererImpContext";
    }
    HostTriggererImp.prototype.hostTrigger = function (functionName, params, pageNameArray) {
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        var callBack = function (hostReponseData) {
            prom.resolver(hostReponseData);
        };
        nb_hostTrigger(functionName, params, callBack, pageNameArray);
        return prom.promise;
    };
    return HostTriggererImp;
}());
exports.HostTriggererImp = HostTriggererImp;


/***/ }),

/***/ "./src/qshellImplementations/navigationManagerImpl.ts":
/*!************************************************************!*\
  !*** ./src/qshellImplementations/navigationManagerImpl.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.navigationManagerImpl = void 0;
var navigationManagerImpl = /** @class */ (function () {
    function navigationManagerImpl() {
        this.contextName = navigationManagerImpl.ContextName;
    }
    /**
     * Redirect to a given url
     * @param url redirect adress
     */
    navigationManagerImpl.prototype.redirect = function (_a) {
        var url = _a.url, options = _a.options;
        nb_redirect(url);
    };
    navigationManagerImpl.ContextName = "navigationManagerImpl"; // ? yalan dolan xD
    return navigationManagerImpl;
}());
exports.navigationManagerImpl = navigationManagerImpl;


/***/ }),

/***/ "./src/qshellImplementations/networkManager.ts":
/*!*****************************************************!*\
  !*** ./src/qshellImplementations/networkManager.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.networkManager = void 0;
var log_1 = __webpack_require__(/*! ../tracing/log */ "./src/tracing/log.ts");
function manageResponse(res) {
    return function (response) {
        var body = response.body;
        if (!response.data && body) {
            response.data = body; // simulator uses this
        }
        return res(response);
    };
}
function manageFail(rej) {
    return function (reason) {
        return rej(reason);
    };
}
var networkManager = /** @class */ (function () {
    function networkManager() {
        this.mockManager = new MockManager("off");
        this.contextName = "asda";
    }
    networkManager.prototype.getUrl = function (url, urlParams) {
        var paramKeys = urlParams ? Object.keys(urlParams) : null;
        var retVal = "";
        var prefix = "";
        if (urlParams && paramKeys && paramKeys.length > 0) {
            prefix = url.indexOf("?") < 0 ? "?" : (url.endsWith("&") ? "" : "&");
            retVal = paramKeys.map(function (prop) {
                return [prop, urlParams[prop]].map(encodeURIComponent).join("=");
            }).join("&");
        }
        var finalUrl = url + prefix + retVal;
        return finalUrl;
    };
    networkManager.prototype.get = function (_a) {
        var _this = this;
        var url = _a.url, urlParams = _a.urlParams, headers = _a.headers, options = _a.options;
        (0, log_1.log)("get");
        return new Promise(function (res, rej) {
            _this.mockManager.mock(_this.getUrl(url, urlParams), manageResponse(res), function (url, suc) { return nb_get(url, suc, manageFail(rej), headers, options); });
        });
    };
    networkManager.prototype.post = function (_a) {
        var _this = this;
        var url = _a.url, urlParams = _a.urlParams, body = _a.body, headers = _a.headers, options = _a.options;
        (0, log_1.log)("post");
        return new Promise(function (res, rej) {
            _this.mockManager.mock(_this.getUrl(url, urlParams), manageResponse(res), function (url, suc) { return nb_post(url, suc, manageFail(rej), body, headers, options); });
        });
    };
    networkManager.prototype.patch = function (_a) {
        var _this = this;
        var url = _a.url, urlParams = _a.urlParams, body = _a.body, headers = _a.headers, options = _a.options;
        (0, log_1.log)("patch");
        return new Promise(function (res, rej) {
            _this.mockManager.mock(_this.getUrl(url, urlParams), manageResponse(res), function (url, suc) { return nb_patch(url, suc, manageFail(rej), body, headers, options); });
        });
    };
    networkManager.prototype.multipart = function (_a) {
        var url = _a.url, urlParams = _a.urlParams, body = _a.body, headers = _a.headers, options = _a.options;
        (0, log_1.log)("multipart");
        throw new Error("multipart should be implemented on bridge");
    };
    networkManager.prototype.put = function (_a) {
        var _this = this;
        var url = _a.url, urlParams = _a.urlParams, body = _a.body, headers = _a.headers, options = _a.options;
        (0, log_1.log)("put");
        return new Promise(function (res, rej) {
            _this.mockManager.mock(_this.getUrl(url, urlParams), manageResponse(res), function (url, suc) { return nb_put(url, suc, manageFail(rej), body, headers, options); });
        });
    };
    networkManager.prototype.delete = function (_a) {
        var _this = this;
        var url = _a.url, urlParams = _a.urlParams, headers = _a.headers, options = _a.options;
        (0, log_1.log)("delete");
        return new Promise(function (res, rej) {
            _this.mockManager.mock(_this.getUrl(url, urlParams), manageResponse(res), function (url, suc) { return nb_delete(url, suc, manageFail(rej), headers, options); });
        });
    };
    networkManager.prototype.setMockMode = function (mockMode) {
        (0, log_1.log)(mockLog("set mode: " + mockMode));
        this.mockManager = new MockManager(mockMode || "off");
    };
    return networkManager;
}());
exports.networkManager = networkManager;
var mockLog = function (log) { return "mockMode: " + log; };
var MockManager = /** @class */ (function () {
    function MockManager(mockMode) {
        this.mockMode = mockMode;
        this.urlCounter = {};
    }
    MockManager.prototype.getMockKey = function (url) {
        var urlCount = this.urlCounter[url] = (this.urlCounter[url] || (this.urlCounter[url] = 0)) + 1;
        return url + "_" + urlCount;
    };
    MockManager.prototype.mock = function (url, suc, cb) {
        var mockKey = this.getMockKey(url);
        switch (this.mockMode) {
            case "capture":
                cb(url, function (response) {
                    nb_mock_writeDisk(mockKey, JSON.stringify(response));
                    (0, log_1.log)(mockLog("captured key: " + mockKey));
                    suc(response);
                });
                break;
            case "mock":
                var response = nb_mock_readDisk(mockKey);
                if (response === false) {
                    (0, log_1.log)(mockLog("not mocking key: " + mockKey));
                    cb(url, suc);
                    return;
                }
                (0, log_1.log)(mockLog("mocking key: " + mockKey));
                suc(JSON.parse(response));
                break;
            case "off":
                cb(url, suc);
                break;
        }
    };
    return MockManager;
}());


/***/ }),

/***/ "./src/qshellImplementations/operators/componentOperator.ts":
/*!******************************************************************!*\
  !*** ./src/qshellImplementations/operators/componentOperator.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentOperator = void 0;
var cssExtender_1 = __webpack_require__(/*! ../../css/cssExtender */ "./src/css/cssExtender.ts");
var ComponentOperator = /** @class */ (function () {
    function ComponentOperator() {
    }
    ComponentOperator.prototype.setClassString = function (compColl, classString) {
        var classNode = cssExtender_1.CssExtender.FixAndGetExtended(compColl).classNode;
        var classes = classNode.classes;
        var newClasses = classString.trim().split(" ");
        var newClassDict = newClasses.reduce(function (prev, cls) { prev[cls] = true; return prev; }, {});
        var removedClasses = Object.keys(classes).filter(function (cls) { return !newClassDict[cls]; });
        var addedClasses = newClasses.filter(function (cls) { return !classes[cls]; });
        removedClasses.forEach(function (cls) { return classes[cls] = false; });
        addedClasses.forEach(function (cls) { return classes[cls] = true; });
        if (addedClasses.length + removedClasses.length > 0) {
            classNode.needCss = true;
        }
    };
    ComponentOperator.prototype.getClassString = function (compColl) {
        var classes = cssExtender_1.CssExtender.FixAndGetExtended(compColl).classNode.classes;
        return Object.keys(classes).filter(function (className) { return classes[className]; }).join(" ");
    };
    ComponentOperator.prototype.matchComponentStyles = function (compColl) {
        nb_setComponentStyle(compColl.RootHistoryItem.pageId, compColl.compId, compColl.compStyleValues);
    };
    ;
    return ComponentOperator;
}());
exports.ComponentOperator = ComponentOperator;


/***/ }),

/***/ "./src/qshellImplementations/operators/loadingOperator.ts":
/*!****************************************************************!*\
  !*** ./src/qshellImplementations/operators/loadingOperator.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingOperator = void 0;
var LoadingOperator = /** @class */ (function () {
    function LoadingOperator() {
    }
    LoadingOperator.prototype.showLoading = function (visible) {
        nb_showLoading(visible);
    };
    return LoadingOperator;
}());
exports.LoadingOperator = LoadingOperator;


/***/ }),

/***/ "./src/qshellImplementations/operators/permanentStoreOperator.ts":
/*!***********************************************************************!*\
  !*** ./src/qshellImplementations/operators/permanentStoreOperator.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PermanentStoreOperator = void 0;
var IPromiseData_1 = __webpack_require__(/*! ../../../../../common/shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var IPermanentStoreOperator_1 = __webpack_require__(/*! ../../../../../common/shrimp/interfaces/RenderingInterfaces/Operators/IPermanentStoreOperator */ "../../common/shrimp/interfaces/RenderingInterfaces/Operators/IPermanentStoreOperator.ts");
var PermanentStoreOperator = /** @class */ (function () {
    function PermanentStoreOperator() {
        this.createOrChangeStore(IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name);
    }
    PermanentStoreOperator.prototype.set = function (object) {
        //Mobil senkron yapıcak ise bu kod değişir.
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        var callBack = function () {
            prom.resolver();
        };
        nb_setPermanentStore(object.key, object, callBack, function (reason) { return prom.reject(reason); });
        return prom.promise;
    };
    PermanentStoreOperator.prototype.get = function (key) {
        //Mobil senkron yapıcak ise bu kod değişir.
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        nb_getPermanentStore(key, function (object) { return prom.resolver(object); }, function (reason) { return prom.reject(reason); });
        return prom.promise;
    };
    PermanentStoreOperator.prototype.delete = function (key) {
        //Mobil senkron yapıcak ise bu kod değişir.
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        nb_deletePermanentStore(key, function () { return prom.resolver(); }, function (reason) { return prom.reject(reason); });
        return prom.promise;
    };
    PermanentStoreOperator.prototype.getAll = function () {
        //Mobil senkron yapıcak ise bu kod değişir.
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        nb_getAllPermanentStore(function (objects) { return prom.resolver(objects); }, function (reason) { return prom.reject(reason); });
        return prom.promise;
    };
    PermanentStoreOperator.prototype.createOrChangeStore = function (storeName) {
        //Mobil senkron yapıcak ise bu kod değişir.
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        nb_changePermanentDb(IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name_Prefix + storeName, function () { return prom.resolver(); }, function (reason) { return prom.reject(reason); });
        return prom.promise;
    };
    PermanentStoreOperator.prototype.deleteStore = function (storeName) {
        //Mobil senkron yapıcak ise bu kod değişir.
        var prom = (0, IPromiseData_1.CreatePromiseData)();
        nb_deletePermanentDb(IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name_Prefix + storeName, function () { return prom.resolver(); }, function (reason) { return prom.reject(reason); });
        return prom.promise;
    };
    PermanentStoreOperator.prototype.getCurrentStoreName = function () {
        var dbFullName = nb_getCurrentPermanentDbName();
        return dbFullName === null || dbFullName === void 0 ? void 0 : dbFullName.substring(IPermanentStoreOperator_1.Plateau_UI_PermanentStore_Name_Prefix.length);
    };
    return PermanentStoreOperator;
}());
exports.PermanentStoreOperator = PermanentStoreOperator;


/***/ }),

/***/ "./src/qshellImplementations/platformManagerImp.ts":
/*!*********************************************************!*\
  !*** ./src/qshellImplementations/platformManagerImp.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformManagerImp = void 0;
var PlatformManagerImp = /** @class */ (function () {
    function PlatformManagerImp() {
        this.contextName = "PlatformManagerImpContext";
    }
    PlatformManagerImp.prototype.getDeviceId = function () {
        return nb_getDeviceId();
    };
    return PlatformManagerImp;
}());
exports.PlatformManagerImp = PlatformManagerImp;


/***/ }),

/***/ "./src/qshellImplementations/qjsonRetriever.ts":
/*!*****************************************************!*\
  !*** ./src/qshellImplementations/qjsonRetriever.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.qJsonRetriever = void 0;
var __1 = __webpack_require__(/*! ../.. */ "./index.ts");
var qjsonVersionHelper_1 = __webpack_require__(/*! ../../../../common/shrimp/helpers/qjsonVersionHelper */ "../../common/shrimp/helpers/qjsonVersionHelper.ts");
var IPromiseData_1 = __webpack_require__(/*! ../../../../common/shrimp/interfaces/IPromiseData */ "../../common/shrimp/interfaces/IPromiseData.ts");
var log_1 = __webpack_require__(/*! ../tracing/log */ "./src/tracing/log.ts");
var qJsonRetriever = /** @class */ (function () {
    function qJsonRetriever() {
        this.contextName = "asdsa";
    }
    qJsonRetriever.prototype.retrieveQJsonAsync = function (qjsonPath, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var prom, qjsonUrlVersion;
            return __generator(this, function (_d) {
                (0, log_1.log)("retrieveQJsonAsync");
                prom = (0, IPromiseData_1.CreatePromiseData)();
                qjsonUrlVersion = ((_b = (_a = __1.bridge.settings) === null || _a === void 0 ? void 0 : _a.versions) === null || _b === void 0 ? void 0 : _b.pageVersions) ? qjsonVersionHelper_1.qjsonVersionHelper.traversePageVersions(qjsonPath, (_c = __1.bridge.settings.versions) === null || _c === void 0 ? void 0 : _c.pageVersions) : undefined;
                qjsonPath += qjsonUrlVersion ? "?ver=" + qjsonUrlVersion : "";
                nb_retrieveQJsonAsync(qjsonPath, function (qjson) { /*log("bbbbbbbbbbbb");*/ prom.resolver(qjson); }, function (reason) { prom.reject(reason); }, { mobileAnimation: options === null || options === void 0 ? void 0 : options.mobileAnimation });
                return [2 /*return*/, prom.promise];
            });
        });
    };
    Object.defineProperty(qJsonRetriever.prototype, "disablePagePool", {
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    qJsonRetriever.prototype.GetExternalQJsonRetriever = function () {
        return undefined;
    };
    return qJsonRetriever;
}());
exports.qJsonRetriever = qJsonRetriever;


/***/ }),

/***/ "./src/qshellImplementations/regionalManagerImpl.ts":
/*!**********************************************************!*\
  !*** ./src/qshellImplementations/regionalManagerImpl.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RegionalManagerImpl = void 0;
var RegionalManagerImpl = /** @class */ (function () {
    function RegionalManagerImpl() {
        this.contextName = "RegionalManagerImpl";
        this.currentRegion = "tr";
    }
    RegionalManagerImpl.prototype.getRegionList = function () {
        throw new Error("RegionalManager.getRegionList Method not implemented.");
    };
    RegionalManagerImpl.prototype.getRegion = function () {
        throw new Error("RegionalManager.getRegion Method not implemented.");
    };
    RegionalManagerImpl.prototype.setRegion = function (currentRegion) {
        throw new Error("RegionalManager.setRegion Method not implemented.");
    };
    RegionalManagerImpl.prototype.getFormattingDefinitionByCurrentRegion = function () {
        //throw new Error("RegionalManager.getFormattingDefinitionByCurrentRegion Method not implemented.");
        return undefined;
    };
    return RegionalManagerImpl;
}());
exports.RegionalManagerImpl = RegionalManagerImpl;


/***/ }),

/***/ "./src/qshellImplementations/uxManagerImpl.ts":
/*!****************************************************!*\
  !*** ./src/qshellImplementations/uxManagerImpl.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UxManagerImpl = void 0;
var UxManagerImpl = /** @class */ (function () {
    function UxManagerImpl() {
        this.contextName = "yalan Dolan"; // (:
    }
    UxManagerImpl.prototype.getThemeList = function () {
        return nb_getThemeList();
    };
    UxManagerImpl.prototype.setTheme = function (themeName) {
        nb_setTheme(themeName);
    };
    UxManagerImpl.prototype.addTheme = function (themeName) {
        nb_addTheme(themeName);
    };
    UxManagerImpl.prototype.removeTheme = function (themeName) {
        nb_removeTheme(themeName);
    };
    return UxManagerImpl;
}());
exports.UxManagerImpl = UxManagerImpl;


/***/ }),

/***/ "./src/state/rendererState.ts":
/*!************************************!*\
  !*** ./src/state/rendererState.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RendererState = void 0;
var RendererState = /** @class */ (function () {
    function RendererState() {
    }
    RendererState.ConvertAdditionals = function (additionals) {
        return additionals;
    };
    RendererState.RetrieveAdditionals = function (dory) {
        var additionals = dory.GetAdditionals({});
        if (!additionals) {
            additionals = { cssCache: {} };
            dory.SetAdditionals({ additionals: additionals });
        }
        return additionals;
    };
    return RendererState;
}());
exports.RendererState = RendererState;


/***/ }),

/***/ "./src/tracing/log.ts":
/*!****************************!*\
  !*** ./src/tracing/log.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
function log() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // return;
    console.log.apply(console, __spreadArray([], __read(args), false));
}
exports.log = log;


/***/ })

/******/ }));;
//# sourceMappingURL=bridgets.js.map